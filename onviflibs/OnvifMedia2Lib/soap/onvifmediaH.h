/* onvifmediaH.h
   Generated by gSOAP 2.8.22 from ./include/onvif.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef onvifmediaH_H
#define onvifmediaH_H
#include "onvifmediaStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 onvifmedia_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 onvifmedia_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 onvifmedia_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (827)
#endif

#define soap_default_tt__IANA_IfTypes(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IANA_IfTypes(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_tt__IANA_IfTypes(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IANA_IfTypes(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_tt__IANA_IfTypes
#define soap_write_tt__IANA_IfTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IANA_IfTypes(soap, data), 0) || soap_put_tt__IANA_IfTypes(soap, data, "tt:IANA-IfTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_tt__IANA_IfTypes(struct soap*, int *, const char*, const char*);

#ifndef soap_read_tt__IANA_IfTypes
#define soap_read_tt__IANA_IfTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IANA_IfTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (158)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, data), 0) || soap_put_xsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data), 0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data), 0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data), 0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data), 0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _wsa5__RetryAfter is a typedef element/attribute synonym for unsignedLONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
#endif

#define soap_default__wsa5__RetryAfter(soap, a) soap_default_unsignedLONG64(soap, a)


#define soap_out__wsa5__RetryAfter soap_out_unsignedLONG64


#define soap_in__wsa5__RetryAfter soap_in_unsignedLONG64


#define soap_put__wsa5__RetryAfter soap_put_unsignedLONG64


#define soap_get__wsa5__RetryAfter soap_get_unsignedLONG64


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedLONG64(soap, data), 0) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data), 0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns1__MaskType
#define SOAP_TYPE_ns1__MaskType (969)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__MaskType(struct soap*, enum ns1__MaskType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MaskType(struct soap*, const char*, int, const enum ns1__MaskType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__MaskType2s(struct soap*, enum ns1__MaskType);
SOAP_FMAC3 enum ns1__MaskType * SOAP_FMAC4 soap_in_ns1__MaskType(struct soap*, const char*, enum ns1__MaskType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__MaskType(struct soap*, const char*, enum ns1__MaskType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MaskType(struct soap*, const enum ns1__MaskType *, const char*, const char*);

#ifndef soap_write_ns1__MaskType
#define soap_write_ns1__MaskType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__MaskType(soap, data), 0) || soap_put_ns1__MaskType(soap, data, "ns1:MaskType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns1__MaskType * SOAP_FMAC4 soap_get_ns1__MaskType(struct soap*, enum ns1__MaskType *, const char*, const char*);

#ifndef soap_read_ns1__MaskType
#define soap_read_ns1__MaskType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__MaskType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns1__TransportProtocol
#define SOAP_TYPE_ns1__TransportProtocol (967)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__TransportProtocol(struct soap*, enum ns1__TransportProtocol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransportProtocol(struct soap*, const char*, int, const enum ns1__TransportProtocol *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__TransportProtocol2s(struct soap*, enum ns1__TransportProtocol);
SOAP_FMAC3 enum ns1__TransportProtocol * SOAP_FMAC4 soap_in_ns1__TransportProtocol(struct soap*, const char*, enum ns1__TransportProtocol *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__TransportProtocol(struct soap*, const char*, enum ns1__TransportProtocol *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__TransportProtocol(struct soap*, const enum ns1__TransportProtocol *, const char*, const char*);

#ifndef soap_write_ns1__TransportProtocol
#define soap_write_ns1__TransportProtocol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__TransportProtocol(soap, data), 0) || soap_put_ns1__TransportProtocol(soap, data, "ns1:TransportProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns1__TransportProtocol * SOAP_FMAC4 soap_get_ns1__TransportProtocol(struct soap*, enum ns1__TransportProtocol *, const char*, const char*);

#ifndef soap_read_ns1__TransportProtocol
#define soap_read_ns1__TransportProtocol(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TransportProtocol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns1__ConfigurationEnumeration
#define SOAP_TYPE_ns1__ConfigurationEnumeration (965)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ConfigurationEnumeration(struct soap*, enum ns1__ConfigurationEnumeration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigurationEnumeration(struct soap*, const char*, int, const enum ns1__ConfigurationEnumeration *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__ConfigurationEnumeration2s(struct soap*, enum ns1__ConfigurationEnumeration);
SOAP_FMAC3 enum ns1__ConfigurationEnumeration * SOAP_FMAC4 soap_in_ns1__ConfigurationEnumeration(struct soap*, const char*, enum ns1__ConfigurationEnumeration *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__ConfigurationEnumeration(struct soap*, const char*, enum ns1__ConfigurationEnumeration *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ConfigurationEnumeration(struct soap*, const enum ns1__ConfigurationEnumeration *, const char*, const char*);

#ifndef soap_write_ns1__ConfigurationEnumeration
#define soap_write_ns1__ConfigurationEnumeration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__ConfigurationEnumeration(soap, data), 0) || soap_put_ns1__ConfigurationEnumeration(soap, data, "ns1:ConfigurationEnumeration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns1__ConfigurationEnumeration * SOAP_FMAC4 soap_get_ns1__ConfigurationEnumeration(struct soap*, enum ns1__ConfigurationEnumeration *, const char*, const char*);

#ifndef soap_read_ns1__ConfigurationEnumeration
#define soap_read_ns1__ConfigurationEnumeration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ConfigurationEnumeration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (957)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Entity(struct soap*, enum tt__Entity *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Entity(struct soap*, const char*, int, const enum tt__Entity *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Entity2s(struct soap*, enum tt__Entity);
SOAP_FMAC3 enum tt__Entity * SOAP_FMAC4 soap_in_tt__Entity(struct soap*, const char*, enum tt__Entity *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Entity(struct soap*, const char*, enum tt__Entity *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Entity(struct soap*, const enum tt__Entity *, const char*, const char*);

#ifndef soap_write_tt__Entity
#define soap_write_tt__Entity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Entity(soap, data), 0) || soap_put_tt__Entity(soap, data, "tt:Entity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Entity * SOAP_FMAC4 soap_get_tt__Entity(struct soap*, enum tt__Entity *, const char*, const char*);

#ifndef soap_read_tt__Entity
#define soap_read_tt__Entity(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Entity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (955)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__MoveStatus(struct soap*, enum tt__MoveStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus(struct soap*, const char*, int, const enum tt__MoveStatus *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MoveStatus2s(struct soap*, enum tt__MoveStatus);
SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_in_tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MoveStatus(struct soap*, const char*, enum tt__MoveStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MoveStatus(struct soap*, const enum tt__MoveStatus *, const char*, const char*);

#ifndef soap_write_tt__MoveStatus
#define soap_write_tt__MoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__MoveStatus(soap, data), 0) || soap_put_tt__MoveStatus(soap, data, "tt:MoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__MoveStatus * SOAP_FMAC4 soap_get_tt__MoveStatus(struct soap*, enum tt__MoveStatus *, const char*, const char*);

#ifndef soap_read_tt__MoveStatus
#define soap_read_tt__MoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (951)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__OSDType(struct soap*, enum tt__OSDType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDType(struct soap*, const char*, int, const enum tt__OSDType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__OSDType2s(struct soap*, enum tt__OSDType);
SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_in_tt__OSDType(struct soap*, const char*, enum tt__OSDType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__OSDType(struct soap*, const char*, enum tt__OSDType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__OSDType(struct soap*, const enum tt__OSDType *, const char*, const char*);

#ifndef soap_write_tt__OSDType
#define soap_write_tt__OSDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__OSDType(soap, data), 0) || soap_put_tt__OSDType(soap, data, "tt:OSDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__OSDType * SOAP_FMAC4 soap_get_tt__OSDType(struct soap*, enum tt__OSDType *, const char*, const char*);

#ifndef soap_read_tt__OSDType
#define soap_read_tt__OSDType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (947)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ModeOfOperation(struct soap*, enum tt__ModeOfOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ModeOfOperation(struct soap*, const char*, int, const enum tt__ModeOfOperation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ModeOfOperation2s(struct soap*, enum tt__ModeOfOperation);
SOAP_FMAC3 enum tt__ModeOfOperation * SOAP_FMAC4 soap_in_tt__ModeOfOperation(struct soap*, const char*, enum tt__ModeOfOperation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ModeOfOperation(struct soap*, const char*, enum tt__ModeOfOperation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ModeOfOperation(struct soap*, const enum tt__ModeOfOperation *, const char*, const char*);

#ifndef soap_write_tt__ModeOfOperation
#define soap_write_tt__ModeOfOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ModeOfOperation(soap, data), 0) || soap_put_tt__ModeOfOperation(soap, data, "tt:ModeOfOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ModeOfOperation * SOAP_FMAC4 soap_get_tt__ModeOfOperation(struct soap*, enum tt__ModeOfOperation *, const char*, const char*);

#ifndef soap_read_tt__ModeOfOperation
#define soap_read_tt__ModeOfOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ModeOfOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (941)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__TrackType(struct soap*, enum tt__TrackType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackType(struct soap*, const char*, int, const enum tt__TrackType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TrackType2s(struct soap*, enum tt__TrackType);
SOAP_FMAC3 enum tt__TrackType * SOAP_FMAC4 soap_in_tt__TrackType(struct soap*, const char*, enum tt__TrackType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TrackType(struct soap*, const char*, enum tt__TrackType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TrackType(struct soap*, const enum tt__TrackType *, const char*, const char*);

#ifndef soap_write_tt__TrackType
#define soap_write_tt__TrackType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__TrackType(soap, data), 0) || soap_put_tt__TrackType(soap, data, "tt:TrackType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__TrackType * SOAP_FMAC4 soap_get_tt__TrackType(struct soap*, enum tt__TrackType *, const char*, const char*);

#ifndef soap_read_tt__TrackType
#define soap_read_tt__TrackType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (939)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RecordingStatus(struct soap*, enum tt__RecordingStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingStatus(struct soap*, const char*, int, const enum tt__RecordingStatus *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RecordingStatus2s(struct soap*, enum tt__RecordingStatus);
SOAP_FMAC3 enum tt__RecordingStatus * SOAP_FMAC4 soap_in_tt__RecordingStatus(struct soap*, const char*, enum tt__RecordingStatus *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RecordingStatus(struct soap*, const char*, enum tt__RecordingStatus *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingStatus(struct soap*, const enum tt__RecordingStatus *, const char*, const char*);

#ifndef soap_write_tt__RecordingStatus
#define soap_write_tt__RecordingStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RecordingStatus(soap, data), 0) || soap_put_tt__RecordingStatus(soap, data, "tt:RecordingStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__RecordingStatus * SOAP_FMAC4 soap_get_tt__RecordingStatus(struct soap*, enum tt__RecordingStatus *, const char*, const char*);

#ifndef soap_read_tt__RecordingStatus
#define soap_read_tt__RecordingStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (937)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SearchState(struct soap*, enum tt__SearchState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchState(struct soap*, const char*, int, const enum tt__SearchState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SearchState2s(struct soap*, enum tt__SearchState);
SOAP_FMAC3 enum tt__SearchState * SOAP_FMAC4 soap_in_tt__SearchState(struct soap*, const char*, enum tt__SearchState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SearchState(struct soap*, const char*, enum tt__SearchState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SearchState(struct soap*, const enum tt__SearchState *, const char*, const char*);

#ifndef soap_write_tt__SearchState
#define soap_write_tt__SearchState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__SearchState(soap, data), 0) || soap_put_tt__SearchState(soap, data, "tt:SearchState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__SearchState * SOAP_FMAC4 soap_get_tt__SearchState(struct soap*, enum tt__SearchState *, const char*, const char*);

#ifndef soap_read_tt__SearchState
#define soap_read_tt__SearchState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SearchState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (931)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReceiverState(struct soap*, enum tt__ReceiverState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverState(struct soap*, const char*, int, const enum tt__ReceiverState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReceiverState2s(struct soap*, enum tt__ReceiverState);
SOAP_FMAC3 enum tt__ReceiverState * SOAP_FMAC4 soap_in_tt__ReceiverState(struct soap*, const char*, enum tt__ReceiverState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReceiverState(struct soap*, const char*, enum tt__ReceiverState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverState(struct soap*, const enum tt__ReceiverState *, const char*, const char*);

#ifndef soap_write_tt__ReceiverState
#define soap_write_tt__ReceiverState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ReceiverState(soap, data), 0) || soap_put_tt__ReceiverState(soap, data, "tt:ReceiverState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ReceiverState * SOAP_FMAC4 soap_get_tt__ReceiverState(struct soap*, enum tt__ReceiverState *, const char*, const char*);

#ifndef soap_read_tt__ReceiverState
#define soap_read_tt__ReceiverState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (929)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReceiverMode(struct soap*, enum tt__ReceiverMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverMode(struct soap*, const char*, int, const enum tt__ReceiverMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReceiverMode2s(struct soap*, enum tt__ReceiverMode);
SOAP_FMAC3 enum tt__ReceiverMode * SOAP_FMAC4 soap_in_tt__ReceiverMode(struct soap*, const char*, enum tt__ReceiverMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReceiverMode(struct soap*, const char*, enum tt__ReceiverMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverMode(struct soap*, const enum tt__ReceiverMode *, const char*, const char*);

#ifndef soap_write_tt__ReceiverMode
#define soap_write_tt__ReceiverMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ReceiverMode(soap, data), 0) || soap_put_tt__ReceiverMode(soap, data, "tt:ReceiverMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ReceiverMode * SOAP_FMAC4 soap_get_tt__ReceiverMode(struct soap*, enum tt__ReceiverMode *, const char*, const char*);

#ifndef soap_read_tt__ReceiverMode
#define soap_read_tt__ReceiverMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (927)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Direction(struct soap*, enum tt__Direction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Direction(struct soap*, const char*, int, const enum tt__Direction *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Direction2s(struct soap*, enum tt__Direction);
SOAP_FMAC3 enum tt__Direction * SOAP_FMAC4 soap_in_tt__Direction(struct soap*, const char*, enum tt__Direction *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Direction(struct soap*, const char*, enum tt__Direction *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Direction(struct soap*, const enum tt__Direction *, const char*, const char*);

#ifndef soap_write_tt__Direction
#define soap_write_tt__Direction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Direction(soap, data), 0) || soap_put_tt__Direction(soap, data, "tt:Direction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Direction * SOAP_FMAC4 soap_get_tt__Direction(struct soap*, enum tt__Direction *, const char*, const char*);

#ifndef soap_read_tt__Direction
#define soap_read_tt__Direction(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Direction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (925)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PropertyOperation(struct soap*, enum tt__PropertyOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PropertyOperation(struct soap*, const char*, int, const enum tt__PropertyOperation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PropertyOperation2s(struct soap*, enum tt__PropertyOperation);
SOAP_FMAC3 enum tt__PropertyOperation * SOAP_FMAC4 soap_in_tt__PropertyOperation(struct soap*, const char*, enum tt__PropertyOperation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PropertyOperation(struct soap*, const char*, enum tt__PropertyOperation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PropertyOperation(struct soap*, const enum tt__PropertyOperation *, const char*, const char*);

#ifndef soap_write_tt__PropertyOperation
#define soap_write_tt__PropertyOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__PropertyOperation(soap, data), 0) || soap_put_tt__PropertyOperation(soap, data, "tt:PropertyOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__PropertyOperation * SOAP_FMAC4 soap_get_tt__PropertyOperation(struct soap*, enum tt__PropertyOperation *, const char*, const char*);

#ifndef soap_read_tt__PropertyOperation
#define soap_read_tt__PropertyOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PropertyOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ImageSendingType
#define SOAP_TYPE_tt__ImageSendingType (923)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ImageSendingType(struct soap*, enum tt__ImageSendingType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageSendingType(struct soap*, const char*, int, const enum tt__ImageSendingType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ImageSendingType2s(struct soap*, enum tt__ImageSendingType);
SOAP_FMAC3 enum tt__ImageSendingType * SOAP_FMAC4 soap_in_tt__ImageSendingType(struct soap*, const char*, enum tt__ImageSendingType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ImageSendingType(struct soap*, const char*, enum tt__ImageSendingType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ImageSendingType(struct soap*, const enum tt__ImageSendingType *, const char*, const char*);

#ifndef soap_write_tt__ImageSendingType
#define soap_write_tt__ImageSendingType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ImageSendingType(soap, data), 0) || soap_put_tt__ImageSendingType(soap, data, "tt:ImageSendingType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ImageSendingType * SOAP_FMAC4 soap_get_tt__ImageSendingType(struct soap*, enum tt__ImageSendingType *, const char*, const char*);

#ifndef soap_read_tt__ImageSendingType
#define soap_read_tt__ImageSendingType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageSendingType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (921)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DefoggingMode(struct soap*, enum tt__DefoggingMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingMode(struct soap*, const char*, int, const enum tt__DefoggingMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DefoggingMode2s(struct soap*, enum tt__DefoggingMode);
SOAP_FMAC3 enum tt__DefoggingMode * SOAP_FMAC4 soap_in_tt__DefoggingMode(struct soap*, const char*, enum tt__DefoggingMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DefoggingMode(struct soap*, const char*, enum tt__DefoggingMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DefoggingMode(struct soap*, const enum tt__DefoggingMode *, const char*, const char*);

#ifndef soap_write_tt__DefoggingMode
#define soap_write_tt__DefoggingMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__DefoggingMode(soap, data), 0) || soap_put_tt__DefoggingMode(soap, data, "tt:DefoggingMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__DefoggingMode * SOAP_FMAC4 soap_get_tt__DefoggingMode(struct soap*, enum tt__DefoggingMode *, const char*, const char*);

#ifndef soap_read_tt__DefoggingMode
#define soap_read_tt__DefoggingMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DefoggingMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (919)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ToneCompensationMode(struct soap*, enum tt__ToneCompensationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationMode(struct soap*, const char*, int, const enum tt__ToneCompensationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ToneCompensationMode2s(struct soap*, enum tt__ToneCompensationMode);
SOAP_FMAC3 enum tt__ToneCompensationMode * SOAP_FMAC4 soap_in_tt__ToneCompensationMode(struct soap*, const char*, enum tt__ToneCompensationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ToneCompensationMode(struct soap*, const char*, enum tt__ToneCompensationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ToneCompensationMode(struct soap*, const enum tt__ToneCompensationMode *, const char*, const char*);

#ifndef soap_write_tt__ToneCompensationMode
#define soap_write_tt__ToneCompensationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ToneCompensationMode(soap, data), 0) || soap_put_tt__ToneCompensationMode(soap, data, "tt:ToneCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ToneCompensationMode * SOAP_FMAC4 soap_get_tt__ToneCompensationMode(struct soap*, enum tt__ToneCompensationMode *, const char*, const char*);

#ifndef soap_read_tt__ToneCompensationMode
#define soap_read_tt__ToneCompensationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ToneCompensationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (917)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IrCutFilterAutoBoundaryType(struct soap*, enum tt__IrCutFilterAutoBoundaryType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoBoundaryType(struct soap*, const char*, int, const enum tt__IrCutFilterAutoBoundaryType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterAutoBoundaryType2s(struct soap*, enum tt__IrCutFilterAutoBoundaryType);
SOAP_FMAC3 enum tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoBoundaryType(struct soap*, const char*, enum tt__IrCutFilterAutoBoundaryType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterAutoBoundaryType(struct soap*, const char*, enum tt__IrCutFilterAutoBoundaryType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterAutoBoundaryType(struct soap*, const enum tt__IrCutFilterAutoBoundaryType *, const char*, const char*);

#ifndef soap_write_tt__IrCutFilterAutoBoundaryType
#define soap_write_tt__IrCutFilterAutoBoundaryType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IrCutFilterAutoBoundaryType(soap, data), 0) || soap_put_tt__IrCutFilterAutoBoundaryType(soap, data, "tt:IrCutFilterAutoBoundaryType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IrCutFilterAutoBoundaryType * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoBoundaryType(struct soap*, enum tt__IrCutFilterAutoBoundaryType *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterAutoBoundaryType
#define soap_read_tt__IrCutFilterAutoBoundaryType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterAutoBoundaryType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (915)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ImageStabilizationMode(struct soap*, enum tt__ImageStabilizationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationMode(struct soap*, const char*, int, const enum tt__ImageStabilizationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ImageStabilizationMode2s(struct soap*, enum tt__ImageStabilizationMode);
SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_in_tt__ImageStabilizationMode(struct soap*, const char*, enum tt__ImageStabilizationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ImageStabilizationMode(struct soap*, const char*, enum tt__ImageStabilizationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ImageStabilizationMode(struct soap*, const enum tt__ImageStabilizationMode *, const char*, const char*);

#ifndef soap_write_tt__ImageStabilizationMode
#define soap_write_tt__ImageStabilizationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ImageStabilizationMode(soap, data), 0) || soap_put_tt__ImageStabilizationMode(soap, data, "tt:ImageStabilizationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ImageStabilizationMode * SOAP_FMAC4 soap_get_tt__ImageStabilizationMode(struct soap*, enum tt__ImageStabilizationMode *, const char*, const char*);

#ifndef soap_read_tt__ImageStabilizationMode
#define soap_read_tt__ImageStabilizationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageStabilizationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (913)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterMode(struct soap*, const char*, int, const enum tt__IrCutFilterMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IrCutFilterMode2s(struct soap*, enum tt__IrCutFilterMode);
SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_in_tt__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IrCutFilterMode(struct soap*, const enum tt__IrCutFilterMode *, const char*, const char*);

#ifndef soap_write_tt__IrCutFilterMode
#define soap_write_tt__IrCutFilterMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IrCutFilterMode(soap, data), 0) || soap_put_tt__IrCutFilterMode(soap, data, "tt:IrCutFilterMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IrCutFilterMode * SOAP_FMAC4 soap_get_tt__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterMode
#define soap_read_tt__IrCutFilterMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (911)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__WhiteBalanceMode(struct soap*, enum tt__WhiteBalanceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceMode(struct soap*, const char*, int, const enum tt__WhiteBalanceMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WhiteBalanceMode2s(struct soap*, enum tt__WhiteBalanceMode);
SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_in_tt__WhiteBalanceMode(struct soap*, const char*, enum tt__WhiteBalanceMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WhiteBalanceMode(struct soap*, const char*, enum tt__WhiteBalanceMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WhiteBalanceMode(struct soap*, const enum tt__WhiteBalanceMode *, const char*, const char*);

#ifndef soap_write_tt__WhiteBalanceMode
#define soap_write_tt__WhiteBalanceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__WhiteBalanceMode(soap, data), 0) || soap_put_tt__WhiteBalanceMode(soap, data, "tt:WhiteBalanceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__WhiteBalanceMode * SOAP_FMAC4 soap_get_tt__WhiteBalanceMode(struct soap*, enum tt__WhiteBalanceMode *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalanceMode
#define soap_read_tt__WhiteBalanceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalanceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (909)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Enabled(struct soap*, enum tt__Enabled *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Enabled(struct soap*, const char*, int, const enum tt__Enabled *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Enabled2s(struct soap*, enum tt__Enabled);
SOAP_FMAC3 enum tt__Enabled * SOAP_FMAC4 soap_in_tt__Enabled(struct soap*, const char*, enum tt__Enabled *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Enabled(struct soap*, const char*, enum tt__Enabled *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Enabled(struct soap*, const enum tt__Enabled *, const char*, const char*);

#ifndef soap_write_tt__Enabled
#define soap_write_tt__Enabled(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Enabled(soap, data), 0) || soap_put_tt__Enabled(soap, data, "tt:Enabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Enabled * SOAP_FMAC4 soap_get_tt__Enabled(struct soap*, enum tt__Enabled *, const char*, const char*);

#ifndef soap_read_tt__Enabled
#define soap_read_tt__Enabled(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Enabled(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (907)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ExposureMode(struct soap*, enum tt__ExposureMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureMode(struct soap*, const char*, int, const enum tt__ExposureMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposureMode2s(struct soap*, enum tt__ExposureMode);
SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_in_tt__ExposureMode(struct soap*, const char*, enum tt__ExposureMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposureMode(struct soap*, const char*, enum tt__ExposureMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposureMode(struct soap*, const enum tt__ExposureMode *, const char*, const char*);

#ifndef soap_write_tt__ExposureMode
#define soap_write_tt__ExposureMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ExposureMode(soap, data), 0) || soap_put_tt__ExposureMode(soap, data, "tt:ExposureMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ExposureMode * SOAP_FMAC4 soap_get_tt__ExposureMode(struct soap*, enum tt__ExposureMode *, const char*, const char*);

#ifndef soap_read_tt__ExposureMode
#define soap_read_tt__ExposureMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ExposureMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (905)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ExposurePriority(struct soap*, enum tt__ExposurePriority *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposurePriority(struct soap*, const char*, int, const enum tt__ExposurePriority *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ExposurePriority2s(struct soap*, enum tt__ExposurePriority);
SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_in_tt__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ExposurePriority(struct soap*, const enum tt__ExposurePriority *, const char*, const char*);

#ifndef soap_write_tt__ExposurePriority
#define soap_write_tt__ExposurePriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ExposurePriority(soap, data), 0) || soap_put_tt__ExposurePriority(soap, data, "tt:ExposurePriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ExposurePriority * SOAP_FMAC4 soap_get_tt__ExposurePriority(struct soap*, enum tt__ExposurePriority *, const char*, const char*);

#ifndef soap_read_tt__ExposurePriority
#define soap_read_tt__ExposurePriority(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ExposurePriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (903)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__BacklightCompensationMode(struct soap*, enum tt__BacklightCompensationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationMode(struct soap*, const char*, int, const enum tt__BacklightCompensationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__BacklightCompensationMode2s(struct soap*, enum tt__BacklightCompensationMode);
SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_in_tt__BacklightCompensationMode(struct soap*, const char*, enum tt__BacklightCompensationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__BacklightCompensationMode(struct soap*, const char*, enum tt__BacklightCompensationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__BacklightCompensationMode(struct soap*, const enum tt__BacklightCompensationMode *, const char*, const char*);

#ifndef soap_write_tt__BacklightCompensationMode
#define soap_write_tt__BacklightCompensationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__BacklightCompensationMode(soap, data), 0) || soap_put_tt__BacklightCompensationMode(soap, data, "tt:BacklightCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__BacklightCompensationMode * SOAP_FMAC4 soap_get_tt__BacklightCompensationMode(struct soap*, enum tt__BacklightCompensationMode *, const char*, const char*);

#ifndef soap_read_tt__BacklightCompensationMode
#define soap_read_tt__BacklightCompensationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BacklightCompensationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (901)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__WideDynamicMode(struct soap*, enum tt__WideDynamicMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicMode(struct soap*, const char*, int, const enum tt__WideDynamicMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__WideDynamicMode2s(struct soap*, enum tt__WideDynamicMode);
SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_in_tt__WideDynamicMode(struct soap*, const char*, enum tt__WideDynamicMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__WideDynamicMode(struct soap*, const char*, enum tt__WideDynamicMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__WideDynamicMode(struct soap*, const enum tt__WideDynamicMode *, const char*, const char*);

#ifndef soap_write_tt__WideDynamicMode
#define soap_write_tt__WideDynamicMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__WideDynamicMode(soap, data), 0) || soap_put_tt__WideDynamicMode(soap, data, "tt:WideDynamicMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__WideDynamicMode * SOAP_FMAC4 soap_get_tt__WideDynamicMode(struct soap*, enum tt__WideDynamicMode *, const char*, const char*);

#ifndef soap_read_tt__WideDynamicMode
#define soap_read_tt__WideDynamicMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WideDynamicMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__AFModes
#define SOAP_TYPE_tt__AFModes (899)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AFModes(struct soap*, enum tt__AFModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AFModes(struct soap*, const char*, int, const enum tt__AFModes *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AFModes2s(struct soap*, enum tt__AFModes);
SOAP_FMAC3 enum tt__AFModes * SOAP_FMAC4 soap_in_tt__AFModes(struct soap*, const char*, enum tt__AFModes *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AFModes(struct soap*, const char*, enum tt__AFModes *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AFModes(struct soap*, const enum tt__AFModes *, const char*, const char*);

#ifndef soap_write_tt__AFModes
#define soap_write_tt__AFModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__AFModes(soap, data), 0) || soap_put_tt__AFModes(soap, data, "tt:AFModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__AFModes * SOAP_FMAC4 soap_get_tt__AFModes(struct soap*, enum tt__AFModes *, const char*, const char*);

#ifndef soap_read_tt__AFModes
#define soap_read_tt__AFModes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AFModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (897)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AutoFocusMode(struct soap*, enum tt__AutoFocusMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AutoFocusMode(struct soap*, const char*, int, const enum tt__AutoFocusMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AutoFocusMode2s(struct soap*, enum tt__AutoFocusMode);
SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_in_tt__AutoFocusMode(struct soap*, const char*, enum tt__AutoFocusMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AutoFocusMode(struct soap*, const char*, enum tt__AutoFocusMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AutoFocusMode(struct soap*, const enum tt__AutoFocusMode *, const char*, const char*);

#ifndef soap_write_tt__AutoFocusMode
#define soap_write_tt__AutoFocusMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__AutoFocusMode(soap, data), 0) || soap_put_tt__AutoFocusMode(soap, data, "tt:AutoFocusMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__AutoFocusMode * SOAP_FMAC4 soap_get_tt__AutoFocusMode(struct soap*, enum tt__AutoFocusMode *, const char*, const char*);

#ifndef soap_read_tt__AutoFocusMode
#define soap_read_tt__AutoFocusMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AutoFocusMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (895)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation(struct soap*, const char*, int, const enum tt__PTZPresetTourOperation *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourOperation2s(struct soap*, enum tt__PTZPresetTourOperation);
SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourOperation(struct soap*, const char*, enum tt__PTZPresetTourOperation *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourOperation(struct soap*, const enum tt__PTZPresetTourOperation *, const char*, const char*);

#ifndef soap_write_tt__PTZPresetTourOperation
#define soap_write_tt__PTZPresetTourOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__PTZPresetTourOperation(soap, data), 0) || soap_put_tt__PTZPresetTourOperation(soap, data, "tt:PTZPresetTourOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__PTZPresetTourOperation * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation(struct soap*, enum tt__PTZPresetTourOperation *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourOperation
#define soap_read_tt__PTZPresetTourOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (893)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection(struct soap*, const char*, int, const enum tt__PTZPresetTourDirection *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourDirection2s(struct soap*, enum tt__PTZPresetTourDirection);
SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourDirection(struct soap*, const enum tt__PTZPresetTourDirection *, const char*, const char*);

#ifndef soap_write_tt__PTZPresetTourDirection
#define soap_write_tt__PTZPresetTourDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__PTZPresetTourDirection(soap, data), 0) || soap_put_tt__PTZPresetTourDirection(soap, data, "tt:PTZPresetTourDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__PTZPresetTourDirection * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourDirection
#define soap_read_tt__PTZPresetTourDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (891)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState(struct soap*, const char*, int, const enum tt__PTZPresetTourState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__PTZPresetTourState2s(struct soap*, enum tt__PTZPresetTourState);
SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_in_tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__PTZPresetTourState(struct soap*, const char*, enum tt__PTZPresetTourState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__PTZPresetTourState(struct soap*, const enum tt__PTZPresetTourState *, const char*, const char*);

#ifndef soap_write_tt__PTZPresetTourState
#define soap_write_tt__PTZPresetTourState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__PTZPresetTourState(soap, data), 0) || soap_put_tt__PTZPresetTourState(soap, data, "tt:PTZPresetTourState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__PTZPresetTourState * SOAP_FMAC4 soap_get_tt__PTZPresetTourState(struct soap*, enum tt__PTZPresetTourState *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourState
#define soap_read_tt__PTZPresetTourState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (887)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ReverseMode(struct soap*, enum tt__ReverseMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode(struct soap*, const char*, int, const enum tt__ReverseMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ReverseMode2s(struct soap*, enum tt__ReverseMode);
SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_in_tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ReverseMode(struct soap*, const char*, enum tt__ReverseMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReverseMode(struct soap*, const enum tt__ReverseMode *, const char*, const char*);

#ifndef soap_write_tt__ReverseMode
#define soap_write_tt__ReverseMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ReverseMode(soap, data), 0) || soap_put_tt__ReverseMode(soap, data, "tt:ReverseMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ReverseMode * SOAP_FMAC4 soap_get_tt__ReverseMode(struct soap*, enum tt__ReverseMode *, const char*, const char*);

#ifndef soap_read_tt__ReverseMode
#define soap_read_tt__ReverseMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReverseMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (885)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__EFlipMode(struct soap*, enum tt__EFlipMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode(struct soap*, const char*, int, const enum tt__EFlipMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__EFlipMode2s(struct soap*, enum tt__EFlipMode);
SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_in_tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__EFlipMode(struct soap*, const char*, enum tt__EFlipMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__EFlipMode(struct soap*, const enum tt__EFlipMode *, const char*, const char*);

#ifndef soap_write_tt__EFlipMode
#define soap_write_tt__EFlipMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__EFlipMode(soap, data), 0) || soap_put_tt__EFlipMode(soap, data, "tt:EFlipMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__EFlipMode * SOAP_FMAC4 soap_get_tt__EFlipMode(struct soap*, enum tt__EFlipMode *, const char*, const char*);

#ifndef soap_read_tt__EFlipMode
#define soap_read_tt__EFlipMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EFlipMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (883)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalIdleState(struct soap*, const char*, int, const enum tt__DigitalIdleState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DigitalIdleState2s(struct soap*, enum tt__DigitalIdleState);
SOAP_FMAC3 enum tt__DigitalIdleState * SOAP_FMAC4 soap_in_tt__DigitalIdleState(struct soap*, const char*, enum tt__DigitalIdleState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DigitalIdleState(struct soap*, const char*, enum tt__DigitalIdleState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DigitalIdleState(struct soap*, const enum tt__DigitalIdleState *, const char*, const char*);

#ifndef soap_write_tt__DigitalIdleState
#define soap_write_tt__DigitalIdleState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__DigitalIdleState(soap, data), 0) || soap_put_tt__DigitalIdleState(soap, data, "tt:DigitalIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__DigitalIdleState * SOAP_FMAC4 soap_get_tt__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *, const char*, const char*);

#ifndef soap_read_tt__DigitalIdleState
#define soap_read_tt__DigitalIdleState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DigitalIdleState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (881)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RelayMode(struct soap*, enum tt__RelayMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayMode(struct soap*, const char*, int, const enum tt__RelayMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayMode2s(struct soap*, enum tt__RelayMode);
SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_in_tt__RelayMode(struct soap*, const char*, enum tt__RelayMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayMode(struct soap*, const char*, enum tt__RelayMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayMode(struct soap*, const enum tt__RelayMode *, const char*, const char*);

#ifndef soap_write_tt__RelayMode
#define soap_write_tt__RelayMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RelayMode(soap, data), 0) || soap_put_tt__RelayMode(soap, data, "tt:RelayMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__RelayMode * SOAP_FMAC4 soap_get_tt__RelayMode(struct soap*, enum tt__RelayMode *, const char*, const char*);

#ifndef soap_read_tt__RelayMode
#define soap_read_tt__RelayMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (879)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RelayIdleState(struct soap*, enum tt__RelayIdleState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayIdleState(struct soap*, const char*, int, const enum tt__RelayIdleState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayIdleState2s(struct soap*, enum tt__RelayIdleState);
SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_in_tt__RelayIdleState(struct soap*, const char*, enum tt__RelayIdleState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayIdleState(struct soap*, const char*, enum tt__RelayIdleState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayIdleState(struct soap*, const enum tt__RelayIdleState *, const char*, const char*);

#ifndef soap_write_tt__RelayIdleState
#define soap_write_tt__RelayIdleState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RelayIdleState(soap, data), 0) || soap_put_tt__RelayIdleState(soap, data, "tt:RelayIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__RelayIdleState * SOAP_FMAC4 soap_get_tt__RelayIdleState(struct soap*, enum tt__RelayIdleState *, const char*, const char*);

#ifndef soap_read_tt__RelayIdleState
#define soap_read_tt__RelayIdleState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayIdleState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (877)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RelayLogicalState(struct soap*, enum tt__RelayLogicalState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayLogicalState(struct soap*, const char*, int, const enum tt__RelayLogicalState *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RelayLogicalState2s(struct soap*, enum tt__RelayLogicalState);
SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_in_tt__RelayLogicalState(struct soap*, const char*, enum tt__RelayLogicalState *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RelayLogicalState(struct soap*, const char*, enum tt__RelayLogicalState *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RelayLogicalState(struct soap*, const enum tt__RelayLogicalState *, const char*, const char*);

#ifndef soap_write_tt__RelayLogicalState
#define soap_write_tt__RelayLogicalState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RelayLogicalState(soap, data), 0) || soap_put_tt__RelayLogicalState(soap, data, "tt:RelayLogicalState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__RelayLogicalState * SOAP_FMAC4 soap_get_tt__RelayLogicalState(struct soap*, enum tt__RelayLogicalState *, const char*, const char*);

#ifndef soap_read_tt__RelayLogicalState
#define soap_read_tt__RelayLogicalState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayLogicalState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (875)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__UserLevel(struct soap*, enum tt__UserLevel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserLevel(struct soap*, const char*, int, const enum tt__UserLevel *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__UserLevel2s(struct soap*, enum tt__UserLevel);
SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_in_tt__UserLevel(struct soap*, const char*, enum tt__UserLevel *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__UserLevel(struct soap*, const char*, enum tt__UserLevel *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__UserLevel(struct soap*, const enum tt__UserLevel *, const char*, const char*);

#ifndef soap_write_tt__UserLevel
#define soap_write_tt__UserLevel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__UserLevel(soap, data), 0) || soap_put_tt__UserLevel(soap, data, "tt:UserLevel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__UserLevel * SOAP_FMAC4 soap_get_tt__UserLevel(struct soap*, enum tt__UserLevel *, const char*, const char*);

#ifndef soap_read_tt__UserLevel
#define soap_read_tt__UserLevel(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__UserLevel(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (873)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SetDateTimeType(struct soap*, enum tt__SetDateTimeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SetDateTimeType(struct soap*, const char*, int, const enum tt__SetDateTimeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SetDateTimeType2s(struct soap*, enum tt__SetDateTimeType);
SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_in_tt__SetDateTimeType(struct soap*, const char*, enum tt__SetDateTimeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SetDateTimeType(struct soap*, const char*, enum tt__SetDateTimeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SetDateTimeType(struct soap*, const enum tt__SetDateTimeType *, const char*, const char*);

#ifndef soap_write_tt__SetDateTimeType
#define soap_write_tt__SetDateTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__SetDateTimeType(soap, data), 0) || soap_put_tt__SetDateTimeType(soap, data, "tt:SetDateTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__SetDateTimeType * SOAP_FMAC4 soap_get_tt__SetDateTimeType(struct soap*, enum tt__SetDateTimeType *, const char*, const char*);

#ifndef soap_read_tt__SetDateTimeType
#define soap_read_tt__SetDateTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SetDateTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (871)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__FactoryDefaultType(struct soap*, enum tt__FactoryDefaultType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FactoryDefaultType(struct soap*, const char*, int, const enum tt__FactoryDefaultType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__FactoryDefaultType2s(struct soap*, enum tt__FactoryDefaultType);
SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_in_tt__FactoryDefaultType(struct soap*, const char*, enum tt__FactoryDefaultType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__FactoryDefaultType(struct soap*, const char*, enum tt__FactoryDefaultType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__FactoryDefaultType(struct soap*, const enum tt__FactoryDefaultType *, const char*, const char*);

#ifndef soap_write_tt__FactoryDefaultType
#define soap_write_tt__FactoryDefaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__FactoryDefaultType(soap, data), 0) || soap_put_tt__FactoryDefaultType(soap, data, "tt:FactoryDefaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__FactoryDefaultType * SOAP_FMAC4 soap_get_tt__FactoryDefaultType(struct soap*, enum tt__FactoryDefaultType *, const char*, const char*);

#ifndef soap_read_tt__FactoryDefaultType
#define soap_read_tt__FactoryDefaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FactoryDefaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (869)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SystemLogType(struct soap*, enum tt__SystemLogType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogType(struct soap*, const char*, int, const enum tt__SystemLogType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SystemLogType2s(struct soap*, enum tt__SystemLogType);
SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_in_tt__SystemLogType(struct soap*, const char*, enum tt__SystemLogType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SystemLogType(struct soap*, const char*, enum tt__SystemLogType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SystemLogType(struct soap*, const enum tt__SystemLogType *, const char*, const char*);

#ifndef soap_write_tt__SystemLogType
#define soap_write_tt__SystemLogType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__SystemLogType(soap, data), 0) || soap_put_tt__SystemLogType(soap, data, "tt:SystemLogType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__SystemLogType * SOAP_FMAC4 soap_get_tt__SystemLogType(struct soap*, enum tt__SystemLogType *, const char*, const char*);

#ifndef soap_read_tt__SystemLogType
#define soap_read_tt__SystemLogType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemLogType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (867)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__CapabilityCategory(struct soap*, enum tt__CapabilityCategory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilityCategory(struct soap*, const char*, int, const enum tt__CapabilityCategory *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__CapabilityCategory2s(struct soap*, enum tt__CapabilityCategory);
SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_in_tt__CapabilityCategory(struct soap*, const char*, enum tt__CapabilityCategory *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__CapabilityCategory(struct soap*, const char*, enum tt__CapabilityCategory *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__CapabilityCategory(struct soap*, const enum tt__CapabilityCategory *, const char*, const char*);

#ifndef soap_write_tt__CapabilityCategory
#define soap_write_tt__CapabilityCategory(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__CapabilityCategory(soap, data), 0) || soap_put_tt__CapabilityCategory(soap, data, "tt:CapabilityCategory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__CapabilityCategory * SOAP_FMAC4 soap_get_tt__CapabilityCategory(struct soap*, enum tt__CapabilityCategory *, const char*, const char*);

#ifndef soap_read_tt__CapabilityCategory
#define soap_read_tt__CapabilityCategory(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CapabilityCategory(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (865)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11AuthAndMangementSuite(struct soap*, enum tt__Dot11AuthAndMangementSuite *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const enum tt__Dot11AuthAndMangementSuite *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11AuthAndMangementSuite2s(struct soap*, enum tt__Dot11AuthAndMangementSuite);
SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_in_tt__Dot11AuthAndMangementSuite(struct soap*, const char*, enum tt__Dot11AuthAndMangementSuite *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11AuthAndMangementSuite(struct soap*, const char*, enum tt__Dot11AuthAndMangementSuite *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11AuthAndMangementSuite(struct soap*, const enum tt__Dot11AuthAndMangementSuite *, const char*, const char*);

#ifndef soap_write_tt__Dot11AuthAndMangementSuite
#define soap_write_tt__Dot11AuthAndMangementSuite(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Dot11AuthAndMangementSuite(soap, data), 0) || soap_put_tt__Dot11AuthAndMangementSuite(soap, data, "tt:Dot11AuthAndMangementSuite", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11AuthAndMangementSuite * SOAP_FMAC4 soap_get_tt__Dot11AuthAndMangementSuite(struct soap*, enum tt__Dot11AuthAndMangementSuite *, const char*, const char*);

#ifndef soap_read_tt__Dot11AuthAndMangementSuite
#define soap_read_tt__Dot11AuthAndMangementSuite(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11AuthAndMangementSuite(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (863)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SignalStrength(struct soap*, const char*, int, const enum tt__Dot11SignalStrength *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SignalStrength2s(struct soap*, enum tt__Dot11SignalStrength);
SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_in_tt__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SignalStrength(struct soap*, const enum tt__Dot11SignalStrength *, const char*, const char*);

#ifndef soap_write_tt__Dot11SignalStrength
#define soap_write_tt__Dot11SignalStrength(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Dot11SignalStrength(soap, data), 0) || soap_put_tt__Dot11SignalStrength(soap, data, "tt:Dot11SignalStrength", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11SignalStrength * SOAP_FMAC4 soap_get_tt__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *, const char*, const char*);

#ifndef soap_read_tt__Dot11SignalStrength
#define soap_read_tt__Dot11SignalStrength(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SignalStrength(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (857)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Cipher(struct soap*, const char*, int, const enum tt__Dot11Cipher *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11Cipher2s(struct soap*, enum tt__Dot11Cipher);
SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_in_tt__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11Cipher(struct soap*, const enum tt__Dot11Cipher *, const char*, const char*);

#ifndef soap_write_tt__Dot11Cipher
#define soap_write_tt__Dot11Cipher(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Dot11Cipher(soap, data), 0) || soap_put_tt__Dot11Cipher(soap, data, "tt:Dot11Cipher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11Cipher * SOAP_FMAC4 soap_get_tt__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *, const char*, const char*);

#ifndef soap_read_tt__Dot11Cipher
#define soap_read_tt__Dot11Cipher(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11Cipher(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (855)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11SecurityMode(struct soap*, enum tt__Dot11SecurityMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityMode(struct soap*, const char*, int, const enum tt__Dot11SecurityMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11SecurityMode2s(struct soap*, enum tt__Dot11SecurityMode);
SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_in_tt__Dot11SecurityMode(struct soap*, const char*, enum tt__Dot11SecurityMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11SecurityMode(struct soap*, const char*, enum tt__Dot11SecurityMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SecurityMode(struct soap*, const enum tt__Dot11SecurityMode *, const char*, const char*);

#ifndef soap_write_tt__Dot11SecurityMode
#define soap_write_tt__Dot11SecurityMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Dot11SecurityMode(soap, data), 0) || soap_put_tt__Dot11SecurityMode(soap, data, "tt:Dot11SecurityMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11SecurityMode * SOAP_FMAC4 soap_get_tt__Dot11SecurityMode(struct soap*, enum tt__Dot11SecurityMode *, const char*, const char*);

#ifndef soap_read_tt__Dot11SecurityMode
#define soap_read_tt__Dot11SecurityMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SecurityMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (853)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Dot11StationMode(struct soap*, enum tt__Dot11StationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11StationMode(struct soap*, const char*, int, const enum tt__Dot11StationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Dot11StationMode2s(struct soap*, enum tt__Dot11StationMode);
SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_in_tt__Dot11StationMode(struct soap*, const char*, enum tt__Dot11StationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Dot11StationMode(struct soap*, const char*, enum tt__Dot11StationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11StationMode(struct soap*, const enum tt__Dot11StationMode *, const char*, const char*);

#ifndef soap_write_tt__Dot11StationMode
#define soap_write_tt__Dot11StationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Dot11StationMode(soap, data), 0) || soap_put_tt__Dot11StationMode(soap, data, "tt:Dot11StationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11StationMode * SOAP_FMAC4 soap_get_tt__Dot11StationMode(struct soap*, enum tt__Dot11StationMode *, const char*, const char*);

#ifndef soap_read_tt__Dot11StationMode
#define soap_read_tt__Dot11StationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11StationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (849)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DynamicDNSType(struct soap*, enum tt__DynamicDNSType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSType(struct soap*, const char*, int, const enum tt__DynamicDNSType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DynamicDNSType2s(struct soap*, enum tt__DynamicDNSType);
SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_in_tt__DynamicDNSType(struct soap*, const char*, enum tt__DynamicDNSType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DynamicDNSType(struct soap*, const char*, enum tt__DynamicDNSType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DynamicDNSType(struct soap*, const enum tt__DynamicDNSType *, const char*, const char*);

#ifndef soap_write_tt__DynamicDNSType
#define soap_write_tt__DynamicDNSType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__DynamicDNSType(soap, data), 0) || soap_put_tt__DynamicDNSType(soap, data, "tt:DynamicDNSType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__DynamicDNSType * SOAP_FMAC4 soap_get_tt__DynamicDNSType(struct soap*, enum tt__DynamicDNSType *, const char*, const char*);

#ifndef soap_read_tt__DynamicDNSType
#define soap_read_tt__DynamicDNSType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DynamicDNSType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (847)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IPAddressFilterType(struct soap*, enum tt__IPAddressFilterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterType(struct soap*, const char*, int, const enum tt__IPAddressFilterType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPAddressFilterType2s(struct soap*, enum tt__IPAddressFilterType);
SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_in_tt__IPAddressFilterType(struct soap*, const char*, enum tt__IPAddressFilterType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPAddressFilterType(struct soap*, const char*, enum tt__IPAddressFilterType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPAddressFilterType(struct soap*, const enum tt__IPAddressFilterType *, const char*, const char*);

#ifndef soap_write_tt__IPAddressFilterType
#define soap_write_tt__IPAddressFilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IPAddressFilterType(soap, data), 0) || soap_put_tt__IPAddressFilterType(soap, data, "tt:IPAddressFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IPAddressFilterType * SOAP_FMAC4 soap_get_tt__IPAddressFilterType(struct soap*, enum tt__IPAddressFilterType *, const char*, const char*);

#ifndef soap_read_tt__IPAddressFilterType
#define soap_read_tt__IPAddressFilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPAddressFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (841)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IPType(struct soap*, enum tt__IPType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType(struct soap*, const char*, int, const enum tt__IPType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPType2s(struct soap*, enum tt__IPType);
SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_in_tt__IPType(struct soap*, const char*, enum tt__IPType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPType(struct soap*, const char*, enum tt__IPType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPType(struct soap*, const enum tt__IPType *, const char*, const char*);

#ifndef soap_write_tt__IPType
#define soap_write_tt__IPType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IPType(soap, data), 0) || soap_put_tt__IPType(soap, data, "tt:IPType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IPType * SOAP_FMAC4 soap_get_tt__IPType(struct soap*, enum tt__IPType *, const char*, const char*);

#ifndef soap_read_tt__IPType
#define soap_read_tt__IPType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (833)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__NetworkHostType(struct soap*, enum tt__NetworkHostType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostType(struct soap*, const char*, int, const enum tt__NetworkHostType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkHostType2s(struct soap*, enum tt__NetworkHostType);
SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_in_tt__NetworkHostType(struct soap*, const char*, enum tt__NetworkHostType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkHostType(struct soap*, const char*, enum tt__NetworkHostType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkHostType(struct soap*, const enum tt__NetworkHostType *, const char*, const char*);

#ifndef soap_write_tt__NetworkHostType
#define soap_write_tt__NetworkHostType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__NetworkHostType(soap, data), 0) || soap_put_tt__NetworkHostType(soap, data, "tt:NetworkHostType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__NetworkHostType * SOAP_FMAC4 soap_get_tt__NetworkHostType(struct soap*, enum tt__NetworkHostType *, const char*, const char*);

#ifndef soap_read_tt__NetworkHostType
#define soap_read_tt__NetworkHostType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkHostType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (831)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__NetworkProtocolType(struct soap*, enum tt__NetworkProtocolType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolType(struct soap*, const char*, int, const enum tt__NetworkProtocolType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__NetworkProtocolType2s(struct soap*, enum tt__NetworkProtocolType);
SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_in_tt__NetworkProtocolType(struct soap*, const char*, enum tt__NetworkProtocolType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__NetworkProtocolType(struct soap*, const char*, enum tt__NetworkProtocolType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkProtocolType(struct soap*, const enum tt__NetworkProtocolType *, const char*, const char*);

#ifndef soap_write_tt__NetworkProtocolType
#define soap_write_tt__NetworkProtocolType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__NetworkProtocolType(soap, data), 0) || soap_put_tt__NetworkProtocolType(soap, data, "tt:NetworkProtocolType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__NetworkProtocolType * SOAP_FMAC4 soap_get_tt__NetworkProtocolType(struct soap*, enum tt__NetworkProtocolType *, const char*, const char*);

#ifndef soap_read_tt__NetworkProtocolType
#define soap_read_tt__NetworkProtocolType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkProtocolType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (829)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6DHCPConfiguration(struct soap*, const char*, int, const enum tt__IPv6DHCPConfiguration *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__IPv6DHCPConfiguration2s(struct soap*, enum tt__IPv6DHCPConfiguration);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_in_tt__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPv6DHCPConfiguration(struct soap*, const enum tt__IPv6DHCPConfiguration *, const char*, const char*);

#ifndef soap_write_tt__IPv6DHCPConfiguration
#define soap_write_tt__IPv6DHCPConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IPv6DHCPConfiguration(soap, data), 0) || soap_put_tt__IPv6DHCPConfiguration(soap, data, "tt:IPv6DHCPConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IPv6DHCPConfiguration * SOAP_FMAC4 soap_get_tt__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *, const char*, const char*);

#ifndef soap_read_tt__IPv6DHCPConfiguration
#define soap_read_tt__IPv6DHCPConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6DHCPConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (825)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Duplex(struct soap*, enum tt__Duplex *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Duplex(struct soap*, const char*, int, const enum tt__Duplex *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Duplex2s(struct soap*, enum tt__Duplex);
SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_in_tt__Duplex(struct soap*, const char*, enum tt__Duplex *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Duplex(struct soap*, const char*, enum tt__Duplex *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Duplex(struct soap*, const enum tt__Duplex *, const char*, const char*);

#ifndef soap_write_tt__Duplex
#define soap_write_tt__Duplex(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Duplex(soap, data), 0) || soap_put_tt__Duplex(soap, data, "tt:Duplex", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Duplex * SOAP_FMAC4 soap_get_tt__Duplex(struct soap*, enum tt__Duplex *, const char*, const char*);

#ifndef soap_read_tt__Duplex
#define soap_read_tt__Duplex(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Duplex(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (821)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__DiscoveryMode(struct soap*, enum tt__DiscoveryMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DiscoveryMode(struct soap*, const char*, int, const enum tt__DiscoveryMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__DiscoveryMode2s(struct soap*, enum tt__DiscoveryMode);
SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_in_tt__DiscoveryMode(struct soap*, const char*, enum tt__DiscoveryMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__DiscoveryMode(struct soap*, const char*, enum tt__DiscoveryMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DiscoveryMode(struct soap*, const enum tt__DiscoveryMode *, const char*, const char*);

#ifndef soap_write_tt__DiscoveryMode
#define soap_write_tt__DiscoveryMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__DiscoveryMode(soap, data), 0) || soap_put_tt__DiscoveryMode(soap, data, "tt:DiscoveryMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__DiscoveryMode * SOAP_FMAC4 soap_get_tt__DiscoveryMode(struct soap*, enum tt__DiscoveryMode *, const char*, const char*);

#ifndef soap_read_tt__DiscoveryMode
#define soap_read_tt__DiscoveryMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DiscoveryMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (819)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ScopeDefinition(struct soap*, enum tt__ScopeDefinition *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ScopeDefinition(struct soap*, const char*, int, const enum tt__ScopeDefinition *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ScopeDefinition2s(struct soap*, enum tt__ScopeDefinition);
SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_in_tt__ScopeDefinition(struct soap*, const char*, enum tt__ScopeDefinition *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ScopeDefinition(struct soap*, const char*, enum tt__ScopeDefinition *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ScopeDefinition(struct soap*, const enum tt__ScopeDefinition *, const char*, const char*);

#ifndef soap_write_tt__ScopeDefinition
#define soap_write_tt__ScopeDefinition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ScopeDefinition(soap, data), 0) || soap_put_tt__ScopeDefinition(soap, data, "tt:ScopeDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ScopeDefinition * SOAP_FMAC4 soap_get_tt__ScopeDefinition(struct soap*, enum tt__ScopeDefinition *, const char*, const char*);

#ifndef soap_read_tt__ScopeDefinition
#define soap_read_tt__ScopeDefinition(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ScopeDefinition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (817)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__TransportProtocol(struct soap*, enum tt__TransportProtocol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransportProtocol(struct soap*, const char*, int, const enum tt__TransportProtocol *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__TransportProtocol2s(struct soap*, enum tt__TransportProtocol);
SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_in_tt__TransportProtocol(struct soap*, const char*, enum tt__TransportProtocol *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__TransportProtocol(struct soap*, const char*, enum tt__TransportProtocol *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TransportProtocol(struct soap*, const enum tt__TransportProtocol *, const char*, const char*);

#ifndef soap_write_tt__TransportProtocol
#define soap_write_tt__TransportProtocol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__TransportProtocol(soap, data), 0) || soap_put_tt__TransportProtocol(soap, data, "tt:TransportProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__TransportProtocol * SOAP_FMAC4 soap_get_tt__TransportProtocol(struct soap*, enum tt__TransportProtocol *, const char*, const char*);

#ifndef soap_read_tt__TransportProtocol
#define soap_read_tt__TransportProtocol(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TransportProtocol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (815)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__StreamType(struct soap*, enum tt__StreamType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamType(struct soap*, const char*, int, const enum tt__StreamType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__StreamType2s(struct soap*, enum tt__StreamType);
SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_in_tt__StreamType(struct soap*, const char*, enum tt__StreamType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__StreamType(struct soap*, const char*, enum tt__StreamType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StreamType(struct soap*, const enum tt__StreamType *, const char*, const char*);

#ifndef soap_write_tt__StreamType
#define soap_write_tt__StreamType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__StreamType(soap, data), 0) || soap_put_tt__StreamType(soap, data, "tt:StreamType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__StreamType * SOAP_FMAC4 soap_get_tt__StreamType(struct soap*, enum tt__StreamType *, const char*, const char*);

#ifndef soap_read_tt__StreamType
#define soap_read_tt__StreamType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StreamType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (813)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__MetadataCompressionType(struct soap*, enum tt__MetadataCompressionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataCompressionType(struct soap*, const char*, int, const enum tt__MetadataCompressionType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__MetadataCompressionType2s(struct soap*, enum tt__MetadataCompressionType);
SOAP_FMAC3 enum tt__MetadataCompressionType * SOAP_FMAC4 soap_in_tt__MetadataCompressionType(struct soap*, const char*, enum tt__MetadataCompressionType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__MetadataCompressionType(struct soap*, const char*, enum tt__MetadataCompressionType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__MetadataCompressionType(struct soap*, const enum tt__MetadataCompressionType *, const char*, const char*);

#ifndef soap_write_tt__MetadataCompressionType
#define soap_write_tt__MetadataCompressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__MetadataCompressionType(soap, data), 0) || soap_put_tt__MetadataCompressionType(soap, data, "tt:MetadataCompressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__MetadataCompressionType * SOAP_FMAC4 soap_get_tt__MetadataCompressionType(struct soap*, enum tt__MetadataCompressionType *, const char*, const char*);

#ifndef soap_read_tt__MetadataCompressionType
#define soap_read_tt__MetadataCompressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataCompressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (811)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AudioEncodingMimeNames(struct soap*, enum tt__AudioEncodingMimeNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncodingMimeNames(struct soap*, const char*, int, const enum tt__AudioEncodingMimeNames *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncodingMimeNames2s(struct soap*, enum tt__AudioEncodingMimeNames);
SOAP_FMAC3 enum tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_in_tt__AudioEncodingMimeNames(struct soap*, const char*, enum tt__AudioEncodingMimeNames *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncodingMimeNames(struct soap*, const char*, enum tt__AudioEncodingMimeNames *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncodingMimeNames(struct soap*, const enum tt__AudioEncodingMimeNames *, const char*, const char*);

#ifndef soap_write_tt__AudioEncodingMimeNames
#define soap_write_tt__AudioEncodingMimeNames(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__AudioEncodingMimeNames(soap, data), 0) || soap_put_tt__AudioEncodingMimeNames(soap, data, "tt:AudioEncodingMimeNames", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__AudioEncodingMimeNames * SOAP_FMAC4 soap_get_tt__AudioEncodingMimeNames(struct soap*, enum tt__AudioEncodingMimeNames *, const char*, const char*);

#ifndef soap_read_tt__AudioEncodingMimeNames
#define soap_read_tt__AudioEncodingMimeNames(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncodingMimeNames(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (809)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__AudioEncoding(struct soap*, enum tt__AudioEncoding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoding(struct soap*, const char*, int, const enum tt__AudioEncoding *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__AudioEncoding2s(struct soap*, enum tt__AudioEncoding);
SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_in_tt__AudioEncoding(struct soap*, const char*, enum tt__AudioEncoding *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__AudioEncoding(struct soap*, const char*, enum tt__AudioEncoding *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioEncoding(struct soap*, const enum tt__AudioEncoding *, const char*, const char*);

#ifndef soap_write_tt__AudioEncoding
#define soap_write_tt__AudioEncoding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__AudioEncoding(soap, data), 0) || soap_put_tt__AudioEncoding(soap, data, "tt:AudioEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__AudioEncoding * SOAP_FMAC4 soap_get_tt__AudioEncoding(struct soap*, enum tt__AudioEncoding *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoding
#define soap_read_tt__AudioEncoding(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (807)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__VideoEncodingProfiles(struct soap*, enum tt__VideoEncodingProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingProfiles(struct soap*, const char*, int, const enum tt__VideoEncodingProfiles *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncodingProfiles2s(struct soap*, enum tt__VideoEncodingProfiles);
SOAP_FMAC3 enum tt__VideoEncodingProfiles * SOAP_FMAC4 soap_in_tt__VideoEncodingProfiles(struct soap*, const char*, enum tt__VideoEncodingProfiles *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncodingProfiles(struct soap*, const char*, enum tt__VideoEncodingProfiles *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncodingProfiles(struct soap*, const enum tt__VideoEncodingProfiles *, const char*, const char*);

#ifndef soap_write_tt__VideoEncodingProfiles
#define soap_write_tt__VideoEncodingProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__VideoEncodingProfiles(soap, data), 0) || soap_put_tt__VideoEncodingProfiles(soap, data, "tt:VideoEncodingProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__VideoEncodingProfiles * SOAP_FMAC4 soap_get_tt__VideoEncodingProfiles(struct soap*, enum tt__VideoEncodingProfiles *, const char*, const char*);

#ifndef soap_read_tt__VideoEncodingProfiles
#define soap_read_tt__VideoEncodingProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncodingProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (805)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__VideoEncodingMimeNames(struct soap*, enum tt__VideoEncodingMimeNames *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingMimeNames(struct soap*, const char*, int, const enum tt__VideoEncodingMimeNames *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncodingMimeNames2s(struct soap*, enum tt__VideoEncodingMimeNames);
SOAP_FMAC3 enum tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_in_tt__VideoEncodingMimeNames(struct soap*, const char*, enum tt__VideoEncodingMimeNames *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncodingMimeNames(struct soap*, const char*, enum tt__VideoEncodingMimeNames *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncodingMimeNames(struct soap*, const enum tt__VideoEncodingMimeNames *, const char*, const char*);

#ifndef soap_write_tt__VideoEncodingMimeNames
#define soap_write_tt__VideoEncodingMimeNames(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__VideoEncodingMimeNames(soap, data), 0) || soap_put_tt__VideoEncodingMimeNames(soap, data, "tt:VideoEncodingMimeNames", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__VideoEncodingMimeNames * SOAP_FMAC4 soap_get_tt__VideoEncodingMimeNames(struct soap*, enum tt__VideoEncodingMimeNames *, const char*, const char*);

#ifndef soap_read_tt__VideoEncodingMimeNames
#define soap_read_tt__VideoEncodingMimeNames(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncodingMimeNames(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (803)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__H264Profile(struct soap*, enum tt__H264Profile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Profile(struct soap*, const char*, int, const enum tt__H264Profile *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__H264Profile2s(struct soap*, enum tt__H264Profile);
SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_in_tt__H264Profile(struct soap*, const char*, enum tt__H264Profile *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__H264Profile(struct soap*, const char*, enum tt__H264Profile *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__H264Profile(struct soap*, const enum tt__H264Profile *, const char*, const char*);

#ifndef soap_write_tt__H264Profile
#define soap_write_tt__H264Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__H264Profile(soap, data), 0) || soap_put_tt__H264Profile(soap, data, "tt:H264Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__H264Profile * SOAP_FMAC4 soap_get_tt__H264Profile(struct soap*, enum tt__H264Profile *, const char*, const char*);

#ifndef soap_read_tt__H264Profile
#define soap_read_tt__H264Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__H264Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (801)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__Mpeg4Profile(struct soap*, enum tt__Mpeg4Profile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Profile(struct soap*, const char*, int, const enum tt__Mpeg4Profile *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__Mpeg4Profile2s(struct soap*, enum tt__Mpeg4Profile);
SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_in_tt__Mpeg4Profile(struct soap*, const char*, enum tt__Mpeg4Profile *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__Mpeg4Profile(struct soap*, const char*, enum tt__Mpeg4Profile *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Mpeg4Profile(struct soap*, const enum tt__Mpeg4Profile *, const char*, const char*);

#ifndef soap_write_tt__Mpeg4Profile
#define soap_write_tt__Mpeg4Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Mpeg4Profile(soap, data), 0) || soap_put_tt__Mpeg4Profile(soap, data, "tt:Mpeg4Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Mpeg4Profile * SOAP_FMAC4 soap_get_tt__Mpeg4Profile(struct soap*, enum tt__Mpeg4Profile *, const char*, const char*);

#ifndef soap_read_tt__Mpeg4Profile
#define soap_read_tt__Mpeg4Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Mpeg4Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (799)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__VideoEncoding(struct soap*, enum tt__VideoEncoding *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoding(struct soap*, const char*, int, const enum tt__VideoEncoding *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__VideoEncoding2s(struct soap*, enum tt__VideoEncoding);
SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_in_tt__VideoEncoding(struct soap*, const char*, enum tt__VideoEncoding *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__VideoEncoding(struct soap*, const char*, enum tt__VideoEncoding *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__VideoEncoding(struct soap*, const enum tt__VideoEncoding *, const char*, const char*);

#ifndef soap_write_tt__VideoEncoding
#define soap_write_tt__VideoEncoding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__VideoEncoding(soap, data), 0) || soap_put_tt__VideoEncoding(soap, data, "tt:VideoEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__VideoEncoding * SOAP_FMAC4 soap_get_tt__VideoEncoding(struct soap*, enum tt__VideoEncoding *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoding
#define soap_read_tt__VideoEncoding(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (797)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__ViewModes(struct soap*, enum tt__ViewModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ViewModes(struct soap*, const char*, int, const enum tt__ViewModes *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__ViewModes2s(struct soap*, enum tt__ViewModes);
SOAP_FMAC3 enum tt__ViewModes * SOAP_FMAC4 soap_in_tt__ViewModes(struct soap*, const char*, enum tt__ViewModes *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__ViewModes(struct soap*, const char*, enum tt__ViewModes *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ViewModes(struct soap*, const enum tt__ViewModes *, const char*, const char*);

#ifndef soap_write_tt__ViewModes
#define soap_write_tt__ViewModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ViewModes(soap, data), 0) || soap_put_tt__ViewModes(soap, data, "tt:ViewModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ViewModes * SOAP_FMAC4 soap_get_tt__ViewModes(struct soap*, enum tt__ViewModes *, const char*, const char*);

#ifndef soap_read_tt__ViewModes
#define soap_read_tt__ViewModes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ViewModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (795)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SceneOrientationOption(struct soap*, enum tt__SceneOrientationOption *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationOption(struct soap*, const char*, int, const enum tt__SceneOrientationOption *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SceneOrientationOption2s(struct soap*, enum tt__SceneOrientationOption);
SOAP_FMAC3 enum tt__SceneOrientationOption * SOAP_FMAC4 soap_in_tt__SceneOrientationOption(struct soap*, const char*, enum tt__SceneOrientationOption *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SceneOrientationOption(struct soap*, const char*, enum tt__SceneOrientationOption *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SceneOrientationOption(struct soap*, const enum tt__SceneOrientationOption *, const char*, const char*);

#ifndef soap_write_tt__SceneOrientationOption
#define soap_write_tt__SceneOrientationOption(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__SceneOrientationOption(soap, data), 0) || soap_put_tt__SceneOrientationOption(soap, data, "tt:SceneOrientationOption", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__SceneOrientationOption * SOAP_FMAC4 soap_get_tt__SceneOrientationOption(struct soap*, enum tt__SceneOrientationOption *, const char*, const char*);

#ifndef soap_read_tt__SceneOrientationOption
#define soap_read_tt__SceneOrientationOption(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SceneOrientationOption(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (793)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__SceneOrientationMode(struct soap*, enum tt__SceneOrientationMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationMode(struct soap*, const char*, int, const enum tt__SceneOrientationMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__SceneOrientationMode2s(struct soap*, enum tt__SceneOrientationMode);
SOAP_FMAC3 enum tt__SceneOrientationMode * SOAP_FMAC4 soap_in_tt__SceneOrientationMode(struct soap*, const char*, enum tt__SceneOrientationMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__SceneOrientationMode(struct soap*, const char*, enum tt__SceneOrientationMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__SceneOrientationMode(struct soap*, const enum tt__SceneOrientationMode *, const char*, const char*);

#ifndef soap_write_tt__SceneOrientationMode
#define soap_write_tt__SceneOrientationMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__SceneOrientationMode(soap, data), 0) || soap_put_tt__SceneOrientationMode(soap, data, "tt:SceneOrientationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__SceneOrientationMode * SOAP_FMAC4 soap_get_tt__SceneOrientationMode(struct soap*, enum tt__SceneOrientationMode *, const char*, const char*);

#ifndef soap_read_tt__SceneOrientationMode
#define soap_read_tt__SceneOrientationMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SceneOrientationMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (791)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tt__RotateMode(struct soap*, enum tt__RotateMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateMode(struct soap*, const char*, int, const enum tt__RotateMode *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_tt__RotateMode2s(struct soap*, enum tt__RotateMode);
SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_in_tt__RotateMode(struct soap*, const char*, enum tt__RotateMode *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2tt__RotateMode(struct soap*, const char*, enum tt__RotateMode *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RotateMode(struct soap*, const enum tt__RotateMode *, const char*, const char*);

#ifndef soap_write_tt__RotateMode
#define soap_write_tt__RotateMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RotateMode(soap, data), 0) || soap_put_tt__RotateMode(soap, data, "tt:RotateMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__RotateMode * SOAP_FMAC4 soap_get_tt__RotateMode(struct soap*, enum tt__RotateMode *, const char*, const char*);

#ifndef soap_read_tt__RotateMode
#define soap_read_tt__RotateMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RotateMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data), 0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__FaultCodeType
#define SOAP_TYPE_wsc__FaultCodeType (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap*, const char*, int, const enum wsc__FaultCodeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap*, enum wsc__FaultCodeType);
SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap*, const char*, enum wsc__FaultCodeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap*, const enum wsc__FaultCodeType *, const char*, const char*);

#ifndef soap_write_wsc__FaultCodeType
#define soap_write_wsc__FaultCodeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__FaultCodeType(soap, data), 0) || soap_put_wsc__FaultCodeType(soap, data, "wsc:FaultCodeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap*, enum wsc__FaultCodeType *, const char*, const char*);

#ifndef soap_read_wsc__FaultCodeType
#define soap_read_wsc__FaultCodeType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsc__FaultCodeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap*, const char*, int, const enum wsse__FaultcodeEnum *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap*, enum wsse__FaultcodeEnum);
SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap*, const char*, enum wsse__FaultcodeEnum *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap*, const enum wsse__FaultcodeEnum *, const char*, const char*);

#ifndef soap_write_wsse__FaultcodeEnum
#define soap_write_wsse__FaultcodeEnum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsse__FaultcodeEnum(soap, data), 0) || soap_put_wsse__FaultcodeEnum(soap, data, "wsse:FaultcodeEnum", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap*, enum wsse__FaultcodeEnum *, const char*, const char*);

#ifndef soap_read_wsse__FaultcodeEnum
#define soap_read_wsse__FaultcodeEnum(soap, data) ( soap_begin_recv(soap) || !soap_get_wsse__FaultcodeEnum(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap*, const char*, int, const enum wsu__tTimestampFault *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap*, enum wsu__tTimestampFault);
SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap*, const char*, enum wsu__tTimestampFault *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap*, const enum wsu__tTimestampFault *, const char*, const char*);

#ifndef soap_write_wsu__tTimestampFault
#define soap_write_wsu__tTimestampFault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsu__tTimestampFault(soap, data), 0) || soap_put_wsu__tTimestampFault(soap, data, "wsu:tTimestampFault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap*, enum wsu__tTimestampFault *, const char*, const char*);

#ifndef soap_read_wsu__tTimestampFault
#define soap_read_wsu__tTimestampFault(soap, data) ( soap_begin_recv(soap) || !soap_get_wsu__tTimestampFault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

#ifndef soap_write__wsa5__IsReferenceParameter
#define soap_write__wsa5__IsReferenceParameter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsa5__IsReferenceParameter(soap, data), 0) || soap_put__wsa5__IsReferenceParameter(soap, data, "wsa5:IsReferenceParameter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

#ifndef soap_read__wsa5__IsReferenceParameter
#define soap_read__wsa5__IsReferenceParameter(soap, data) ( soap_begin_recv(soap) || !soap_get__wsa5__IsReferenceParameter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

#ifndef soap_write_wsa5__FaultCodesType
#define soap_write_wsa5__FaultCodesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__FaultCodesType(soap, data), 0) || soap_put_wsa5__FaultCodesType(soap, data, "wsa5:FaultCodesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

#ifndef soap_read_wsa5__FaultCodesType
#define soap_read_wsa5__FaultCodesType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__FaultCodesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

#ifndef soap_write_wsa5__RelationshipType
#define soap_write_wsa5__RelationshipType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__RelationshipType(soap, data), 0) || soap_put_wsa5__RelationshipType(soap, data, "wsa5:RelationshipType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

#ifndef soap_read_wsa5__RelationshipType
#define soap_read_wsa5__RelationshipType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__RelationshipType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (1531)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const _wstop__TopicNamespaceType_Topic *, const char*);
SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_in__wstop__TopicNamespaceType_Topic(struct soap*, const char*, _wstop__TopicNamespaceType_Topic *, const char*);

#ifndef soap_write__wstop__TopicNamespaceType_Topic
#define soap_write__wstop__TopicNamespaceType_Topic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicNamespaceType-Topic", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wstop__TopicNamespaceType_Topic * SOAP_FMAC4 soap_get__wstop__TopicNamespaceType_Topic(struct soap*, _wstop__TopicNamespaceType_Topic *, const char*, const char*);

#ifndef soap_read__wstop__TopicNamespaceType_Topic
#define soap_read__wstop__TopicNamespaceType_Topic(soap, data) ( soap_begin_recv(soap) || !soap_get__wstop__TopicNamespaceType_Topic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wstop__TopicNamespaceType_Topic * SOAP_FMAC2 soap_instantiate__wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline _wstop__TopicNamespaceType_Topic * soap_new__wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1) { return soap_instantiate__wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL); }

inline _wstop__TopicNamespaceType_Topic * soap_new_req__wstop__TopicNamespaceType_Topic(struct soap *soap, std::string& name) { _wstop__TopicNamespaceType_Topic *_p = soap_instantiate__wstop__TopicNamespaceType_Topic(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wstop__TopicNamespaceType_Topic::name = name; } return _p; }

inline _wstop__TopicNamespaceType_Topic * soap_new_set__wstop__TopicNamespaceType_Topic(struct soap *soap, wstop__Documentation *documentation, char *__anyAttribute, wstop__QueryExpressionType *MessagePattern, std::vector<wstop__TopicType * >& Topic, std::vector<char * >& __any, std::string& name, std::string *messageTypes, bool final_, std::string *parent) { _wstop__TopicNamespaceType_Topic *_p = soap_instantiate__wstop__TopicNamespaceType_Topic(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wstop__TopicNamespaceType_Topic::documentation = documentation; _p->_wstop__TopicNamespaceType_Topic::__anyAttribute = __anyAttribute; _p->_wstop__TopicNamespaceType_Topic::MessagePattern = MessagePattern; _p->_wstop__TopicNamespaceType_Topic::Topic = Topic; _p->_wstop__TopicNamespaceType_Topic::__any = __any; _p->_wstop__TopicNamespaceType_Topic::name = name; _p->_wstop__TopicNamespaceType_Topic::messageTypes = messageTypes; _p->_wstop__TopicNamespaceType_Topic::final_ = final_; _p->_wstop__TopicNamespaceType_Topic::parent = parent; } return _p; }

inline void soap_delete__wstop__TopicNamespaceType_Topic(struct soap *soap, _wstop__TopicNamespaceType_Topic *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wstop__TopicNamespaceType_Topic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1454)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_FaultCause *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause *, const char*);

#ifndef soap_write__wsrfbf__BaseFaultType_FaultCause
#define soap_write__wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *, const char*, const char*);

#ifndef soap_read__wsrfbf__BaseFaultType_FaultCause
#define soap_read__wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get__wsrfbf__BaseFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsrfbf__BaseFaultType_FaultCause * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_FaultCause * soap_new__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, int n = -1) { return soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, n, NULL, NULL, NULL); }

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_req__wsrfbf__BaseFaultType_FaultCause(struct soap *soap) { _wsrfbf__BaseFaultType_FaultCause *_p = soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsrfbf__BaseFaultType_FaultCause * soap_new_set__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, char *__any) { _wsrfbf__BaseFaultType_FaultCause *_p = soap_instantiate__wsrfbf__BaseFaultType_FaultCause(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_FaultCause::__any = __any; } return _p; }

inline void soap_delete__wsrfbf__BaseFaultType_FaultCause(struct soap *soap, _wsrfbf__BaseFaultType_FaultCause *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_FaultCause(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1450)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_Description *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_Description(struct soap*, const char*, _wsrfbf__BaseFaultType_Description *, const char*);

#ifndef soap_write__wsrfbf__BaseFaultType_Description
#define soap_write__wsrfbf__BaseFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType-Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_Description * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_Description(struct soap*, _wsrfbf__BaseFaultType_Description *, const char*, const char*);

#ifndef soap_read__wsrfbf__BaseFaultType_Description
#define soap_read__wsrfbf__BaseFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get__wsrfbf__BaseFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsrfbf__BaseFaultType_Description * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_Description * soap_new__wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate__wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL); }

inline _wsrfbf__BaseFaultType_Description * soap_new_req__wsrfbf__BaseFaultType_Description(struct soap *soap, std::string& __item) { _wsrfbf__BaseFaultType_Description *_p = soap_instantiate__wsrfbf__BaseFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_Description::__item = __item; } return _p; }

inline _wsrfbf__BaseFaultType_Description * soap_new_set__wsrfbf__BaseFaultType_Description(struct soap *soap, std::string& __item, std::string *xml__lang) { _wsrfbf__BaseFaultType_Description *_p = soap_instantiate__wsrfbf__BaseFaultType_Description(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_Description::__item = __item; _p->_wsrfbf__BaseFaultType_Description::xml__lang = xml__lang; } return _p; }

inline void soap_delete__wsrfbf__BaseFaultType_Description(struct soap *soap, _wsrfbf__BaseFaultType_Description *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1448)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, int, const _wsrfbf__BaseFaultType_ErrorCode *, const char*);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_in__wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode *, const char*);

#ifndef soap_write__wsrfbf__BaseFaultType_ErrorCode
#define soap_write__wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC4 soap_get__wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *, const char*, const char*);

#ifndef soap_read__wsrfbf__BaseFaultType_ErrorCode
#define soap_read__wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get__wsrfbf__BaseFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsrfbf__BaseFaultType_ErrorCode * SOAP_FMAC2 soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, const char*, const char*, size_t*);

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, int n = -1) { return soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, n, NULL, NULL, NULL); }

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_req__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, std::string& dialect) { _wsrfbf__BaseFaultType_ErrorCode *_p = soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect; } return _p; }

inline _wsrfbf__BaseFaultType_ErrorCode * soap_new_set__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, std::string& dialect) { _wsrfbf__BaseFaultType_ErrorCode *_p = soap_instantiate__wsrfbf__BaseFaultType_ErrorCode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsrfbf__BaseFaultType_ErrorCode::dialect = dialect; } return _p; }

inline void soap_delete__wsrfbf__BaseFaultType_ErrorCode(struct soap *soap, _wsrfbf__BaseFaultType_ErrorCode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsrfbf__BaseFaultType_ErrorCode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1445)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, int, const _wsnt__Subscribe_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_in__wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy *, const char*);

#ifndef soap_write__wsnt__Subscribe_SubscriptionPolicy
#define soap_write__wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Subscribe-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC4 soap_get__wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read__wsnt__Subscribe_SubscriptionPolicy
#define soap_read__wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Subscribe_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Subscribe_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_req__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap) { _wsnt__Subscribe_SubscriptionPolicy *_p = soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__Subscribe_SubscriptionPolicy * soap_new_set__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, std::vector<char * >& __any) { _wsnt__Subscribe_SubscriptionPolicy *_p = soap_instantiate__wsnt__Subscribe_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Subscribe_SubscriptionPolicy::__any = __any; } return _p; }

inline void soap_delete__wsnt__Subscribe_SubscriptionPolicy(struct soap *soap, _wsnt__Subscribe_SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Subscribe_SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1439)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, int, const _wsnt__NotificationMessageHolderType_Message *, const char*);
SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_in__wsnt__NotificationMessageHolderType_Message(struct soap*, const char*, _wsnt__NotificationMessageHolderType_Message *, const char*);

#ifndef soap_write__wsnt__NotificationMessageHolderType_Message
#define soap_write__wsnt__NotificationMessageHolderType_Message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotificationMessageHolderType-Message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC4 soap_get__wsnt__NotificationMessageHolderType_Message(struct soap*, _wsnt__NotificationMessageHolderType_Message *, const char*, const char*);

#ifndef soap_read__wsnt__NotificationMessageHolderType_Message
#define soap_read__wsnt__NotificationMessageHolderType_Message(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__NotificationMessageHolderType_Message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__NotificationMessageHolderType_Message * SOAP_FMAC2 soap_instantiate__wsnt__NotificationMessageHolderType_Message(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationMessageHolderType_Message * soap_new__wsnt__NotificationMessageHolderType_Message(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, n, NULL, NULL, NULL); }

inline _wsnt__NotificationMessageHolderType_Message * soap_new_req__wsnt__NotificationMessageHolderType_Message(struct soap *soap) { _wsnt__NotificationMessageHolderType_Message *_p = soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__NotificationMessageHolderType_Message * soap_new_set__wsnt__NotificationMessageHolderType_Message(struct soap *soap, char *__any) { _wsnt__NotificationMessageHolderType_Message *_p = soap_instantiate__wsnt__NotificationMessageHolderType_Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__NotificationMessageHolderType_Message::__any = __any; } return _p; }

inline void soap_delete__wsnt__NotificationMessageHolderType_Message(struct soap *soap, _wsnt__NotificationMessageHolderType_Message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__NotificationMessageHolderType_Message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster (1424)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ColorDescriptor_ColorCluster(struct soap*, const char*, int, const _tt__ColorDescriptor_ColorCluster *, const char*);
SOAP_FMAC3 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC4 soap_in__tt__ColorDescriptor_ColorCluster(struct soap*, const char*, _tt__ColorDescriptor_ColorCluster *, const char*);

#ifndef soap_write__tt__ColorDescriptor_ColorCluster
#define soap_write__tt__ColorDescriptor_ColorCluster(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ColorDescriptor-ColorCluster", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC4 soap_get__tt__ColorDescriptor_ColorCluster(struct soap*, _tt__ColorDescriptor_ColorCluster *, const char*, const char*);

#ifndef soap_read__tt__ColorDescriptor_ColorCluster
#define soap_read__tt__ColorDescriptor_ColorCluster(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__ColorDescriptor_ColorCluster(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__ColorDescriptor_ColorCluster * SOAP_FMAC2 soap_instantiate__tt__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ColorDescriptor_ColorCluster * soap_new__tt__ColorDescriptor_ColorCluster(struct soap *soap, int n = -1) { return soap_instantiate__tt__ColorDescriptor_ColorCluster(soap, n, NULL, NULL, NULL); }

inline _tt__ColorDescriptor_ColorCluster * soap_new_req__tt__ColorDescriptor_ColorCluster(struct soap *soap, tt__Color *Color) { _tt__ColorDescriptor_ColorCluster *_p = soap_instantiate__tt__ColorDescriptor_ColorCluster(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ColorDescriptor_ColorCluster::Color = Color; } return _p; }

inline _tt__ColorDescriptor_ColorCluster * soap_new_set__tt__ColorDescriptor_ColorCluster(struct soap *soap, tt__Color *Color, float *Weight, tt__ColorCovariance *Covariance, std::vector<char * >& __any) { _tt__ColorDescriptor_ColorCluster *_p = soap_instantiate__tt__ColorDescriptor_ColorCluster(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ColorDescriptor_ColorCluster::Color = Color; _p->_tt__ColorDescriptor_ColorCluster::Weight = Weight; _p->_tt__ColorDescriptor_ColorCluster::Covariance = Covariance; _p->_tt__ColorDescriptor_ColorCluster::__any = __any; } return _p; }

inline void soap_delete__tt__ColorDescriptor_ColorCluster(struct soap *soap, _tt__ColorDescriptor_ColorCluster *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__ColorDescriptor_ColorCluster(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1308)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ConfigDescription_Messages(struct soap*, const char*, int, const _tt__ConfigDescription_Messages *, const char*);
SOAP_FMAC3 _tt__ConfigDescription_Messages * SOAP_FMAC4 soap_in__tt__ConfigDescription_Messages(struct soap*, const char*, _tt__ConfigDescription_Messages *, const char*);

#ifndef soap_write__tt__ConfigDescription_Messages
#define soap_write__tt__ConfigDescription_Messages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ConfigDescription-Messages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__ConfigDescription_Messages * SOAP_FMAC4 soap_get__tt__ConfigDescription_Messages(struct soap*, _tt__ConfigDescription_Messages *, const char*, const char*);

#ifndef soap_read__tt__ConfigDescription_Messages
#define soap_read__tt__ConfigDescription_Messages(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__ConfigDescription_Messages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__ConfigDescription_Messages * SOAP_FMAC2 soap_instantiate__tt__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ConfigDescription_Messages * soap_new__tt__ConfigDescription_Messages(struct soap *soap, int n = -1) { return soap_instantiate__tt__ConfigDescription_Messages(soap, n, NULL, NULL, NULL); }

inline _tt__ConfigDescription_Messages * soap_new_req__tt__ConfigDescription_Messages(struct soap *soap, std::string& ParentTopic) { _tt__ConfigDescription_Messages *_p = soap_instantiate__tt__ConfigDescription_Messages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ConfigDescription_Messages::ParentTopic = ParentTopic; } return _p; }

inline _tt__ConfigDescription_Messages * soap_new_set__tt__ConfigDescription_Messages(struct soap *soap, tt__ItemListDescription *Source, tt__ItemListDescription *Key, tt__ItemListDescription *Data, tt__MessageDescriptionExtension *Extension, bool *IsProperty, char *__anyAttribute, std::string& ParentTopic) { _tt__ConfigDescription_Messages *_p = soap_instantiate__tt__ConfigDescription_Messages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ConfigDescription_Messages::Source = Source; _p->_tt__ConfigDescription_Messages::Key = Key; _p->_tt__ConfigDescription_Messages::Data = Data; _p->_tt__ConfigDescription_Messages::Extension = Extension; _p->_tt__ConfigDescription_Messages::IsProperty = IsProperty; _p->_tt__ConfigDescription_Messages::__anyAttribute = __anyAttribute; _p->_tt__ConfigDescription_Messages::ParentTopic = ParentTopic; } return _p; }

inline void soap_delete__tt__ConfigDescription_Messages(struct soap *soap, _tt__ConfigDescription_Messages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__ConfigDescription_Messages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1297)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, int, const _tt__ItemListDescription_ElementItemDescription *, const char*);
SOAP_FMAC3 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_in__tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, _tt__ItemListDescription_ElementItemDescription *, const char*);

#ifndef soap_write__tt__ItemListDescription_ElementItemDescription
#define soap_write__tt__ItemListDescription_ElementItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemListDescription-ElementItemDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC4 soap_get__tt__ItemListDescription_ElementItemDescription(struct soap*, _tt__ItemListDescription_ElementItemDescription *, const char*, const char*);

#ifndef soap_read__tt__ItemListDescription_ElementItemDescription
#define soap_read__tt__ItemListDescription_ElementItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__ItemListDescription_ElementItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__ItemListDescription_ElementItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemListDescription_ElementItemDescription * soap_new__tt__ItemListDescription_ElementItemDescription(struct soap *soap, int n = -1) { return soap_instantiate__tt__ItemListDescription_ElementItemDescription(soap, n, NULL, NULL, NULL); }

inline _tt__ItemListDescription_ElementItemDescription * soap_new_req__tt__ItemListDescription_ElementItemDescription(struct soap *soap, std::string& Name, std::string& Type) { _tt__ItemListDescription_ElementItemDescription *_p = soap_instantiate__tt__ItemListDescription_ElementItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemListDescription_ElementItemDescription::Name = Name; _p->_tt__ItemListDescription_ElementItemDescription::Type = Type; } return _p; }

inline _tt__ItemListDescription_ElementItemDescription * soap_new_set__tt__ItemListDescription_ElementItemDescription(struct soap *soap, std::string& Name, std::string& Type) { _tt__ItemListDescription_ElementItemDescription *_p = soap_instantiate__tt__ItemListDescription_ElementItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemListDescription_ElementItemDescription::Name = Name; _p->_tt__ItemListDescription_ElementItemDescription::Type = Type; } return _p; }

inline void soap_delete__tt__ItemListDescription_ElementItemDescription(struct soap *soap, _tt__ItemListDescription_ElementItemDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__ItemListDescription_ElementItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1294)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, int, const _tt__ItemListDescription_SimpleItemDescription *, const char*);
SOAP_FMAC3 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_in__tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, _tt__ItemListDescription_SimpleItemDescription *, const char*);

#ifndef soap_write__tt__ItemListDescription_SimpleItemDescription
#define soap_write__tt__ItemListDescription_SimpleItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemListDescription-SimpleItemDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC4 soap_get__tt__ItemListDescription_SimpleItemDescription(struct soap*, _tt__ItemListDescription_SimpleItemDescription *, const char*, const char*);

#ifndef soap_read__tt__ItemListDescription_SimpleItemDescription
#define soap_read__tt__ItemListDescription_SimpleItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__ItemListDescription_SimpleItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__ItemListDescription_SimpleItemDescription * SOAP_FMAC2 soap_instantiate__tt__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemListDescription_SimpleItemDescription * soap_new__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, int n = -1) { return soap_instantiate__tt__ItemListDescription_SimpleItemDescription(soap, n, NULL, NULL, NULL); }

inline _tt__ItemListDescription_SimpleItemDescription * soap_new_req__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, std::string& Name, std::string& Type) { _tt__ItemListDescription_SimpleItemDescription *_p = soap_instantiate__tt__ItemListDescription_SimpleItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemListDescription_SimpleItemDescription::Name = Name; _p->_tt__ItemListDescription_SimpleItemDescription::Type = Type; } return _p; }

inline _tt__ItemListDescription_SimpleItemDescription * soap_new_set__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, std::string& Name, std::string& Type) { _tt__ItemListDescription_SimpleItemDescription *_p = soap_instantiate__tt__ItemListDescription_SimpleItemDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemListDescription_SimpleItemDescription::Name = Name; _p->_tt__ItemListDescription_SimpleItemDescription::Type = Type; } return _p; }

inline void soap_delete__tt__ItemListDescription_SimpleItemDescription(struct soap *soap, _tt__ItemListDescription_SimpleItemDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__ItemListDescription_SimpleItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1288)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_ElementItem(struct soap*, const char*, int, const _tt__ItemList_ElementItem *, const char*);
SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_in__tt__ItemList_ElementItem(struct soap*, const char*, _tt__ItemList_ElementItem *, const char*);

#ifndef soap_write__tt__ItemList_ElementItem
#define soap_write__tt__ItemList_ElementItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemList-ElementItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__ItemList_ElementItem * SOAP_FMAC4 soap_get__tt__ItemList_ElementItem(struct soap*, _tt__ItemList_ElementItem *, const char*, const char*);

#ifndef soap_read__tt__ItemList_ElementItem
#define soap_read__tt__ItemList_ElementItem(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__ItemList_ElementItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__ItemList_ElementItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemList_ElementItem * soap_new__tt__ItemList_ElementItem(struct soap *soap, int n = -1) { return soap_instantiate__tt__ItemList_ElementItem(soap, n, NULL, NULL, NULL); }

inline _tt__ItemList_ElementItem * soap_new_req__tt__ItemList_ElementItem(struct soap *soap, std::string& Name) { _tt__ItemList_ElementItem *_p = soap_instantiate__tt__ItemList_ElementItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemList_ElementItem::Name = Name; } return _p; }

inline _tt__ItemList_ElementItem * soap_new_set__tt__ItemList_ElementItem(struct soap *soap, char *__any, std::string& Name) { _tt__ItemList_ElementItem *_p = soap_instantiate__tt__ItemList_ElementItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemList_ElementItem::__any = __any; _p->_tt__ItemList_ElementItem::Name = Name; } return _p; }

inline void soap_delete__tt__ItemList_ElementItem(struct soap *soap, _tt__ItemList_ElementItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__ItemList_ElementItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1285)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__ItemList_SimpleItem(struct soap*, const char*, int, const _tt__ItemList_SimpleItem *, const char*);
SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_in__tt__ItemList_SimpleItem(struct soap*, const char*, _tt__ItemList_SimpleItem *, const char*);

#ifndef soap_write__tt__ItemList_SimpleItem
#define soap_write__tt__ItemList_SimpleItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemList-SimpleItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__ItemList_SimpleItem * SOAP_FMAC4 soap_get__tt__ItemList_SimpleItem(struct soap*, _tt__ItemList_SimpleItem *, const char*, const char*);

#ifndef soap_read__tt__ItemList_SimpleItem
#define soap_read__tt__ItemList_SimpleItem(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__ItemList_SimpleItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__ItemList_SimpleItem * SOAP_FMAC2 soap_instantiate__tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline _tt__ItemList_SimpleItem * soap_new__tt__ItemList_SimpleItem(struct soap *soap, int n = -1) { return soap_instantiate__tt__ItemList_SimpleItem(soap, n, NULL, NULL, NULL); }

inline _tt__ItemList_SimpleItem * soap_new_req__tt__ItemList_SimpleItem(struct soap *soap, std::string& Name, std::string& Value) { _tt__ItemList_SimpleItem *_p = soap_instantiate__tt__ItemList_SimpleItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemList_SimpleItem::Name = Name; _p->_tt__ItemList_SimpleItem::Value = Value; } return _p; }

inline _tt__ItemList_SimpleItem * soap_new_set__tt__ItemList_SimpleItem(struct soap *soap, std::string& Name, std::string& Value) { _tt__ItemList_SimpleItem *_p = soap_instantiate__tt__ItemList_SimpleItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__ItemList_SimpleItem::Name = Name; _p->_tt__ItemList_SimpleItem::Value = Value; } return _p; }

inline void soap_delete__tt__ItemList_SimpleItem(struct soap *soap, _tt__ItemList_SimpleItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__ItemList_SimpleItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (1041)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, int, const _tt__EventSubscription_SubscriptionPolicy *, const char*);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_in__tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _tt__EventSubscription_SubscriptionPolicy *, const char*);

#ifndef soap_write__tt__EventSubscription_SubscriptionPolicy
#define soap_write__tt__EventSubscription_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EventSubscription-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC4 soap_get__tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *, const char*, const char*);

#ifndef soap_read__tt__EventSubscription_SubscriptionPolicy
#define soap_read__tt__EventSubscription_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__EventSubscription_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__EventSubscription_SubscriptionPolicy * SOAP_FMAC2 soap_instantiate__tt__EventSubscription_SubscriptionPolicy(struct soap*, int, const char*, const char*, size_t*);

inline _tt__EventSubscription_SubscriptionPolicy * soap_new__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, int n = -1) { return soap_instantiate__tt__EventSubscription_SubscriptionPolicy(soap, n, NULL, NULL, NULL); }

inline _tt__EventSubscription_SubscriptionPolicy * soap_new_req__tt__EventSubscription_SubscriptionPolicy(struct soap *soap) { _tt__EventSubscription_SubscriptionPolicy *_p = soap_instantiate__tt__EventSubscription_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _tt__EventSubscription_SubscriptionPolicy * soap_new_set__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, std::vector<char * >& __any) { _tt__EventSubscription_SubscriptionPolicy *_p = soap_instantiate__tt__EventSubscription_SubscriptionPolicy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__EventSubscription_SubscriptionPolicy::__any = __any; } return _p; }

inline void soap_delete__tt__EventSubscription_SubscriptionPolicy(struct soap *soap, _tt__EventSubscription_SubscriptionPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__EventSubscription_SubscriptionPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobReference__
#define SOAP_TYPE_tt__RecordingJobReference__ (980)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobReference__(struct soap*, const char*, int, const tt__RecordingJobReference__ *, const char*);
SOAP_FMAC3 tt__RecordingJobReference__ * SOAP_FMAC4 soap_in_tt__RecordingJobReference__(struct soap*, const char*, tt__RecordingJobReference__ *, const char*);

#ifndef soap_write_tt__RecordingJobReference__
#define soap_write_tt__RecordingJobReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobReference__ * SOAP_FMAC4 soap_get_tt__RecordingJobReference__(struct soap*, tt__RecordingJobReference__ *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobReference__
#define soap_read_tt__RecordingJobReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobReference__ * soap_new_tt__RecordingJobReference__(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobReference__(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobReference__ * soap_new_req_tt__RecordingJobReference__(struct soap *soap, std::string& __item) { tt__RecordingJobReference__ *_p = soap_instantiate_tt__RecordingJobReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobReference__::__item = __item; } return _p; }

inline tt__RecordingJobReference__ * soap_new_set_tt__RecordingJobReference__(struct soap *soap, std::string& __item, char *__item1) { tt__RecordingJobReference__ *_p = soap_instantiate_tt__RecordingJobReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobReference__(struct soap *soap, tt__RecordingJobReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (979)
#endif

#define soap_default_tt__RecordingJobReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__RecordingJobReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__RecordingJobReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingJobReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__RecordingJobReference
#define soap_write_tt__RecordingJobReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RecordingJobReference(soap, data), 0) || soap_put_tt__RecordingJobReference(soap, data, "tt:RecordingJobReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__RecordingJobReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobReference
#define soap_read_tt__RecordingJobReference(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__RecordingJobReference soap_instantiate_std__string


#define soap_copy_tt__RecordingJobReference soap_copy_std__string

#ifndef SOAP_TYPE_tt__JobToken__
#define SOAP_TYPE_tt__JobToken__ (978)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JobToken__(struct soap*, const char*, int, const tt__JobToken__ *, const char*);
SOAP_FMAC3 tt__JobToken__ * SOAP_FMAC4 soap_in_tt__JobToken__(struct soap*, const char*, tt__JobToken__ *, const char*);

#ifndef soap_write_tt__JobToken__
#define soap_write_tt__JobToken__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:JobToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JobToken__ * SOAP_FMAC4 soap_get_tt__JobToken__(struct soap*, tt__JobToken__ *, const char*, const char*);

#ifndef soap_read_tt__JobToken__
#define soap_read_tt__JobToken__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__JobToken__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__JobToken__ * SOAP_FMAC2 soap_instantiate_tt__JobToken__(struct soap*, int, const char*, const char*, size_t*);

inline tt__JobToken__ * soap_new_tt__JobToken__(struct soap *soap, int n = -1) { return soap_instantiate_tt__JobToken__(soap, n, NULL, NULL, NULL); }

inline tt__JobToken__ * soap_new_req_tt__JobToken__(struct soap *soap, std::string& __item) { tt__JobToken__ *_p = soap_instantiate_tt__JobToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JobToken__::__item = __item; } return _p; }

inline tt__JobToken__ * soap_new_set_tt__JobToken__(struct soap *soap, std::string& __item, char *__item1) { tt__JobToken__ *_p = soap_instantiate_tt__JobToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JobToken__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__JobToken__(struct soap *soap, tt__JobToken__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__JobToken__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (977)
#endif

#define soap_default_tt__JobToken(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__JobToken(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JobToken(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__JobToken(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__JobToken(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__JobToken
#define soap_write_tt__JobToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__JobToken(soap, data), 0) || soap_put_tt__JobToken(soap, data, "tt:JobToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__JobToken(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__JobToken
#define soap_read_tt__JobToken(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__JobToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__JobToken soap_instantiate_std__string


#define soap_copy_tt__JobToken soap_copy_std__string

#ifndef SOAP_TYPE_tt__TrackReference__
#define SOAP_TYPE_tt__TrackReference__ (976)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackReference__(struct soap*, const char*, int, const tt__TrackReference__ *, const char*);
SOAP_FMAC3 tt__TrackReference__ * SOAP_FMAC4 soap_in_tt__TrackReference__(struct soap*, const char*, tt__TrackReference__ *, const char*);

#ifndef soap_write_tt__TrackReference__
#define soap_write_tt__TrackReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TrackReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackReference__ * SOAP_FMAC4 soap_get_tt__TrackReference__(struct soap*, tt__TrackReference__ *, const char*, const char*);

#ifndef soap_read_tt__TrackReference__
#define soap_read_tt__TrackReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TrackReference__ * SOAP_FMAC2 soap_instantiate_tt__TrackReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackReference__ * soap_new_tt__TrackReference__(struct soap *soap, int n = -1) { return soap_instantiate_tt__TrackReference__(soap, n, NULL, NULL, NULL); }

inline tt__TrackReference__ * soap_new_req_tt__TrackReference__(struct soap *soap, std::string& __item) { tt__TrackReference__ *_p = soap_instantiate_tt__TrackReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackReference__::__item = __item; } return _p; }

inline tt__TrackReference__ * soap_new_set_tt__TrackReference__(struct soap *soap, std::string& __item, char *__item1) { tt__TrackReference__ *_p = soap_instantiate_tt__TrackReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TrackReference__(struct soap *soap, tt__TrackReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TrackReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (975)
#endif

#define soap_default_tt__TrackReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__TrackReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__TrackReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__TrackReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__TrackReference
#define soap_write_tt__TrackReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__TrackReference(soap, data), 0) || soap_put_tt__TrackReference(soap, data, "tt:TrackReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__TrackReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__TrackReference
#define soap_read_tt__TrackReference(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__TrackReference soap_instantiate_std__string


#define soap_copy_tt__TrackReference soap_copy_std__string

#ifndef SOAP_TYPE_tt__RecordingReference__
#define SOAP_TYPE_tt__RecordingReference__ (974)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingReference__(struct soap*, const char*, int, const tt__RecordingReference__ *, const char*);
SOAP_FMAC3 tt__RecordingReference__ * SOAP_FMAC4 soap_in_tt__RecordingReference__(struct soap*, const char*, tt__RecordingReference__ *, const char*);

#ifndef soap_write_tt__RecordingReference__
#define soap_write_tt__RecordingReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingReference__ * SOAP_FMAC4 soap_get_tt__RecordingReference__(struct soap*, tt__RecordingReference__ *, const char*, const char*);

#ifndef soap_read_tt__RecordingReference__
#define soap_read_tt__RecordingReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingReference__ * SOAP_FMAC2 soap_instantiate_tt__RecordingReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingReference__ * soap_new_tt__RecordingReference__(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingReference__(soap, n, NULL, NULL, NULL); }

inline tt__RecordingReference__ * soap_new_req_tt__RecordingReference__(struct soap *soap, std::string& __item) { tt__RecordingReference__ *_p = soap_instantiate_tt__RecordingReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingReference__::__item = __item; } return _p; }

inline tt__RecordingReference__ * soap_new_set_tt__RecordingReference__(struct soap *soap, std::string& __item, char *__item1) { tt__RecordingReference__ *_p = soap_instantiate_tt__RecordingReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingReference__(struct soap *soap, tt__RecordingReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (973)
#endif

#define soap_default_tt__RecordingReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__RecordingReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__RecordingReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__RecordingReference
#define soap_write_tt__RecordingReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RecordingReference(soap, data), 0) || soap_put_tt__RecordingReference(soap, data, "tt:RecordingReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__RecordingReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__RecordingReference
#define soap_read_tt__RecordingReference(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__RecordingReference soap_instantiate_std__string


#define soap_copy_tt__RecordingReference soap_copy_std__string

#ifndef SOAP_TYPE_tt__ReceiverReference__
#define SOAP_TYPE_tt__ReceiverReference__ (972)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverReference__(struct soap*, const char*, int, const tt__ReceiverReference__ *, const char*);
SOAP_FMAC3 tt__ReceiverReference__ * SOAP_FMAC4 soap_in_tt__ReceiverReference__(struct soap*, const char*, tt__ReceiverReference__ *, const char*);

#ifndef soap_write_tt__ReceiverReference__
#define soap_write_tt__ReceiverReference__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReceiverReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverReference__ * SOAP_FMAC4 soap_get_tt__ReceiverReference__(struct soap*, tt__ReceiverReference__ *, const char*, const char*);

#ifndef soap_read_tt__ReceiverReference__
#define soap_read_tt__ReceiverReference__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverReference__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReceiverReference__ * SOAP_FMAC2 soap_instantiate_tt__ReceiverReference__(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverReference__ * soap_new_tt__ReceiverReference__(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReceiverReference__(soap, n, NULL, NULL, NULL); }

inline tt__ReceiverReference__ * soap_new_req_tt__ReceiverReference__(struct soap *soap, std::string& __item) { tt__ReceiverReference__ *_p = soap_instantiate_tt__ReceiverReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverReference__::__item = __item; } return _p; }

inline tt__ReceiverReference__ * soap_new_set_tt__ReceiverReference__(struct soap *soap, std::string& __item, char *__item1) { tt__ReceiverReference__ *_p = soap_instantiate_tt__ReceiverReference__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverReference__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReceiverReference__(struct soap *soap, tt__ReceiverReference__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReceiverReference__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (971)
#endif

#define soap_default_tt__ReceiverReference(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReceiverReference(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverReference(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReceiverReference(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReceiverReference(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__ReceiverReference
#define soap_write_tt__ReceiverReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ReceiverReference(soap, data), 0) || soap_put_tt__ReceiverReference(soap, data, "tt:ReceiverReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReceiverReference(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__ReceiverReference
#define soap_read_tt__ReceiverReference(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__ReceiverReference soap_instantiate_std__string


#define soap_copy_tt__ReceiverReference soap_copy_std__string

#ifndef SOAP_TYPE_ns1__MaskType_
#define SOAP_TYPE_ns1__MaskType_ (970)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MaskType_(struct soap*, const char*, int, const ns1__MaskType_ *, const char*);
SOAP_FMAC3 ns1__MaskType_ * SOAP_FMAC4 soap_in_ns1__MaskType_(struct soap*, const char*, ns1__MaskType_ *, const char*);

#ifndef soap_write_ns1__MaskType_
#define soap_write_ns1__MaskType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:MaskType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__MaskType_ * SOAP_FMAC4 soap_get_ns1__MaskType_(struct soap*, ns1__MaskType_ *, const char*, const char*);

#ifndef soap_read_ns1__MaskType_
#define soap_read_ns1__MaskType_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__MaskType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__MaskType_ * SOAP_FMAC2 soap_instantiate_ns1__MaskType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MaskType_ * soap_new_ns1__MaskType_(struct soap *soap, int n = -1) { return soap_instantiate_ns1__MaskType_(soap, n, NULL, NULL, NULL); }

inline ns1__MaskType_ * soap_new_req_ns1__MaskType_(struct soap *soap, enum ns1__MaskType __item) { ns1__MaskType_ *_p = soap_instantiate_ns1__MaskType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__MaskType_::__item = __item; } return _p; }

inline ns1__MaskType_ * soap_new_set_ns1__MaskType_(struct soap *soap, enum ns1__MaskType __item, char *__item1) { ns1__MaskType_ *_p = soap_instantiate_ns1__MaskType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__MaskType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__MaskType_(struct soap *soap, ns1__MaskType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__MaskType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__TransportProtocol_
#define SOAP_TYPE_ns1__TransportProtocol_ (968)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransportProtocol_(struct soap*, const char*, int, const ns1__TransportProtocol_ *, const char*);
SOAP_FMAC3 ns1__TransportProtocol_ * SOAP_FMAC4 soap_in_ns1__TransportProtocol_(struct soap*, const char*, ns1__TransportProtocol_ *, const char*);

#ifndef soap_write_ns1__TransportProtocol_
#define soap_write_ns1__TransportProtocol_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:TransportProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__TransportProtocol_ * SOAP_FMAC4 soap_get_ns1__TransportProtocol_(struct soap*, ns1__TransportProtocol_ *, const char*, const char*);

#ifndef soap_read_ns1__TransportProtocol_
#define soap_read_ns1__TransportProtocol_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__TransportProtocol_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__TransportProtocol_ * SOAP_FMAC2 soap_instantiate_ns1__TransportProtocol_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransportProtocol_ * soap_new_ns1__TransportProtocol_(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TransportProtocol_(soap, n, NULL, NULL, NULL); }

inline ns1__TransportProtocol_ * soap_new_req_ns1__TransportProtocol_(struct soap *soap, enum ns1__TransportProtocol __item) { ns1__TransportProtocol_ *_p = soap_instantiate_ns1__TransportProtocol_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TransportProtocol_::__item = __item; } return _p; }

inline ns1__TransportProtocol_ * soap_new_set_ns1__TransportProtocol_(struct soap *soap, enum ns1__TransportProtocol __item, char *__item1) { ns1__TransportProtocol_ *_p = soap_instantiate_ns1__TransportProtocol_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__TransportProtocol_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__TransportProtocol_(struct soap *soap, ns1__TransportProtocol_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__TransportProtocol_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ConfigurationEnumeration_
#define SOAP_TYPE_ns1__ConfigurationEnumeration_ (966)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigurationEnumeration_(struct soap*, const char*, int, const ns1__ConfigurationEnumeration_ *, const char*);
SOAP_FMAC3 ns1__ConfigurationEnumeration_ * SOAP_FMAC4 soap_in_ns1__ConfigurationEnumeration_(struct soap*, const char*, ns1__ConfigurationEnumeration_ *, const char*);

#ifndef soap_write_ns1__ConfigurationEnumeration_
#define soap_write_ns1__ConfigurationEnumeration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ConfigurationEnumeration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ConfigurationEnumeration_ * SOAP_FMAC4 soap_get_ns1__ConfigurationEnumeration_(struct soap*, ns1__ConfigurationEnumeration_ *, const char*, const char*);

#ifndef soap_read_ns1__ConfigurationEnumeration_
#define soap_read_ns1__ConfigurationEnumeration_(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ConfigurationEnumeration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ConfigurationEnumeration_ * SOAP_FMAC2 soap_instantiate_ns1__ConfigurationEnumeration_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigurationEnumeration_ * soap_new_ns1__ConfigurationEnumeration_(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ConfigurationEnumeration_(soap, n, NULL, NULL, NULL); }

inline ns1__ConfigurationEnumeration_ * soap_new_req_ns1__ConfigurationEnumeration_(struct soap *soap, enum ns1__ConfigurationEnumeration __item) { ns1__ConfigurationEnumeration_ *_p = soap_instantiate_ns1__ConfigurationEnumeration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ConfigurationEnumeration_::__item = __item; } return _p; }

inline ns1__ConfigurationEnumeration_ * soap_new_set_ns1__ConfigurationEnumeration_(struct soap *soap, enum ns1__ConfigurationEnumeration __item, char *__item1) { ns1__ConfigurationEnumeration_ *_p = soap_instantiate_ns1__ConfigurationEnumeration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ConfigurationEnumeration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ConfigurationEnumeration_(struct soap *soap, ns1__ConfigurationEnumeration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ConfigurationEnumeration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression__
#define SOAP_TYPE_wstop__SimpleTopicExpression__ (964)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression__(struct soap*, const char*, int, const wstop__SimpleTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression__(struct soap*, const char*, wstop__SimpleTopicExpression__ *, const char*);

#ifndef soap_write_wstop__SimpleTopicExpression__
#define soap_write_wstop__SimpleTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:SimpleTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__SimpleTopicExpression__ * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression__(struct soap*, wstop__SimpleTopicExpression__ *, const char*, const char*);

#ifndef soap_read_wstop__SimpleTopicExpression__
#define soap_read_wstop__SimpleTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__SimpleTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__SimpleTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__SimpleTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__SimpleTopicExpression__ * soap_new_wstop__SimpleTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_wstop__SimpleTopicExpression__(soap, n, NULL, NULL, NULL); }

inline wstop__SimpleTopicExpression__ * soap_new_req_wstop__SimpleTopicExpression__(struct soap *soap, std::string& __item) { wstop__SimpleTopicExpression__ *_p = soap_instantiate_wstop__SimpleTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__SimpleTopicExpression__::__item = __item; } return _p; }

inline wstop__SimpleTopicExpression__ * soap_new_set_wstop__SimpleTopicExpression__(struct soap *soap, std::string& __item, char *__item1) { wstop__SimpleTopicExpression__ *_p = soap_instantiate_wstop__SimpleTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__SimpleTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__SimpleTopicExpression__(struct soap *soap, wstop__SimpleTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__SimpleTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (963)
#endif

#define soap_default_wstop__SimpleTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__SimpleTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__SimpleTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__SimpleTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__SimpleTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wstop__SimpleTopicExpression
#define soap_write_wstop__SimpleTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstop__SimpleTopicExpression(soap, data), 0) || soap_put_wstop__SimpleTopicExpression(soap, data, "wstop:SimpleTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__SimpleTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wstop__SimpleTopicExpression
#define soap_read_wstop__SimpleTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__SimpleTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wstop__SimpleTopicExpression soap_instantiate_std__string


#define soap_copy_wstop__SimpleTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression__
#define SOAP_TYPE_wstop__ConcreteTopicExpression__ (962)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression__(struct soap*, const char*, int, const wstop__ConcreteTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression__(struct soap*, const char*, wstop__ConcreteTopicExpression__ *, const char*);

#ifndef soap_write_wstop__ConcreteTopicExpression__
#define soap_write_wstop__ConcreteTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__ConcreteTopicExpression__ * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression__(struct soap*, wstop__ConcreteTopicExpression__ *, const char*, const char*);

#ifndef soap_read_wstop__ConcreteTopicExpression__
#define soap_read_wstop__ConcreteTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__ConcreteTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__ConcreteTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__ConcreteTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ConcreteTopicExpression__ * soap_new_wstop__ConcreteTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_wstop__ConcreteTopicExpression__(soap, n, NULL, NULL, NULL); }

inline wstop__ConcreteTopicExpression__ * soap_new_req_wstop__ConcreteTopicExpression__(struct soap *soap, std::string& __item) { wstop__ConcreteTopicExpression__ *_p = soap_instantiate_wstop__ConcreteTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__ConcreteTopicExpression__::__item = __item; } return _p; }

inline wstop__ConcreteTopicExpression__ * soap_new_set_wstop__ConcreteTopicExpression__(struct soap *soap, std::string& __item, char *__item1) { wstop__ConcreteTopicExpression__ *_p = soap_instantiate_wstop__ConcreteTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__ConcreteTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__ConcreteTopicExpression__(struct soap *soap, wstop__ConcreteTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__ConcreteTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (961)
#endif

#define soap_default_wstop__ConcreteTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__ConcreteTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ConcreteTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__ConcreteTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__ConcreteTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wstop__ConcreteTopicExpression
#define soap_write_wstop__ConcreteTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstop__ConcreteTopicExpression(soap, data), 0) || soap_put_wstop__ConcreteTopicExpression(soap, data, "wstop:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__ConcreteTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wstop__ConcreteTopicExpression
#define soap_read_wstop__ConcreteTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__ConcreteTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wstop__ConcreteTopicExpression soap_instantiate_std__string


#define soap_copy_wstop__ConcreteTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_wstop__FullTopicExpression__
#define SOAP_TYPE_wstop__FullTopicExpression__ (960)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression__(struct soap*, const char*, int, const wstop__FullTopicExpression__ *, const char*);
SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_in_wstop__FullTopicExpression__(struct soap*, const char*, wstop__FullTopicExpression__ *, const char*);

#ifndef soap_write_wstop__FullTopicExpression__
#define soap_write_wstop__FullTopicExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:FullTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__FullTopicExpression__ * SOAP_FMAC4 soap_get_wstop__FullTopicExpression__(struct soap*, wstop__FullTopicExpression__ *, const char*, const char*);

#ifndef soap_read_wstop__FullTopicExpression__
#define soap_read_wstop__FullTopicExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__FullTopicExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__FullTopicExpression__ * SOAP_FMAC2 soap_instantiate_wstop__FullTopicExpression__(struct soap*, int, const char*, const char*, size_t*);

inline wstop__FullTopicExpression__ * soap_new_wstop__FullTopicExpression__(struct soap *soap, int n = -1) { return soap_instantiate_wstop__FullTopicExpression__(soap, n, NULL, NULL, NULL); }

inline wstop__FullTopicExpression__ * soap_new_req_wstop__FullTopicExpression__(struct soap *soap, std::string& __item) { wstop__FullTopicExpression__ *_p = soap_instantiate_wstop__FullTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__FullTopicExpression__::__item = __item; } return _p; }

inline wstop__FullTopicExpression__ * soap_new_set_wstop__FullTopicExpression__(struct soap *soap, std::string& __item, char *__item1) { wstop__FullTopicExpression__ *_p = soap_instantiate_wstop__FullTopicExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__FullTopicExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__FullTopicExpression__(struct soap *soap, wstop__FullTopicExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__FullTopicExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (959)
#endif

#define soap_default_wstop__FullTopicExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstop__FullTopicExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__FullTopicExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wstop__FullTopicExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstop__FullTopicExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wstop__FullTopicExpression
#define soap_write_wstop__FullTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wstop__FullTopicExpression(soap, data), 0) || soap_put_wstop__FullTopicExpression(soap, data, "wstop:FullTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wstop__FullTopicExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wstop__FullTopicExpression
#define soap_read_wstop__FullTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__FullTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wstop__FullTopicExpression soap_instantiate_std__string


#define soap_copy_wstop__FullTopicExpression soap_copy_std__string

#ifndef SOAP_TYPE_tt__Entity_
#define SOAP_TYPE_tt__Entity_ (958)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Entity_(struct soap*, const char*, int, const tt__Entity_ *, const char*);
SOAP_FMAC3 tt__Entity_ * SOAP_FMAC4 soap_in_tt__Entity_(struct soap*, const char*, tt__Entity_ *, const char*);

#ifndef soap_write_tt__Entity_
#define soap_write_tt__Entity_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Entity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Entity_ * SOAP_FMAC4 soap_get_tt__Entity_(struct soap*, tt__Entity_ *, const char*, const char*);

#ifndef soap_read_tt__Entity_
#define soap_read_tt__Entity_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Entity_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Entity_ * SOAP_FMAC2 soap_instantiate_tt__Entity_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Entity_ * soap_new_tt__Entity_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Entity_(soap, n, NULL, NULL, NULL); }

inline tt__Entity_ * soap_new_req_tt__Entity_(struct soap *soap, enum tt__Entity __item) { tt__Entity_ *_p = soap_instantiate_tt__Entity_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Entity_::__item = __item; } return _p; }

inline tt__Entity_ * soap_new_set_tt__Entity_(struct soap *soap, enum tt__Entity __item, char *__item1) { tt__Entity_ *_p = soap_instantiate_tt__Entity_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Entity_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Entity_(struct soap *soap, tt__Entity_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Entity_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MoveStatus_
#define SOAP_TYPE_tt__MoveStatus_ (956)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveStatus_(struct soap*, const char*, int, const tt__MoveStatus_ *, const char*);
SOAP_FMAC3 tt__MoveStatus_ * SOAP_FMAC4 soap_in_tt__MoveStatus_(struct soap*, const char*, tt__MoveStatus_ *, const char*);

#ifndef soap_write_tt__MoveStatus_
#define soap_write_tt__MoveStatus_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MoveStatus_ * SOAP_FMAC4 soap_get_tt__MoveStatus_(struct soap*, tt__MoveStatus_ *, const char*, const char*);

#ifndef soap_read_tt__MoveStatus_
#define soap_read_tt__MoveStatus_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MoveStatus_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MoveStatus_ * SOAP_FMAC2 soap_instantiate_tt__MoveStatus_(struct soap*, int, const char*, const char*, size_t*);

inline tt__MoveStatus_ * soap_new_tt__MoveStatus_(struct soap *soap, int n = -1) { return soap_instantiate_tt__MoveStatus_(soap, n, NULL, NULL, NULL); }

inline tt__MoveStatus_ * soap_new_req_tt__MoveStatus_(struct soap *soap, enum tt__MoveStatus __item) { tt__MoveStatus_ *_p = soap_instantiate_tt__MoveStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MoveStatus_::__item = __item; } return _p; }

inline tt__MoveStatus_ * soap_new_set_tt__MoveStatus_(struct soap *soap, enum tt__MoveStatus __item, char *__item1) { tt__MoveStatus_ *_p = soap_instantiate_tt__MoveStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MoveStatus_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MoveStatus_(struct soap *soap, tt__MoveStatus_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MoveStatus_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReferenceToken__
#define SOAP_TYPE_tt__ReferenceToken__ (954)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken__(struct soap*, const char*, int, const tt__ReferenceToken__ *, const char*);
SOAP_FMAC3 tt__ReferenceToken__ * SOAP_FMAC4 soap_in_tt__ReferenceToken__(struct soap*, const char*, tt__ReferenceToken__ *, const char*);

#ifndef soap_write_tt__ReferenceToken__
#define soap_write_tt__ReferenceToken__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReferenceToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReferenceToken__ * SOAP_FMAC4 soap_get_tt__ReferenceToken__(struct soap*, tt__ReferenceToken__ *, const char*, const char*);

#ifndef soap_read_tt__ReferenceToken__
#define soap_read_tt__ReferenceToken__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReferenceToken__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReferenceToken__ * SOAP_FMAC2 soap_instantiate_tt__ReferenceToken__(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReferenceToken__ * soap_new_tt__ReferenceToken__(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReferenceToken__(soap, n, NULL, NULL, NULL); }

inline tt__ReferenceToken__ * soap_new_req_tt__ReferenceToken__(struct soap *soap, std::string& __item) { tt__ReferenceToken__ *_p = soap_instantiate_tt__ReferenceToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReferenceToken__::__item = __item; } return _p; }

inline tt__ReferenceToken__ * soap_new_set_tt__ReferenceToken__(struct soap *soap, std::string& __item, char *__item1) { tt__ReferenceToken__ *_p = soap_instantiate_tt__ReferenceToken__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReferenceToken__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReferenceToken__(struct soap *soap, tt__ReferenceToken__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReferenceToken__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (953)
#endif

#define soap_default_tt__ReferenceToken(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceToken(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceToken(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceToken(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceToken(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__ReferenceToken
#define soap_write_tt__ReferenceToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ReferenceToken(soap, data), 0) || soap_put_tt__ReferenceToken(soap, data, "tt:ReferenceToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceToken(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__ReferenceToken
#define soap_read_tt__ReferenceToken(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReferenceToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__ReferenceToken soap_instantiate_std__string


#define soap_copy_tt__ReferenceToken soap_copy_std__string

#ifndef SOAP_TYPE_tt__OSDType_
#define SOAP_TYPE_tt__OSDType_ (952)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDType_(struct soap*, const char*, int, const tt__OSDType_ *, const char*);
SOAP_FMAC3 tt__OSDType_ * SOAP_FMAC4 soap_in_tt__OSDType_(struct soap*, const char*, tt__OSDType_ *, const char*);

#ifndef soap_write_tt__OSDType_
#define soap_write_tt__OSDType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDType_ * SOAP_FMAC4 soap_get_tt__OSDType_(struct soap*, tt__OSDType_ *, const char*, const char*);

#ifndef soap_read_tt__OSDType_
#define soap_read_tt__OSDType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDType_ * SOAP_FMAC2 soap_instantiate_tt__OSDType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDType_ * soap_new_tt__OSDType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDType_(soap, n, NULL, NULL, NULL); }

inline tt__OSDType_ * soap_new_req_tt__OSDType_(struct soap *soap, enum tt__OSDType __item) { tt__OSDType_ *_p = soap_instantiate_tt__OSDType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDType_::__item = __item; } return _p; }

inline tt__OSDType_ * soap_new_set_tt__OSDType_(struct soap *soap, enum tt__OSDType __item, char *__item1) { tt__OSDType_ *_p = soap_instantiate_tt__OSDType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDType_(struct soap *soap, tt__OSDType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioClassType__
#define SOAP_TYPE_tt__AudioClassType__ (950)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassType__(struct soap*, const char*, int, const tt__AudioClassType__ *, const char*);
SOAP_FMAC3 tt__AudioClassType__ * SOAP_FMAC4 soap_in_tt__AudioClassType__(struct soap*, const char*, tt__AudioClassType__ *, const char*);

#ifndef soap_write_tt__AudioClassType__
#define soap_write_tt__AudioClassType__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioClassType__ * SOAP_FMAC4 soap_get_tt__AudioClassType__(struct soap*, tt__AudioClassType__ *, const char*, const char*);

#ifndef soap_read_tt__AudioClassType__
#define soap_read_tt__AudioClassType__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioClassType__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioClassType__ * SOAP_FMAC2 soap_instantiate_tt__AudioClassType__(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassType__ * soap_new_tt__AudioClassType__(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioClassType__(soap, n, NULL, NULL, NULL); }

inline tt__AudioClassType__ * soap_new_req_tt__AudioClassType__(struct soap *soap, std::string& __item) { tt__AudioClassType__ *_p = soap_instantiate_tt__AudioClassType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioClassType__::__item = __item; } return _p; }

inline tt__AudioClassType__ * soap_new_set_tt__AudioClassType__(struct soap *soap, std::string& __item, char *__item1) { tt__AudioClassType__ *_p = soap_instantiate_tt__AudioClassType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioClassType__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioClassType__(struct soap *soap, tt__AudioClassType__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioClassType__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (949)
#endif

#define soap_default_tt__AudioClassType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AudioClassType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AudioClassType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AudioClassType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__AudioClassType
#define soap_write_tt__AudioClassType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__AudioClassType(soap, data), 0) || soap_put_tt__AudioClassType(soap, data, "tt:AudioClassType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AudioClassType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__AudioClassType
#define soap_read_tt__AudioClassType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioClassType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__AudioClassType soap_instantiate_std__string


#define soap_copy_tt__AudioClassType soap_copy_std__string

#ifndef SOAP_TYPE_tt__ModeOfOperation_
#define SOAP_TYPE_tt__ModeOfOperation_ (948)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ModeOfOperation_(struct soap*, const char*, int, const tt__ModeOfOperation_ *, const char*);
SOAP_FMAC3 tt__ModeOfOperation_ * SOAP_FMAC4 soap_in_tt__ModeOfOperation_(struct soap*, const char*, tt__ModeOfOperation_ *, const char*);

#ifndef soap_write_tt__ModeOfOperation_
#define soap_write_tt__ModeOfOperation_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ModeOfOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ModeOfOperation_ * SOAP_FMAC4 soap_get_tt__ModeOfOperation_(struct soap*, tt__ModeOfOperation_ *, const char*, const char*);

#ifndef soap_read_tt__ModeOfOperation_
#define soap_read_tt__ModeOfOperation_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ModeOfOperation_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ModeOfOperation_ * SOAP_FMAC2 soap_instantiate_tt__ModeOfOperation_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ModeOfOperation_ * soap_new_tt__ModeOfOperation_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ModeOfOperation_(soap, n, NULL, NULL, NULL); }

inline tt__ModeOfOperation_ * soap_new_req_tt__ModeOfOperation_(struct soap *soap, enum tt__ModeOfOperation __item) { tt__ModeOfOperation_ *_p = soap_instantiate_tt__ModeOfOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ModeOfOperation_::__item = __item; } return _p; }

inline tt__ModeOfOperation_ * soap_new_set_tt__ModeOfOperation_(struct soap *soap, enum tt__ModeOfOperation __item, char *__item1) { tt__ModeOfOperation_ *_p = soap_instantiate_tt__ModeOfOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ModeOfOperation_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ModeOfOperation_(struct soap *soap, tt__ModeOfOperation_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ModeOfOperation_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobState__
#define SOAP_TYPE_tt__RecordingJobState__ (946)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobState__(struct soap*, const char*, int, const tt__RecordingJobState__ *, const char*);
SOAP_FMAC3 tt__RecordingJobState__ * SOAP_FMAC4 soap_in_tt__RecordingJobState__(struct soap*, const char*, tt__RecordingJobState__ *, const char*);

#ifndef soap_write_tt__RecordingJobState__
#define soap_write_tt__RecordingJobState__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobState__ * SOAP_FMAC4 soap_get_tt__RecordingJobState__(struct soap*, tt__RecordingJobState__ *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobState__
#define soap_read_tt__RecordingJobState__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobState__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobState__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobState__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobState__ * soap_new_tt__RecordingJobState__(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobState__(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobState__ * soap_new_req_tt__RecordingJobState__(struct soap *soap, std::string& __item) { tt__RecordingJobState__ *_p = soap_instantiate_tt__RecordingJobState__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobState__::__item = __item; } return _p; }

inline tt__RecordingJobState__ * soap_new_set_tt__RecordingJobState__(struct soap *soap, std::string& __item, char *__item1) { tt__RecordingJobState__ *_p = soap_instantiate_tt__RecordingJobState__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobState__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobState__(struct soap *soap, tt__RecordingJobState__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobState__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (945)
#endif

#define soap_default_tt__RecordingJobState(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__RecordingJobState(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobState(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__RecordingJobState(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingJobState(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__RecordingJobState
#define soap_write_tt__RecordingJobState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RecordingJobState(soap, data), 0) || soap_put_tt__RecordingJobState(soap, data, "tt:RecordingJobState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__RecordingJobState(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobState
#define soap_read_tt__RecordingJobState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__RecordingJobState soap_instantiate_std__string


#define soap_copy_tt__RecordingJobState soap_copy_std__string

#ifndef SOAP_TYPE_tt__RecordingJobMode__
#define SOAP_TYPE_tt__RecordingJobMode__ (944)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobMode__(struct soap*, const char*, int, const tt__RecordingJobMode__ *, const char*);
SOAP_FMAC3 tt__RecordingJobMode__ * SOAP_FMAC4 soap_in_tt__RecordingJobMode__(struct soap*, const char*, tt__RecordingJobMode__ *, const char*);

#ifndef soap_write_tt__RecordingJobMode__
#define soap_write_tt__RecordingJobMode__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobMode__ * SOAP_FMAC4 soap_get_tt__RecordingJobMode__(struct soap*, tt__RecordingJobMode__ *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobMode__
#define soap_read_tt__RecordingJobMode__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobMode__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobMode__ * SOAP_FMAC2 soap_instantiate_tt__RecordingJobMode__(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobMode__ * soap_new_tt__RecordingJobMode__(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobMode__(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobMode__ * soap_new_req_tt__RecordingJobMode__(struct soap *soap, std::string& __item) { tt__RecordingJobMode__ *_p = soap_instantiate_tt__RecordingJobMode__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobMode__::__item = __item; } return _p; }

inline tt__RecordingJobMode__ * soap_new_set_tt__RecordingJobMode__(struct soap *soap, std::string& __item, char *__item1) { tt__RecordingJobMode__ *_p = soap_instantiate_tt__RecordingJobMode__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobMode__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobMode__(struct soap *soap, tt__RecordingJobMode__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobMode__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (943)
#endif

#define soap_default_tt__RecordingJobMode(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__RecordingJobMode(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobMode(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__RecordingJobMode(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__RecordingJobMode(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__RecordingJobMode
#define soap_write_tt__RecordingJobMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__RecordingJobMode(soap, data), 0) || soap_put_tt__RecordingJobMode(soap, data, "tt:RecordingJobMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__RecordingJobMode(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobMode
#define soap_read_tt__RecordingJobMode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__RecordingJobMode soap_instantiate_std__string


#define soap_copy_tt__RecordingJobMode soap_copy_std__string

#ifndef SOAP_TYPE_tt__TrackType_
#define SOAP_TYPE_tt__TrackType_ (942)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackType_(struct soap*, const char*, int, const tt__TrackType_ *, const char*);
SOAP_FMAC3 tt__TrackType_ * SOAP_FMAC4 soap_in_tt__TrackType_(struct soap*, const char*, tt__TrackType_ *, const char*);

#ifndef soap_write_tt__TrackType_
#define soap_write_tt__TrackType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TrackType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackType_ * SOAP_FMAC4 soap_get_tt__TrackType_(struct soap*, tt__TrackType_ *, const char*, const char*);

#ifndef soap_read_tt__TrackType_
#define soap_read_tt__TrackType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TrackType_ * SOAP_FMAC2 soap_instantiate_tt__TrackType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackType_ * soap_new_tt__TrackType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__TrackType_(soap, n, NULL, NULL, NULL); }

inline tt__TrackType_ * soap_new_req_tt__TrackType_(struct soap *soap, enum tt__TrackType __item) { tt__TrackType_ *_p = soap_instantiate_tt__TrackType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackType_::__item = __item; } return _p; }

inline tt__TrackType_ * soap_new_set_tt__TrackType_(struct soap *soap, enum tt__TrackType __item, char *__item1) { tt__TrackType_ *_p = soap_instantiate_tt__TrackType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TrackType_(struct soap *soap, tt__TrackType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TrackType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingStatus_
#define SOAP_TYPE_tt__RecordingStatus_ (940)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingStatus_(struct soap*, const char*, int, const tt__RecordingStatus_ *, const char*);
SOAP_FMAC3 tt__RecordingStatus_ * SOAP_FMAC4 soap_in_tt__RecordingStatus_(struct soap*, const char*, tt__RecordingStatus_ *, const char*);

#ifndef soap_write_tt__RecordingStatus_
#define soap_write_tt__RecordingStatus_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingStatus_ * SOAP_FMAC4 soap_get_tt__RecordingStatus_(struct soap*, tt__RecordingStatus_ *, const char*, const char*);

#ifndef soap_read_tt__RecordingStatus_
#define soap_read_tt__RecordingStatus_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingStatus_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingStatus_ * SOAP_FMAC2 soap_instantiate_tt__RecordingStatus_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingStatus_ * soap_new_tt__RecordingStatus_(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingStatus_(soap, n, NULL, NULL, NULL); }

inline tt__RecordingStatus_ * soap_new_req_tt__RecordingStatus_(struct soap *soap, enum tt__RecordingStatus __item) { tt__RecordingStatus_ *_p = soap_instantiate_tt__RecordingStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingStatus_::__item = __item; } return _p; }

inline tt__RecordingStatus_ * soap_new_set_tt__RecordingStatus_(struct soap *soap, enum tt__RecordingStatus __item, char *__item1) { tt__RecordingStatus_ *_p = soap_instantiate_tt__RecordingStatus_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingStatus_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingStatus_(struct soap *soap, tt__RecordingStatus_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingStatus_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SearchState_
#define SOAP_TYPE_tt__SearchState_ (938)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchState_(struct soap*, const char*, int, const tt__SearchState_ *, const char*);
SOAP_FMAC3 tt__SearchState_ * SOAP_FMAC4 soap_in_tt__SearchState_(struct soap*, const char*, tt__SearchState_ *, const char*);

#ifndef soap_write_tt__SearchState_
#define soap_write_tt__SearchState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SearchState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SearchState_ * SOAP_FMAC4 soap_get_tt__SearchState_(struct soap*, tt__SearchState_ *, const char*, const char*);

#ifndef soap_read_tt__SearchState_
#define soap_read_tt__SearchState_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SearchState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SearchState_ * SOAP_FMAC2 soap_instantiate_tt__SearchState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchState_ * soap_new_tt__SearchState_(struct soap *soap, int n = -1) { return soap_instantiate_tt__SearchState_(soap, n, NULL, NULL, NULL); }

inline tt__SearchState_ * soap_new_req_tt__SearchState_(struct soap *soap, enum tt__SearchState __item) { tt__SearchState_ *_p = soap_instantiate_tt__SearchState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SearchState_::__item = __item; } return _p; }

inline tt__SearchState_ * soap_new_set_tt__SearchState_(struct soap *soap, enum tt__SearchState __item, char *__item1) { tt__SearchState_ *_p = soap_instantiate_tt__SearchState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SearchState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SearchState_(struct soap *soap, tt__SearchState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SearchState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__XPathExpression__
#define SOAP_TYPE_tt__XPathExpression__ (936)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__XPathExpression__(struct soap*, const char*, int, const tt__XPathExpression__ *, const char*);
SOAP_FMAC3 tt__XPathExpression__ * SOAP_FMAC4 soap_in_tt__XPathExpression__(struct soap*, const char*, tt__XPathExpression__ *, const char*);

#ifndef soap_write_tt__XPathExpression__
#define soap_write_tt__XPathExpression__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:XPathExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__XPathExpression__ * SOAP_FMAC4 soap_get_tt__XPathExpression__(struct soap*, tt__XPathExpression__ *, const char*, const char*);

#ifndef soap_read_tt__XPathExpression__
#define soap_read_tt__XPathExpression__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__XPathExpression__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__XPathExpression__ * SOAP_FMAC2 soap_instantiate_tt__XPathExpression__(struct soap*, int, const char*, const char*, size_t*);

inline tt__XPathExpression__ * soap_new_tt__XPathExpression__(struct soap *soap, int n = -1) { return soap_instantiate_tt__XPathExpression__(soap, n, NULL, NULL, NULL); }

inline tt__XPathExpression__ * soap_new_req_tt__XPathExpression__(struct soap *soap, std::string& __item) { tt__XPathExpression__ *_p = soap_instantiate_tt__XPathExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__XPathExpression__::__item = __item; } return _p; }

inline tt__XPathExpression__ * soap_new_set_tt__XPathExpression__(struct soap *soap, std::string& __item, char *__item1) { tt__XPathExpression__ *_p = soap_instantiate_tt__XPathExpression__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__XPathExpression__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__XPathExpression__(struct soap *soap, tt__XPathExpression__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__XPathExpression__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (935)
#endif

#define soap_default_tt__XPathExpression(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__XPathExpression(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__XPathExpression(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__XPathExpression(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__XPathExpression(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__XPathExpression
#define soap_write_tt__XPathExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__XPathExpression(soap, data), 0) || soap_put_tt__XPathExpression(soap, data, "tt:XPathExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__XPathExpression(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__XPathExpression
#define soap_read_tt__XPathExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__XPathExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__XPathExpression soap_instantiate_std__string


#define soap_copy_tt__XPathExpression soap_copy_std__string

#ifndef SOAP_TYPE_tt__Description__
#define SOAP_TYPE_tt__Description__ (934)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Description__(struct soap*, const char*, int, const tt__Description__ *, const char*);
SOAP_FMAC3 tt__Description__ * SOAP_FMAC4 soap_in_tt__Description__(struct soap*, const char*, tt__Description__ *, const char*);

#ifndef soap_write_tt__Description__
#define soap_write_tt__Description__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Description__ * SOAP_FMAC4 soap_get_tt__Description__(struct soap*, tt__Description__ *, const char*, const char*);

#ifndef soap_read_tt__Description__
#define soap_read_tt__Description__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Description__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Description__ * SOAP_FMAC2 soap_instantiate_tt__Description__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Description__ * soap_new_tt__Description__(struct soap *soap, int n = -1) { return soap_instantiate_tt__Description__(soap, n, NULL, NULL, NULL); }

inline tt__Description__ * soap_new_req_tt__Description__(struct soap *soap, std::string& __item) { tt__Description__ *_p = soap_instantiate_tt__Description__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Description__::__item = __item; } return _p; }

inline tt__Description__ * soap_new_set_tt__Description__(struct soap *soap, std::string& __item, char *__item1) { tt__Description__ *_p = soap_instantiate_tt__Description__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Description__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Description__(struct soap *soap, tt__Description__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Description__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (933)
#endif

#define soap_default_tt__Description(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Description(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Description(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Description(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Description(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__Description
#define soap_write_tt__Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Description(soap, data), 0) || soap_put_tt__Description(soap, data, "tt:Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Description(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__Description
#define soap_read_tt__Description(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__Description soap_instantiate_std__string


#define soap_copy_tt__Description soap_copy_std__string

#ifndef SOAP_TYPE_tt__ReceiverState_
#define SOAP_TYPE_tt__ReceiverState_ (932)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverState_(struct soap*, const char*, int, const tt__ReceiverState_ *, const char*);
SOAP_FMAC3 tt__ReceiverState_ * SOAP_FMAC4 soap_in_tt__ReceiverState_(struct soap*, const char*, tt__ReceiverState_ *, const char*);

#ifndef soap_write_tt__ReceiverState_
#define soap_write_tt__ReceiverState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReceiverState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverState_ * SOAP_FMAC4 soap_get_tt__ReceiverState_(struct soap*, tt__ReceiverState_ *, const char*, const char*);

#ifndef soap_read_tt__ReceiverState_
#define soap_read_tt__ReceiverState_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReceiverState_ * SOAP_FMAC2 soap_instantiate_tt__ReceiverState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverState_ * soap_new_tt__ReceiverState_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReceiverState_(soap, n, NULL, NULL, NULL); }

inline tt__ReceiverState_ * soap_new_req_tt__ReceiverState_(struct soap *soap, enum tt__ReceiverState __item) { tt__ReceiverState_ *_p = soap_instantiate_tt__ReceiverState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverState_::__item = __item; } return _p; }

inline tt__ReceiverState_ * soap_new_set_tt__ReceiverState_(struct soap *soap, enum tt__ReceiverState __item, char *__item1) { tt__ReceiverState_ *_p = soap_instantiate_tt__ReceiverState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReceiverState_(struct soap *soap, tt__ReceiverState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReceiverState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReceiverMode_
#define SOAP_TYPE_tt__ReceiverMode_ (930)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverMode_(struct soap*, const char*, int, const tt__ReceiverMode_ *, const char*);
SOAP_FMAC3 tt__ReceiverMode_ * SOAP_FMAC4 soap_in_tt__ReceiverMode_(struct soap*, const char*, tt__ReceiverMode_ *, const char*);

#ifndef soap_write_tt__ReceiverMode_
#define soap_write_tt__ReceiverMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReceiverMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverMode_ * SOAP_FMAC4 soap_get_tt__ReceiverMode_(struct soap*, tt__ReceiverMode_ *, const char*, const char*);

#ifndef soap_read_tt__ReceiverMode_
#define soap_read_tt__ReceiverMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReceiverMode_ * SOAP_FMAC2 soap_instantiate_tt__ReceiverMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverMode_ * soap_new_tt__ReceiverMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReceiverMode_(soap, n, NULL, NULL, NULL); }

inline tt__ReceiverMode_ * soap_new_req_tt__ReceiverMode_(struct soap *soap, enum tt__ReceiverMode __item) { tt__ReceiverMode_ *_p = soap_instantiate_tt__ReceiverMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverMode_::__item = __item; } return _p; }

inline tt__ReceiverMode_ * soap_new_set_tt__ReceiverMode_(struct soap *soap, enum tt__ReceiverMode __item, char *__item1) { tt__ReceiverMode_ *_p = soap_instantiate_tt__ReceiverMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReceiverMode_(struct soap *soap, tt__ReceiverMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReceiverMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Direction_
#define SOAP_TYPE_tt__Direction_ (928)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Direction_(struct soap*, const char*, int, const tt__Direction_ *, const char*);
SOAP_FMAC3 tt__Direction_ * SOAP_FMAC4 soap_in_tt__Direction_(struct soap*, const char*, tt__Direction_ *, const char*);

#ifndef soap_write_tt__Direction_
#define soap_write_tt__Direction_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Direction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Direction_ * SOAP_FMAC4 soap_get_tt__Direction_(struct soap*, tt__Direction_ *, const char*, const char*);

#ifndef soap_read_tt__Direction_
#define soap_read_tt__Direction_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Direction_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Direction_ * SOAP_FMAC2 soap_instantiate_tt__Direction_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Direction_ * soap_new_tt__Direction_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Direction_(soap, n, NULL, NULL, NULL); }

inline tt__Direction_ * soap_new_req_tt__Direction_(struct soap *soap, enum tt__Direction __item) { tt__Direction_ *_p = soap_instantiate_tt__Direction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Direction_::__item = __item; } return _p; }

inline tt__Direction_ * soap_new_set_tt__Direction_(struct soap *soap, enum tt__Direction __item, char *__item1) { tt__Direction_ *_p = soap_instantiate_tt__Direction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Direction_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Direction_(struct soap *soap, tt__Direction_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Direction_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PropertyOperation_
#define SOAP_TYPE_tt__PropertyOperation_ (926)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PropertyOperation_(struct soap*, const char*, int, const tt__PropertyOperation_ *, const char*);
SOAP_FMAC3 tt__PropertyOperation_ * SOAP_FMAC4 soap_in_tt__PropertyOperation_(struct soap*, const char*, tt__PropertyOperation_ *, const char*);

#ifndef soap_write_tt__PropertyOperation_
#define soap_write_tt__PropertyOperation_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PropertyOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PropertyOperation_ * SOAP_FMAC4 soap_get_tt__PropertyOperation_(struct soap*, tt__PropertyOperation_ *, const char*, const char*);

#ifndef soap_read_tt__PropertyOperation_
#define soap_read_tt__PropertyOperation_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PropertyOperation_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PropertyOperation_ * SOAP_FMAC2 soap_instantiate_tt__PropertyOperation_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PropertyOperation_ * soap_new_tt__PropertyOperation_(struct soap *soap, int n = -1) { return soap_instantiate_tt__PropertyOperation_(soap, n, NULL, NULL, NULL); }

inline tt__PropertyOperation_ * soap_new_req_tt__PropertyOperation_(struct soap *soap, enum tt__PropertyOperation __item) { tt__PropertyOperation_ *_p = soap_instantiate_tt__PropertyOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PropertyOperation_::__item = __item; } return _p; }

inline tt__PropertyOperation_ * soap_new_set_tt__PropertyOperation_(struct soap *soap, enum tt__PropertyOperation __item, char *__item1) { tt__PropertyOperation_ *_p = soap_instantiate_tt__PropertyOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PropertyOperation_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PropertyOperation_(struct soap *soap, tt__PropertyOperation_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PropertyOperation_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImageSendingType_
#define SOAP_TYPE_tt__ImageSendingType_ (924)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageSendingType_(struct soap*, const char*, int, const tt__ImageSendingType_ *, const char*);
SOAP_FMAC3 tt__ImageSendingType_ * SOAP_FMAC4 soap_in_tt__ImageSendingType_(struct soap*, const char*, tt__ImageSendingType_ *, const char*);

#ifndef soap_write_tt__ImageSendingType_
#define soap_write_tt__ImageSendingType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImageSendingType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageSendingType_ * SOAP_FMAC4 soap_get_tt__ImageSendingType_(struct soap*, tt__ImageSendingType_ *, const char*, const char*);

#ifndef soap_read_tt__ImageSendingType_
#define soap_read_tt__ImageSendingType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageSendingType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImageSendingType_ * SOAP_FMAC2 soap_instantiate_tt__ImageSendingType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageSendingType_ * soap_new_tt__ImageSendingType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImageSendingType_(soap, n, NULL, NULL, NULL); }

inline tt__ImageSendingType_ * soap_new_req_tt__ImageSendingType_(struct soap *soap, enum tt__ImageSendingType __item) { tt__ImageSendingType_ *_p = soap_instantiate_tt__ImageSendingType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageSendingType_::__item = __item; } return _p; }

inline tt__ImageSendingType_ * soap_new_set_tt__ImageSendingType_(struct soap *soap, enum tt__ImageSendingType __item, char *__item1) { tt__ImageSendingType_ *_p = soap_instantiate_tt__ImageSendingType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageSendingType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImageSendingType_(struct soap *soap, tt__ImageSendingType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImageSendingType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DefoggingMode_
#define SOAP_TYPE_tt__DefoggingMode_ (922)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingMode_(struct soap*, const char*, int, const tt__DefoggingMode_ *, const char*);
SOAP_FMAC3 tt__DefoggingMode_ * SOAP_FMAC4 soap_in_tt__DefoggingMode_(struct soap*, const char*, tt__DefoggingMode_ *, const char*);

#ifndef soap_write_tt__DefoggingMode_
#define soap_write_tt__DefoggingMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DefoggingMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DefoggingMode_ * SOAP_FMAC4 soap_get_tt__DefoggingMode_(struct soap*, tt__DefoggingMode_ *, const char*, const char*);

#ifndef soap_read_tt__DefoggingMode_
#define soap_read_tt__DefoggingMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DefoggingMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DefoggingMode_ * SOAP_FMAC2 soap_instantiate_tt__DefoggingMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingMode_ * soap_new_tt__DefoggingMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__DefoggingMode_(soap, n, NULL, NULL, NULL); }

inline tt__DefoggingMode_ * soap_new_req_tt__DefoggingMode_(struct soap *soap, enum tt__DefoggingMode __item) { tt__DefoggingMode_ *_p = soap_instantiate_tt__DefoggingMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DefoggingMode_::__item = __item; } return _p; }

inline tt__DefoggingMode_ * soap_new_set_tt__DefoggingMode_(struct soap *soap, enum tt__DefoggingMode __item, char *__item1) { tt__DefoggingMode_ *_p = soap_instantiate_tt__DefoggingMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DefoggingMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DefoggingMode_(struct soap *soap, tt__DefoggingMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DefoggingMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ToneCompensationMode_
#define SOAP_TYPE_tt__ToneCompensationMode_ (920)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationMode_(struct soap*, const char*, int, const tt__ToneCompensationMode_ *, const char*);
SOAP_FMAC3 tt__ToneCompensationMode_ * SOAP_FMAC4 soap_in_tt__ToneCompensationMode_(struct soap*, const char*, tt__ToneCompensationMode_ *, const char*);

#ifndef soap_write_tt__ToneCompensationMode_
#define soap_write_tt__ToneCompensationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ToneCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensationMode_ * SOAP_FMAC4 soap_get_tt__ToneCompensationMode_(struct soap*, tt__ToneCompensationMode_ *, const char*, const char*);

#ifndef soap_read_tt__ToneCompensationMode_
#define soap_read_tt__ToneCompensationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ToneCompensationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ToneCompensationMode_ * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationMode_ * soap_new_tt__ToneCompensationMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ToneCompensationMode_(soap, n, NULL, NULL, NULL); }

inline tt__ToneCompensationMode_ * soap_new_req_tt__ToneCompensationMode_(struct soap *soap, enum tt__ToneCompensationMode __item) { tt__ToneCompensationMode_ *_p = soap_instantiate_tt__ToneCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensationMode_::__item = __item; } return _p; }

inline tt__ToneCompensationMode_ * soap_new_set_tt__ToneCompensationMode_(struct soap *soap, enum tt__ToneCompensationMode __item, char *__item1) { tt__ToneCompensationMode_ *_p = soap_instantiate_tt__ToneCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ToneCompensationMode_(struct soap *soap, tt__ToneCompensationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ToneCompensationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType_ (918)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoBoundaryType_(struct soap*, const char*, int, const tt__IrCutFilterAutoBoundaryType_ *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoBoundaryType_(struct soap*, const char*, tt__IrCutFilterAutoBoundaryType_ *, const char*);

#ifndef soap_write_tt__IrCutFilterAutoBoundaryType_
#define soap_write_tt__IrCutFilterAutoBoundaryType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IrCutFilterAutoBoundaryType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoBoundaryType_(struct soap*, tt__IrCutFilterAutoBoundaryType_ *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterAutoBoundaryType_
#define soap_read_tt__IrCutFilterAutoBoundaryType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterAutoBoundaryType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IrCutFilterAutoBoundaryType_ * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoBoundaryType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoBoundaryType_ * soap_new_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__IrCutFilterAutoBoundaryType_(soap, n, NULL, NULL, NULL); }

inline tt__IrCutFilterAutoBoundaryType_ * soap_new_req_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, enum tt__IrCutFilterAutoBoundaryType __item) { tt__IrCutFilterAutoBoundaryType_ *_p = soap_instantiate_tt__IrCutFilterAutoBoundaryType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoBoundaryType_::__item = __item; } return _p; }

inline tt__IrCutFilterAutoBoundaryType_ * soap_new_set_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, enum tt__IrCutFilterAutoBoundaryType __item, char *__item1) { tt__IrCutFilterAutoBoundaryType_ *_p = soap_instantiate_tt__IrCutFilterAutoBoundaryType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoBoundaryType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IrCutFilterAutoBoundaryType_(struct soap *soap, tt__IrCutFilterAutoBoundaryType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IrCutFilterAutoBoundaryType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImageStabilizationMode_
#define SOAP_TYPE_tt__ImageStabilizationMode_ (916)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationMode_(struct soap*, const char*, int, const tt__ImageStabilizationMode_ *, const char*);
SOAP_FMAC3 tt__ImageStabilizationMode_ * SOAP_FMAC4 soap_in_tt__ImageStabilizationMode_(struct soap*, const char*, tt__ImageStabilizationMode_ *, const char*);

#ifndef soap_write_tt__ImageStabilizationMode_
#define soap_write_tt__ImageStabilizationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImageStabilizationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationMode_ * SOAP_FMAC4 soap_get_tt__ImageStabilizationMode_(struct soap*, tt__ImageStabilizationMode_ *, const char*, const char*);

#ifndef soap_read_tt__ImageStabilizationMode_
#define soap_read_tt__ImageStabilizationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageStabilizationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImageStabilizationMode_ * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationMode_ * soap_new_tt__ImageStabilizationMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImageStabilizationMode_(soap, n, NULL, NULL, NULL); }

inline tt__ImageStabilizationMode_ * soap_new_req_tt__ImageStabilizationMode_(struct soap *soap, enum tt__ImageStabilizationMode __item) { tt__ImageStabilizationMode_ *_p = soap_instantiate_tt__ImageStabilizationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilizationMode_::__item = __item; } return _p; }

inline tt__ImageStabilizationMode_ * soap_new_set_tt__ImageStabilizationMode_(struct soap *soap, enum tt__ImageStabilizationMode __item, char *__item1) { tt__ImageStabilizationMode_ *_p = soap_instantiate_tt__ImageStabilizationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilizationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImageStabilizationMode_(struct soap *soap, tt__ImageStabilizationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImageStabilizationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IrCutFilterMode_
#define SOAP_TYPE_tt__IrCutFilterMode_ (914)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterMode_(struct soap*, const char*, int, const tt__IrCutFilterMode_ *, const char*);
SOAP_FMAC3 tt__IrCutFilterMode_ * SOAP_FMAC4 soap_in_tt__IrCutFilterMode_(struct soap*, const char*, tt__IrCutFilterMode_ *, const char*);

#ifndef soap_write_tt__IrCutFilterMode_
#define soap_write_tt__IrCutFilterMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IrCutFilterMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterMode_ * SOAP_FMAC4 soap_get_tt__IrCutFilterMode_(struct soap*, tt__IrCutFilterMode_ *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterMode_
#define soap_read_tt__IrCutFilterMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IrCutFilterMode_ * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterMode_ * soap_new_tt__IrCutFilterMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__IrCutFilterMode_(soap, n, NULL, NULL, NULL); }

inline tt__IrCutFilterMode_ * soap_new_req_tt__IrCutFilterMode_(struct soap *soap, enum tt__IrCutFilterMode __item) { tt__IrCutFilterMode_ *_p = soap_instantiate_tt__IrCutFilterMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterMode_::__item = __item; } return _p; }

inline tt__IrCutFilterMode_ * soap_new_set_tt__IrCutFilterMode_(struct soap *soap, enum tt__IrCutFilterMode __item, char *__item1) { tt__IrCutFilterMode_ *_p = soap_instantiate_tt__IrCutFilterMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IrCutFilterMode_(struct soap *soap, tt__IrCutFilterMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IrCutFilterMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalanceMode_
#define SOAP_TYPE_tt__WhiteBalanceMode_ (912)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceMode_(struct soap*, const char*, int, const tt__WhiteBalanceMode_ *, const char*);
SOAP_FMAC3 tt__WhiteBalanceMode_ * SOAP_FMAC4 soap_in_tt__WhiteBalanceMode_(struct soap*, const char*, tt__WhiteBalanceMode_ *, const char*);

#ifndef soap_write_tt__WhiteBalanceMode_
#define soap_write_tt__WhiteBalanceMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalanceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceMode_ * SOAP_FMAC4 soap_get_tt__WhiteBalanceMode_(struct soap*, tt__WhiteBalanceMode_ *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalanceMode_
#define soap_read_tt__WhiteBalanceMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalanceMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalanceMode_ * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceMode_ * soap_new_tt__WhiteBalanceMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalanceMode_(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalanceMode_ * soap_new_req_tt__WhiteBalanceMode_(struct soap *soap, enum tt__WhiteBalanceMode __item) { tt__WhiteBalanceMode_ *_p = soap_instantiate_tt__WhiteBalanceMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceMode_::__item = __item; } return _p; }

inline tt__WhiteBalanceMode_ * soap_new_set_tt__WhiteBalanceMode_(struct soap *soap, enum tt__WhiteBalanceMode __item, char *__item1) { tt__WhiteBalanceMode_ *_p = soap_instantiate_tt__WhiteBalanceMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalanceMode_(struct soap *soap, tt__WhiteBalanceMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalanceMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Enabled_
#define SOAP_TYPE_tt__Enabled_ (910)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Enabled_(struct soap*, const char*, int, const tt__Enabled_ *, const char*);
SOAP_FMAC3 tt__Enabled_ * SOAP_FMAC4 soap_in_tt__Enabled_(struct soap*, const char*, tt__Enabled_ *, const char*);

#ifndef soap_write_tt__Enabled_
#define soap_write_tt__Enabled_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Enabled", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Enabled_ * SOAP_FMAC4 soap_get_tt__Enabled_(struct soap*, tt__Enabled_ *, const char*, const char*);

#ifndef soap_read_tt__Enabled_
#define soap_read_tt__Enabled_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Enabled_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Enabled_ * SOAP_FMAC2 soap_instantiate_tt__Enabled_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Enabled_ * soap_new_tt__Enabled_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Enabled_(soap, n, NULL, NULL, NULL); }

inline tt__Enabled_ * soap_new_req_tt__Enabled_(struct soap *soap, enum tt__Enabled __item) { tt__Enabled_ *_p = soap_instantiate_tt__Enabled_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Enabled_::__item = __item; } return _p; }

inline tt__Enabled_ * soap_new_set_tt__Enabled_(struct soap *soap, enum tt__Enabled __item, char *__item1) { tt__Enabled_ *_p = soap_instantiate_tt__Enabled_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Enabled_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Enabled_(struct soap *soap, tt__Enabled_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Enabled_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ExposureMode_
#define SOAP_TYPE_tt__ExposureMode_ (908)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureMode_(struct soap*, const char*, int, const tt__ExposureMode_ *, const char*);
SOAP_FMAC3 tt__ExposureMode_ * SOAP_FMAC4 soap_in_tt__ExposureMode_(struct soap*, const char*, tt__ExposureMode_ *, const char*);

#ifndef soap_write_tt__ExposureMode_
#define soap_write_tt__ExposureMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ExposureMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ExposureMode_ * SOAP_FMAC4 soap_get_tt__ExposureMode_(struct soap*, tt__ExposureMode_ *, const char*, const char*);

#ifndef soap_read_tt__ExposureMode_
#define soap_read_tt__ExposureMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ExposureMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ExposureMode_ * SOAP_FMAC2 soap_instantiate_tt__ExposureMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposureMode_ * soap_new_tt__ExposureMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ExposureMode_(soap, n, NULL, NULL, NULL); }

inline tt__ExposureMode_ * soap_new_req_tt__ExposureMode_(struct soap *soap, enum tt__ExposureMode __item) { tt__ExposureMode_ *_p = soap_instantiate_tt__ExposureMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposureMode_::__item = __item; } return _p; }

inline tt__ExposureMode_ * soap_new_set_tt__ExposureMode_(struct soap *soap, enum tt__ExposureMode __item, char *__item1) { tt__ExposureMode_ *_p = soap_instantiate_tt__ExposureMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposureMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ExposureMode_(struct soap *soap, tt__ExposureMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ExposureMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ExposurePriority_
#define SOAP_TYPE_tt__ExposurePriority_ (906)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposurePriority_(struct soap*, const char*, int, const tt__ExposurePriority_ *, const char*);
SOAP_FMAC3 tt__ExposurePriority_ * SOAP_FMAC4 soap_in_tt__ExposurePriority_(struct soap*, const char*, tt__ExposurePriority_ *, const char*);

#ifndef soap_write_tt__ExposurePriority_
#define soap_write_tt__ExposurePriority_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ExposurePriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ExposurePriority_ * SOAP_FMAC4 soap_get_tt__ExposurePriority_(struct soap*, tt__ExposurePriority_ *, const char*, const char*);

#ifndef soap_read_tt__ExposurePriority_
#define soap_read_tt__ExposurePriority_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ExposurePriority_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ExposurePriority_ * SOAP_FMAC2 soap_instantiate_tt__ExposurePriority_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposurePriority_ * soap_new_tt__ExposurePriority_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ExposurePriority_(soap, n, NULL, NULL, NULL); }

inline tt__ExposurePriority_ * soap_new_req_tt__ExposurePriority_(struct soap *soap, enum tt__ExposurePriority __item) { tt__ExposurePriority_ *_p = soap_instantiate_tt__ExposurePriority_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposurePriority_::__item = __item; } return _p; }

inline tt__ExposurePriority_ * soap_new_set_tt__ExposurePriority_(struct soap *soap, enum tt__ExposurePriority __item, char *__item1) { tt__ExposurePriority_ *_p = soap_instantiate_tt__ExposurePriority_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposurePriority_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ExposurePriority_(struct soap *soap, tt__ExposurePriority_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ExposurePriority_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BacklightCompensationMode_
#define SOAP_TYPE_tt__BacklightCompensationMode_ (904)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationMode_(struct soap*, const char*, int, const tt__BacklightCompensationMode_ *, const char*);
SOAP_FMAC3 tt__BacklightCompensationMode_ * SOAP_FMAC4 soap_in_tt__BacklightCompensationMode_(struct soap*, const char*, tt__BacklightCompensationMode_ *, const char*);

#ifndef soap_write_tt__BacklightCompensationMode_
#define soap_write_tt__BacklightCompensationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BacklightCompensationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensationMode_ * SOAP_FMAC4 soap_get_tt__BacklightCompensationMode_(struct soap*, tt__BacklightCompensationMode_ *, const char*, const char*);

#ifndef soap_read_tt__BacklightCompensationMode_
#define soap_read_tt__BacklightCompensationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BacklightCompensationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BacklightCompensationMode_ * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensationMode_ * soap_new_tt__BacklightCompensationMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__BacklightCompensationMode_(soap, n, NULL, NULL, NULL); }

inline tt__BacklightCompensationMode_ * soap_new_req_tt__BacklightCompensationMode_(struct soap *soap, enum tt__BacklightCompensationMode __item) { tt__BacklightCompensationMode_ *_p = soap_instantiate_tt__BacklightCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensationMode_::__item = __item; } return _p; }

inline tt__BacklightCompensationMode_ * soap_new_set_tt__BacklightCompensationMode_(struct soap *soap, enum tt__BacklightCompensationMode __item, char *__item1) { tt__BacklightCompensationMode_ *_p = soap_instantiate_tt__BacklightCompensationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BacklightCompensationMode_(struct soap *soap, tt__BacklightCompensationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BacklightCompensationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WideDynamicMode_
#define SOAP_TYPE_tt__WideDynamicMode_ (902)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicMode_(struct soap*, const char*, int, const tt__WideDynamicMode_ *, const char*);
SOAP_FMAC3 tt__WideDynamicMode_ * SOAP_FMAC4 soap_in_tt__WideDynamicMode_(struct soap*, const char*, tt__WideDynamicMode_ *, const char*);

#ifndef soap_write_tt__WideDynamicMode_
#define soap_write_tt__WideDynamicMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WideDynamicMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicMode_ * SOAP_FMAC4 soap_get_tt__WideDynamicMode_(struct soap*, tt__WideDynamicMode_ *, const char*, const char*);

#ifndef soap_read_tt__WideDynamicMode_
#define soap_read_tt__WideDynamicMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WideDynamicMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WideDynamicMode_ * SOAP_FMAC2 soap_instantiate_tt__WideDynamicMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicMode_ * soap_new_tt__WideDynamicMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__WideDynamicMode_(soap, n, NULL, NULL, NULL); }

inline tt__WideDynamicMode_ * soap_new_req_tt__WideDynamicMode_(struct soap *soap, enum tt__WideDynamicMode __item) { tt__WideDynamicMode_ *_p = soap_instantiate_tt__WideDynamicMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicMode_::__item = __item; } return _p; }

inline tt__WideDynamicMode_ * soap_new_set_tt__WideDynamicMode_(struct soap *soap, enum tt__WideDynamicMode __item, char *__item1) { tt__WideDynamicMode_ *_p = soap_instantiate_tt__WideDynamicMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WideDynamicMode_(struct soap *soap, tt__WideDynamicMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WideDynamicMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AFModes_
#define SOAP_TYPE_tt__AFModes_ (900)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AFModes_(struct soap*, const char*, int, const tt__AFModes_ *, const char*);
SOAP_FMAC3 tt__AFModes_ * SOAP_FMAC4 soap_in_tt__AFModes_(struct soap*, const char*, tt__AFModes_ *, const char*);

#ifndef soap_write_tt__AFModes_
#define soap_write_tt__AFModes_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AFModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AFModes_ * SOAP_FMAC4 soap_get_tt__AFModes_(struct soap*, tt__AFModes_ *, const char*, const char*);

#ifndef soap_read_tt__AFModes_
#define soap_read_tt__AFModes_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AFModes_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AFModes_ * SOAP_FMAC2 soap_instantiate_tt__AFModes_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AFModes_ * soap_new_tt__AFModes_(struct soap *soap, int n = -1) { return soap_instantiate_tt__AFModes_(soap, n, NULL, NULL, NULL); }

inline tt__AFModes_ * soap_new_req_tt__AFModes_(struct soap *soap, enum tt__AFModes __item) { tt__AFModes_ *_p = soap_instantiate_tt__AFModes_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AFModes_::__item = __item; } return _p; }

inline tt__AFModes_ * soap_new_set_tt__AFModes_(struct soap *soap, enum tt__AFModes __item, char *__item1) { tt__AFModes_ *_p = soap_instantiate_tt__AFModes_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AFModes_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AFModes_(struct soap *soap, tt__AFModes_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AFModes_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AutoFocusMode_
#define SOAP_TYPE_tt__AutoFocusMode_ (898)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AutoFocusMode_(struct soap*, const char*, int, const tt__AutoFocusMode_ *, const char*);
SOAP_FMAC3 tt__AutoFocusMode_ * SOAP_FMAC4 soap_in_tt__AutoFocusMode_(struct soap*, const char*, tt__AutoFocusMode_ *, const char*);

#ifndef soap_write_tt__AutoFocusMode_
#define soap_write_tt__AutoFocusMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AutoFocusMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AutoFocusMode_ * SOAP_FMAC4 soap_get_tt__AutoFocusMode_(struct soap*, tt__AutoFocusMode_ *, const char*, const char*);

#ifndef soap_read_tt__AutoFocusMode_
#define soap_read_tt__AutoFocusMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AutoFocusMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AutoFocusMode_ * SOAP_FMAC2 soap_instantiate_tt__AutoFocusMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AutoFocusMode_ * soap_new_tt__AutoFocusMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__AutoFocusMode_(soap, n, NULL, NULL, NULL); }

inline tt__AutoFocusMode_ * soap_new_req_tt__AutoFocusMode_(struct soap *soap, enum tt__AutoFocusMode __item) { tt__AutoFocusMode_ *_p = soap_instantiate_tt__AutoFocusMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AutoFocusMode_::__item = __item; } return _p; }

inline tt__AutoFocusMode_ * soap_new_set_tt__AutoFocusMode_(struct soap *soap, enum tt__AutoFocusMode __item, char *__item1) { tt__AutoFocusMode_ *_p = soap_instantiate_tt__AutoFocusMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AutoFocusMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AutoFocusMode_(struct soap *soap, tt__AutoFocusMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AutoFocusMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation_
#define SOAP_TYPE_tt__PTZPresetTourOperation_ (896)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOperation_(struct soap*, const char*, int, const tt__PTZPresetTourOperation_ *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOperation_ * SOAP_FMAC4 soap_in_tt__PTZPresetTourOperation_(struct soap*, const char*, tt__PTZPresetTourOperation_ *, const char*);

#ifndef soap_write_tt__PTZPresetTourOperation_
#define soap_write_tt__PTZPresetTourOperation_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourOperation_ * SOAP_FMAC4 soap_get_tt__PTZPresetTourOperation_(struct soap*, tt__PTZPresetTourOperation_ *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourOperation_
#define soap_read_tt__PTZPresetTourOperation_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourOperation_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourOperation_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOperation_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOperation_ * soap_new_tt__PTZPresetTourOperation_(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourOperation_(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourOperation_ * soap_new_req_tt__PTZPresetTourOperation_(struct soap *soap, enum tt__PTZPresetTourOperation __item) { tt__PTZPresetTourOperation_ *_p = soap_instantiate_tt__PTZPresetTourOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourOperation_::__item = __item; } return _p; }

inline tt__PTZPresetTourOperation_ * soap_new_set_tt__PTZPresetTourOperation_(struct soap *soap, enum tt__PTZPresetTourOperation __item, char *__item1) { tt__PTZPresetTourOperation_ *_p = soap_instantiate_tt__PTZPresetTourOperation_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourOperation_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourOperation_(struct soap *soap, tt__PTZPresetTourOperation_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourOperation_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection_
#define SOAP_TYPE_tt__PTZPresetTourDirection_ (894)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourDirection_(struct soap*, const char*, int, const tt__PTZPresetTourDirection_ *, const char*);
SOAP_FMAC3 tt__PTZPresetTourDirection_ * SOAP_FMAC4 soap_in_tt__PTZPresetTourDirection_(struct soap*, const char*, tt__PTZPresetTourDirection_ *, const char*);

#ifndef soap_write_tt__PTZPresetTourDirection_
#define soap_write_tt__PTZPresetTourDirection_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourDirection_ * SOAP_FMAC4 soap_get_tt__PTZPresetTourDirection_(struct soap*, tt__PTZPresetTourDirection_ *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourDirection_
#define soap_read_tt__PTZPresetTourDirection_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourDirection_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourDirection_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourDirection_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourDirection_ * soap_new_tt__PTZPresetTourDirection_(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourDirection_(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourDirection_ * soap_new_req_tt__PTZPresetTourDirection_(struct soap *soap, enum tt__PTZPresetTourDirection __item) { tt__PTZPresetTourDirection_ *_p = soap_instantiate_tt__PTZPresetTourDirection_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourDirection_::__item = __item; } return _p; }

inline tt__PTZPresetTourDirection_ * soap_new_set_tt__PTZPresetTourDirection_(struct soap *soap, enum tt__PTZPresetTourDirection __item, char *__item1) { tt__PTZPresetTourDirection_ *_p = soap_instantiate_tt__PTZPresetTourDirection_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourDirection_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourDirection_(struct soap *soap, tt__PTZPresetTourDirection_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourDirection_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourState_
#define SOAP_TYPE_tt__PTZPresetTourState_ (892)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourState_(struct soap*, const char*, int, const tt__PTZPresetTourState_ *, const char*);
SOAP_FMAC3 tt__PTZPresetTourState_ * SOAP_FMAC4 soap_in_tt__PTZPresetTourState_(struct soap*, const char*, tt__PTZPresetTourState_ *, const char*);

#ifndef soap_write_tt__PTZPresetTourState_
#define soap_write_tt__PTZPresetTourState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourState_ * SOAP_FMAC4 soap_get_tt__PTZPresetTourState_(struct soap*, tt__PTZPresetTourState_ *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourState_
#define soap_read_tt__PTZPresetTourState_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourState_ * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourState_ * soap_new_tt__PTZPresetTourState_(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourState_(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourState_ * soap_new_req_tt__PTZPresetTourState_(struct soap *soap, enum tt__PTZPresetTourState __item) { tt__PTZPresetTourState_ *_p = soap_instantiate_tt__PTZPresetTourState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourState_::__item = __item; } return _p; }

inline tt__PTZPresetTourState_ * soap_new_set_tt__PTZPresetTourState_(struct soap *soap, enum tt__PTZPresetTourState __item, char *__item1) { tt__PTZPresetTourState_ *_p = soap_instantiate_tt__PTZPresetTourState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourState_(struct soap *soap, tt__PTZPresetTourState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AuxiliaryData__
#define SOAP_TYPE_tt__AuxiliaryData__ (890)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData__(struct soap*, const char*, int, const tt__AuxiliaryData__ *, const char*);
SOAP_FMAC3 tt__AuxiliaryData__ * SOAP_FMAC4 soap_in_tt__AuxiliaryData__(struct soap*, const char*, tt__AuxiliaryData__ *, const char*);

#ifndef soap_write_tt__AuxiliaryData__
#define soap_write_tt__AuxiliaryData__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AuxiliaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AuxiliaryData__ * SOAP_FMAC4 soap_get_tt__AuxiliaryData__(struct soap*, tt__AuxiliaryData__ *, const char*, const char*);

#ifndef soap_read_tt__AuxiliaryData__
#define soap_read_tt__AuxiliaryData__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AuxiliaryData__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AuxiliaryData__ * SOAP_FMAC2 soap_instantiate_tt__AuxiliaryData__(struct soap*, int, const char*, const char*, size_t*);

inline tt__AuxiliaryData__ * soap_new_tt__AuxiliaryData__(struct soap *soap, int n = -1) { return soap_instantiate_tt__AuxiliaryData__(soap, n, NULL, NULL, NULL); }

inline tt__AuxiliaryData__ * soap_new_req_tt__AuxiliaryData__(struct soap *soap, std::string& __item) { tt__AuxiliaryData__ *_p = soap_instantiate_tt__AuxiliaryData__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AuxiliaryData__::__item = __item; } return _p; }

inline tt__AuxiliaryData__ * soap_new_set_tt__AuxiliaryData__(struct soap *soap, std::string& __item, char *__item1) { tt__AuxiliaryData__ *_p = soap_instantiate_tt__AuxiliaryData__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AuxiliaryData__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AuxiliaryData__(struct soap *soap, tt__AuxiliaryData__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AuxiliaryData__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (889)
#endif

#define soap_default_tt__AuxiliaryData(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__AuxiliaryData(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AuxiliaryData(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__AuxiliaryData(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__AuxiliaryData(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__AuxiliaryData
#define soap_write_tt__AuxiliaryData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__AuxiliaryData(soap, data), 0) || soap_put_tt__AuxiliaryData(soap, data, "tt:AuxiliaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__AuxiliaryData(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__AuxiliaryData
#define soap_read_tt__AuxiliaryData(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AuxiliaryData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__AuxiliaryData soap_instantiate_std__string


#define soap_copy_tt__AuxiliaryData soap_copy_std__string

#ifndef SOAP_TYPE_tt__ReverseMode_
#define SOAP_TYPE_tt__ReverseMode_ (888)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseMode_(struct soap*, const char*, int, const tt__ReverseMode_ *, const char*);
SOAP_FMAC3 tt__ReverseMode_ * SOAP_FMAC4 soap_in_tt__ReverseMode_(struct soap*, const char*, tt__ReverseMode_ *, const char*);

#ifndef soap_write_tt__ReverseMode_
#define soap_write_tt__ReverseMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReverseMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReverseMode_ * SOAP_FMAC4 soap_get_tt__ReverseMode_(struct soap*, tt__ReverseMode_ *, const char*, const char*);

#ifndef soap_read_tt__ReverseMode_
#define soap_read_tt__ReverseMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReverseMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReverseMode_ * SOAP_FMAC2 soap_instantiate_tt__ReverseMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseMode_ * soap_new_tt__ReverseMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReverseMode_(soap, n, NULL, NULL, NULL); }

inline tt__ReverseMode_ * soap_new_req_tt__ReverseMode_(struct soap *soap, enum tt__ReverseMode __item) { tt__ReverseMode_ *_p = soap_instantiate_tt__ReverseMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReverseMode_::__item = __item; } return _p; }

inline tt__ReverseMode_ * soap_new_set_tt__ReverseMode_(struct soap *soap, enum tt__ReverseMode __item, char *__item1) { tt__ReverseMode_ *_p = soap_instantiate_tt__ReverseMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReverseMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReverseMode_(struct soap *soap, tt__ReverseMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReverseMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EFlipMode_
#define SOAP_TYPE_tt__EFlipMode_ (886)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipMode_(struct soap*, const char*, int, const tt__EFlipMode_ *, const char*);
SOAP_FMAC3 tt__EFlipMode_ * SOAP_FMAC4 soap_in_tt__EFlipMode_(struct soap*, const char*, tt__EFlipMode_ *, const char*);

#ifndef soap_write_tt__EFlipMode_
#define soap_write_tt__EFlipMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EFlipMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlipMode_ * SOAP_FMAC4 soap_get_tt__EFlipMode_(struct soap*, tt__EFlipMode_ *, const char*, const char*);

#ifndef soap_read_tt__EFlipMode_
#define soap_read_tt__EFlipMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EFlipMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EFlipMode_ * SOAP_FMAC2 soap_instantiate_tt__EFlipMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipMode_ * soap_new_tt__EFlipMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__EFlipMode_(soap, n, NULL, NULL, NULL); }

inline tt__EFlipMode_ * soap_new_req_tt__EFlipMode_(struct soap *soap, enum tt__EFlipMode __item) { tt__EFlipMode_ *_p = soap_instantiate_tt__EFlipMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EFlipMode_::__item = __item; } return _p; }

inline tt__EFlipMode_ * soap_new_set_tt__EFlipMode_(struct soap *soap, enum tt__EFlipMode __item, char *__item1) { tt__EFlipMode_ *_p = soap_instantiate_tt__EFlipMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EFlipMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EFlipMode_(struct soap *soap, tt__EFlipMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EFlipMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DigitalIdleState_
#define SOAP_TYPE_tt__DigitalIdleState_ (884)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalIdleState_(struct soap*, const char*, int, const tt__DigitalIdleState_ *, const char*);
SOAP_FMAC3 tt__DigitalIdleState_ * SOAP_FMAC4 soap_in_tt__DigitalIdleState_(struct soap*, const char*, tt__DigitalIdleState_ *, const char*);

#ifndef soap_write_tt__DigitalIdleState_
#define soap_write_tt__DigitalIdleState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DigitalIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DigitalIdleState_ * SOAP_FMAC4 soap_get_tt__DigitalIdleState_(struct soap*, tt__DigitalIdleState_ *, const char*, const char*);

#ifndef soap_read_tt__DigitalIdleState_
#define soap_read_tt__DigitalIdleState_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DigitalIdleState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DigitalIdleState_ * SOAP_FMAC2 soap_instantiate_tt__DigitalIdleState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DigitalIdleState_ * soap_new_tt__DigitalIdleState_(struct soap *soap, int n = -1) { return soap_instantiate_tt__DigitalIdleState_(soap, n, NULL, NULL, NULL); }

inline tt__DigitalIdleState_ * soap_new_req_tt__DigitalIdleState_(struct soap *soap, enum tt__DigitalIdleState __item) { tt__DigitalIdleState_ *_p = soap_instantiate_tt__DigitalIdleState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DigitalIdleState_::__item = __item; } return _p; }

inline tt__DigitalIdleState_ * soap_new_set_tt__DigitalIdleState_(struct soap *soap, enum tt__DigitalIdleState __item, char *__item1) { tt__DigitalIdleState_ *_p = soap_instantiate_tt__DigitalIdleState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DigitalIdleState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DigitalIdleState_(struct soap *soap, tt__DigitalIdleState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DigitalIdleState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelayMode_
#define SOAP_TYPE_tt__RelayMode_ (882)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayMode_(struct soap*, const char*, int, const tt__RelayMode_ *, const char*);
SOAP_FMAC3 tt__RelayMode_ * SOAP_FMAC4 soap_in_tt__RelayMode_(struct soap*, const char*, tt__RelayMode_ *, const char*);

#ifndef soap_write_tt__RelayMode_
#define soap_write_tt__RelayMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelayMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelayMode_ * SOAP_FMAC4 soap_get_tt__RelayMode_(struct soap*, tt__RelayMode_ *, const char*, const char*);

#ifndef soap_read_tt__RelayMode_
#define soap_read_tt__RelayMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelayMode_ * SOAP_FMAC2 soap_instantiate_tt__RelayMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayMode_ * soap_new_tt__RelayMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelayMode_(soap, n, NULL, NULL, NULL); }

inline tt__RelayMode_ * soap_new_req_tt__RelayMode_(struct soap *soap, enum tt__RelayMode __item) { tt__RelayMode_ *_p = soap_instantiate_tt__RelayMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayMode_::__item = __item; } return _p; }

inline tt__RelayMode_ * soap_new_set_tt__RelayMode_(struct soap *soap, enum tt__RelayMode __item, char *__item1) { tt__RelayMode_ *_p = soap_instantiate_tt__RelayMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelayMode_(struct soap *soap, tt__RelayMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelayMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelayIdleState_
#define SOAP_TYPE_tt__RelayIdleState_ (880)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayIdleState_(struct soap*, const char*, int, const tt__RelayIdleState_ *, const char*);
SOAP_FMAC3 tt__RelayIdleState_ * SOAP_FMAC4 soap_in_tt__RelayIdleState_(struct soap*, const char*, tt__RelayIdleState_ *, const char*);

#ifndef soap_write_tt__RelayIdleState_
#define soap_write_tt__RelayIdleState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelayIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelayIdleState_ * SOAP_FMAC4 soap_get_tt__RelayIdleState_(struct soap*, tt__RelayIdleState_ *, const char*, const char*);

#ifndef soap_read_tt__RelayIdleState_
#define soap_read_tt__RelayIdleState_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayIdleState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelayIdleState_ * SOAP_FMAC2 soap_instantiate_tt__RelayIdleState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayIdleState_ * soap_new_tt__RelayIdleState_(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelayIdleState_(soap, n, NULL, NULL, NULL); }

inline tt__RelayIdleState_ * soap_new_req_tt__RelayIdleState_(struct soap *soap, enum tt__RelayIdleState __item) { tt__RelayIdleState_ *_p = soap_instantiate_tt__RelayIdleState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayIdleState_::__item = __item; } return _p; }

inline tt__RelayIdleState_ * soap_new_set_tt__RelayIdleState_(struct soap *soap, enum tt__RelayIdleState __item, char *__item1) { tt__RelayIdleState_ *_p = soap_instantiate_tt__RelayIdleState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayIdleState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelayIdleState_(struct soap *soap, tt__RelayIdleState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelayIdleState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelayLogicalState_
#define SOAP_TYPE_tt__RelayLogicalState_ (878)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayLogicalState_(struct soap*, const char*, int, const tt__RelayLogicalState_ *, const char*);
SOAP_FMAC3 tt__RelayLogicalState_ * SOAP_FMAC4 soap_in_tt__RelayLogicalState_(struct soap*, const char*, tt__RelayLogicalState_ *, const char*);

#ifndef soap_write_tt__RelayLogicalState_
#define soap_write_tt__RelayLogicalState_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelayLogicalState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelayLogicalState_ * SOAP_FMAC4 soap_get_tt__RelayLogicalState_(struct soap*, tt__RelayLogicalState_ *, const char*, const char*);

#ifndef soap_read_tt__RelayLogicalState_
#define soap_read_tt__RelayLogicalState_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayLogicalState_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelayLogicalState_ * SOAP_FMAC2 soap_instantiate_tt__RelayLogicalState_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayLogicalState_ * soap_new_tt__RelayLogicalState_(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelayLogicalState_(soap, n, NULL, NULL, NULL); }

inline tt__RelayLogicalState_ * soap_new_req_tt__RelayLogicalState_(struct soap *soap, enum tt__RelayLogicalState __item) { tt__RelayLogicalState_ *_p = soap_instantiate_tt__RelayLogicalState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayLogicalState_::__item = __item; } return _p; }

inline tt__RelayLogicalState_ * soap_new_set_tt__RelayLogicalState_(struct soap *soap, enum tt__RelayLogicalState __item, char *__item1) { tt__RelayLogicalState_ *_p = soap_instantiate_tt__RelayLogicalState_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayLogicalState_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelayLogicalState_(struct soap *soap, tt__RelayLogicalState_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelayLogicalState_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__UserLevel_
#define SOAP_TYPE_tt__UserLevel_ (876)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserLevel_(struct soap*, const char*, int, const tt__UserLevel_ *, const char*);
SOAP_FMAC3 tt__UserLevel_ * SOAP_FMAC4 soap_in_tt__UserLevel_(struct soap*, const char*, tt__UserLevel_ *, const char*);

#ifndef soap_write_tt__UserLevel_
#define soap_write_tt__UserLevel_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:UserLevel", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__UserLevel_ * SOAP_FMAC4 soap_get_tt__UserLevel_(struct soap*, tt__UserLevel_ *, const char*, const char*);

#ifndef soap_read_tt__UserLevel_
#define soap_read_tt__UserLevel_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__UserLevel_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__UserLevel_ * SOAP_FMAC2 soap_instantiate_tt__UserLevel_(struct soap*, int, const char*, const char*, size_t*);

inline tt__UserLevel_ * soap_new_tt__UserLevel_(struct soap *soap, int n = -1) { return soap_instantiate_tt__UserLevel_(soap, n, NULL, NULL, NULL); }

inline tt__UserLevel_ * soap_new_req_tt__UserLevel_(struct soap *soap, enum tt__UserLevel __item) { tt__UserLevel_ *_p = soap_instantiate_tt__UserLevel_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__UserLevel_::__item = __item; } return _p; }

inline tt__UserLevel_ * soap_new_set_tt__UserLevel_(struct soap *soap, enum tt__UserLevel __item, char *__item1) { tt__UserLevel_ *_p = soap_instantiate_tt__UserLevel_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__UserLevel_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__UserLevel_(struct soap *soap, tt__UserLevel_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__UserLevel_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SetDateTimeType_
#define SOAP_TYPE_tt__SetDateTimeType_ (874)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SetDateTimeType_(struct soap*, const char*, int, const tt__SetDateTimeType_ *, const char*);
SOAP_FMAC3 tt__SetDateTimeType_ * SOAP_FMAC4 soap_in_tt__SetDateTimeType_(struct soap*, const char*, tt__SetDateTimeType_ *, const char*);

#ifndef soap_write_tt__SetDateTimeType_
#define soap_write_tt__SetDateTimeType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SetDateTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SetDateTimeType_ * SOAP_FMAC4 soap_get_tt__SetDateTimeType_(struct soap*, tt__SetDateTimeType_ *, const char*, const char*);

#ifndef soap_read_tt__SetDateTimeType_
#define soap_read_tt__SetDateTimeType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SetDateTimeType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SetDateTimeType_ * SOAP_FMAC2 soap_instantiate_tt__SetDateTimeType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SetDateTimeType_ * soap_new_tt__SetDateTimeType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__SetDateTimeType_(soap, n, NULL, NULL, NULL); }

inline tt__SetDateTimeType_ * soap_new_req_tt__SetDateTimeType_(struct soap *soap, enum tt__SetDateTimeType __item) { tt__SetDateTimeType_ *_p = soap_instantiate_tt__SetDateTimeType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SetDateTimeType_::__item = __item; } return _p; }

inline tt__SetDateTimeType_ * soap_new_set_tt__SetDateTimeType_(struct soap *soap, enum tt__SetDateTimeType __item, char *__item1) { tt__SetDateTimeType_ *_p = soap_instantiate_tt__SetDateTimeType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SetDateTimeType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SetDateTimeType_(struct soap *soap, tt__SetDateTimeType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SetDateTimeType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FactoryDefaultType_
#define SOAP_TYPE_tt__FactoryDefaultType_ (872)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FactoryDefaultType_(struct soap*, const char*, int, const tt__FactoryDefaultType_ *, const char*);
SOAP_FMAC3 tt__FactoryDefaultType_ * SOAP_FMAC4 soap_in_tt__FactoryDefaultType_(struct soap*, const char*, tt__FactoryDefaultType_ *, const char*);

#ifndef soap_write_tt__FactoryDefaultType_
#define soap_write_tt__FactoryDefaultType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FactoryDefaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FactoryDefaultType_ * SOAP_FMAC4 soap_get_tt__FactoryDefaultType_(struct soap*, tt__FactoryDefaultType_ *, const char*, const char*);

#ifndef soap_read_tt__FactoryDefaultType_
#define soap_read_tt__FactoryDefaultType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FactoryDefaultType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FactoryDefaultType_ * SOAP_FMAC2 soap_instantiate_tt__FactoryDefaultType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__FactoryDefaultType_ * soap_new_tt__FactoryDefaultType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__FactoryDefaultType_(soap, n, NULL, NULL, NULL); }

inline tt__FactoryDefaultType_ * soap_new_req_tt__FactoryDefaultType_(struct soap *soap, enum tt__FactoryDefaultType __item) { tt__FactoryDefaultType_ *_p = soap_instantiate_tt__FactoryDefaultType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FactoryDefaultType_::__item = __item; } return _p; }

inline tt__FactoryDefaultType_ * soap_new_set_tt__FactoryDefaultType_(struct soap *soap, enum tt__FactoryDefaultType __item, char *__item1) { tt__FactoryDefaultType_ *_p = soap_instantiate_tt__FactoryDefaultType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FactoryDefaultType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FactoryDefaultType_(struct soap *soap, tt__FactoryDefaultType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FactoryDefaultType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemLogType_
#define SOAP_TYPE_tt__SystemLogType_ (870)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogType_(struct soap*, const char*, int, const tt__SystemLogType_ *, const char*);
SOAP_FMAC3 tt__SystemLogType_ * SOAP_FMAC4 soap_in_tt__SystemLogType_(struct soap*, const char*, tt__SystemLogType_ *, const char*);

#ifndef soap_write_tt__SystemLogType_
#define soap_write_tt__SystemLogType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemLogType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemLogType_ * SOAP_FMAC4 soap_get_tt__SystemLogType_(struct soap*, tt__SystemLogType_ *, const char*, const char*);

#ifndef soap_read_tt__SystemLogType_
#define soap_read_tt__SystemLogType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemLogType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemLogType_ * SOAP_FMAC2 soap_instantiate_tt__SystemLogType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogType_ * soap_new_tt__SystemLogType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemLogType_(soap, n, NULL, NULL, NULL); }

inline tt__SystemLogType_ * soap_new_req_tt__SystemLogType_(struct soap *soap, enum tt__SystemLogType __item) { tt__SystemLogType_ *_p = soap_instantiate_tt__SystemLogType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemLogType_::__item = __item; } return _p; }

inline tt__SystemLogType_ * soap_new_set_tt__SystemLogType_(struct soap *soap, enum tt__SystemLogType __item, char *__item1) { tt__SystemLogType_ *_p = soap_instantiate_tt__SystemLogType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemLogType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemLogType_(struct soap *soap, tt__SystemLogType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemLogType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CapabilityCategory_
#define SOAP_TYPE_tt__CapabilityCategory_ (868)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilityCategory_(struct soap*, const char*, int, const tt__CapabilityCategory_ *, const char*);
SOAP_FMAC3 tt__CapabilityCategory_ * SOAP_FMAC4 soap_in_tt__CapabilityCategory_(struct soap*, const char*, tt__CapabilityCategory_ *, const char*);

#ifndef soap_write_tt__CapabilityCategory_
#define soap_write_tt__CapabilityCategory_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CapabilityCategory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CapabilityCategory_ * SOAP_FMAC4 soap_get_tt__CapabilityCategory_(struct soap*, tt__CapabilityCategory_ *, const char*, const char*);

#ifndef soap_read_tt__CapabilityCategory_
#define soap_read_tt__CapabilityCategory_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CapabilityCategory_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CapabilityCategory_ * SOAP_FMAC2 soap_instantiate_tt__CapabilityCategory_(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilityCategory_ * soap_new_tt__CapabilityCategory_(struct soap *soap, int n = -1) { return soap_instantiate_tt__CapabilityCategory_(soap, n, NULL, NULL, NULL); }

inline tt__CapabilityCategory_ * soap_new_req_tt__CapabilityCategory_(struct soap *soap, enum tt__CapabilityCategory __item) { tt__CapabilityCategory_ *_p = soap_instantiate_tt__CapabilityCategory_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CapabilityCategory_::__item = __item; } return _p; }

inline tt__CapabilityCategory_ * soap_new_set_tt__CapabilityCategory_(struct soap *soap, enum tt__CapabilityCategory __item, char *__item1) { tt__CapabilityCategory_ *_p = soap_instantiate_tt__CapabilityCategory_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CapabilityCategory_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CapabilityCategory_(struct soap *soap, tt__CapabilityCategory_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CapabilityCategory_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite_
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite_ (866)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AuthAndMangementSuite_(struct soap*, const char*, int, const tt__Dot11AuthAndMangementSuite_ *, const char*);
SOAP_FMAC3 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC4 soap_in_tt__Dot11AuthAndMangementSuite_(struct soap*, const char*, tt__Dot11AuthAndMangementSuite_ *, const char*);

#ifndef soap_write_tt__Dot11AuthAndMangementSuite_
#define soap_write_tt__Dot11AuthAndMangementSuite_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11AuthAndMangementSuite", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC4 soap_get_tt__Dot11AuthAndMangementSuite_(struct soap*, tt__Dot11AuthAndMangementSuite_ *, const char*, const char*);

#ifndef soap_read_tt__Dot11AuthAndMangementSuite_
#define soap_read_tt__Dot11AuthAndMangementSuite_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11AuthAndMangementSuite_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11AuthAndMangementSuite_ * SOAP_FMAC2 soap_instantiate_tt__Dot11AuthAndMangementSuite_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AuthAndMangementSuite_ * soap_new_tt__Dot11AuthAndMangementSuite_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11AuthAndMangementSuite_(soap, n, NULL, NULL, NULL); }

inline tt__Dot11AuthAndMangementSuite_ * soap_new_req_tt__Dot11AuthAndMangementSuite_(struct soap *soap, enum tt__Dot11AuthAndMangementSuite __item) { tt__Dot11AuthAndMangementSuite_ *_p = soap_instantiate_tt__Dot11AuthAndMangementSuite_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11AuthAndMangementSuite_::__item = __item; } return _p; }

inline tt__Dot11AuthAndMangementSuite_ * soap_new_set_tt__Dot11AuthAndMangementSuite_(struct soap *soap, enum tt__Dot11AuthAndMangementSuite __item, char *__item1) { tt__Dot11AuthAndMangementSuite_ *_p = soap_instantiate_tt__Dot11AuthAndMangementSuite_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11AuthAndMangementSuite_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11AuthAndMangementSuite_(struct soap *soap, tt__Dot11AuthAndMangementSuite_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11AuthAndMangementSuite_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11SignalStrength_
#define SOAP_TYPE_tt__Dot11SignalStrength_ (864)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SignalStrength_(struct soap*, const char*, int, const tt__Dot11SignalStrength_ *, const char*);
SOAP_FMAC3 tt__Dot11SignalStrength_ * SOAP_FMAC4 soap_in_tt__Dot11SignalStrength_(struct soap*, const char*, tt__Dot11SignalStrength_ *, const char*);

#ifndef soap_write_tt__Dot11SignalStrength_
#define soap_write_tt__Dot11SignalStrength_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11SignalStrength", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SignalStrength_ * SOAP_FMAC4 soap_get_tt__Dot11SignalStrength_(struct soap*, tt__Dot11SignalStrength_ *, const char*, const char*);

#ifndef soap_read_tt__Dot11SignalStrength_
#define soap_read_tt__Dot11SignalStrength_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SignalStrength_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11SignalStrength_ * SOAP_FMAC2 soap_instantiate_tt__Dot11SignalStrength_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SignalStrength_ * soap_new_tt__Dot11SignalStrength_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11SignalStrength_(soap, n, NULL, NULL, NULL); }

inline tt__Dot11SignalStrength_ * soap_new_req_tt__Dot11SignalStrength_(struct soap *soap, enum tt__Dot11SignalStrength __item) { tt__Dot11SignalStrength_ *_p = soap_instantiate_tt__Dot11SignalStrength_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SignalStrength_::__item = __item; } return _p; }

inline tt__Dot11SignalStrength_ * soap_new_set_tt__Dot11SignalStrength_(struct soap *soap, enum tt__Dot11SignalStrength __item, char *__item1) { tt__Dot11SignalStrength_ *_p = soap_instantiate_tt__Dot11SignalStrength_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SignalStrength_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11SignalStrength_(struct soap *soap, tt__Dot11SignalStrength_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11SignalStrength_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase__
#define SOAP_TYPE_tt__Dot11PSKPassphrase__ (862)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKPassphrase__(struct soap*, const char*, int, const tt__Dot11PSKPassphrase__ *, const char*);
SOAP_FMAC3 tt__Dot11PSKPassphrase__ * SOAP_FMAC4 soap_in_tt__Dot11PSKPassphrase__(struct soap*, const char*, tt__Dot11PSKPassphrase__ *, const char*);

#ifndef soap_write_tt__Dot11PSKPassphrase__
#define soap_write_tt__Dot11PSKPassphrase__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11PSKPassphrase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11PSKPassphrase__ * SOAP_FMAC4 soap_get_tt__Dot11PSKPassphrase__(struct soap*, tt__Dot11PSKPassphrase__ *, const char*, const char*);

#ifndef soap_read_tt__Dot11PSKPassphrase__
#define soap_read_tt__Dot11PSKPassphrase__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11PSKPassphrase__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11PSKPassphrase__ * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKPassphrase__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKPassphrase__ * soap_new_tt__Dot11PSKPassphrase__(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11PSKPassphrase__(soap, n, NULL, NULL, NULL); }

inline tt__Dot11PSKPassphrase__ * soap_new_req_tt__Dot11PSKPassphrase__(struct soap *soap, std::string& __item) { tt__Dot11PSKPassphrase__ *_p = soap_instantiate_tt__Dot11PSKPassphrase__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11PSKPassphrase__::__item = __item; } return _p; }

inline tt__Dot11PSKPassphrase__ * soap_new_set_tt__Dot11PSKPassphrase__(struct soap *soap, std::string& __item, char *__item1) { tt__Dot11PSKPassphrase__ *_p = soap_instantiate_tt__Dot11PSKPassphrase__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11PSKPassphrase__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11PSKPassphrase__(struct soap *soap, tt__Dot11PSKPassphrase__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11PSKPassphrase__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (861)
#endif

#define soap_default_tt__Dot11PSKPassphrase(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Dot11PSKPassphrase(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKPassphrase(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Dot11PSKPassphrase(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11PSKPassphrase(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__Dot11PSKPassphrase
#define soap_write_tt__Dot11PSKPassphrase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Dot11PSKPassphrase(soap, data), 0) || soap_put_tt__Dot11PSKPassphrase(soap, data, "tt:Dot11PSKPassphrase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Dot11PSKPassphrase(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__Dot11PSKPassphrase
#define soap_read_tt__Dot11PSKPassphrase(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11PSKPassphrase(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__Dot11PSKPassphrase soap_instantiate_std__string


#define soap_copy_tt__Dot11PSKPassphrase soap_copy_std__string

#ifndef SOAP_TYPE_tt__Dot11PSK__
#define SOAP_TYPE_tt__Dot11PSK__ (860)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSK__(struct soap*, const char*, int, const tt__Dot11PSK__ *, const char*);
SOAP_FMAC3 tt__Dot11PSK__ * SOAP_FMAC4 soap_in_tt__Dot11PSK__(struct soap*, const char*, tt__Dot11PSK__ *, const char*);

#ifndef soap_write_tt__Dot11PSK__
#define soap_write_tt__Dot11PSK__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11PSK", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11PSK__ * SOAP_FMAC4 soap_get_tt__Dot11PSK__(struct soap*, tt__Dot11PSK__ *, const char*, const char*);

#ifndef soap_read_tt__Dot11PSK__
#define soap_read_tt__Dot11PSK__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11PSK__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11PSK__ * SOAP_FMAC2 soap_instantiate_tt__Dot11PSK__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSK__ * soap_new_tt__Dot11PSK__(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11PSK__(soap, n, NULL, NULL, NULL); }

inline tt__Dot11PSK__ * soap_new_req_tt__Dot11PSK__(struct soap *soap, xsd__hexBinary& __item) { tt__Dot11PSK__ *_p = soap_instantiate_tt__Dot11PSK__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11PSK__::__item = __item; } return _p; }

inline tt__Dot11PSK__ * soap_new_set_tt__Dot11PSK__(struct soap *soap, xsd__hexBinary& __item, char *__item1) { tt__Dot11PSK__ *_p = soap_instantiate_tt__Dot11PSK__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11PSK__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11PSK__(struct soap *soap, tt__Dot11PSK__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11PSK__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (859)
#endif

#define soap_default_tt__Dot11PSK(soap, a) (a)->xsd__hexBinary::soap_default(soap)


#define soap_serialize_tt__Dot11PSK(soap, a) (a)->soap_serialize(soap)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSK(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_tt__Dot11PSK(struct soap*, const char*, xsd__hexBinary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11PSK(struct soap*, const xsd__hexBinary *, const char*, const char*);

#ifndef soap_write_tt__Dot11PSK
#define soap_write_tt__Dot11PSK(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11PSK", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_tt__Dot11PSK(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_tt__Dot11PSK
#define soap_read_tt__Dot11PSK(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11PSK(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__Dot11PSK soap_instantiate_xsd__hexBinary


#define soap_copy_tt__Dot11PSK soap_copy_xsd__hexBinary

#ifndef SOAP_TYPE_tt__Dot11Cipher_
#define SOAP_TYPE_tt__Dot11Cipher_ (858)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Cipher_(struct soap*, const char*, int, const tt__Dot11Cipher_ *, const char*);
SOAP_FMAC3 tt__Dot11Cipher_ * SOAP_FMAC4 soap_in_tt__Dot11Cipher_(struct soap*, const char*, tt__Dot11Cipher_ *, const char*);

#ifndef soap_write_tt__Dot11Cipher_
#define soap_write_tt__Dot11Cipher_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11Cipher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11Cipher_ * SOAP_FMAC4 soap_get_tt__Dot11Cipher_(struct soap*, tt__Dot11Cipher_ *, const char*, const char*);

#ifndef soap_read_tt__Dot11Cipher_
#define soap_read_tt__Dot11Cipher_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11Cipher_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11Cipher_ * SOAP_FMAC2 soap_instantiate_tt__Dot11Cipher_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Cipher_ * soap_new_tt__Dot11Cipher_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11Cipher_(soap, n, NULL, NULL, NULL); }

inline tt__Dot11Cipher_ * soap_new_req_tt__Dot11Cipher_(struct soap *soap, enum tt__Dot11Cipher __item) { tt__Dot11Cipher_ *_p = soap_instantiate_tt__Dot11Cipher_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Cipher_::__item = __item; } return _p; }

inline tt__Dot11Cipher_ * soap_new_set_tt__Dot11Cipher_(struct soap *soap, enum tt__Dot11Cipher __item, char *__item1) { tt__Dot11Cipher_ *_p = soap_instantiate_tt__Dot11Cipher_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Cipher_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11Cipher_(struct soap *soap, tt__Dot11Cipher_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11Cipher_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11SecurityMode_
#define SOAP_TYPE_tt__Dot11SecurityMode_ (856)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityMode_(struct soap*, const char*, int, const tt__Dot11SecurityMode_ *, const char*);
SOAP_FMAC3 tt__Dot11SecurityMode_ * SOAP_FMAC4 soap_in_tt__Dot11SecurityMode_(struct soap*, const char*, tt__Dot11SecurityMode_ *, const char*);

#ifndef soap_write_tt__Dot11SecurityMode_
#define soap_write_tt__Dot11SecurityMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11SecurityMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SecurityMode_ * SOAP_FMAC4 soap_get_tt__Dot11SecurityMode_(struct soap*, tt__Dot11SecurityMode_ *, const char*, const char*);

#ifndef soap_read_tt__Dot11SecurityMode_
#define soap_read_tt__Dot11SecurityMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SecurityMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11SecurityMode_ * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityMode_ * soap_new_tt__Dot11SecurityMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11SecurityMode_(soap, n, NULL, NULL, NULL); }

inline tt__Dot11SecurityMode_ * soap_new_req_tt__Dot11SecurityMode_(struct soap *soap, enum tt__Dot11SecurityMode __item) { tt__Dot11SecurityMode_ *_p = soap_instantiate_tt__Dot11SecurityMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SecurityMode_::__item = __item; } return _p; }

inline tt__Dot11SecurityMode_ * soap_new_set_tt__Dot11SecurityMode_(struct soap *soap, enum tt__Dot11SecurityMode __item, char *__item1) { tt__Dot11SecurityMode_ *_p = soap_instantiate_tt__Dot11SecurityMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SecurityMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11SecurityMode_(struct soap *soap, tt__Dot11SecurityMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11SecurityMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11StationMode_
#define SOAP_TYPE_tt__Dot11StationMode_ (854)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11StationMode_(struct soap*, const char*, int, const tt__Dot11StationMode_ *, const char*);
SOAP_FMAC3 tt__Dot11StationMode_ * SOAP_FMAC4 soap_in_tt__Dot11StationMode_(struct soap*, const char*, tt__Dot11StationMode_ *, const char*);

#ifndef soap_write_tt__Dot11StationMode_
#define soap_write_tt__Dot11StationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11StationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11StationMode_ * SOAP_FMAC4 soap_get_tt__Dot11StationMode_(struct soap*, tt__Dot11StationMode_ *, const char*, const char*);

#ifndef soap_read_tt__Dot11StationMode_
#define soap_read_tt__Dot11StationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11StationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11StationMode_ * SOAP_FMAC2 soap_instantiate_tt__Dot11StationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11StationMode_ * soap_new_tt__Dot11StationMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11StationMode_(soap, n, NULL, NULL, NULL); }

inline tt__Dot11StationMode_ * soap_new_req_tt__Dot11StationMode_(struct soap *soap, enum tt__Dot11StationMode __item) { tt__Dot11StationMode_ *_p = soap_instantiate_tt__Dot11StationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11StationMode_::__item = __item; } return _p; }

inline tt__Dot11StationMode_ * soap_new_set_tt__Dot11StationMode_(struct soap *soap, enum tt__Dot11StationMode __item, char *__item1) { tt__Dot11StationMode_ *_p = soap_instantiate_tt__Dot11StationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11StationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11StationMode_(struct soap *soap, tt__Dot11StationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11StationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11SSIDType__
#define SOAP_TYPE_tt__Dot11SSIDType__ (852)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SSIDType__(struct soap*, const char*, int, const tt__Dot11SSIDType__ *, const char*);
SOAP_FMAC3 tt__Dot11SSIDType__ * SOAP_FMAC4 soap_in_tt__Dot11SSIDType__(struct soap*, const char*, tt__Dot11SSIDType__ *, const char*);

#ifndef soap_write_tt__Dot11SSIDType__
#define soap_write_tt__Dot11SSIDType__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11SSIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SSIDType__ * SOAP_FMAC4 soap_get_tt__Dot11SSIDType__(struct soap*, tt__Dot11SSIDType__ *, const char*, const char*);

#ifndef soap_read_tt__Dot11SSIDType__
#define soap_read_tt__Dot11SSIDType__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SSIDType__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11SSIDType__ * SOAP_FMAC2 soap_instantiate_tt__Dot11SSIDType__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SSIDType__ * soap_new_tt__Dot11SSIDType__(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11SSIDType__(soap, n, NULL, NULL, NULL); }

inline tt__Dot11SSIDType__ * soap_new_req_tt__Dot11SSIDType__(struct soap *soap, xsd__hexBinary& __item) { tt__Dot11SSIDType__ *_p = soap_instantiate_tt__Dot11SSIDType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SSIDType__::__item = __item; } return _p; }

inline tt__Dot11SSIDType__ * soap_new_set_tt__Dot11SSIDType__(struct soap *soap, xsd__hexBinary& __item, char *__item1) { tt__Dot11SSIDType__ *_p = soap_instantiate_tt__Dot11SSIDType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SSIDType__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11SSIDType__(struct soap *soap, tt__Dot11SSIDType__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11SSIDType__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (851)
#endif

#define soap_default_tt__Dot11SSIDType(soap, a) (a)->xsd__hexBinary::soap_default(soap)


#define soap_serialize_tt__Dot11SSIDType(soap, a) (a)->soap_serialize(soap)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SSIDType(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_tt__Dot11SSIDType(struct soap*, const char*, xsd__hexBinary *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Dot11SSIDType(struct soap*, const xsd__hexBinary *, const char*, const char*);

#ifndef soap_write_tt__Dot11SSIDType
#define soap_write_tt__Dot11SSIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11SSIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_tt__Dot11SSIDType(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_tt__Dot11SSIDType
#define soap_read_tt__Dot11SSIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SSIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__Dot11SSIDType soap_instantiate_xsd__hexBinary


#define soap_copy_tt__Dot11SSIDType soap_copy_xsd__hexBinary

#ifndef SOAP_TYPE_tt__DynamicDNSType_
#define SOAP_TYPE_tt__DynamicDNSType_ (850)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSType_(struct soap*, const char*, int, const tt__DynamicDNSType_ *, const char*);
SOAP_FMAC3 tt__DynamicDNSType_ * SOAP_FMAC4 soap_in_tt__DynamicDNSType_(struct soap*, const char*, tt__DynamicDNSType_ *, const char*);

#ifndef soap_write_tt__DynamicDNSType_
#define soap_write_tt__DynamicDNSType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DynamicDNSType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DynamicDNSType_ * SOAP_FMAC4 soap_get_tt__DynamicDNSType_(struct soap*, tt__DynamicDNSType_ *, const char*, const char*);

#ifndef soap_read_tt__DynamicDNSType_
#define soap_read_tt__DynamicDNSType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DynamicDNSType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DynamicDNSType_ * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSType_ * soap_new_tt__DynamicDNSType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__DynamicDNSType_(soap, n, NULL, NULL, NULL); }

inline tt__DynamicDNSType_ * soap_new_req_tt__DynamicDNSType_(struct soap *soap, enum tt__DynamicDNSType __item) { tt__DynamicDNSType_ *_p = soap_instantiate_tt__DynamicDNSType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DynamicDNSType_::__item = __item; } return _p; }

inline tt__DynamicDNSType_ * soap_new_set_tt__DynamicDNSType_(struct soap *soap, enum tt__DynamicDNSType __item, char *__item1) { tt__DynamicDNSType_ *_p = soap_instantiate_tt__DynamicDNSType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DynamicDNSType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DynamicDNSType_(struct soap *soap, tt__DynamicDNSType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DynamicDNSType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPAddressFilterType_
#define SOAP_TYPE_tt__IPAddressFilterType_ (848)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterType_(struct soap*, const char*, int, const tt__IPAddressFilterType_ *, const char*);
SOAP_FMAC3 tt__IPAddressFilterType_ * SOAP_FMAC4 soap_in_tt__IPAddressFilterType_(struct soap*, const char*, tt__IPAddressFilterType_ *, const char*);

#ifndef soap_write_tt__IPAddressFilterType_
#define soap_write_tt__IPAddressFilterType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPAddressFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPAddressFilterType_ * SOAP_FMAC4 soap_get_tt__IPAddressFilterType_(struct soap*, tt__IPAddressFilterType_ *, const char*, const char*);

#ifndef soap_read_tt__IPAddressFilterType_
#define soap_read_tt__IPAddressFilterType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPAddressFilterType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPAddressFilterType_ * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilterType_ * soap_new_tt__IPAddressFilterType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPAddressFilterType_(soap, n, NULL, NULL, NULL); }

inline tt__IPAddressFilterType_ * soap_new_req_tt__IPAddressFilterType_(struct soap *soap, enum tt__IPAddressFilterType __item) { tt__IPAddressFilterType_ *_p = soap_instantiate_tt__IPAddressFilterType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddressFilterType_::__item = __item; } return _p; }

inline tt__IPAddressFilterType_ * soap_new_set_tt__IPAddressFilterType_(struct soap *soap, enum tt__IPAddressFilterType __item, char *__item1) { tt__IPAddressFilterType_ *_p = soap_instantiate_tt__IPAddressFilterType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddressFilterType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPAddressFilterType_(struct soap *soap, tt__IPAddressFilterType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPAddressFilterType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Domain__
#define SOAP_TYPE_tt__Domain__ (846)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Domain__(struct soap*, const char*, int, const tt__Domain__ *, const char*);
SOAP_FMAC3 tt__Domain__ * SOAP_FMAC4 soap_in_tt__Domain__(struct soap*, const char*, tt__Domain__ *, const char*);

#ifndef soap_write_tt__Domain__
#define soap_write_tt__Domain__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Domain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Domain__ * SOAP_FMAC4 soap_get_tt__Domain__(struct soap*, tt__Domain__ *, const char*, const char*);

#ifndef soap_read_tt__Domain__
#define soap_read_tt__Domain__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Domain__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Domain__ * SOAP_FMAC2 soap_instantiate_tt__Domain__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Domain__ * soap_new_tt__Domain__(struct soap *soap, int n = -1) { return soap_instantiate_tt__Domain__(soap, n, NULL, NULL, NULL); }

inline tt__Domain__ * soap_new_req_tt__Domain__(struct soap *soap, std::string& __item) { tt__Domain__ *_p = soap_instantiate_tt__Domain__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Domain__::__item = __item; } return _p; }

inline tt__Domain__ * soap_new_set_tt__Domain__(struct soap *soap, std::string& __item, char *__item1) { tt__Domain__ *_p = soap_instantiate_tt__Domain__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Domain__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Domain__(struct soap *soap, tt__Domain__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Domain__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (845)
#endif

#define soap_default_tt__Domain(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Domain(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Domain(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Domain(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Domain(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__Domain
#define soap_write_tt__Domain(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Domain(soap, data), 0) || soap_put_tt__Domain(soap, data, "tt:Domain", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Domain(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__Domain
#define soap_read_tt__Domain(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Domain(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__Domain soap_instantiate_std__string


#define soap_copy_tt__Domain soap_copy_std__string

#ifndef SOAP_TYPE_tt__DNSName__
#define SOAP_TYPE_tt__DNSName__ (844)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSName__(struct soap*, const char*, int, const tt__DNSName__ *, const char*);
SOAP_FMAC3 tt__DNSName__ * SOAP_FMAC4 soap_in_tt__DNSName__(struct soap*, const char*, tt__DNSName__ *, const char*);

#ifndef soap_write_tt__DNSName__
#define soap_write_tt__DNSName__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DNSName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DNSName__ * SOAP_FMAC4 soap_get_tt__DNSName__(struct soap*, tt__DNSName__ *, const char*, const char*);

#ifndef soap_read_tt__DNSName__
#define soap_read_tt__DNSName__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DNSName__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DNSName__ * SOAP_FMAC2 soap_instantiate_tt__DNSName__(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSName__ * soap_new_tt__DNSName__(struct soap *soap, int n = -1) { return soap_instantiate_tt__DNSName__(soap, n, NULL, NULL, NULL); }

inline tt__DNSName__ * soap_new_req_tt__DNSName__(struct soap *soap, std::string& __item) { tt__DNSName__ *_p = soap_instantiate_tt__DNSName__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DNSName__::__item = __item; } return _p; }

inline tt__DNSName__ * soap_new_set_tt__DNSName__(struct soap *soap, std::string& __item, char *__item1) { tt__DNSName__ *_p = soap_instantiate_tt__DNSName__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DNSName__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DNSName__(struct soap *soap, tt__DNSName__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DNSName__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (843)
#endif

#define soap_default_tt__DNSName(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__DNSName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__DNSName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__DNSName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__DNSName
#define soap_write_tt__DNSName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__DNSName(soap, data), 0) || soap_put_tt__DNSName(soap, data, "tt:DNSName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__DNSName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__DNSName
#define soap_read_tt__DNSName(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DNSName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__DNSName soap_instantiate_std__string


#define soap_copy_tt__DNSName soap_copy_std__string

#ifndef SOAP_TYPE_tt__IPType_
#define SOAP_TYPE_tt__IPType_ (842)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPType_(struct soap*, const char*, int, const tt__IPType_ *, const char*);
SOAP_FMAC3 tt__IPType_ * SOAP_FMAC4 soap_in_tt__IPType_(struct soap*, const char*, tt__IPType_ *, const char*);

#ifndef soap_write_tt__IPType_
#define soap_write_tt__IPType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPType_ * SOAP_FMAC4 soap_get_tt__IPType_(struct soap*, tt__IPType_ *, const char*, const char*);

#ifndef soap_read_tt__IPType_
#define soap_read_tt__IPType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPType_ * SOAP_FMAC2 soap_instantiate_tt__IPType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPType_ * soap_new_tt__IPType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPType_(soap, n, NULL, NULL, NULL); }

inline tt__IPType_ * soap_new_req_tt__IPType_(struct soap *soap, enum tt__IPType __item) { tt__IPType_ *_p = soap_instantiate_tt__IPType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPType_::__item = __item; } return _p; }

inline tt__IPType_ * soap_new_set_tt__IPType_(struct soap *soap, enum tt__IPType __item, char *__item1) { tt__IPType_ *_p = soap_instantiate_tt__IPType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPType_(struct soap *soap, tt__IPType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__HwAddress__
#define SOAP_TYPE_tt__HwAddress__ (840)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HwAddress__(struct soap*, const char*, int, const tt__HwAddress__ *, const char*);
SOAP_FMAC3 tt__HwAddress__ * SOAP_FMAC4 soap_in_tt__HwAddress__(struct soap*, const char*, tt__HwAddress__ *, const char*);

#ifndef soap_write_tt__HwAddress__
#define soap_write_tt__HwAddress__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:HwAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__HwAddress__ * SOAP_FMAC4 soap_get_tt__HwAddress__(struct soap*, tt__HwAddress__ *, const char*, const char*);

#ifndef soap_read_tt__HwAddress__
#define soap_read_tt__HwAddress__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__HwAddress__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__HwAddress__ * SOAP_FMAC2 soap_instantiate_tt__HwAddress__(struct soap*, int, const char*, const char*, size_t*);

inline tt__HwAddress__ * soap_new_tt__HwAddress__(struct soap *soap, int n = -1) { return soap_instantiate_tt__HwAddress__(soap, n, NULL, NULL, NULL); }

inline tt__HwAddress__ * soap_new_req_tt__HwAddress__(struct soap *soap, std::string& __item) { tt__HwAddress__ *_p = soap_instantiate_tt__HwAddress__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__HwAddress__::__item = __item; } return _p; }

inline tt__HwAddress__ * soap_new_set_tt__HwAddress__(struct soap *soap, std::string& __item, char *__item1) { tt__HwAddress__ *_p = soap_instantiate_tt__HwAddress__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__HwAddress__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__HwAddress__(struct soap *soap, tt__HwAddress__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__HwAddress__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (839)
#endif

#define soap_default_tt__HwAddress(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__HwAddress(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HwAddress(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__HwAddress(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__HwAddress(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__HwAddress
#define soap_write_tt__HwAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__HwAddress(soap, data), 0) || soap_put_tt__HwAddress(soap, data, "tt:HwAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__HwAddress(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__HwAddress
#define soap_read_tt__HwAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__HwAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__HwAddress soap_instantiate_std__string


#define soap_copy_tt__HwAddress soap_copy_std__string

#ifndef SOAP_TYPE_tt__IPv6Address__
#define SOAP_TYPE_tt__IPv6Address__ (838)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6Address__(struct soap*, const char*, int, const tt__IPv6Address__ *, const char*);
SOAP_FMAC3 tt__IPv6Address__ * SOAP_FMAC4 soap_in_tt__IPv6Address__(struct soap*, const char*, tt__IPv6Address__ *, const char*);

#ifndef soap_write_tt__IPv6Address__
#define soap_write_tt__IPv6Address__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6Address__ * SOAP_FMAC4 soap_get_tt__IPv6Address__(struct soap*, tt__IPv6Address__ *, const char*, const char*);

#ifndef soap_read_tt__IPv6Address__
#define soap_read_tt__IPv6Address__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6Address__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv6Address__ * SOAP_FMAC2 soap_instantiate_tt__IPv6Address__(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6Address__ * soap_new_tt__IPv6Address__(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv6Address__(soap, n, NULL, NULL, NULL); }

inline tt__IPv6Address__ * soap_new_req_tt__IPv6Address__(struct soap *soap, std::string& __item) { tt__IPv6Address__ *_p = soap_instantiate_tt__IPv6Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6Address__::__item = __item; } return _p; }

inline tt__IPv6Address__ * soap_new_set_tt__IPv6Address__(struct soap *soap, std::string& __item, char *__item1) { tt__IPv6Address__ *_p = soap_instantiate_tt__IPv6Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6Address__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv6Address__(struct soap *soap, tt__IPv6Address__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv6Address__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (837)
#endif

#define soap_default_tt__IPv6Address(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IPv6Address(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6Address(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IPv6Address(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPv6Address(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__IPv6Address
#define soap_write_tt__IPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IPv6Address(soap, data), 0) || soap_put_tt__IPv6Address(soap, data, "tt:IPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IPv6Address(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__IPv6Address
#define soap_read_tt__IPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__IPv6Address soap_instantiate_std__string


#define soap_copy_tt__IPv6Address soap_copy_std__string

#ifndef SOAP_TYPE_tt__IPv4Address__
#define SOAP_TYPE_tt__IPv4Address__ (836)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4Address__(struct soap*, const char*, int, const tt__IPv4Address__ *, const char*);
SOAP_FMAC3 tt__IPv4Address__ * SOAP_FMAC4 soap_in_tt__IPv4Address__(struct soap*, const char*, tt__IPv4Address__ *, const char*);

#ifndef soap_write_tt__IPv4Address__
#define soap_write_tt__IPv4Address__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4Address__ * SOAP_FMAC4 soap_get_tt__IPv4Address__(struct soap*, tt__IPv4Address__ *, const char*, const char*);

#ifndef soap_read_tt__IPv4Address__
#define soap_read_tt__IPv4Address__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv4Address__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv4Address__ * SOAP_FMAC2 soap_instantiate_tt__IPv4Address__(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4Address__ * soap_new_tt__IPv4Address__(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv4Address__(soap, n, NULL, NULL, NULL); }

inline tt__IPv4Address__ * soap_new_req_tt__IPv4Address__(struct soap *soap, std::string& __item) { tt__IPv4Address__ *_p = soap_instantiate_tt__IPv4Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4Address__::__item = __item; } return _p; }

inline tt__IPv4Address__ * soap_new_set_tt__IPv4Address__(struct soap *soap, std::string& __item, char *__item1) { tt__IPv4Address__ *_p = soap_instantiate_tt__IPv4Address__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4Address__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv4Address__(struct soap *soap, tt__IPv4Address__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv4Address__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (835)
#endif

#define soap_default_tt__IPv4Address(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IPv4Address(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4Address(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IPv4Address(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IPv4Address(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__IPv4Address
#define soap_write_tt__IPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IPv4Address(soap, data), 0) || soap_put_tt__IPv4Address(soap, data, "tt:IPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IPv4Address(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__IPv4Address
#define soap_read_tt__IPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__IPv4Address soap_instantiate_std__string


#define soap_copy_tt__IPv4Address soap_copy_std__string

#ifndef SOAP_TYPE_tt__NetworkHostType_
#define SOAP_TYPE_tt__NetworkHostType_ (834)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostType_(struct soap*, const char*, int, const tt__NetworkHostType_ *, const char*);
SOAP_FMAC3 tt__NetworkHostType_ * SOAP_FMAC4 soap_in_tt__NetworkHostType_(struct soap*, const char*, tt__NetworkHostType_ *, const char*);

#ifndef soap_write_tt__NetworkHostType_
#define soap_write_tt__NetworkHostType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkHostType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkHostType_ * SOAP_FMAC4 soap_get_tt__NetworkHostType_(struct soap*, tt__NetworkHostType_ *, const char*, const char*);

#ifndef soap_read_tt__NetworkHostType_
#define soap_read_tt__NetworkHostType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkHostType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkHostType_ * SOAP_FMAC2 soap_instantiate_tt__NetworkHostType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHostType_ * soap_new_tt__NetworkHostType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkHostType_(soap, n, NULL, NULL, NULL); }

inline tt__NetworkHostType_ * soap_new_req_tt__NetworkHostType_(struct soap *soap, enum tt__NetworkHostType __item) { tt__NetworkHostType_ *_p = soap_instantiate_tt__NetworkHostType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkHostType_::__item = __item; } return _p; }

inline tt__NetworkHostType_ * soap_new_set_tt__NetworkHostType_(struct soap *soap, enum tt__NetworkHostType __item, char *__item1) { tt__NetworkHostType_ *_p = soap_instantiate_tt__NetworkHostType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkHostType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkHostType_(struct soap *soap, tt__NetworkHostType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkHostType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkProtocolType_
#define SOAP_TYPE_tt__NetworkProtocolType_ (832)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolType_(struct soap*, const char*, int, const tt__NetworkProtocolType_ *, const char*);
SOAP_FMAC3 tt__NetworkProtocolType_ * SOAP_FMAC4 soap_in_tt__NetworkProtocolType_(struct soap*, const char*, tt__NetworkProtocolType_ *, const char*);

#ifndef soap_write_tt__NetworkProtocolType_
#define soap_write_tt__NetworkProtocolType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkProtocolType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkProtocolType_ * SOAP_FMAC4 soap_get_tt__NetworkProtocolType_(struct soap*, tt__NetworkProtocolType_ *, const char*, const char*);

#ifndef soap_read_tt__NetworkProtocolType_
#define soap_read_tt__NetworkProtocolType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkProtocolType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkProtocolType_ * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocolType_ * soap_new_tt__NetworkProtocolType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkProtocolType_(soap, n, NULL, NULL, NULL); }

inline tt__NetworkProtocolType_ * soap_new_req_tt__NetworkProtocolType_(struct soap *soap, enum tt__NetworkProtocolType __item) { tt__NetworkProtocolType_ *_p = soap_instantiate_tt__NetworkProtocolType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkProtocolType_::__item = __item; } return _p; }

inline tt__NetworkProtocolType_ * soap_new_set_tt__NetworkProtocolType_(struct soap *soap, enum tt__NetworkProtocolType __item, char *__item1) { tt__NetworkProtocolType_ *_p = soap_instantiate_tt__NetworkProtocolType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkProtocolType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkProtocolType_(struct soap *soap, tt__NetworkProtocolType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkProtocolType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration_
#define SOAP_TYPE_tt__IPv6DHCPConfiguration_ (830)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6DHCPConfiguration_(struct soap*, const char*, int, const tt__IPv6DHCPConfiguration_ *, const char*);
SOAP_FMAC3 tt__IPv6DHCPConfiguration_ * SOAP_FMAC4 soap_in_tt__IPv6DHCPConfiguration_(struct soap*, const char*, tt__IPv6DHCPConfiguration_ *, const char*);

#ifndef soap_write_tt__IPv6DHCPConfiguration_
#define soap_write_tt__IPv6DHCPConfiguration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv6DHCPConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6DHCPConfiguration_ * SOAP_FMAC4 soap_get_tt__IPv6DHCPConfiguration_(struct soap*, tt__IPv6DHCPConfiguration_ *, const char*, const char*);

#ifndef soap_read_tt__IPv6DHCPConfiguration_
#define soap_read_tt__IPv6DHCPConfiguration_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6DHCPConfiguration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv6DHCPConfiguration_ * SOAP_FMAC2 soap_instantiate_tt__IPv6DHCPConfiguration_(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6DHCPConfiguration_ * soap_new_tt__IPv6DHCPConfiguration_(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv6DHCPConfiguration_(soap, n, NULL, NULL, NULL); }

inline tt__IPv6DHCPConfiguration_ * soap_new_req_tt__IPv6DHCPConfiguration_(struct soap *soap, enum tt__IPv6DHCPConfiguration __item) { tt__IPv6DHCPConfiguration_ *_p = soap_instantiate_tt__IPv6DHCPConfiguration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6DHCPConfiguration_::__item = __item; } return _p; }

inline tt__IPv6DHCPConfiguration_ * soap_new_set_tt__IPv6DHCPConfiguration_(struct soap *soap, enum tt__IPv6DHCPConfiguration __item, char *__item1) { tt__IPv6DHCPConfiguration_ *_p = soap_instantiate_tt__IPv6DHCPConfiguration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6DHCPConfiguration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv6DHCPConfiguration_(struct soap *soap, tt__IPv6DHCPConfiguration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv6DHCPConfiguration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IANA_IfTypes__
#define SOAP_TYPE_tt__IANA_IfTypes__ (828)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IANA_IfTypes__(struct soap*, const char*, int, const tt__IANA_IfTypes__ *, const char*);
SOAP_FMAC3 tt__IANA_IfTypes__ * SOAP_FMAC4 soap_in_tt__IANA_IfTypes__(struct soap*, const char*, tt__IANA_IfTypes__ *, const char*);

#ifndef soap_write_tt__IANA_IfTypes__
#define soap_write_tt__IANA_IfTypes__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IANA-IfTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IANA_IfTypes__ * SOAP_FMAC4 soap_get_tt__IANA_IfTypes__(struct soap*, tt__IANA_IfTypes__ *, const char*, const char*);

#ifndef soap_read_tt__IANA_IfTypes__
#define soap_read_tt__IANA_IfTypes__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IANA_IfTypes__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IANA_IfTypes__ * SOAP_FMAC2 soap_instantiate_tt__IANA_IfTypes__(struct soap*, int, const char*, const char*, size_t*);

inline tt__IANA_IfTypes__ * soap_new_tt__IANA_IfTypes__(struct soap *soap, int n = -1) { return soap_instantiate_tt__IANA_IfTypes__(soap, n, NULL, NULL, NULL); }

inline tt__IANA_IfTypes__ * soap_new_req_tt__IANA_IfTypes__(struct soap *soap, int __item) { tt__IANA_IfTypes__ *_p = soap_instantiate_tt__IANA_IfTypes__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IANA_IfTypes__::__item = __item; } return _p; }

inline tt__IANA_IfTypes__ * soap_new_set_tt__IANA_IfTypes__(struct soap *soap, int __item, char *__item1) { tt__IANA_IfTypes__ *_p = soap_instantiate_tt__IANA_IfTypes__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IANA_IfTypes__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IANA_IfTypes__(struct soap *soap, tt__IANA_IfTypes__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IANA_IfTypes__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Duplex_
#define SOAP_TYPE_tt__Duplex_ (826)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Duplex_(struct soap*, const char*, int, const tt__Duplex_ *, const char*);
SOAP_FMAC3 tt__Duplex_ * SOAP_FMAC4 soap_in_tt__Duplex_(struct soap*, const char*, tt__Duplex_ *, const char*);

#ifndef soap_write_tt__Duplex_
#define soap_write_tt__Duplex_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Duplex", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Duplex_ * SOAP_FMAC4 soap_get_tt__Duplex_(struct soap*, tt__Duplex_ *, const char*, const char*);

#ifndef soap_read_tt__Duplex_
#define soap_read_tt__Duplex_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Duplex_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Duplex_ * SOAP_FMAC2 soap_instantiate_tt__Duplex_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Duplex_ * soap_new_tt__Duplex_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Duplex_(soap, n, NULL, NULL, NULL); }

inline tt__Duplex_ * soap_new_req_tt__Duplex_(struct soap *soap, enum tt__Duplex __item) { tt__Duplex_ *_p = soap_instantiate_tt__Duplex_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Duplex_::__item = __item; } return _p; }

inline tt__Duplex_ * soap_new_set_tt__Duplex_(struct soap *soap, enum tt__Duplex __item, char *__item1) { tt__Duplex_ *_p = soap_instantiate_tt__Duplex_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Duplex_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Duplex_(struct soap *soap, tt__Duplex_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Duplex_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority__
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority__ (824)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceConfigPriority__(struct soap*, const char*, int, const tt__NetworkInterfaceConfigPriority__ *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC4 soap_in_tt__NetworkInterfaceConfigPriority__(struct soap*, const char*, tt__NetworkInterfaceConfigPriority__ *, const char*);

#ifndef soap_write_tt__NetworkInterfaceConfigPriority__
#define soap_write_tt__NetworkInterfaceConfigPriority__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceConfigPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC4 soap_get_tt__NetworkInterfaceConfigPriority__(struct soap*, tt__NetworkInterfaceConfigPriority__ *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceConfigPriority__
#define soap_read_tt__NetworkInterfaceConfigPriority__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceConfigPriority__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceConfigPriority__ * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConfigPriority__(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceConfigPriority__ * soap_new_tt__NetworkInterfaceConfigPriority__(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceConfigPriority__(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceConfigPriority__ * soap_new_req_tt__NetworkInterfaceConfigPriority__(struct soap *soap, std::string& __item) { tt__NetworkInterfaceConfigPriority__ *_p = soap_instantiate_tt__NetworkInterfaceConfigPriority__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceConfigPriority__::__item = __item; } return _p; }

inline tt__NetworkInterfaceConfigPriority__ * soap_new_set_tt__NetworkInterfaceConfigPriority__(struct soap *soap, std::string& __item, char *__item1) { tt__NetworkInterfaceConfigPriority__ *_p = soap_instantiate_tt__NetworkInterfaceConfigPriority__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceConfigPriority__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceConfigPriority__(struct soap *soap, tt__NetworkInterfaceConfigPriority__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceConfigPriority__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (823)
#endif

#define soap_default_tt__NetworkInterfaceConfigPriority(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__NetworkInterfaceConfigPriority(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceConfigPriority(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__NetworkInterfaceConfigPriority(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__NetworkInterfaceConfigPriority(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__NetworkInterfaceConfigPriority
#define soap_write_tt__NetworkInterfaceConfigPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__NetworkInterfaceConfigPriority(soap, data), 0) || soap_put_tt__NetworkInterfaceConfigPriority(soap, data, "tt:NetworkInterfaceConfigPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__NetworkInterfaceConfigPriority(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceConfigPriority
#define soap_read_tt__NetworkInterfaceConfigPriority(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceConfigPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__NetworkInterfaceConfigPriority soap_instantiate_std__string


#define soap_copy_tt__NetworkInterfaceConfigPriority soap_copy_std__string

#ifndef SOAP_TYPE_tt__DiscoveryMode_
#define SOAP_TYPE_tt__DiscoveryMode_ (822)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DiscoveryMode_(struct soap*, const char*, int, const tt__DiscoveryMode_ *, const char*);
SOAP_FMAC3 tt__DiscoveryMode_ * SOAP_FMAC4 soap_in_tt__DiscoveryMode_(struct soap*, const char*, tt__DiscoveryMode_ *, const char*);

#ifndef soap_write_tt__DiscoveryMode_
#define soap_write_tt__DiscoveryMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DiscoveryMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DiscoveryMode_ * SOAP_FMAC4 soap_get_tt__DiscoveryMode_(struct soap*, tt__DiscoveryMode_ *, const char*, const char*);

#ifndef soap_read_tt__DiscoveryMode_
#define soap_read_tt__DiscoveryMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DiscoveryMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DiscoveryMode_ * SOAP_FMAC2 soap_instantiate_tt__DiscoveryMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__DiscoveryMode_ * soap_new_tt__DiscoveryMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__DiscoveryMode_(soap, n, NULL, NULL, NULL); }

inline tt__DiscoveryMode_ * soap_new_req_tt__DiscoveryMode_(struct soap *soap, enum tt__DiscoveryMode __item) { tt__DiscoveryMode_ *_p = soap_instantiate_tt__DiscoveryMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DiscoveryMode_::__item = __item; } return _p; }

inline tt__DiscoveryMode_ * soap_new_set_tt__DiscoveryMode_(struct soap *soap, enum tt__DiscoveryMode __item, char *__item1) { tt__DiscoveryMode_ *_p = soap_instantiate_tt__DiscoveryMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DiscoveryMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DiscoveryMode_(struct soap *soap, tt__DiscoveryMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DiscoveryMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ScopeDefinition_
#define SOAP_TYPE_tt__ScopeDefinition_ (820)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ScopeDefinition_(struct soap*, const char*, int, const tt__ScopeDefinition_ *, const char*);
SOAP_FMAC3 tt__ScopeDefinition_ * SOAP_FMAC4 soap_in_tt__ScopeDefinition_(struct soap*, const char*, tt__ScopeDefinition_ *, const char*);

#ifndef soap_write_tt__ScopeDefinition_
#define soap_write_tt__ScopeDefinition_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ScopeDefinition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ScopeDefinition_ * SOAP_FMAC4 soap_get_tt__ScopeDefinition_(struct soap*, tt__ScopeDefinition_ *, const char*, const char*);

#ifndef soap_read_tt__ScopeDefinition_
#define soap_read_tt__ScopeDefinition_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ScopeDefinition_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ScopeDefinition_ * SOAP_FMAC2 soap_instantiate_tt__ScopeDefinition_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ScopeDefinition_ * soap_new_tt__ScopeDefinition_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ScopeDefinition_(soap, n, NULL, NULL, NULL); }

inline tt__ScopeDefinition_ * soap_new_req_tt__ScopeDefinition_(struct soap *soap, enum tt__ScopeDefinition __item) { tt__ScopeDefinition_ *_p = soap_instantiate_tt__ScopeDefinition_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ScopeDefinition_::__item = __item; } return _p; }

inline tt__ScopeDefinition_ * soap_new_set_tt__ScopeDefinition_(struct soap *soap, enum tt__ScopeDefinition __item, char *__item1) { tt__ScopeDefinition_ *_p = soap_instantiate_tt__ScopeDefinition_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ScopeDefinition_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ScopeDefinition_(struct soap *soap, tt__ScopeDefinition_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ScopeDefinition_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TransportProtocol_
#define SOAP_TYPE_tt__TransportProtocol_ (818)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransportProtocol_(struct soap*, const char*, int, const tt__TransportProtocol_ *, const char*);
SOAP_FMAC3 tt__TransportProtocol_ * SOAP_FMAC4 soap_in_tt__TransportProtocol_(struct soap*, const char*, tt__TransportProtocol_ *, const char*);

#ifndef soap_write_tt__TransportProtocol_
#define soap_write_tt__TransportProtocol_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TransportProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TransportProtocol_ * SOAP_FMAC4 soap_get_tt__TransportProtocol_(struct soap*, tt__TransportProtocol_ *, const char*, const char*);

#ifndef soap_read_tt__TransportProtocol_
#define soap_read_tt__TransportProtocol_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TransportProtocol_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TransportProtocol_ * SOAP_FMAC2 soap_instantiate_tt__TransportProtocol_(struct soap*, int, const char*, const char*, size_t*);

inline tt__TransportProtocol_ * soap_new_tt__TransportProtocol_(struct soap *soap, int n = -1) { return soap_instantiate_tt__TransportProtocol_(soap, n, NULL, NULL, NULL); }

inline tt__TransportProtocol_ * soap_new_req_tt__TransportProtocol_(struct soap *soap, enum tt__TransportProtocol __item) { tt__TransportProtocol_ *_p = soap_instantiate_tt__TransportProtocol_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TransportProtocol_::__item = __item; } return _p; }

inline tt__TransportProtocol_ * soap_new_set_tt__TransportProtocol_(struct soap *soap, enum tt__TransportProtocol __item, char *__item1) { tt__TransportProtocol_ *_p = soap_instantiate_tt__TransportProtocol_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TransportProtocol_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TransportProtocol_(struct soap *soap, tt__TransportProtocol_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TransportProtocol_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__StreamType_
#define SOAP_TYPE_tt__StreamType_ (816)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamType_(struct soap*, const char*, int, const tt__StreamType_ *, const char*);
SOAP_FMAC3 tt__StreamType_ * SOAP_FMAC4 soap_in_tt__StreamType_(struct soap*, const char*, tt__StreamType_ *, const char*);

#ifndef soap_write_tt__StreamType_
#define soap_write_tt__StreamType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:StreamType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__StreamType_ * SOAP_FMAC4 soap_get_tt__StreamType_(struct soap*, tt__StreamType_ *, const char*, const char*);

#ifndef soap_read_tt__StreamType_
#define soap_read_tt__StreamType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StreamType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__StreamType_ * SOAP_FMAC2 soap_instantiate_tt__StreamType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__StreamType_ * soap_new_tt__StreamType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__StreamType_(soap, n, NULL, NULL, NULL); }

inline tt__StreamType_ * soap_new_req_tt__StreamType_(struct soap *soap, enum tt__StreamType __item) { tt__StreamType_ *_p = soap_instantiate_tt__StreamType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StreamType_::__item = __item; } return _p; }

inline tt__StreamType_ * soap_new_set_tt__StreamType_(struct soap *soap, enum tt__StreamType __item, char *__item1) { tt__StreamType_ *_p = soap_instantiate_tt__StreamType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StreamType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__StreamType_(struct soap *soap, tt__StreamType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__StreamType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataCompressionType_
#define SOAP_TYPE_tt__MetadataCompressionType_ (814)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataCompressionType_(struct soap*, const char*, int, const tt__MetadataCompressionType_ *, const char*);
SOAP_FMAC3 tt__MetadataCompressionType_ * SOAP_FMAC4 soap_in_tt__MetadataCompressionType_(struct soap*, const char*, tt__MetadataCompressionType_ *, const char*);

#ifndef soap_write_tt__MetadataCompressionType_
#define soap_write_tt__MetadataCompressionType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataCompressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataCompressionType_ * SOAP_FMAC4 soap_get_tt__MetadataCompressionType_(struct soap*, tt__MetadataCompressionType_ *, const char*, const char*);

#ifndef soap_read_tt__MetadataCompressionType_
#define soap_read_tt__MetadataCompressionType_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataCompressionType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataCompressionType_ * SOAP_FMAC2 soap_instantiate_tt__MetadataCompressionType_(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataCompressionType_ * soap_new_tt__MetadataCompressionType_(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataCompressionType_(soap, n, NULL, NULL, NULL); }

inline tt__MetadataCompressionType_ * soap_new_req_tt__MetadataCompressionType_(struct soap *soap, enum tt__MetadataCompressionType __item) { tt__MetadataCompressionType_ *_p = soap_instantiate_tt__MetadataCompressionType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataCompressionType_::__item = __item; } return _p; }

inline tt__MetadataCompressionType_ * soap_new_set_tt__MetadataCompressionType_(struct soap *soap, enum tt__MetadataCompressionType __item, char *__item1) { tt__MetadataCompressionType_ *_p = soap_instantiate_tt__MetadataCompressionType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataCompressionType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataCompressionType_(struct soap *soap, tt__MetadataCompressionType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataCompressionType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames_
#define SOAP_TYPE_tt__AudioEncodingMimeNames_ (812)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncodingMimeNames_(struct soap*, const char*, int, const tt__AudioEncodingMimeNames_ *, const char*);
SOAP_FMAC3 tt__AudioEncodingMimeNames_ * SOAP_FMAC4 soap_in_tt__AudioEncodingMimeNames_(struct soap*, const char*, tt__AudioEncodingMimeNames_ *, const char*);

#ifndef soap_write_tt__AudioEncodingMimeNames_
#define soap_write_tt__AudioEncodingMimeNames_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncodingMimeNames", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncodingMimeNames_ * SOAP_FMAC4 soap_get_tt__AudioEncodingMimeNames_(struct soap*, tt__AudioEncodingMimeNames_ *, const char*, const char*);

#ifndef soap_read_tt__AudioEncodingMimeNames_
#define soap_read_tt__AudioEncodingMimeNames_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncodingMimeNames_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncodingMimeNames_ * SOAP_FMAC2 soap_instantiate_tt__AudioEncodingMimeNames_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncodingMimeNames_ * soap_new_tt__AudioEncodingMimeNames_(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncodingMimeNames_(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncodingMimeNames_ * soap_new_req_tt__AudioEncodingMimeNames_(struct soap *soap, enum tt__AudioEncodingMimeNames __item) { tt__AudioEncodingMimeNames_ *_p = soap_instantiate_tt__AudioEncodingMimeNames_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncodingMimeNames_::__item = __item; } return _p; }

inline tt__AudioEncodingMimeNames_ * soap_new_set_tt__AudioEncodingMimeNames_(struct soap *soap, enum tt__AudioEncodingMimeNames __item, char *__item1) { tt__AudioEncodingMimeNames_ *_p = soap_instantiate_tt__AudioEncodingMimeNames_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncodingMimeNames_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioEncodingMimeNames_(struct soap *soap, tt__AudioEncodingMimeNames_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncodingMimeNames_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncoding_
#define SOAP_TYPE_tt__AudioEncoding_ (810)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoding_(struct soap*, const char*, int, const tt__AudioEncoding_ *, const char*);
SOAP_FMAC3 tt__AudioEncoding_ * SOAP_FMAC4 soap_in_tt__AudioEncoding_(struct soap*, const char*, tt__AudioEncoding_ *, const char*);

#ifndef soap_write_tt__AudioEncoding_
#define soap_write_tt__AudioEncoding_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoding_ * SOAP_FMAC4 soap_get_tt__AudioEncoding_(struct soap*, tt__AudioEncoding_ *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoding_
#define soap_read_tt__AudioEncoding_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoding_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncoding_ * SOAP_FMAC2 soap_instantiate_tt__AudioEncoding_(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoding_ * soap_new_tt__AudioEncoding_(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncoding_(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncoding_ * soap_new_req_tt__AudioEncoding_(struct soap *soap, enum tt__AudioEncoding __item) { tt__AudioEncoding_ *_p = soap_instantiate_tt__AudioEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoding_::__item = __item; } return _p; }

inline tt__AudioEncoding_ * soap_new_set_tt__AudioEncoding_(struct soap *soap, enum tt__AudioEncoding __item, char *__item1) { tt__AudioEncoding_ *_p = soap_instantiate_tt__AudioEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoding_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioEncoding_(struct soap *soap, tt__AudioEncoding_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncoding_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncodingProfiles_
#define SOAP_TYPE_tt__VideoEncodingProfiles_ (808)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingProfiles_(struct soap*, const char*, int, const tt__VideoEncodingProfiles_ *, const char*);
SOAP_FMAC3 tt__VideoEncodingProfiles_ * SOAP_FMAC4 soap_in_tt__VideoEncodingProfiles_(struct soap*, const char*, tt__VideoEncodingProfiles_ *, const char*);

#ifndef soap_write_tt__VideoEncodingProfiles_
#define soap_write_tt__VideoEncodingProfiles_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncodingProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncodingProfiles_ * SOAP_FMAC4 soap_get_tt__VideoEncodingProfiles_(struct soap*, tt__VideoEncodingProfiles_ *, const char*, const char*);

#ifndef soap_read_tt__VideoEncodingProfiles_
#define soap_read_tt__VideoEncodingProfiles_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncodingProfiles_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncodingProfiles_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncodingProfiles_(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncodingProfiles_ * soap_new_tt__VideoEncodingProfiles_(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncodingProfiles_(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncodingProfiles_ * soap_new_req_tt__VideoEncodingProfiles_(struct soap *soap, enum tt__VideoEncodingProfiles __item) { tt__VideoEncodingProfiles_ *_p = soap_instantiate_tt__VideoEncodingProfiles_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncodingProfiles_::__item = __item; } return _p; }

inline tt__VideoEncodingProfiles_ * soap_new_set_tt__VideoEncodingProfiles_(struct soap *soap, enum tt__VideoEncodingProfiles __item, char *__item1) { tt__VideoEncodingProfiles_ *_p = soap_instantiate_tt__VideoEncodingProfiles_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncodingProfiles_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncodingProfiles_(struct soap *soap, tt__VideoEncodingProfiles_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncodingProfiles_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames_
#define SOAP_TYPE_tt__VideoEncodingMimeNames_ (806)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncodingMimeNames_(struct soap*, const char*, int, const tt__VideoEncodingMimeNames_ *, const char*);
SOAP_FMAC3 tt__VideoEncodingMimeNames_ * SOAP_FMAC4 soap_in_tt__VideoEncodingMimeNames_(struct soap*, const char*, tt__VideoEncodingMimeNames_ *, const char*);

#ifndef soap_write_tt__VideoEncodingMimeNames_
#define soap_write_tt__VideoEncodingMimeNames_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncodingMimeNames", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncodingMimeNames_ * SOAP_FMAC4 soap_get_tt__VideoEncodingMimeNames_(struct soap*, tt__VideoEncodingMimeNames_ *, const char*, const char*);

#ifndef soap_read_tt__VideoEncodingMimeNames_
#define soap_read_tt__VideoEncodingMimeNames_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncodingMimeNames_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncodingMimeNames_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncodingMimeNames_(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncodingMimeNames_ * soap_new_tt__VideoEncodingMimeNames_(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncodingMimeNames_(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncodingMimeNames_ * soap_new_req_tt__VideoEncodingMimeNames_(struct soap *soap, enum tt__VideoEncodingMimeNames __item) { tt__VideoEncodingMimeNames_ *_p = soap_instantiate_tt__VideoEncodingMimeNames_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncodingMimeNames_::__item = __item; } return _p; }

inline tt__VideoEncodingMimeNames_ * soap_new_set_tt__VideoEncodingMimeNames_(struct soap *soap, enum tt__VideoEncodingMimeNames __item, char *__item1) { tt__VideoEncodingMimeNames_ *_p = soap_instantiate_tt__VideoEncodingMimeNames_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncodingMimeNames_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncodingMimeNames_(struct soap *soap, tt__VideoEncodingMimeNames_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncodingMimeNames_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__H264Profile_
#define SOAP_TYPE_tt__H264Profile_ (804)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Profile_(struct soap*, const char*, int, const tt__H264Profile_ *, const char*);
SOAP_FMAC3 tt__H264Profile_ * SOAP_FMAC4 soap_in_tt__H264Profile_(struct soap*, const char*, tt__H264Profile_ *, const char*);

#ifndef soap_write_tt__H264Profile_
#define soap_write_tt__H264Profile_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:H264Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Profile_ * SOAP_FMAC4 soap_get_tt__H264Profile_(struct soap*, tt__H264Profile_ *, const char*, const char*);

#ifndef soap_read_tt__H264Profile_
#define soap_read_tt__H264Profile_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__H264Profile_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__H264Profile_ * SOAP_FMAC2 soap_instantiate_tt__H264Profile_(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Profile_ * soap_new_tt__H264Profile_(struct soap *soap, int n = -1) { return soap_instantiate_tt__H264Profile_(soap, n, NULL, NULL, NULL); }

inline tt__H264Profile_ * soap_new_req_tt__H264Profile_(struct soap *soap, enum tt__H264Profile __item) { tt__H264Profile_ *_p = soap_instantiate_tt__H264Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Profile_::__item = __item; } return _p; }

inline tt__H264Profile_ * soap_new_set_tt__H264Profile_(struct soap *soap, enum tt__H264Profile __item, char *__item1) { tt__H264Profile_ *_p = soap_instantiate_tt__H264Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Profile_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__H264Profile_(struct soap *soap, tt__H264Profile_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__H264Profile_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Mpeg4Profile_
#define SOAP_TYPE_tt__Mpeg4Profile_ (802)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Profile_(struct soap*, const char*, int, const tt__Mpeg4Profile_ *, const char*);
SOAP_FMAC3 tt__Mpeg4Profile_ * SOAP_FMAC4 soap_in_tt__Mpeg4Profile_(struct soap*, const char*, tt__Mpeg4Profile_ *, const char*);

#ifndef soap_write_tt__Mpeg4Profile_
#define soap_write_tt__Mpeg4Profile_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Mpeg4Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Profile_ * SOAP_FMAC4 soap_get_tt__Mpeg4Profile_(struct soap*, tt__Mpeg4Profile_ *, const char*, const char*);

#ifndef soap_read_tt__Mpeg4Profile_
#define soap_read_tt__Mpeg4Profile_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Mpeg4Profile_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Mpeg4Profile_ * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Profile_(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Profile_ * soap_new_tt__Mpeg4Profile_(struct soap *soap, int n = -1) { return soap_instantiate_tt__Mpeg4Profile_(soap, n, NULL, NULL, NULL); }

inline tt__Mpeg4Profile_ * soap_new_req_tt__Mpeg4Profile_(struct soap *soap, enum tt__Mpeg4Profile __item) { tt__Mpeg4Profile_ *_p = soap_instantiate_tt__Mpeg4Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Profile_::__item = __item; } return _p; }

inline tt__Mpeg4Profile_ * soap_new_set_tt__Mpeg4Profile_(struct soap *soap, enum tt__Mpeg4Profile __item, char *__item1) { tt__Mpeg4Profile_ *_p = soap_instantiate_tt__Mpeg4Profile_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Profile_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Mpeg4Profile_(struct soap *soap, tt__Mpeg4Profile_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Mpeg4Profile_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoding_
#define SOAP_TYPE_tt__VideoEncoding_ (800)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoding_(struct soap*, const char*, int, const tt__VideoEncoding_ *, const char*);
SOAP_FMAC3 tt__VideoEncoding_ * SOAP_FMAC4 soap_in_tt__VideoEncoding_(struct soap*, const char*, tt__VideoEncoding_ *, const char*);

#ifndef soap_write_tt__VideoEncoding_
#define soap_write_tt__VideoEncoding_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoding_ * SOAP_FMAC4 soap_get_tt__VideoEncoding_(struct soap*, tt__VideoEncoding_ *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoding_
#define soap_read_tt__VideoEncoding_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoding_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoding_ * SOAP_FMAC2 soap_instantiate_tt__VideoEncoding_(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoding_ * soap_new_tt__VideoEncoding_(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoding_(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoding_ * soap_new_req_tt__VideoEncoding_(struct soap *soap, enum tt__VideoEncoding __item) { tt__VideoEncoding_ *_p = soap_instantiate_tt__VideoEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoding_::__item = __item; } return _p; }

inline tt__VideoEncoding_ * soap_new_set_tt__VideoEncoding_(struct soap *soap, enum tt__VideoEncoding __item, char *__item1) { tt__VideoEncoding_ *_p = soap_instantiate_tt__VideoEncoding_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoding_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncoding_(struct soap *soap, tt__VideoEncoding_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoding_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ViewModes_
#define SOAP_TYPE_tt__ViewModes_ (798)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ViewModes_(struct soap*, const char*, int, const tt__ViewModes_ *, const char*);
SOAP_FMAC3 tt__ViewModes_ * SOAP_FMAC4 soap_in_tt__ViewModes_(struct soap*, const char*, tt__ViewModes_ *, const char*);

#ifndef soap_write_tt__ViewModes_
#define soap_write_tt__ViewModes_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ViewModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ViewModes_ * SOAP_FMAC4 soap_get_tt__ViewModes_(struct soap*, tt__ViewModes_ *, const char*, const char*);

#ifndef soap_read_tt__ViewModes_
#define soap_read_tt__ViewModes_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ViewModes_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ViewModes_ * SOAP_FMAC2 soap_instantiate_tt__ViewModes_(struct soap*, int, const char*, const char*, size_t*);

inline tt__ViewModes_ * soap_new_tt__ViewModes_(struct soap *soap, int n = -1) { return soap_instantiate_tt__ViewModes_(soap, n, NULL, NULL, NULL); }

inline tt__ViewModes_ * soap_new_req_tt__ViewModes_(struct soap *soap, enum tt__ViewModes __item) { tt__ViewModes_ *_p = soap_instantiate_tt__ViewModes_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ViewModes_::__item = __item; } return _p; }

inline tt__ViewModes_ * soap_new_set_tt__ViewModes_(struct soap *soap, enum tt__ViewModes __item, char *__item1) { tt__ViewModes_ *_p = soap_instantiate_tt__ViewModes_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ViewModes_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ViewModes_(struct soap *soap, tt__ViewModes_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ViewModes_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SceneOrientationOption_
#define SOAP_TYPE_tt__SceneOrientationOption_ (796)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationOption_(struct soap*, const char*, int, const tt__SceneOrientationOption_ *, const char*);
SOAP_FMAC3 tt__SceneOrientationOption_ * SOAP_FMAC4 soap_in_tt__SceneOrientationOption_(struct soap*, const char*, tt__SceneOrientationOption_ *, const char*);

#ifndef soap_write_tt__SceneOrientationOption_
#define soap_write_tt__SceneOrientationOption_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SceneOrientationOption", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SceneOrientationOption_ * SOAP_FMAC4 soap_get_tt__SceneOrientationOption_(struct soap*, tt__SceneOrientationOption_ *, const char*, const char*);

#ifndef soap_read_tt__SceneOrientationOption_
#define soap_read_tt__SceneOrientationOption_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SceneOrientationOption_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SceneOrientationOption_ * SOAP_FMAC2 soap_instantiate_tt__SceneOrientationOption_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SceneOrientationOption_ * soap_new_tt__SceneOrientationOption_(struct soap *soap, int n = -1) { return soap_instantiate_tt__SceneOrientationOption_(soap, n, NULL, NULL, NULL); }

inline tt__SceneOrientationOption_ * soap_new_req_tt__SceneOrientationOption_(struct soap *soap, enum tt__SceneOrientationOption __item) { tt__SceneOrientationOption_ *_p = soap_instantiate_tt__SceneOrientationOption_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SceneOrientationOption_::__item = __item; } return _p; }

inline tt__SceneOrientationOption_ * soap_new_set_tt__SceneOrientationOption_(struct soap *soap, enum tt__SceneOrientationOption __item, char *__item1) { tt__SceneOrientationOption_ *_p = soap_instantiate_tt__SceneOrientationOption_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SceneOrientationOption_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SceneOrientationOption_(struct soap *soap, tt__SceneOrientationOption_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SceneOrientationOption_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SceneOrientationMode_
#define SOAP_TYPE_tt__SceneOrientationMode_ (794)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientationMode_(struct soap*, const char*, int, const tt__SceneOrientationMode_ *, const char*);
SOAP_FMAC3 tt__SceneOrientationMode_ * SOAP_FMAC4 soap_in_tt__SceneOrientationMode_(struct soap*, const char*, tt__SceneOrientationMode_ *, const char*);

#ifndef soap_write_tt__SceneOrientationMode_
#define soap_write_tt__SceneOrientationMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SceneOrientationMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SceneOrientationMode_ * SOAP_FMAC4 soap_get_tt__SceneOrientationMode_(struct soap*, tt__SceneOrientationMode_ *, const char*, const char*);

#ifndef soap_read_tt__SceneOrientationMode_
#define soap_read_tt__SceneOrientationMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SceneOrientationMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SceneOrientationMode_ * SOAP_FMAC2 soap_instantiate_tt__SceneOrientationMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__SceneOrientationMode_ * soap_new_tt__SceneOrientationMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__SceneOrientationMode_(soap, n, NULL, NULL, NULL); }

inline tt__SceneOrientationMode_ * soap_new_req_tt__SceneOrientationMode_(struct soap *soap, enum tt__SceneOrientationMode __item) { tt__SceneOrientationMode_ *_p = soap_instantiate_tt__SceneOrientationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SceneOrientationMode_::__item = __item; } return _p; }

inline tt__SceneOrientationMode_ * soap_new_set_tt__SceneOrientationMode_(struct soap *soap, enum tt__SceneOrientationMode __item, char *__item1) { tt__SceneOrientationMode_ *_p = soap_instantiate_tt__SceneOrientationMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SceneOrientationMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SceneOrientationMode_(struct soap *soap, tt__SceneOrientationMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SceneOrientationMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RotateMode_
#define SOAP_TYPE_tt__RotateMode_ (792)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateMode_(struct soap*, const char*, int, const tt__RotateMode_ *, const char*);
SOAP_FMAC3 tt__RotateMode_ * SOAP_FMAC4 soap_in_tt__RotateMode_(struct soap*, const char*, tt__RotateMode_ *, const char*);

#ifndef soap_write_tt__RotateMode_
#define soap_write_tt__RotateMode_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RotateMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateMode_ * SOAP_FMAC4 soap_get_tt__RotateMode_(struct soap*, tt__RotateMode_ *, const char*, const char*);

#ifndef soap_read_tt__RotateMode_
#define soap_read_tt__RotateMode_(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RotateMode_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RotateMode_ * SOAP_FMAC2 soap_instantiate_tt__RotateMode_(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateMode_ * soap_new_tt__RotateMode_(struct soap *soap, int n = -1) { return soap_instantiate_tt__RotateMode_(soap, n, NULL, NULL, NULL); }

inline tt__RotateMode_ * soap_new_req_tt__RotateMode_(struct soap *soap, enum tt__RotateMode __item) { tt__RotateMode_ *_p = soap_instantiate_tt__RotateMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RotateMode_::__item = __item; } return _p; }

inline tt__RotateMode_ * soap_new_set_tt__RotateMode_(struct soap *soap, enum tt__RotateMode __item, char *__item1) { tt__RotateMode_ *_p = soap_instantiate_tt__RotateMode_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RotateMode_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RotateMode_(struct soap *soap, tt__RotateMode_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RotateMode_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Name__
#define SOAP_TYPE_tt__Name__ (790)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name__(struct soap*, const char*, int, const tt__Name__ *, const char*);
SOAP_FMAC3 tt__Name__ * SOAP_FMAC4 soap_in_tt__Name__(struct soap*, const char*, tt__Name__ *, const char*);

#ifndef soap_write_tt__Name__
#define soap_write_tt__Name__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Name__ * SOAP_FMAC4 soap_get_tt__Name__(struct soap*, tt__Name__ *, const char*, const char*);

#ifndef soap_read_tt__Name__
#define soap_read_tt__Name__(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Name__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Name__ * SOAP_FMAC2 soap_instantiate_tt__Name__(struct soap*, int, const char*, const char*, size_t*);

inline tt__Name__ * soap_new_tt__Name__(struct soap *soap, int n = -1) { return soap_instantiate_tt__Name__(soap, n, NULL, NULL, NULL); }

inline tt__Name__ * soap_new_req_tt__Name__(struct soap *soap, std::string& __item) { tt__Name__ *_p = soap_instantiate_tt__Name__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Name__::__item = __item; } return _p; }

inline tt__Name__ * soap_new_set_tt__Name__(struct soap *soap, std::string& __item, char *__item1) { tt__Name__ *_p = soap_instantiate_tt__Name__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Name__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Name__(struct soap *soap, tt__Name__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Name__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (789)
#endif

#define soap_default_tt__Name(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__Name(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Name(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__Name(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__Name(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__Name
#define soap_write_tt__Name(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__Name(soap, data), 0) || soap_put_tt__Name(soap, data, "tt:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__Name(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__Name
#define soap_read_tt__Name(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Name(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__Name soap_instantiate_std__string


#define soap_copy_tt__Name soap_copy_std__string

#ifndef SOAP_TYPE_ns1__EncodingTypes
#define SOAP_TYPE_ns1__EncodingTypes (788)
#endif

#define soap_default_ns1__EncodingTypes(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__EncodingTypes(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EncodingTypes(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns1__EncodingTypes(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__EncodingTypes(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_ns1__EncodingTypes
#define soap_write_ns1__EncodingTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__EncodingTypes(soap, data), 0) || soap_put_ns1__EncodingTypes(soap, data, "ns1:EncodingTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns1__EncodingTypes(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_ns1__EncodingTypes
#define soap_read_ns1__EncodingTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__EncodingTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_ns1__EncodingTypes soap_instantiate_std__string


#define soap_copy_ns1__EncodingTypes soap_copy_std__string

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (787)
#endif

#define soap_default_wsnt__AbsoluteOrRelativeTimeType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsnt__AbsoluteOrRelativeTimeType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_wsnt__AbsoluteOrRelativeTimeType
#define soap_write_wsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsnt__AbsoluteOrRelativeTimeType(soap, data), 0) || soap_put_wsnt__AbsoluteOrRelativeTimeType(soap, data, "wsnt:AbsoluteOrRelativeTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_wsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_wsnt__AbsoluteOrRelativeTimeType
#define soap_read_wsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__AbsoluteOrRelativeTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_wsnt__AbsoluteOrRelativeTimeType soap_instantiate_std__string


#define soap_copy_wsnt__AbsoluteOrRelativeTimeType soap_copy_std__string

#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (786)
#endif

#define soap_default_tt__ReferenceTokenList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__ReferenceTokenList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReferenceTokenList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__ReferenceTokenList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__ReferenceTokenList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__ReferenceTokenList
#define soap_write_tt__ReferenceTokenList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__ReferenceTokenList(soap, data), 0) || soap_put_tt__ReferenceTokenList(soap, data, "tt:ReferenceTokenList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__ReferenceTokenList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__ReferenceTokenList
#define soap_read_tt__ReferenceTokenList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReferenceTokenList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__ReferenceTokenList soap_instantiate_std__string


#define soap_copy_tt__ReferenceTokenList soap_copy_std__string

#ifndef SOAP_TYPE_tt__StringList
#define SOAP_TYPE_tt__StringList (785)
#endif

#define soap_default_tt__StringList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__StringList
#define soap_write_tt__StringList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__StringList(soap, data), 0) || soap_put_tt__StringList(soap, data, "tt:StringList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__StringList
#define soap_read_tt__StringList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StringList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__StringList soap_instantiate_std__string


#define soap_copy_tt__StringList soap_copy_std__string

#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (784)
#endif

#define soap_default_tt__StringAttrList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__StringAttrList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StringAttrList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__StringAttrList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__StringAttrList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__StringAttrList
#define soap_write_tt__StringAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__StringAttrList(soap, data), 0) || soap_put_tt__StringAttrList(soap, data, "tt:StringAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__StringAttrList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__StringAttrList
#define soap_read_tt__StringAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StringAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__StringAttrList soap_instantiate_std__string


#define soap_copy_tt__StringAttrList soap_copy_std__string

#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (783)
#endif

#define soap_default_tt__FloatAttrList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__FloatAttrList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatAttrList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__FloatAttrList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__FloatAttrList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__FloatAttrList
#define soap_write_tt__FloatAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__FloatAttrList(soap, data), 0) || soap_put_tt__FloatAttrList(soap, data, "tt:FloatAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__FloatAttrList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__FloatAttrList
#define soap_read_tt__FloatAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FloatAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__FloatAttrList soap_instantiate_std__string


#define soap_copy_tt__FloatAttrList soap_copy_std__string

#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (782)
#endif

#define soap_default_tt__IntAttrList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tt__IntAttrList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntAttrList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_tt__IntAttrList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_tt__IntAttrList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_tt__IntAttrList
#define soap_write_tt__IntAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tt__IntAttrList(soap, data), 0) || soap_put_tt__IntAttrList(soap, data, "tt:IntAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_tt__IntAttrList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_tt__IntAttrList
#define soap_read_tt__IntAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IntAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_tt__IntAttrList soap_instantiate_std__string


#define soap_copy_tt__IntAttrList soap_copy_std__string

#ifndef SOAP_TYPE__ns1__DeleteMask
#define SOAP_TYPE__ns1__DeleteMask (781)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteMask(struct soap*, const char*, int, const _ns1__DeleteMask *, const char*);
SOAP_FMAC3 _ns1__DeleteMask * SOAP_FMAC4 soap_in__ns1__DeleteMask(struct soap*, const char*, _ns1__DeleteMask *, const char*);

#ifndef soap_write__ns1__DeleteMask
#define soap_write__ns1__DeleteMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteMask * SOAP_FMAC4 soap_get__ns1__DeleteMask(struct soap*, _ns1__DeleteMask *, const char*, const char*);

#ifndef soap_read__ns1__DeleteMask
#define soap_read__ns1__DeleteMask(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteMask * SOAP_FMAC2 soap_instantiate__ns1__DeleteMask(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteMask * soap_new__ns1__DeleteMask(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteMask(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteMask * soap_new_req__ns1__DeleteMask(struct soap *soap, std::string& Token) { _ns1__DeleteMask *_p = soap_instantiate__ns1__DeleteMask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteMask::Token = Token; } return _p; }

inline _ns1__DeleteMask * soap_new_set__ns1__DeleteMask(struct soap *soap, std::string& Token) { _ns1__DeleteMask *_p = soap_instantiate__ns1__DeleteMask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteMask::Token = Token; } return _p; }

inline void soap_delete__ns1__DeleteMask(struct soap *soap, _ns1__DeleteMask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteMask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateMaskResponse
#define SOAP_TYPE__ns1__CreateMaskResponse (780)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateMaskResponse(struct soap*, const char*, int, const _ns1__CreateMaskResponse *, const char*);
SOAP_FMAC3 _ns1__CreateMaskResponse * SOAP_FMAC4 soap_in__ns1__CreateMaskResponse(struct soap*, const char*, _ns1__CreateMaskResponse *, const char*);

#ifndef soap_write__ns1__CreateMaskResponse
#define soap_write__ns1__CreateMaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateMaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateMaskResponse * SOAP_FMAC4 soap_get__ns1__CreateMaskResponse(struct soap*, _ns1__CreateMaskResponse *, const char*, const char*);

#ifndef soap_read__ns1__CreateMaskResponse
#define soap_read__ns1__CreateMaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateMaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateMaskResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateMaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateMaskResponse * soap_new__ns1__CreateMaskResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateMaskResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateMaskResponse * soap_new_req__ns1__CreateMaskResponse(struct soap *soap, std::string& Token) { _ns1__CreateMaskResponse *_p = soap_instantiate__ns1__CreateMaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateMaskResponse::Token = Token; } return _p; }

inline _ns1__CreateMaskResponse * soap_new_set__ns1__CreateMaskResponse(struct soap *soap, std::string& Token) { _ns1__CreateMaskResponse *_p = soap_instantiate__ns1__CreateMaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateMaskResponse::Token = Token; } return _p; }

inline void soap_delete__ns1__CreateMaskResponse(struct soap *soap, _ns1__CreateMaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateMaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateMask
#define SOAP_TYPE__ns1__CreateMask (779)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateMask(struct soap*, const char*, int, const _ns1__CreateMask *, const char*);
SOAP_FMAC3 _ns1__CreateMask * SOAP_FMAC4 soap_in__ns1__CreateMask(struct soap*, const char*, _ns1__CreateMask *, const char*);

#ifndef soap_write__ns1__CreateMask
#define soap_write__ns1__CreateMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateMask * SOAP_FMAC4 soap_get__ns1__CreateMask(struct soap*, _ns1__CreateMask *, const char*, const char*);

#ifndef soap_read__ns1__CreateMask
#define soap_read__ns1__CreateMask(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateMask * SOAP_FMAC2 soap_instantiate__ns1__CreateMask(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateMask * soap_new__ns1__CreateMask(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateMask(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateMask * soap_new_req__ns1__CreateMask(struct soap *soap, ns1__Mask *Mask) { _ns1__CreateMask *_p = soap_instantiate__ns1__CreateMask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateMask::Mask = Mask; } return _p; }

inline _ns1__CreateMask * soap_new_set__ns1__CreateMask(struct soap *soap, ns1__Mask *Mask) { _ns1__CreateMask *_p = soap_instantiate__ns1__CreateMask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateMask::Mask = Mask; } return _p; }

inline void soap_delete__ns1__CreateMask(struct soap *soap, _ns1__CreateMask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateMask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMaskOptionsResponse
#define SOAP_TYPE__ns1__GetMaskOptionsResponse (778)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMaskOptionsResponse(struct soap*, const char*, int, const _ns1__GetMaskOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetMaskOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetMaskOptionsResponse(struct soap*, const char*, _ns1__GetMaskOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetMaskOptionsResponse
#define soap_write__ns1__GetMaskOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMaskOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMaskOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetMaskOptionsResponse(struct soap*, _ns1__GetMaskOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMaskOptionsResponse
#define soap_read__ns1__GetMaskOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMaskOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMaskOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMaskOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMaskOptionsResponse * soap_new__ns1__GetMaskOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMaskOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMaskOptionsResponse * soap_new_req__ns1__GetMaskOptionsResponse(struct soap *soap, ns1__MaskOptions *Options) { _ns1__GetMaskOptionsResponse *_p = soap_instantiate__ns1__GetMaskOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMaskOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetMaskOptionsResponse * soap_new_set__ns1__GetMaskOptionsResponse(struct soap *soap, ns1__MaskOptions *Options) { _ns1__GetMaskOptionsResponse *_p = soap_instantiate__ns1__GetMaskOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMaskOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetMaskOptionsResponse(struct soap *soap, _ns1__GetMaskOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMaskOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMaskOptions
#define SOAP_TYPE__ns1__GetMaskOptions (777)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMaskOptions(struct soap*, const char*, int, const _ns1__GetMaskOptions *, const char*);
SOAP_FMAC3 _ns1__GetMaskOptions * SOAP_FMAC4 soap_in__ns1__GetMaskOptions(struct soap*, const char*, _ns1__GetMaskOptions *, const char*);

#ifndef soap_write__ns1__GetMaskOptions
#define soap_write__ns1__GetMaskOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMaskOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMaskOptions * SOAP_FMAC4 soap_get__ns1__GetMaskOptions(struct soap*, _ns1__GetMaskOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetMaskOptions
#define soap_read__ns1__GetMaskOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMaskOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMaskOptions * SOAP_FMAC2 soap_instantiate__ns1__GetMaskOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMaskOptions * soap_new__ns1__GetMaskOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMaskOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMaskOptions * soap_new_req__ns1__GetMaskOptions(struct soap *soap, std::string& ConfigurationToken) { _ns1__GetMaskOptions *_p = soap_instantiate__ns1__GetMaskOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMaskOptions::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetMaskOptions * soap_new_set__ns1__GetMaskOptions(struct soap *soap, std::string& ConfigurationToken) { _ns1__GetMaskOptions *_p = soap_instantiate__ns1__GetMaskOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMaskOptions::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetMaskOptions(struct soap *soap, _ns1__GetMaskOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMaskOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetMask
#define SOAP_TYPE__ns1__SetMask (776)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMask(struct soap*, const char*, int, const _ns1__SetMask *, const char*);
SOAP_FMAC3 _ns1__SetMask * SOAP_FMAC4 soap_in__ns1__SetMask(struct soap*, const char*, _ns1__SetMask *, const char*);

#ifndef soap_write__ns1__SetMask
#define soap_write__ns1__SetMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMask * SOAP_FMAC4 soap_get__ns1__SetMask(struct soap*, _ns1__SetMask *, const char*, const char*);

#ifndef soap_read__ns1__SetMask
#define soap_read__ns1__SetMask(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetMask * SOAP_FMAC2 soap_instantiate__ns1__SetMask(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMask * soap_new__ns1__SetMask(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetMask(soap, n, NULL, NULL, NULL); }

inline _ns1__SetMask * soap_new_req__ns1__SetMask(struct soap *soap, ns1__Mask *Mask) { _ns1__SetMask *_p = soap_instantiate__ns1__SetMask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetMask::Mask = Mask; } return _p; }

inline _ns1__SetMask * soap_new_set__ns1__SetMask(struct soap *soap, ns1__Mask *Mask) { _ns1__SetMask *_p = soap_instantiate__ns1__SetMask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetMask::Mask = Mask; } return _p; }

inline void soap_delete__ns1__SetMask(struct soap *soap, _ns1__SetMask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMasksResponse
#define SOAP_TYPE__ns1__GetMasksResponse (775)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMasksResponse(struct soap*, const char*, int, const _ns1__GetMasksResponse *, const char*);
SOAP_FMAC3 _ns1__GetMasksResponse * SOAP_FMAC4 soap_in__ns1__GetMasksResponse(struct soap*, const char*, _ns1__GetMasksResponse *, const char*);

#ifndef soap_write__ns1__GetMasksResponse
#define soap_write__ns1__GetMasksResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMasksResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMasksResponse * SOAP_FMAC4 soap_get__ns1__GetMasksResponse(struct soap*, _ns1__GetMasksResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMasksResponse
#define soap_read__ns1__GetMasksResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMasksResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMasksResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMasksResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMasksResponse * soap_new__ns1__GetMasksResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMasksResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMasksResponse * soap_new_req__ns1__GetMasksResponse(struct soap *soap) { _ns1__GetMasksResponse *_p = soap_instantiate__ns1__GetMasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetMasksResponse * soap_new_set__ns1__GetMasksResponse(struct soap *soap, std::vector<ns1__Mask * >& Masks) { _ns1__GetMasksResponse *_p = soap_instantiate__ns1__GetMasksResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMasksResponse::Masks = Masks; } return _p; }

inline void soap_delete__ns1__GetMasksResponse(struct soap *soap, _ns1__GetMasksResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMasksResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMasks
#define SOAP_TYPE__ns1__GetMasks (774)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMasks(struct soap*, const char*, int, const _ns1__GetMasks *, const char*);
SOAP_FMAC3 _ns1__GetMasks * SOAP_FMAC4 soap_in__ns1__GetMasks(struct soap*, const char*, _ns1__GetMasks *, const char*);

#ifndef soap_write__ns1__GetMasks
#define soap_write__ns1__GetMasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMasks * SOAP_FMAC4 soap_get__ns1__GetMasks(struct soap*, _ns1__GetMasks *, const char*, const char*);

#ifndef soap_read__ns1__GetMasks
#define soap_read__ns1__GetMasks(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMasks * SOAP_FMAC2 soap_instantiate__ns1__GetMasks(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMasks * soap_new__ns1__GetMasks(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMasks(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMasks * soap_new_req__ns1__GetMasks(struct soap *soap) { _ns1__GetMasks *_p = soap_instantiate__ns1__GetMasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetMasks * soap_new_set__ns1__GetMasks(struct soap *soap, std::string *Token, std::string *ConfigurationToken) { _ns1__GetMasks *_p = soap_instantiate__ns1__GetMasks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMasks::Token = Token; _p->_ns1__GetMasks::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetMasks(struct soap *soap, _ns1__GetMasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteOSD
#define SOAP_TYPE__ns1__DeleteOSD (773)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteOSD(struct soap*, const char*, int, const _ns1__DeleteOSD *, const char*);
SOAP_FMAC3 _ns1__DeleteOSD * SOAP_FMAC4 soap_in__ns1__DeleteOSD(struct soap*, const char*, _ns1__DeleteOSD *, const char*);

#ifndef soap_write__ns1__DeleteOSD
#define soap_write__ns1__DeleteOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteOSD * SOAP_FMAC4 soap_get__ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD *, const char*, const char*);

#ifndef soap_read__ns1__DeleteOSD
#define soap_read__ns1__DeleteOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteOSD * SOAP_FMAC2 soap_instantiate__ns1__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteOSD * soap_new__ns1__DeleteOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteOSD * soap_new_req__ns1__DeleteOSD(struct soap *soap, std::string& OSDToken) { _ns1__DeleteOSD *_p = soap_instantiate__ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteOSD::OSDToken = OSDToken; } return _p; }

inline _ns1__DeleteOSD * soap_new_set__ns1__DeleteOSD(struct soap *soap, std::string& OSDToken) { _ns1__DeleteOSD *_p = soap_instantiate__ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteOSD::OSDToken = OSDToken; } return _p; }

inline void soap_delete__ns1__DeleteOSD(struct soap *soap, _ns1__DeleteOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateOSDResponse
#define SOAP_TYPE__ns1__CreateOSDResponse (772)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateOSDResponse(struct soap*, const char*, int, const _ns1__CreateOSDResponse *, const char*);
SOAP_FMAC3 _ns1__CreateOSDResponse * SOAP_FMAC4 soap_in__ns1__CreateOSDResponse(struct soap*, const char*, _ns1__CreateOSDResponse *, const char*);

#ifndef soap_write__ns1__CreateOSDResponse
#define soap_write__ns1__CreateOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateOSDResponse * SOAP_FMAC4 soap_get__ns1__CreateOSDResponse(struct soap*, _ns1__CreateOSDResponse *, const char*, const char*);

#ifndef soap_read__ns1__CreateOSDResponse
#define soap_read__ns1__CreateOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateOSDResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateOSDResponse * soap_new__ns1__CreateOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateOSDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateOSDResponse * soap_new_req__ns1__CreateOSDResponse(struct soap *soap, std::string& OSDToken) { _ns1__CreateOSDResponse *_p = soap_instantiate__ns1__CreateOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSDResponse::OSDToken = OSDToken; } return _p; }

inline _ns1__CreateOSDResponse * soap_new_set__ns1__CreateOSDResponse(struct soap *soap, std::string& OSDToken) { _ns1__CreateOSDResponse *_p = soap_instantiate__ns1__CreateOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSDResponse::OSDToken = OSDToken; } return _p; }

inline void soap_delete__ns1__CreateOSDResponse(struct soap *soap, _ns1__CreateOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateOSD
#define SOAP_TYPE__ns1__CreateOSD (771)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateOSD(struct soap*, const char*, int, const _ns1__CreateOSD *, const char*);
SOAP_FMAC3 _ns1__CreateOSD * SOAP_FMAC4 soap_in__ns1__CreateOSD(struct soap*, const char*, _ns1__CreateOSD *, const char*);

#ifndef soap_write__ns1__CreateOSD
#define soap_write__ns1__CreateOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateOSD * SOAP_FMAC4 soap_get__ns1__CreateOSD(struct soap*, _ns1__CreateOSD *, const char*, const char*);

#ifndef soap_read__ns1__CreateOSD
#define soap_read__ns1__CreateOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateOSD * SOAP_FMAC2 soap_instantiate__ns1__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateOSD * soap_new__ns1__CreateOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateOSD * soap_new_req__ns1__CreateOSD(struct soap *soap, tt__OSDConfiguration *OSD) { _ns1__CreateOSD *_p = soap_instantiate__ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSD::OSD = OSD; } return _p; }

inline _ns1__CreateOSD * soap_new_set__ns1__CreateOSD(struct soap *soap, tt__OSDConfiguration *OSD) { _ns1__CreateOSD *_p = soap_instantiate__ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateOSD::OSD = OSD; } return _p; }

inline void soap_delete__ns1__CreateOSD(struct soap *soap, _ns1__CreateOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDOptionsResponse
#define SOAP_TYPE__ns1__GetOSDOptionsResponse (770)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDOptionsResponse(struct soap*, const char*, int, const _ns1__GetOSDOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetOSDOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetOSDOptionsResponse(struct soap*, const char*, _ns1__GetOSDOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetOSDOptionsResponse
#define soap_write__ns1__GetOSDOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetOSDOptionsResponse(struct soap*, _ns1__GetOSDOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDOptionsResponse
#define soap_read__ns1__GetOSDOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOSDOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDOptionsResponse * soap_new__ns1__GetOSDOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDOptionsResponse * soap_new_req__ns1__GetOSDOptionsResponse(struct soap *soap, tt__OSDConfigurationOptions *OSDOptions) { _ns1__GetOSDOptionsResponse *_p = soap_instantiate__ns1__GetOSDOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptionsResponse::OSDOptions = OSDOptions; } return _p; }

inline _ns1__GetOSDOptionsResponse * soap_new_set__ns1__GetOSDOptionsResponse(struct soap *soap, tt__OSDConfigurationOptions *OSDOptions) { _ns1__GetOSDOptionsResponse *_p = soap_instantiate__ns1__GetOSDOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptionsResponse::OSDOptions = OSDOptions; } return _p; }

inline void soap_delete__ns1__GetOSDOptionsResponse(struct soap *soap, _ns1__GetOSDOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDOptions
#define SOAP_TYPE__ns1__GetOSDOptions (769)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDOptions(struct soap*, const char*, int, const _ns1__GetOSDOptions *, const char*);
SOAP_FMAC3 _ns1__GetOSDOptions * SOAP_FMAC4 soap_in__ns1__GetOSDOptions(struct soap*, const char*, _ns1__GetOSDOptions *, const char*);

#ifndef soap_write__ns1__GetOSDOptions
#define soap_write__ns1__GetOSDOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDOptions * SOAP_FMAC4 soap_get__ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDOptions
#define soap_read__ns1__GetOSDOptions(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDOptions * SOAP_FMAC2 soap_instantiate__ns1__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDOptions * soap_new__ns1__GetOSDOptions(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDOptions(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDOptions * soap_new_req__ns1__GetOSDOptions(struct soap *soap, std::string& ConfigurationToken) { _ns1__GetOSDOptions *_p = soap_instantiate__ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptions::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetOSDOptions * soap_new_set__ns1__GetOSDOptions(struct soap *soap, std::string& ConfigurationToken) { _ns1__GetOSDOptions *_p = soap_instantiate__ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDOptions::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetOSDOptions(struct soap *soap, _ns1__GetOSDOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetOSD
#define SOAP_TYPE__ns1__SetOSD (768)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetOSD(struct soap*, const char*, int, const _ns1__SetOSD *, const char*);
SOAP_FMAC3 _ns1__SetOSD * SOAP_FMAC4 soap_in__ns1__SetOSD(struct soap*, const char*, _ns1__SetOSD *, const char*);

#ifndef soap_write__ns1__SetOSD
#define soap_write__ns1__SetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetOSD * SOAP_FMAC4 soap_get__ns1__SetOSD(struct soap*, _ns1__SetOSD *, const char*, const char*);

#ifndef soap_read__ns1__SetOSD
#define soap_read__ns1__SetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetOSD * SOAP_FMAC2 soap_instantiate__ns1__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetOSD * soap_new__ns1__SetOSD(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetOSD(soap, n, NULL, NULL, NULL); }

inline _ns1__SetOSD * soap_new_req__ns1__SetOSD(struct soap *soap, tt__OSDConfiguration *OSD) { _ns1__SetOSD *_p = soap_instantiate__ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetOSD::OSD = OSD; } return _p; }

inline _ns1__SetOSD * soap_new_set__ns1__SetOSD(struct soap *soap, tt__OSDConfiguration *OSD) { _ns1__SetOSD *_p = soap_instantiate__ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetOSD::OSD = OSD; } return _p; }

inline void soap_delete__ns1__SetOSD(struct soap *soap, _ns1__SetOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDsResponse
#define SOAP_TYPE__ns1__GetOSDsResponse (767)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDsResponse(struct soap*, const char*, int, const _ns1__GetOSDsResponse *, const char*);
SOAP_FMAC3 _ns1__GetOSDsResponse * SOAP_FMAC4 soap_in__ns1__GetOSDsResponse(struct soap*, const char*, _ns1__GetOSDsResponse *, const char*);

#ifndef soap_write__ns1__GetOSDsResponse
#define soap_write__ns1__GetOSDsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDsResponse * SOAP_FMAC4 soap_get__ns1__GetOSDsResponse(struct soap*, _ns1__GetOSDsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDsResponse
#define soap_read__ns1__GetOSDsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOSDsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDsResponse * soap_new__ns1__GetOSDsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDsResponse * soap_new_req__ns1__GetOSDsResponse(struct soap *soap) { _ns1__GetOSDsResponse *_p = soap_instantiate__ns1__GetOSDsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetOSDsResponse * soap_new_set__ns1__GetOSDsResponse(struct soap *soap, std::vector<tt__OSDConfiguration * >& OSDs) { _ns1__GetOSDsResponse *_p = soap_instantiate__ns1__GetOSDsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDsResponse::OSDs = OSDs; } return _p; }

inline void soap_delete__ns1__GetOSDsResponse(struct soap *soap, _ns1__GetOSDsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOSDs
#define SOAP_TYPE__ns1__GetOSDs (766)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOSDs(struct soap*, const char*, int, const _ns1__GetOSDs *, const char*);
SOAP_FMAC3 _ns1__GetOSDs * SOAP_FMAC4 soap_in__ns1__GetOSDs(struct soap*, const char*, _ns1__GetOSDs *, const char*);

#ifndef soap_write__ns1__GetOSDs
#define soap_write__ns1__GetOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDs * SOAP_FMAC4 soap_get__ns1__GetOSDs(struct soap*, _ns1__GetOSDs *, const char*, const char*);

#ifndef soap_read__ns1__GetOSDs
#define soap_read__ns1__GetOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOSDs * SOAP_FMAC2 soap_instantiate__ns1__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOSDs * soap_new__ns1__GetOSDs(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOSDs(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOSDs * soap_new_req__ns1__GetOSDs(struct soap *soap) { _ns1__GetOSDs *_p = soap_instantiate__ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetOSDs * soap_new_set__ns1__GetOSDs(struct soap *soap, std::string *OSDToken, std::string *ConfigurationToken) { _ns1__GetOSDs *_p = soap_instantiate__ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOSDs::OSDToken = OSDToken; _p->_ns1__GetOSDs::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetOSDs(struct soap *soap, _ns1__GetOSDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOSDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceModeResponse
#define SOAP_TYPE__ns1__SetVideoSourceModeResponse (765)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceModeResponse(struct soap*, const char*, int, const _ns1__SetVideoSourceModeResponse *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceModeResponse * SOAP_FMAC4 soap_in__ns1__SetVideoSourceModeResponse(struct soap*, const char*, _ns1__SetVideoSourceModeResponse *, const char*);

#ifndef soap_write__ns1__SetVideoSourceModeResponse
#define soap_write__ns1__SetVideoSourceModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceModeResponse * SOAP_FMAC4 soap_get__ns1__SetVideoSourceModeResponse(struct soap*, _ns1__SetVideoSourceModeResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceModeResponse
#define soap_read__ns1__SetVideoSourceModeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceModeResponse * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceModeResponse * soap_new__ns1__SetVideoSourceModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceModeResponse * soap_new_req__ns1__SetVideoSourceModeResponse(struct soap *soap, bool Reboot) { _ns1__SetVideoSourceModeResponse *_p = soap_instantiate__ns1__SetVideoSourceModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceModeResponse::Reboot = Reboot; } return _p; }

inline _ns1__SetVideoSourceModeResponse * soap_new_set__ns1__SetVideoSourceModeResponse(struct soap *soap, bool Reboot) { _ns1__SetVideoSourceModeResponse *_p = soap_instantiate__ns1__SetVideoSourceModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceModeResponse::Reboot = Reboot; } return _p; }

inline void soap_delete__ns1__SetVideoSourceModeResponse(struct soap *soap, _ns1__SetVideoSourceModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceMode
#define SOAP_TYPE__ns1__SetVideoSourceMode (764)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceMode(struct soap*, const char*, int, const _ns1__SetVideoSourceMode *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceMode * SOAP_FMAC4 soap_in__ns1__SetVideoSourceMode(struct soap*, const char*, _ns1__SetVideoSourceMode *, const char*);

#ifndef soap_write__ns1__SetVideoSourceMode
#define soap_write__ns1__SetVideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceMode * SOAP_FMAC4 soap_get__ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceMode
#define soap_read__ns1__SetVideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceMode * soap_new__ns1__SetVideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceMode(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceMode * soap_new_req__ns1__SetVideoSourceMode(struct soap *soap, std::string& VideoSourceToken, std::string& VideoSourceModeToken) { _ns1__SetVideoSourceMode *_p = soap_instantiate__ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceMode::VideoSourceToken = VideoSourceToken; _p->_ns1__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken; } return _p; }

inline _ns1__SetVideoSourceMode * soap_new_set__ns1__SetVideoSourceMode(struct soap *soap, std::string& VideoSourceToken, std::string& VideoSourceModeToken) { _ns1__SetVideoSourceMode *_p = soap_instantiate__ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceMode::VideoSourceToken = VideoSourceToken; _p->_ns1__SetVideoSourceMode::VideoSourceModeToken = VideoSourceModeToken; } return _p; }

inline void soap_delete__ns1__SetVideoSourceMode(struct soap *soap, _ns1__SetVideoSourceMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceModesResponse
#define SOAP_TYPE__ns1__GetVideoSourceModesResponse (763)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceModesResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceModesResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceModesResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceModesResponse(struct soap*, const char*, _ns1__GetVideoSourceModesResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceModesResponse
#define soap_write__ns1__GetVideoSourceModesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceModesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceModesResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceModesResponse(struct soap*, _ns1__GetVideoSourceModesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceModesResponse
#define soap_read__ns1__GetVideoSourceModesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceModesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceModesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceModesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceModesResponse * soap_new__ns1__GetVideoSourceModesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceModesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceModesResponse * soap_new_req__ns1__GetVideoSourceModesResponse(struct soap *soap, std::vector<ns1__VideoSourceMode * >& VideoSourceModes) { _ns1__GetVideoSourceModesResponse *_p = soap_instantiate__ns1__GetVideoSourceModesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes; } return _p; }

inline _ns1__GetVideoSourceModesResponse * soap_new_set__ns1__GetVideoSourceModesResponse(struct soap *soap, std::vector<ns1__VideoSourceMode * >& VideoSourceModes) { _ns1__GetVideoSourceModesResponse *_p = soap_instantiate__ns1__GetVideoSourceModesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModesResponse::VideoSourceModes = VideoSourceModes; } return _p; }

inline void soap_delete__ns1__GetVideoSourceModesResponse(struct soap *soap, _ns1__GetVideoSourceModesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceModesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceModes
#define SOAP_TYPE__ns1__GetVideoSourceModes (762)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceModes(struct soap*, const char*, int, const _ns1__GetVideoSourceModes *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceModes * SOAP_FMAC4 soap_in__ns1__GetVideoSourceModes(struct soap*, const char*, _ns1__GetVideoSourceModes *, const char*);

#ifndef soap_write__ns1__GetVideoSourceModes
#define soap_write__ns1__GetVideoSourceModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceModes * SOAP_FMAC4 soap_get__ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceModes
#define soap_read__ns1__GetVideoSourceModes(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceModes * soap_new__ns1__GetVideoSourceModes(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceModes(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceModes * soap_new_req__ns1__GetVideoSourceModes(struct soap *soap, std::string& VideoSourceToken) { _ns1__GetVideoSourceModes *_p = soap_instantiate__ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModes::VideoSourceToken = VideoSourceToken; } return _p; }

inline _ns1__GetVideoSourceModes * soap_new_set__ns1__GetVideoSourceModes(struct soap *soap, std::string& VideoSourceToken) { _ns1__GetVideoSourceModes *_p = soap_instantiate__ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceModes::VideoSourceToken = VideoSourceToken; } return _p; }

inline void soap_delete__ns1__GetVideoSourceModes(struct soap *soap, _ns1__GetVideoSourceModes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceModes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetSnapshotUriResponse
#define SOAP_TYPE__ns1__GetSnapshotUriResponse (761)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSnapshotUriResponse(struct soap*, const char*, int, const _ns1__GetSnapshotUriResponse *, const char*);
SOAP_FMAC3 _ns1__GetSnapshotUriResponse * SOAP_FMAC4 soap_in__ns1__GetSnapshotUriResponse(struct soap*, const char*, _ns1__GetSnapshotUriResponse *, const char*);

#ifndef soap_write__ns1__GetSnapshotUriResponse
#define soap_write__ns1__GetSnapshotUriResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetSnapshotUriResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetSnapshotUriResponse * SOAP_FMAC4 soap_get__ns1__GetSnapshotUriResponse(struct soap*, _ns1__GetSnapshotUriResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetSnapshotUriResponse
#define soap_read__ns1__GetSnapshotUriResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetSnapshotUriResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetSnapshotUriResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSnapshotUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSnapshotUriResponse * soap_new__ns1__GetSnapshotUriResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetSnapshotUriResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetSnapshotUriResponse * soap_new_req__ns1__GetSnapshotUriResponse(struct soap *soap, std::string& Uri) { _ns1__GetSnapshotUriResponse *_p = soap_instantiate__ns1__GetSnapshotUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUriResponse::Uri = Uri; } return _p; }

inline _ns1__GetSnapshotUriResponse * soap_new_set__ns1__GetSnapshotUriResponse(struct soap *soap, std::string& Uri) { _ns1__GetSnapshotUriResponse *_p = soap_instantiate__ns1__GetSnapshotUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUriResponse::Uri = Uri; } return _p; }

inline void soap_delete__ns1__GetSnapshotUriResponse(struct soap *soap, _ns1__GetSnapshotUriResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSnapshotUriResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetSnapshotUri
#define SOAP_TYPE__ns1__GetSnapshotUri (760)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSnapshotUri(struct soap*, const char*, int, const _ns1__GetSnapshotUri *, const char*);
SOAP_FMAC3 _ns1__GetSnapshotUri * SOAP_FMAC4 soap_in__ns1__GetSnapshotUri(struct soap*, const char*, _ns1__GetSnapshotUri *, const char*);

#ifndef soap_write__ns1__GetSnapshotUri
#define soap_write__ns1__GetSnapshotUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetSnapshotUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetSnapshotUri * SOAP_FMAC4 soap_get__ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri *, const char*, const char*);

#ifndef soap_read__ns1__GetSnapshotUri
#define soap_read__ns1__GetSnapshotUri(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetSnapshotUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetSnapshotUri * SOAP_FMAC2 soap_instantiate__ns1__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSnapshotUri * soap_new__ns1__GetSnapshotUri(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetSnapshotUri(soap, n, NULL, NULL, NULL); }

inline _ns1__GetSnapshotUri * soap_new_req__ns1__GetSnapshotUri(struct soap *soap, std::string& ProfileToken) { _ns1__GetSnapshotUri *_p = soap_instantiate__ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUri::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetSnapshotUri * soap_new_set__ns1__GetSnapshotUri(struct soap *soap, std::string& ProfileToken) { _ns1__GetSnapshotUri *_p = soap_instantiate__ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetSnapshotUri::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetSnapshotUri(struct soap *soap, _ns1__GetSnapshotUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSnapshotUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetSynchronizationPointResponse
#define SOAP_TYPE__ns1__SetSynchronizationPointResponse (759)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSynchronizationPointResponse(struct soap*, const char*, int, const _ns1__SetSynchronizationPointResponse *, const char*);
SOAP_FMAC3 _ns1__SetSynchronizationPointResponse * SOAP_FMAC4 soap_in__ns1__SetSynchronizationPointResponse(struct soap*, const char*, _ns1__SetSynchronizationPointResponse *, const char*);

#ifndef soap_write__ns1__SetSynchronizationPointResponse
#define soap_write__ns1__SetSynchronizationPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetSynchronizationPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetSynchronizationPointResponse * SOAP_FMAC4 soap_get__ns1__SetSynchronizationPointResponse(struct soap*, _ns1__SetSynchronizationPointResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetSynchronizationPointResponse
#define soap_read__ns1__SetSynchronizationPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetSynchronizationPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetSynchronizationPointResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSynchronizationPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetSynchronizationPointResponse * soap_new__ns1__SetSynchronizationPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetSynchronizationPointResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetSynchronizationPointResponse * soap_new_req__ns1__SetSynchronizationPointResponse(struct soap *soap) { _ns1__SetSynchronizationPointResponse *_p = soap_instantiate__ns1__SetSynchronizationPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetSynchronizationPointResponse * soap_new_set__ns1__SetSynchronizationPointResponse(struct soap *soap) { _ns1__SetSynchronizationPointResponse *_p = soap_instantiate__ns1__SetSynchronizationPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__SetSynchronizationPointResponse(struct soap *soap, _ns1__SetSynchronizationPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSynchronizationPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetSynchronizationPoint
#define SOAP_TYPE__ns1__SetSynchronizationPoint (758)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSynchronizationPoint(struct soap*, const char*, int, const _ns1__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 _ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_in__ns1__SetSynchronizationPoint(struct soap*, const char*, _ns1__SetSynchronizationPoint *, const char*);

#ifndef soap_write__ns1__SetSynchronizationPoint
#define soap_write__ns1__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_get__ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_read__ns1__SetSynchronizationPoint
#define soap_read__ns1__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate__ns1__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetSynchronizationPoint * soap_new__ns1__SetSynchronizationPoint(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetSynchronizationPoint(soap, n, NULL, NULL, NULL); }

inline _ns1__SetSynchronizationPoint * soap_new_req__ns1__SetSynchronizationPoint(struct soap *soap, std::string& ProfileToken) { _ns1__SetSynchronizationPoint *_p = soap_instantiate__ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetSynchronizationPoint::ProfileToken = ProfileToken; } return _p; }

inline _ns1__SetSynchronizationPoint * soap_new_set__ns1__SetSynchronizationPoint(struct soap *soap, std::string& ProfileToken) { _ns1__SetSynchronizationPoint *_p = soap_instantiate__ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetSynchronizationPoint::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__SetSynchronizationPoint(struct soap *soap, _ns1__SetSynchronizationPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSynchronizationPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetStreamUriResponse
#define SOAP_TYPE__ns1__GetStreamUriResponse (757)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStreamUriResponse(struct soap*, const char*, int, const _ns1__GetStreamUriResponse *, const char*);
SOAP_FMAC3 _ns1__GetStreamUriResponse * SOAP_FMAC4 soap_in__ns1__GetStreamUriResponse(struct soap*, const char*, _ns1__GetStreamUriResponse *, const char*);

#ifndef soap_write__ns1__GetStreamUriResponse
#define soap_write__ns1__GetStreamUriResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetStreamUriResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetStreamUriResponse * SOAP_FMAC4 soap_get__ns1__GetStreamUriResponse(struct soap*, _ns1__GetStreamUriResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetStreamUriResponse
#define soap_read__ns1__GetStreamUriResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetStreamUriResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetStreamUriResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStreamUriResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStreamUriResponse * soap_new__ns1__GetStreamUriResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetStreamUriResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetStreamUriResponse * soap_new_req__ns1__GetStreamUriResponse(struct soap *soap, std::string& Uri) { _ns1__GetStreamUriResponse *_p = soap_instantiate__ns1__GetStreamUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUriResponse::Uri = Uri; } return _p; }

inline _ns1__GetStreamUriResponse * soap_new_set__ns1__GetStreamUriResponse(struct soap *soap, std::string& Uri) { _ns1__GetStreamUriResponse *_p = soap_instantiate__ns1__GetStreamUriResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUriResponse::Uri = Uri; } return _p; }

inline void soap_delete__ns1__GetStreamUriResponse(struct soap *soap, _ns1__GetStreamUriResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStreamUriResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetStreamUri
#define SOAP_TYPE__ns1__GetStreamUri (756)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStreamUri(struct soap*, const char*, int, const _ns1__GetStreamUri *, const char*);
SOAP_FMAC3 _ns1__GetStreamUri * SOAP_FMAC4 soap_in__ns1__GetStreamUri(struct soap*, const char*, _ns1__GetStreamUri *, const char*);

#ifndef soap_write__ns1__GetStreamUri
#define soap_write__ns1__GetStreamUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetStreamUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetStreamUri * SOAP_FMAC4 soap_get__ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri *, const char*, const char*);

#ifndef soap_read__ns1__GetStreamUri
#define soap_read__ns1__GetStreamUri(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetStreamUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetStreamUri * SOAP_FMAC2 soap_instantiate__ns1__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStreamUri * soap_new__ns1__GetStreamUri(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetStreamUri(soap, n, NULL, NULL, NULL); }

inline _ns1__GetStreamUri * soap_new_req__ns1__GetStreamUri(struct soap *soap, std::string& Protocol, std::string& ProfileToken) { _ns1__GetStreamUri *_p = soap_instantiate__ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUri::Protocol = Protocol; _p->_ns1__GetStreamUri::ProfileToken = ProfileToken; } return _p; }

inline _ns1__GetStreamUri * soap_new_set__ns1__GetStreamUri(struct soap *soap, std::string& Protocol, std::string& ProfileToken) { _ns1__GetStreamUri *_p = soap_instantiate__ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetStreamUri::Protocol = Protocol; _p->_ns1__GetStreamUri::ProfileToken = ProfileToken; } return _p; }

inline void soap_delete__ns1__GetStreamUri(struct soap *soap, _ns1__GetStreamUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStreamUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderInstancesResponse
#define SOAP_TYPE__ns1__GetVideoEncoderInstancesResponse (755)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderInstancesResponse(struct soap*, const char*, int, const _ns1__GetVideoEncoderInstancesResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderInstancesResponse * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderInstancesResponse(struct soap*, const char*, _ns1__GetVideoEncoderInstancesResponse *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderInstancesResponse
#define soap_write__ns1__GetVideoEncoderInstancesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderInstancesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderInstancesResponse * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderInstancesResponse(struct soap*, _ns1__GetVideoEncoderInstancesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderInstancesResponse
#define soap_read__ns1__GetVideoEncoderInstancesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderInstancesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderInstancesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderInstancesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderInstancesResponse * soap_new__ns1__GetVideoEncoderInstancesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderInstancesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderInstancesResponse * soap_new_req__ns1__GetVideoEncoderInstancesResponse(struct soap *soap, ns1__EncoderInstanceInfo *Info) { _ns1__GetVideoEncoderInstancesResponse *_p = soap_instantiate__ns1__GetVideoEncoderInstancesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderInstancesResponse::Info = Info; } return _p; }

inline _ns1__GetVideoEncoderInstancesResponse * soap_new_set__ns1__GetVideoEncoderInstancesResponse(struct soap *soap, ns1__EncoderInstanceInfo *Info) { _ns1__GetVideoEncoderInstancesResponse *_p = soap_instantiate__ns1__GetVideoEncoderInstancesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderInstancesResponse::Info = Info; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderInstancesResponse(struct soap *soap, _ns1__GetVideoEncoderInstancesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderInstancesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderInstances
#define SOAP_TYPE__ns1__GetVideoEncoderInstances (754)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderInstances(struct soap*, const char*, int, const _ns1__GetVideoEncoderInstances *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderInstances * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderInstances(struct soap*, const char*, _ns1__GetVideoEncoderInstances *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderInstances
#define soap_write__ns1__GetVideoEncoderInstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderInstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderInstances * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderInstances(struct soap*, _ns1__GetVideoEncoderInstances *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderInstances
#define soap_read__ns1__GetVideoEncoderInstances(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderInstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderInstances * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderInstances * soap_new__ns1__GetVideoEncoderInstances(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderInstances(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderInstances * soap_new_req__ns1__GetVideoEncoderInstances(struct soap *soap, std::string& ConfigurationToken) { _ns1__GetVideoEncoderInstances *_p = soap_instantiate__ns1__GetVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderInstances::ConfigurationToken = ConfigurationToken; } return _p; }

inline _ns1__GetVideoEncoderInstances * soap_new_set__ns1__GetVideoEncoderInstances(struct soap *soap, std::string& ConfigurationToken) { _ns1__GetVideoEncoderInstances *_p = soap_instantiate__ns1__GetVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderInstances::ConfigurationToken = ConfigurationToken; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderInstances(struct soap *soap, _ns1__GetVideoEncoderInstances *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderInstances(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurationOptionsResponse (753)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurationOptionsResponse
#define soap_write__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, _ns1__GetAudioDecoderConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurationOptionsResponse
#define soap_read__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurationOptionsResponse * soap_new__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurationOptionsResponse * soap_new_req__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, std::vector<tt__AudioEncoder2ConfigurationOptions * >& Options) { _ns1__GetAudioDecoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioDecoderConfigurationOptionsResponse * soap_new_set__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, std::vector<tt__AudioEncoder2ConfigurationOptions * >& Options) { _ns1__GetAudioDecoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioDecoderConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioOutputConfigurationOptionsResponse (752)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioOutputConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurationOptionsResponse
#define soap_write__ns1__GetAudioOutputConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, _ns1__GetAudioOutputConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurationOptionsResponse
#define soap_read__ns1__GetAudioOutputConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurationOptionsResponse * soap_new__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurationOptionsResponse * soap_new_req__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, tt__AudioOutputConfigurationOptions *Options) { _ns1__GetAudioOutputConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioOutputConfigurationOptionsResponse * soap_new_set__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, tt__AudioOutputConfigurationOptions *Options) { _ns1__GetAudioOutputConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioOutputConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetMetadataConfigurationOptionsResponse (751)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetMetadataConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetMetadataConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurationOptionsResponse
#define soap_write__ns1__GetMetadataConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, _ns1__GetMetadataConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurationOptionsResponse
#define soap_read__ns1__GetMetadataConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurationOptionsResponse * soap_new__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurationOptionsResponse * soap_new_req__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, tt__MetadataConfigurationOptions *Options) { _ns1__GetMetadataConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetMetadataConfigurationOptionsResponse * soap_new_set__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, tt__MetadataConfigurationOptions *Options) { _ns1__GetMetadataConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurationOptionsResponse(struct soap *soap, _ns1__GetMetadataConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurationOptionsResponse (750)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurationOptionsResponse
#define soap_write__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, _ns1__GetAudioEncoderConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurationOptionsResponse
#define soap_read__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurationOptionsResponse * soap_new__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurationOptionsResponse * soap_new_req__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, std::vector<tt__AudioEncoder2ConfigurationOptions * >& Options) { _ns1__GetAudioEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioEncoderConfigurationOptionsResponse * soap_new_set__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, std::vector<tt__AudioEncoder2ConfigurationOptions * >& Options) { _ns1__GetAudioEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioEncoderConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetAudioSourceConfigurationOptionsResponse (749)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetAudioSourceConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurationOptionsResponse
#define soap_write__ns1__GetAudioSourceConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, _ns1__GetAudioSourceConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurationOptionsResponse
#define soap_read__ns1__GetAudioSourceConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurationOptionsResponse * soap_new__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurationOptionsResponse * soap_new_req__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, tt__AudioSourceConfigurationOptions *Options) { _ns1__GetAudioSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetAudioSourceConfigurationOptionsResponse * soap_new_set__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, tt__AudioSourceConfigurationOptions *Options) { _ns1__GetAudioSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap *soap, _ns1__GetAudioSourceConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurationOptionsResponse (748)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurationOptionsResponse
#define soap_write__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, _ns1__GetVideoEncoderConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurationOptionsResponse
#define soap_read__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurationOptionsResponse * soap_new__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurationOptionsResponse * soap_new_req__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, std::vector<tt__VideoEncoder2ConfigurationOptions * >& Options) { _ns1__GetVideoEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetVideoEncoderConfigurationOptionsResponse * soap_new_set__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, std::vector<tt__VideoEncoder2ConfigurationOptions * >& Options) { _ns1__GetVideoEncoderConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap *soap, _ns1__GetVideoEncoderConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__ns1__GetVideoSourceConfigurationOptionsResponse (747)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurationOptionsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, const char*, _ns1__GetVideoSourceConfigurationOptionsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurationOptionsResponse
#define soap_write__ns1__GetVideoSourceConfigurationOptionsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurationOptionsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, _ns1__GetVideoSourceConfigurationOptionsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurationOptionsResponse
#define soap_read__ns1__GetVideoSourceConfigurationOptionsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurationOptionsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurationOptionsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurationOptionsResponse * soap_new__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurationOptionsResponse * soap_new_req__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, tt__VideoSourceConfigurationOptions *Options) { _ns1__GetVideoSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline _ns1__GetVideoSourceConfigurationOptionsResponse * soap_new_set__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, tt__VideoSourceConfigurationOptions *Options) { _ns1__GetVideoSourceConfigurationOptionsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationOptionsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationOptionsResponse::Options = Options; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap *soap, _ns1__GetVideoSourceConfigurationOptionsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurationOptionsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioDecoderConfiguration
#define SOAP_TYPE__ns1__SetAudioDecoderConfiguration (746)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioDecoderConfiguration(struct soap*, const char*, int, const _ns1__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioDecoderConfiguration(struct soap*, const char*, _ns1__SetAudioDecoderConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioDecoderConfiguration
#define soap_write__ns1__SetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioDecoderConfiguration
#define soap_read__ns1__SetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioDecoderConfiguration * soap_new__ns1__SetAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioDecoderConfiguration * soap_new_req__ns1__SetAudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration *Configuration) { _ns1__SetAudioDecoderConfiguration *_p = soap_instantiate__ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioDecoderConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetAudioDecoderConfiguration * soap_new_set__ns1__SetAudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration *Configuration) { _ns1__SetAudioDecoderConfiguration *_p = soap_instantiate__ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioDecoderConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetAudioDecoderConfiguration(struct soap *soap, _ns1__SetAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioOutputConfiguration
#define SOAP_TYPE__ns1__SetAudioOutputConfiguration (745)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioOutputConfiguration(struct soap*, const char*, int, const _ns1__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioOutputConfiguration(struct soap*, const char*, _ns1__SetAudioOutputConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioOutputConfiguration
#define soap_write__ns1__SetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioOutputConfiguration
#define soap_read__ns1__SetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioOutputConfiguration * soap_new__ns1__SetAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioOutputConfiguration * soap_new_req__ns1__SetAudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration *Configuration) { _ns1__SetAudioOutputConfiguration *_p = soap_instantiate__ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioOutputConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetAudioOutputConfiguration * soap_new_set__ns1__SetAudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration *Configuration) { _ns1__SetAudioOutputConfiguration *_p = soap_instantiate__ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioOutputConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetAudioOutputConfiguration(struct soap *soap, _ns1__SetAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetMetadataConfiguration
#define SOAP_TYPE__ns1__SetMetadataConfiguration (744)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMetadataConfiguration(struct soap*, const char*, int, const _ns1__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_in__ns1__SetMetadataConfiguration(struct soap*, const char*, _ns1__SetMetadataConfiguration *, const char*);

#ifndef soap_write__ns1__SetMetadataConfiguration
#define soap_write__ns1__SetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_get__ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetMetadataConfiguration
#define soap_read__ns1__SetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMetadataConfiguration * soap_new__ns1__SetMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetMetadataConfiguration * soap_new_req__ns1__SetMetadataConfiguration(struct soap *soap, tt__MetadataConfiguration *Configuration) { _ns1__SetMetadataConfiguration *_p = soap_instantiate__ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetMetadataConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetMetadataConfiguration * soap_new_set__ns1__SetMetadataConfiguration(struct soap *soap, tt__MetadataConfiguration *Configuration) { _ns1__SetMetadataConfiguration *_p = soap_instantiate__ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetMetadataConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetMetadataConfiguration(struct soap *soap, _ns1__SetMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioSourceConfiguration
#define SOAP_TYPE__ns1__SetAudioSourceConfiguration (743)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioSourceConfiguration(struct soap*, const char*, int, const _ns1__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioSourceConfiguration(struct soap*, const char*, _ns1__SetAudioSourceConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioSourceConfiguration
#define soap_write__ns1__SetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioSourceConfiguration
#define soap_read__ns1__SetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioSourceConfiguration * soap_new__ns1__SetAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioSourceConfiguration * soap_new_req__ns1__SetAudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration *Configuration) { _ns1__SetAudioSourceConfiguration *_p = soap_instantiate__ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioSourceConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetAudioSourceConfiguration * soap_new_set__ns1__SetAudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration *Configuration) { _ns1__SetAudioSourceConfiguration *_p = soap_instantiate__ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioSourceConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetAudioSourceConfiguration(struct soap *soap, _ns1__SetAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetAudioEncoderConfiguration
#define SOAP_TYPE__ns1__SetAudioEncoderConfiguration (742)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAudioEncoderConfiguration(struct soap*, const char*, int, const _ns1__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__SetAudioEncoderConfiguration(struct soap*, const char*, _ns1__SetAudioEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__SetAudioEncoderConfiguration
#define soap_write__ns1__SetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetAudioEncoderConfiguration
#define soap_read__ns1__SetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAudioEncoderConfiguration * soap_new__ns1__SetAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetAudioEncoderConfiguration * soap_new_req__ns1__SetAudioEncoderConfiguration(struct soap *soap, tt__AudioEncoder2Configuration *Configuration) { _ns1__SetAudioEncoderConfiguration *_p = soap_instantiate__ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioEncoderConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetAudioEncoderConfiguration * soap_new_set__ns1__SetAudioEncoderConfiguration(struct soap *soap, tt__AudioEncoder2Configuration *Configuration) { _ns1__SetAudioEncoderConfiguration *_p = soap_instantiate__ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetAudioEncoderConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetAudioEncoderConfiguration(struct soap *soap, _ns1__SetAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoSourceConfiguration
#define SOAP_TYPE__ns1__SetVideoSourceConfiguration (741)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoSourceConfiguration(struct soap*, const char*, int, const _ns1__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in__ns1__SetVideoSourceConfiguration(struct soap*, const char*, _ns1__SetVideoSourceConfiguration *, const char*);

#ifndef soap_write__ns1__SetVideoSourceConfiguration
#define soap_write__ns1__SetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get__ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoSourceConfiguration
#define soap_read__ns1__SetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoSourceConfiguration * soap_new__ns1__SetVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoSourceConfiguration * soap_new_req__ns1__SetVideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration *Configuration) { _ns1__SetVideoSourceConfiguration *_p = soap_instantiate__ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetVideoSourceConfiguration * soap_new_set__ns1__SetVideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration *Configuration) { _ns1__SetVideoSourceConfiguration *_p = soap_instantiate__ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoSourceConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetVideoSourceConfiguration(struct soap *soap, _ns1__SetVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SetVideoEncoderConfiguration
#define SOAP_TYPE__ns1__SetVideoEncoderConfiguration (740)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetVideoEncoderConfiguration(struct soap*, const char*, int, const _ns1__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in__ns1__SetVideoEncoderConfiguration(struct soap*, const char*, _ns1__SetVideoEncoderConfiguration *, const char*);

#ifndef soap_write__ns1__SetVideoEncoderConfiguration
#define soap_write__ns1__SetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get__ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__SetVideoEncoderConfiguration
#define soap_read__ns1__SetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate__ns1__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetVideoEncoderConfiguration * soap_new__ns1__SetVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__SetVideoEncoderConfiguration * soap_new_req__ns1__SetVideoEncoderConfiguration(struct soap *soap, tt__VideoEncoder2Configuration *Configuration) { _ns1__SetVideoEncoderConfiguration *_p = soap_instantiate__ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoEncoderConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__SetVideoEncoderConfiguration * soap_new_set__ns1__SetVideoEncoderConfiguration(struct soap *soap, tt__VideoEncoder2Configuration *Configuration) { _ns1__SetVideoEncoderConfiguration *_p = soap_instantiate__ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetVideoEncoderConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__SetVideoEncoderConfiguration(struct soap *soap, _ns1__SetVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioDecoderConfigurationsResponse (739)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioDecoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioDecoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioDecoderConfigurationsResponse
#define soap_write__ns1__GetAudioDecoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioDecoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioDecoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, _ns1__GetAudioDecoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioDecoderConfigurationsResponse
#define soap_read__ns1__GetAudioDecoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioDecoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioDecoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioDecoderConfigurationsResponse * soap_new__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioDecoderConfigurationsResponse * soap_new_req__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap) { _ns1__GetAudioDecoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioDecoderConfigurationsResponse * soap_new_set__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap, std::vector<tt__AudioDecoderConfiguration * >& Configurations) { _ns1__GetAudioDecoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioDecoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioDecoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioDecoderConfigurationsResponse(struct soap *soap, _ns1__GetAudioDecoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioDecoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioOutputConfigurationsResponse (738)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioOutputConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioOutputConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioOutputConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioOutputConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioOutputConfigurationsResponse
#define soap_write__ns1__GetAudioOutputConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioOutputConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioOutputConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioOutputConfigurationsResponse(struct soap*, _ns1__GetAudioOutputConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioOutputConfigurationsResponse
#define soap_read__ns1__GetAudioOutputConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioOutputConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioOutputConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioOutputConfigurationsResponse * soap_new__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioOutputConfigurationsResponse * soap_new_req__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap) { _ns1__GetAudioOutputConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioOutputConfigurationsResponse * soap_new_set__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap, std::vector<tt__AudioOutputConfiguration * >& Configurations) { _ns1__GetAudioOutputConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioOutputConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioOutputConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioOutputConfigurationsResponse(struct soap *soap, _ns1__GetAudioOutputConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioOutputConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetMetadataConfigurationsResponse
#define SOAP_TYPE__ns1__GetMetadataConfigurationsResponse (737)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMetadataConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetMetadataConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetMetadataConfigurationsResponse(struct soap*, const char*, _ns1__GetMetadataConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetMetadataConfigurationsResponse
#define soap_write__ns1__GetMetadataConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetMetadataConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMetadataConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetMetadataConfigurationsResponse(struct soap*, _ns1__GetMetadataConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetMetadataConfigurationsResponse
#define soap_read__ns1__GetMetadataConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetMetadataConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetMetadataConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetMetadataConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetMetadataConfigurationsResponse * soap_new__ns1__GetMetadataConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetMetadataConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetMetadataConfigurationsResponse * soap_new_req__ns1__GetMetadataConfigurationsResponse(struct soap *soap) { _ns1__GetMetadataConfigurationsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetMetadataConfigurationsResponse * soap_new_set__ns1__GetMetadataConfigurationsResponse(struct soap *soap, std::vector<tt__MetadataConfiguration * >& Configurations) { _ns1__GetMetadataConfigurationsResponse *_p = soap_instantiate__ns1__GetMetadataConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetMetadataConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetMetadataConfigurationsResponse(struct soap *soap, _ns1__GetMetadataConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMetadataConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAnalyticsConfigurationsResponse
#define SOAP_TYPE__ns1__GetAnalyticsConfigurationsResponse (736)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAnalyticsConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAnalyticsConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAnalyticsConfigurationsResponse(struct soap*, const char*, _ns1__GetAnalyticsConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAnalyticsConfigurationsResponse
#define soap_write__ns1__GetAnalyticsConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAnalyticsConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAnalyticsConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAnalyticsConfigurationsResponse(struct soap*, _ns1__GetAnalyticsConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAnalyticsConfigurationsResponse
#define soap_read__ns1__GetAnalyticsConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAnalyticsConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAnalyticsConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAnalyticsConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAnalyticsConfigurationsResponse * soap_new__ns1__GetAnalyticsConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAnalyticsConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAnalyticsConfigurationsResponse * soap_new_req__ns1__GetAnalyticsConfigurationsResponse(struct soap *soap) { _ns1__GetAnalyticsConfigurationsResponse *_p = soap_instantiate__ns1__GetAnalyticsConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAnalyticsConfigurationsResponse * soap_new_set__ns1__GetAnalyticsConfigurationsResponse(struct soap *soap, std::vector<tt__VideoAnalyticsConfiguration * >& Configurations) { _ns1__GetAnalyticsConfigurationsResponse *_p = soap_instantiate__ns1__GetAnalyticsConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAnalyticsConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAnalyticsConfigurationsResponse(struct soap *soap, _ns1__GetAnalyticsConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAnalyticsConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioSourceConfigurationsResponse (735)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioSourceConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioSourceConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioSourceConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioSourceConfigurationsResponse
#define soap_write__ns1__GetAudioSourceConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioSourceConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioSourceConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioSourceConfigurationsResponse(struct soap*, _ns1__GetAudioSourceConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioSourceConfigurationsResponse
#define soap_read__ns1__GetAudioSourceConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioSourceConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioSourceConfigurationsResponse * soap_new__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioSourceConfigurationsResponse * soap_new_req__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap) { _ns1__GetAudioSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioSourceConfigurationsResponse * soap_new_set__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap, std::vector<tt__AudioSourceConfiguration * >& Configurations) { _ns1__GetAudioSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioSourceConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioSourceConfigurationsResponse(struct soap *soap, _ns1__GetAudioSourceConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioSourceConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetAudioEncoderConfigurationsResponse (734)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetAudioEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, const char*, _ns1__GetAudioEncoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetAudioEncoderConfigurationsResponse
#define soap_write__ns1__GetAudioEncoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetAudioEncoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetAudioEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, _ns1__GetAudioEncoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetAudioEncoderConfigurationsResponse
#define soap_read__ns1__GetAudioEncoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetAudioEncoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetAudioEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAudioEncoderConfigurationsResponse * soap_new__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetAudioEncoderConfigurationsResponse * soap_new_req__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap) { _ns1__GetAudioEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetAudioEncoderConfigurationsResponse * soap_new_set__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap, std::vector<tt__AudioEncoder2Configuration * >& Configurations) { _ns1__GetAudioEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetAudioEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetAudioEncoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetAudioEncoderConfigurationsResponse(struct soap *soap, _ns1__GetAudioEncoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAudioEncoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__ns1__GetVideoSourceConfigurationsResponse (733)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoSourceConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetVideoSourceConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoSourceConfigurationsResponse(struct soap*, const char*, _ns1__GetVideoSourceConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoSourceConfigurationsResponse
#define soap_write__ns1__GetVideoSourceConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoSourceConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoSourceConfigurationsResponse(struct soap*, _ns1__GetVideoSourceConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoSourceConfigurationsResponse
#define soap_read__ns1__GetVideoSourceConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoSourceConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoSourceConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoSourceConfigurationsResponse * soap_new__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoSourceConfigurationsResponse * soap_new_req__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap) { _ns1__GetVideoSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoSourceConfigurationsResponse * soap_new_set__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap, std::vector<tt__VideoSourceConfiguration * >& Configurations) { _ns1__GetVideoSourceConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoSourceConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoSourceConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetVideoSourceConfigurationsResponse(struct soap *soap, _ns1__GetVideoSourceConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoSourceConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__ns1__GetVideoEncoderConfigurationsResponse (732)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, int, const _ns1__GetVideoEncoderConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_in__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, const char*, _ns1__GetVideoEncoderConfigurationsResponse *, const char*);

#ifndef soap_write__ns1__GetVideoEncoderConfigurationsResponse
#define soap_write__ns1__GetVideoEncoderConfigurationsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetVideoEncoderConfigurationsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderConfigurationsResponse * SOAP_FMAC4 soap_get__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, _ns1__GetVideoEncoderConfigurationsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetVideoEncoderConfigurationsResponse
#define soap_read__ns1__GetVideoEncoderConfigurationsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetVideoEncoderConfigurationsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetVideoEncoderConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetVideoEncoderConfigurationsResponse * soap_new__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetVideoEncoderConfigurationsResponse * soap_new_req__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap) { _ns1__GetVideoEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetVideoEncoderConfigurationsResponse * soap_new_set__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap, std::vector<tt__VideoEncoder2Configuration * >& Configurations) { _ns1__GetVideoEncoderConfigurationsResponse *_p = soap_instantiate__ns1__GetVideoEncoderConfigurationsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetVideoEncoderConfigurationsResponse::Configurations = Configurations; } return _p; }

inline void soap_delete__ns1__GetVideoEncoderConfigurationsResponse(struct soap *soap, _ns1__GetVideoEncoderConfigurationsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVideoEncoderConfigurationsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteProfileResponse
#define SOAP_TYPE__ns1__DeleteProfileResponse (731)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteProfileResponse(struct soap*, const char*, int, const _ns1__DeleteProfileResponse *, const char*);
SOAP_FMAC3 _ns1__DeleteProfileResponse * SOAP_FMAC4 soap_in__ns1__DeleteProfileResponse(struct soap*, const char*, _ns1__DeleteProfileResponse *, const char*);

#ifndef soap_write__ns1__DeleteProfileResponse
#define soap_write__ns1__DeleteProfileResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteProfileResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteProfileResponse * SOAP_FMAC4 soap_get__ns1__DeleteProfileResponse(struct soap*, _ns1__DeleteProfileResponse *, const char*, const char*);

#ifndef soap_read__ns1__DeleteProfileResponse
#define soap_read__ns1__DeleteProfileResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteProfileResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__DeleteProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteProfileResponse * soap_new__ns1__DeleteProfileResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteProfileResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteProfileResponse * soap_new_req__ns1__DeleteProfileResponse(struct soap *soap) { _ns1__DeleteProfileResponse *_p = soap_instantiate__ns1__DeleteProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__DeleteProfileResponse * soap_new_set__ns1__DeleteProfileResponse(struct soap *soap) { _ns1__DeleteProfileResponse *_p = soap_instantiate__ns1__DeleteProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__DeleteProfileResponse(struct soap *soap, _ns1__DeleteProfileResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteProfileResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DeleteProfile
#define SOAP_TYPE__ns1__DeleteProfile (730)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeleteProfile(struct soap*, const char*, int, const _ns1__DeleteProfile *, const char*);
SOAP_FMAC3 _ns1__DeleteProfile * SOAP_FMAC4 soap_in__ns1__DeleteProfile(struct soap*, const char*, _ns1__DeleteProfile *, const char*);

#ifndef soap_write__ns1__DeleteProfile
#define soap_write__ns1__DeleteProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DeleteProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteProfile * SOAP_FMAC4 soap_get__ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile *, const char*, const char*);

#ifndef soap_read__ns1__DeleteProfile
#define soap_read__ns1__DeleteProfile(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DeleteProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__DeleteProfile * SOAP_FMAC2 soap_instantiate__ns1__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DeleteProfile * soap_new__ns1__DeleteProfile(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DeleteProfile(soap, n, NULL, NULL, NULL); }

inline _ns1__DeleteProfile * soap_new_req__ns1__DeleteProfile(struct soap *soap, std::string& Token) { _ns1__DeleteProfile *_p = soap_instantiate__ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteProfile::Token = Token; } return _p; }

inline _ns1__DeleteProfile * soap_new_set__ns1__DeleteProfile(struct soap *soap, std::string& Token) { _ns1__DeleteProfile *_p = soap_instantiate__ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DeleteProfile::Token = Token; } return _p; }

inline void soap_delete__ns1__DeleteProfile(struct soap *soap, _ns1__DeleteProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeleteProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveConfigurationResponse
#define SOAP_TYPE__ns1__RemoveConfigurationResponse (729)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveConfigurationResponse(struct soap*, const char*, int, const _ns1__RemoveConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__RemoveConfigurationResponse * SOAP_FMAC4 soap_in__ns1__RemoveConfigurationResponse(struct soap*, const char*, _ns1__RemoveConfigurationResponse *, const char*);

#ifndef soap_write__ns1__RemoveConfigurationResponse
#define soap_write__ns1__RemoveConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveConfigurationResponse * SOAP_FMAC4 soap_get__ns1__RemoveConfigurationResponse(struct soap*, _ns1__RemoveConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__RemoveConfigurationResponse
#define soap_read__ns1__RemoveConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__RemoveConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveConfigurationResponse * soap_new__ns1__RemoveConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveConfigurationResponse * soap_new_req__ns1__RemoveConfigurationResponse(struct soap *soap) { _ns1__RemoveConfigurationResponse *_p = soap_instantiate__ns1__RemoveConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__RemoveConfigurationResponse * soap_new_set__ns1__RemoveConfigurationResponse(struct soap *soap) { _ns1__RemoveConfigurationResponse *_p = soap_instantiate__ns1__RemoveConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__RemoveConfigurationResponse(struct soap *soap, _ns1__RemoveConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__RemoveConfiguration
#define SOAP_TYPE__ns1__RemoveConfiguration (728)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RemoveConfiguration(struct soap*, const char*, int, const _ns1__RemoveConfiguration *, const char*);
SOAP_FMAC3 _ns1__RemoveConfiguration * SOAP_FMAC4 soap_in__ns1__RemoveConfiguration(struct soap*, const char*, _ns1__RemoveConfiguration *, const char*);

#ifndef soap_write__ns1__RemoveConfiguration
#define soap_write__ns1__RemoveConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RemoveConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveConfiguration * SOAP_FMAC4 soap_get__ns1__RemoveConfiguration(struct soap*, _ns1__RemoveConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__RemoveConfiguration
#define soap_read__ns1__RemoveConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__RemoveConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__RemoveConfiguration * SOAP_FMAC2 soap_instantiate__ns1__RemoveConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RemoveConfiguration * soap_new__ns1__RemoveConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__RemoveConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__RemoveConfiguration * soap_new_req__ns1__RemoveConfiguration(struct soap *soap, std::string& ProfileToken, std::vector<ns1__ConfigurationRef * >& Configuration) { _ns1__RemoveConfiguration *_p = soap_instantiate__ns1__RemoveConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveConfiguration::ProfileToken = ProfileToken; _p->_ns1__RemoveConfiguration::Configuration = Configuration; } return _p; }

inline _ns1__RemoveConfiguration * soap_new_set__ns1__RemoveConfiguration(struct soap *soap, std::string& ProfileToken, std::vector<ns1__ConfigurationRef * >& Configuration) { _ns1__RemoveConfiguration *_p = soap_instantiate__ns1__RemoveConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__RemoveConfiguration::ProfileToken = ProfileToken; _p->_ns1__RemoveConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__RemoveConfiguration(struct soap *soap, _ns1__RemoveConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RemoveConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddConfigurationResponse
#define SOAP_TYPE__ns1__AddConfigurationResponse (727)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddConfigurationResponse(struct soap*, const char*, int, const _ns1__AddConfigurationResponse *, const char*);
SOAP_FMAC3 _ns1__AddConfigurationResponse * SOAP_FMAC4 soap_in__ns1__AddConfigurationResponse(struct soap*, const char*, _ns1__AddConfigurationResponse *, const char*);

#ifndef soap_write__ns1__AddConfigurationResponse
#define soap_write__ns1__AddConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddConfigurationResponse * SOAP_FMAC4 soap_get__ns1__AddConfigurationResponse(struct soap*, _ns1__AddConfigurationResponse *, const char*, const char*);

#ifndef soap_read__ns1__AddConfigurationResponse
#define soap_read__ns1__AddConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddConfigurationResponse * SOAP_FMAC2 soap_instantiate__ns1__AddConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddConfigurationResponse * soap_new__ns1__AddConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AddConfigurationResponse * soap_new_req__ns1__AddConfigurationResponse(struct soap *soap) { _ns1__AddConfigurationResponse *_p = soap_instantiate__ns1__AddConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__AddConfigurationResponse * soap_new_set__ns1__AddConfigurationResponse(struct soap *soap) { _ns1__AddConfigurationResponse *_p = soap_instantiate__ns1__AddConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__AddConfigurationResponse(struct soap *soap, _ns1__AddConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AddConfiguration
#define SOAP_TYPE__ns1__AddConfiguration (726)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddConfiguration(struct soap*, const char*, int, const _ns1__AddConfiguration *, const char*);
SOAP_FMAC3 _ns1__AddConfiguration * SOAP_FMAC4 soap_in__ns1__AddConfiguration(struct soap*, const char*, _ns1__AddConfiguration *, const char*);

#ifndef soap_write__ns1__AddConfiguration
#define soap_write__ns1__AddConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:AddConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddConfiguration * SOAP_FMAC4 soap_get__ns1__AddConfiguration(struct soap*, _ns1__AddConfiguration *, const char*, const char*);

#ifndef soap_read__ns1__AddConfiguration
#define soap_read__ns1__AddConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AddConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AddConfiguration * SOAP_FMAC2 soap_instantiate__ns1__AddConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AddConfiguration * soap_new__ns1__AddConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AddConfiguration(soap, n, NULL, NULL, NULL); }

inline _ns1__AddConfiguration * soap_new_req__ns1__AddConfiguration(struct soap *soap, std::string& ProfileToken) { _ns1__AddConfiguration *_p = soap_instantiate__ns1__AddConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddConfiguration::ProfileToken = ProfileToken; } return _p; }

inline _ns1__AddConfiguration * soap_new_set__ns1__AddConfiguration(struct soap *soap, std::string& ProfileToken, std::string *Name, std::vector<ns1__ConfigurationRef * >& Configuration) { _ns1__AddConfiguration *_p = soap_instantiate__ns1__AddConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AddConfiguration::ProfileToken = ProfileToken; _p->_ns1__AddConfiguration::Name = Name; _p->_ns1__AddConfiguration::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__AddConfiguration(struct soap *soap, _ns1__AddConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetProfilesResponse
#define SOAP_TYPE__ns1__GetProfilesResponse (725)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProfilesResponse(struct soap*, const char*, int, const _ns1__GetProfilesResponse *, const char*);
SOAP_FMAC3 _ns1__GetProfilesResponse * SOAP_FMAC4 soap_in__ns1__GetProfilesResponse(struct soap*, const char*, _ns1__GetProfilesResponse *, const char*);

#ifndef soap_write__ns1__GetProfilesResponse
#define soap_write__ns1__GetProfilesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetProfilesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfilesResponse * SOAP_FMAC4 soap_get__ns1__GetProfilesResponse(struct soap*, _ns1__GetProfilesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetProfilesResponse
#define soap_read__ns1__GetProfilesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetProfilesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProfilesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetProfilesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProfilesResponse * soap_new__ns1__GetProfilesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProfilesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProfilesResponse * soap_new_req__ns1__GetProfilesResponse(struct soap *soap) { _ns1__GetProfilesResponse *_p = soap_instantiate__ns1__GetProfilesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetProfilesResponse * soap_new_set__ns1__GetProfilesResponse(struct soap *soap, std::vector<ns1__MediaProfile * >& Profiles) { _ns1__GetProfilesResponse *_p = soap_instantiate__ns1__GetProfilesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfilesResponse::Profiles = Profiles; } return _p; }

inline void soap_delete__ns1__GetProfilesResponse(struct soap *soap, _ns1__GetProfilesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProfilesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetProfiles
#define SOAP_TYPE__ns1__GetProfiles (724)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProfiles(struct soap*, const char*, int, const _ns1__GetProfiles *, const char*);
SOAP_FMAC3 _ns1__GetProfiles * SOAP_FMAC4 soap_in__ns1__GetProfiles(struct soap*, const char*, _ns1__GetProfiles *, const char*);

#ifndef soap_write__ns1__GetProfiles
#define soap_write__ns1__GetProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfiles * SOAP_FMAC4 soap_get__ns1__GetProfiles(struct soap*, _ns1__GetProfiles *, const char*, const char*);

#ifndef soap_read__ns1__GetProfiles
#define soap_read__ns1__GetProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProfiles * SOAP_FMAC2 soap_instantiate__ns1__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProfiles * soap_new__ns1__GetProfiles(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProfiles(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProfiles * soap_new_req__ns1__GetProfiles(struct soap *soap) { _ns1__GetProfiles *_p = soap_instantiate__ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetProfiles * soap_new_set__ns1__GetProfiles(struct soap *soap, std::string *Token, std::vector<std::string >& Type) { _ns1__GetProfiles *_p = soap_instantiate__ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProfiles::Token = Token; _p->_ns1__GetProfiles::Type = Type; } return _p; }

inline void soap_delete__ns1__GetProfiles(struct soap *soap, _ns1__GetProfiles *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProfiles(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateProfileResponse
#define SOAP_TYPE__ns1__CreateProfileResponse (723)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateProfileResponse(struct soap*, const char*, int, const _ns1__CreateProfileResponse *, const char*);
SOAP_FMAC3 _ns1__CreateProfileResponse * SOAP_FMAC4 soap_in__ns1__CreateProfileResponse(struct soap*, const char*, _ns1__CreateProfileResponse *, const char*);

#ifndef soap_write__ns1__CreateProfileResponse
#define soap_write__ns1__CreateProfileResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateProfileResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateProfileResponse * SOAP_FMAC4 soap_get__ns1__CreateProfileResponse(struct soap*, _ns1__CreateProfileResponse *, const char*, const char*);

#ifndef soap_read__ns1__CreateProfileResponse
#define soap_read__ns1__CreateProfileResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateProfileResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateProfileResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateProfileResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateProfileResponse * soap_new__ns1__CreateProfileResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateProfileResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateProfileResponse * soap_new_req__ns1__CreateProfileResponse(struct soap *soap, std::string& Token) { _ns1__CreateProfileResponse *_p = soap_instantiate__ns1__CreateProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfileResponse::Token = Token; } return _p; }

inline _ns1__CreateProfileResponse * soap_new_set__ns1__CreateProfileResponse(struct soap *soap, std::string& Token) { _ns1__CreateProfileResponse *_p = soap_instantiate__ns1__CreateProfileResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfileResponse::Token = Token; } return _p; }

inline void soap_delete__ns1__CreateProfileResponse(struct soap *soap, _ns1__CreateProfileResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateProfileResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__CreateProfile
#define SOAP_TYPE__ns1__CreateProfile (722)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateProfile(struct soap*, const char*, int, const _ns1__CreateProfile *, const char*);
SOAP_FMAC3 _ns1__CreateProfile * SOAP_FMAC4 soap_in__ns1__CreateProfile(struct soap*, const char*, _ns1__CreateProfile *, const char*);

#ifndef soap_write__ns1__CreateProfile
#define soap_write__ns1__CreateProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CreateProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateProfile * SOAP_FMAC4 soap_get__ns1__CreateProfile(struct soap*, _ns1__CreateProfile *, const char*, const char*);

#ifndef soap_read__ns1__CreateProfile
#define soap_read__ns1__CreateProfile(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__CreateProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__CreateProfile * SOAP_FMAC2 soap_instantiate__ns1__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateProfile * soap_new__ns1__CreateProfile(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CreateProfile(soap, n, NULL, NULL, NULL); }

inline _ns1__CreateProfile * soap_new_req__ns1__CreateProfile(struct soap *soap, std::string& Name) { _ns1__CreateProfile *_p = soap_instantiate__ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfile::Name = Name; } return _p; }

inline _ns1__CreateProfile * soap_new_set__ns1__CreateProfile(struct soap *soap, std::string& Name, std::vector<ns1__ConfigurationRef * >& Configuration) { _ns1__CreateProfile *_p = soap_instantiate__ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__CreateProfile::Name = Name; _p->_ns1__CreateProfile::Configuration = Configuration; } return _p; }

inline void soap_delete__ns1__CreateProfile(struct soap *soap, _ns1__CreateProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetServiceCapabilitiesResponse
#define SOAP_TYPE__ns1__GetServiceCapabilitiesResponse (721)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetServiceCapabilitiesResponse(struct soap*, const char*, int, const _ns1__GetServiceCapabilitiesResponse *, const char*);
SOAP_FMAC3 _ns1__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_in__ns1__GetServiceCapabilitiesResponse(struct soap*, const char*, _ns1__GetServiceCapabilitiesResponse *, const char*);

#ifndef soap_write__ns1__GetServiceCapabilitiesResponse
#define soap_write__ns1__GetServiceCapabilitiesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetServiceCapabilitiesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetServiceCapabilitiesResponse * SOAP_FMAC4 soap_get__ns1__GetServiceCapabilitiesResponse(struct soap*, _ns1__GetServiceCapabilitiesResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetServiceCapabilitiesResponse
#define soap_read__ns1__GetServiceCapabilitiesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetServiceCapabilitiesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetServiceCapabilitiesResponse * SOAP_FMAC2 soap_instantiate__ns1__GetServiceCapabilitiesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetServiceCapabilitiesResponse * soap_new__ns1__GetServiceCapabilitiesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetServiceCapabilitiesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetServiceCapabilitiesResponse * soap_new_req__ns1__GetServiceCapabilitiesResponse(struct soap *soap, ns1__Capabilities2 *Capabilities) { _ns1__GetServiceCapabilitiesResponse *_p = soap_instantiate__ns1__GetServiceCapabilitiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetServiceCapabilitiesResponse::Capabilities = Capabilities; } return _p; }

inline _ns1__GetServiceCapabilitiesResponse * soap_new_set__ns1__GetServiceCapabilitiesResponse(struct soap *soap, ns1__Capabilities2 *Capabilities) { _ns1__GetServiceCapabilitiesResponse *_p = soap_instantiate__ns1__GetServiceCapabilitiesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetServiceCapabilitiesResponse::Capabilities = Capabilities; } return _p; }

inline void soap_delete__ns1__GetServiceCapabilitiesResponse(struct soap *soap, _ns1__GetServiceCapabilitiesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetServiceCapabilitiesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetServiceCapabilities
#define SOAP_TYPE__ns1__GetServiceCapabilities (720)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetServiceCapabilities(struct soap*, const char*, int, const _ns1__GetServiceCapabilities *, const char*);
SOAP_FMAC3 _ns1__GetServiceCapabilities * SOAP_FMAC4 soap_in__ns1__GetServiceCapabilities(struct soap*, const char*, _ns1__GetServiceCapabilities *, const char*);

#ifndef soap_write__ns1__GetServiceCapabilities
#define soap_write__ns1__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetServiceCapabilities * SOAP_FMAC4 soap_get__ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_read__ns1__GetServiceCapabilities
#define soap_read__ns1__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate__ns1__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetServiceCapabilities * soap_new__ns1__GetServiceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetServiceCapabilities(soap, n, NULL, NULL, NULL); }

inline _ns1__GetServiceCapabilities * soap_new_req__ns1__GetServiceCapabilities(struct soap *soap) { _ns1__GetServiceCapabilities *_p = soap_instantiate__ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetServiceCapabilities * soap_new_set__ns1__GetServiceCapabilities(struct soap *soap) { _ns1__GetServiceCapabilities *_p = soap_instantiate__ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetServiceCapabilities(struct soap *soap, _ns1__GetServiceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetServiceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__MaskOptions
#define SOAP_TYPE_ns1__MaskOptions (719)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MaskOptions(struct soap*, const char*, int, const ns1__MaskOptions *, const char*);
SOAP_FMAC3 ns1__MaskOptions * SOAP_FMAC4 soap_in_ns1__MaskOptions(struct soap*, const char*, ns1__MaskOptions *, const char*);

#ifndef soap_write_ns1__MaskOptions
#define soap_write_ns1__MaskOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:MaskOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__MaskOptions * SOAP_FMAC4 soap_get_ns1__MaskOptions(struct soap*, ns1__MaskOptions *, const char*, const char*);

#ifndef soap_read_ns1__MaskOptions
#define soap_read_ns1__MaskOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__MaskOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__MaskOptions * SOAP_FMAC2 soap_instantiate_ns1__MaskOptions(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MaskOptions * soap_new_ns1__MaskOptions(struct soap *soap, int n = -1) { return soap_instantiate_ns1__MaskOptions(soap, n, NULL, NULL, NULL); }

inline ns1__MaskOptions * soap_new_req_ns1__MaskOptions(struct soap *soap, int MaxMasks, int MaxPoints, std::vector<std::string >& Types, tt__ColorOptions *Color) { ns1__MaskOptions *_p = soap_instantiate_ns1__MaskOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__MaskOptions::MaxMasks = MaxMasks; _p->ns1__MaskOptions::MaxPoints = MaxPoints; _p->ns1__MaskOptions::Types = Types; _p->ns1__MaskOptions::Color = Color; } return _p; }

inline ns1__MaskOptions * soap_new_set_ns1__MaskOptions(struct soap *soap, int MaxMasks, int MaxPoints, std::vector<std::string >& Types, tt__ColorOptions *Color, std::vector<char * >& __any, bool *RectangleOnly, bool *SingleColorOnly, char *__anyAttribute, char *__item1) { ns1__MaskOptions *_p = soap_instantiate_ns1__MaskOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__MaskOptions::MaxMasks = MaxMasks; _p->ns1__MaskOptions::MaxPoints = MaxPoints; _p->ns1__MaskOptions::Types = Types; _p->ns1__MaskOptions::Color = Color; _p->ns1__MaskOptions::__any = __any; _p->ns1__MaskOptions::RectangleOnly = RectangleOnly; _p->ns1__MaskOptions::SingleColorOnly = SingleColorOnly; _p->ns1__MaskOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__MaskOptions(struct soap *soap, ns1__MaskOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__MaskOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Mask
#define SOAP_TYPE_ns1__Mask (718)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Mask(struct soap*, const char*, int, const ns1__Mask *, const char*);
SOAP_FMAC3 ns1__Mask * SOAP_FMAC4 soap_in_ns1__Mask(struct soap*, const char*, ns1__Mask *, const char*);

#ifndef soap_write_ns1__Mask
#define soap_write_ns1__Mask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Mask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Mask * SOAP_FMAC4 soap_get_ns1__Mask(struct soap*, ns1__Mask *, const char*, const char*);

#ifndef soap_read_ns1__Mask
#define soap_read_ns1__Mask(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Mask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Mask * SOAP_FMAC2 soap_instantiate_ns1__Mask(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Mask * soap_new_ns1__Mask(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Mask(soap, n, NULL, NULL, NULL); }

inline ns1__Mask * soap_new_req_ns1__Mask(struct soap *soap, std::string& ConfigurationToken, tt__Polygon *Polygon, std::string& Type, bool Enabled) { ns1__Mask *_p = soap_instantiate_ns1__Mask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Mask::ConfigurationToken = ConfigurationToken; _p->ns1__Mask::Polygon = Polygon; _p->ns1__Mask::Type = Type; _p->ns1__Mask::Enabled = Enabled; } return _p; }

inline ns1__Mask * soap_new_set_ns1__Mask(struct soap *soap, std::string& ConfigurationToken, tt__Polygon *Polygon, std::string& Type, tt__Color *Color, bool Enabled, std::vector<char * >& __any, std::string *token, char *__anyAttribute, char *__item1) { ns1__Mask *_p = soap_instantiate_ns1__Mask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Mask::ConfigurationToken = ConfigurationToken; _p->ns1__Mask::Polygon = Polygon; _p->ns1__Mask::Type = Type; _p->ns1__Mask::Color = Color; _p->ns1__Mask::Enabled = Enabled; _p->ns1__Mask::__any = __any; _p->ns1__Mask::token = token; _p->ns1__Mask::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__Mask(struct soap *soap, ns1__Mask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Mask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__VideoSourceMode
#define SOAP_TYPE_ns1__VideoSourceMode (717)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VideoSourceMode(struct soap*, const char*, int, const ns1__VideoSourceMode *, const char*);
SOAP_FMAC3 ns1__VideoSourceMode * SOAP_FMAC4 soap_in_ns1__VideoSourceMode(struct soap*, const char*, ns1__VideoSourceMode *, const char*);

#ifndef soap_write_ns1__VideoSourceMode
#define soap_write_ns1__VideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:VideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__VideoSourceMode * SOAP_FMAC4 soap_get_ns1__VideoSourceMode(struct soap*, ns1__VideoSourceMode *, const char*, const char*);

#ifndef soap_read_ns1__VideoSourceMode
#define soap_read_ns1__VideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__VideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__VideoSourceMode * SOAP_FMAC2 soap_instantiate_ns1__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VideoSourceMode * soap_new_ns1__VideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate_ns1__VideoSourceMode(soap, n, NULL, NULL, NULL); }

inline ns1__VideoSourceMode * soap_new_req_ns1__VideoSourceMode(struct soap *soap, float MaxFramerate, tt__VideoResolution *MaxResolution, std::string& Encodings, bool Reboot, std::string& token) { ns1__VideoSourceMode *_p = soap_instantiate_ns1__VideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__VideoSourceMode::MaxFramerate = MaxFramerate; _p->ns1__VideoSourceMode::MaxResolution = MaxResolution; _p->ns1__VideoSourceMode::Encodings = Encodings; _p->ns1__VideoSourceMode::Reboot = Reboot; _p->ns1__VideoSourceMode::token = token; } return _p; }

inline ns1__VideoSourceMode * soap_new_set_ns1__VideoSourceMode(struct soap *soap, float MaxFramerate, tt__VideoResolution *MaxResolution, std::string& Encodings, bool Reboot, std::string *Description, std::vector<char * >& __any, std::string& token, bool *Enabled, char *__anyAttribute, char *__item1) { ns1__VideoSourceMode *_p = soap_instantiate_ns1__VideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__VideoSourceMode::MaxFramerate = MaxFramerate; _p->ns1__VideoSourceMode::MaxResolution = MaxResolution; _p->ns1__VideoSourceMode::Encodings = Encodings; _p->ns1__VideoSourceMode::Reboot = Reboot; _p->ns1__VideoSourceMode::Description = Description; _p->ns1__VideoSourceMode::__any = __any; _p->ns1__VideoSourceMode::token = token; _p->ns1__VideoSourceMode::Enabled = Enabled; _p->ns1__VideoSourceMode::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__VideoSourceMode(struct soap *soap, ns1__VideoSourceMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__VideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__StartStopMulticastStreaming
#define SOAP_TYPE_ns1__StartStopMulticastStreaming (716)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StartStopMulticastStreaming(struct soap*, const char*, int, const ns1__StartStopMulticastStreaming *, const char*);
SOAP_FMAC3 ns1__StartStopMulticastStreaming * SOAP_FMAC4 soap_in_ns1__StartStopMulticastStreaming(struct soap*, const char*, ns1__StartStopMulticastStreaming *, const char*);

#ifndef soap_write_ns1__StartStopMulticastStreaming
#define soap_write_ns1__StartStopMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StartStopMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StartStopMulticastStreaming * SOAP_FMAC4 soap_get_ns1__StartStopMulticastStreaming(struct soap*, ns1__StartStopMulticastStreaming *, const char*, const char*);

#ifndef soap_read_ns1__StartStopMulticastStreaming
#define soap_read_ns1__StartStopMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__StartStopMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__StartStopMulticastStreaming * SOAP_FMAC2 soap_instantiate_ns1__StartStopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StartStopMulticastStreaming * soap_new_ns1__StartStopMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate_ns1__StartStopMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline ns1__StartStopMulticastStreaming * soap_new_req_ns1__StartStopMulticastStreaming(struct soap *soap, std::string& ProfileToken) { ns1__StartStopMulticastStreaming *_p = soap_instantiate_ns1__StartStopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__StartStopMulticastStreaming::ProfileToken = ProfileToken; } return _p; }

inline ns1__StartStopMulticastStreaming * soap_new_set_ns1__StartStopMulticastStreaming(struct soap *soap, std::string& ProfileToken, char *__item1) { ns1__StartStopMulticastStreaming *_p = soap_instantiate_ns1__StartStopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__StartStopMulticastStreaming::ProfileToken = ProfileToken; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__StartStopMulticastStreaming(struct soap *soap, ns1__StartStopMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__StartStopMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__EncoderInstanceInfo
#define SOAP_TYPE_ns1__EncoderInstanceInfo (715)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EncoderInstanceInfo(struct soap*, const char*, int, const ns1__EncoderInstanceInfo *, const char*);
SOAP_FMAC3 ns1__EncoderInstanceInfo * SOAP_FMAC4 soap_in_ns1__EncoderInstanceInfo(struct soap*, const char*, ns1__EncoderInstanceInfo *, const char*);

#ifndef soap_write_ns1__EncoderInstanceInfo
#define soap_write_ns1__EncoderInstanceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:EncoderInstanceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__EncoderInstanceInfo * SOAP_FMAC4 soap_get_ns1__EncoderInstanceInfo(struct soap*, ns1__EncoderInstanceInfo *, const char*, const char*);

#ifndef soap_read_ns1__EncoderInstanceInfo
#define soap_read_ns1__EncoderInstanceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__EncoderInstanceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__EncoderInstanceInfo * SOAP_FMAC2 soap_instantiate_ns1__EncoderInstanceInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EncoderInstanceInfo * soap_new_ns1__EncoderInstanceInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns1__EncoderInstanceInfo(soap, n, NULL, NULL, NULL); }

inline ns1__EncoderInstanceInfo * soap_new_req_ns1__EncoderInstanceInfo(struct soap *soap, int Total) { ns1__EncoderInstanceInfo *_p = soap_instantiate_ns1__EncoderInstanceInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__EncoderInstanceInfo::Total = Total; } return _p; }

inline ns1__EncoderInstanceInfo * soap_new_set_ns1__EncoderInstanceInfo(struct soap *soap, std::vector<ns1__EncoderInstance * >& Codec, int Total, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns1__EncoderInstanceInfo *_p = soap_instantiate_ns1__EncoderInstanceInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__EncoderInstanceInfo::Codec = Codec; _p->ns1__EncoderInstanceInfo::Total = Total; _p->ns1__EncoderInstanceInfo::__any = __any; _p->ns1__EncoderInstanceInfo::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__EncoderInstanceInfo(struct soap *soap, ns1__EncoderInstanceInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__EncoderInstanceInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__EncoderInstance
#define SOAP_TYPE_ns1__EncoderInstance (714)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EncoderInstance(struct soap*, const char*, int, const ns1__EncoderInstance *, const char*);
SOAP_FMAC3 ns1__EncoderInstance * SOAP_FMAC4 soap_in_ns1__EncoderInstance(struct soap*, const char*, ns1__EncoderInstance *, const char*);

#ifndef soap_write_ns1__EncoderInstance
#define soap_write_ns1__EncoderInstance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:EncoderInstance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__EncoderInstance * SOAP_FMAC4 soap_get_ns1__EncoderInstance(struct soap*, ns1__EncoderInstance *, const char*, const char*);

#ifndef soap_read_ns1__EncoderInstance
#define soap_read_ns1__EncoderInstance(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__EncoderInstance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__EncoderInstance * SOAP_FMAC2 soap_instantiate_ns1__EncoderInstance(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EncoderInstance * soap_new_ns1__EncoderInstance(struct soap *soap, int n = -1) { return soap_instantiate_ns1__EncoderInstance(soap, n, NULL, NULL, NULL); }

inline ns1__EncoderInstance * soap_new_req_ns1__EncoderInstance(struct soap *soap, std::string& Encoding, int Number) { ns1__EncoderInstance *_p = soap_instantiate_ns1__EncoderInstance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__EncoderInstance::Encoding = Encoding; _p->ns1__EncoderInstance::Number = Number; } return _p; }

inline ns1__EncoderInstance * soap_new_set_ns1__EncoderInstance(struct soap *soap, std::string& Encoding, int Number, char *__anyAttribute, char *__item1) { ns1__EncoderInstance *_p = soap_instantiate_ns1__EncoderInstance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__EncoderInstance::Encoding = Encoding; _p->ns1__EncoderInstance::Number = Number; _p->ns1__EncoderInstance::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__EncoderInstance(struct soap *soap, ns1__EncoderInstance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__EncoderInstance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__SetConfigurationResponse
#define SOAP_TYPE_ns1__SetConfigurationResponse (713)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SetConfigurationResponse(struct soap*, const char*, int, const ns1__SetConfigurationResponse *, const char*);
SOAP_FMAC3 ns1__SetConfigurationResponse * SOAP_FMAC4 soap_in_ns1__SetConfigurationResponse(struct soap*, const char*, ns1__SetConfigurationResponse *, const char*);

#ifndef soap_write_ns1__SetConfigurationResponse
#define soap_write_ns1__SetConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SetConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SetConfigurationResponse * SOAP_FMAC4 soap_get_ns1__SetConfigurationResponse(struct soap*, ns1__SetConfigurationResponse *, const char*, const char*);

#ifndef soap_read_ns1__SetConfigurationResponse
#define soap_read_ns1__SetConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__SetConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__SetConfigurationResponse * SOAP_FMAC2 soap_instantiate_ns1__SetConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SetConfigurationResponse * soap_new_ns1__SetConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SetConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline ns1__SetConfigurationResponse * soap_new_req_ns1__SetConfigurationResponse(struct soap *soap) { ns1__SetConfigurationResponse *_p = soap_instantiate_ns1__SetConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__SetConfigurationResponse * soap_new_set_ns1__SetConfigurationResponse(struct soap *soap, char *__item1) { ns1__SetConfigurationResponse *_p = soap_instantiate_ns1__SetConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__SetConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__SetConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__GetConfiguration
#define SOAP_TYPE_ns1__GetConfiguration (712)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GetConfiguration(struct soap*, const char*, int, const ns1__GetConfiguration *, const char*);
SOAP_FMAC3 ns1__GetConfiguration * SOAP_FMAC4 soap_in_ns1__GetConfiguration(struct soap*, const char*, ns1__GetConfiguration *, const char*);

#ifndef soap_write_ns1__GetConfiguration
#define soap_write_ns1__GetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:GetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__GetConfiguration * SOAP_FMAC4 soap_get_ns1__GetConfiguration(struct soap*, ns1__GetConfiguration *, const char*, const char*);

#ifndef soap_read_ns1__GetConfiguration
#define soap_read_ns1__GetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__GetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__GetConfiguration * SOAP_FMAC2 soap_instantiate_ns1__GetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GetConfiguration * soap_new_ns1__GetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_ns1__GetConfiguration(soap, n, NULL, NULL, NULL); }

inline ns1__GetConfiguration * soap_new_req_ns1__GetConfiguration(struct soap *soap) { ns1__GetConfiguration *_p = soap_instantiate_ns1__GetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__GetConfiguration * soap_new_set_ns1__GetConfiguration(struct soap *soap, std::string *ConfigurationToken, std::string *ProfileToken, char *__item1) { ns1__GetConfiguration *_p = soap_instantiate_ns1__GetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__GetConfiguration::ConfigurationToken = ConfigurationToken; _p->ns1__GetConfiguration::ProfileToken = ProfileToken; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__GetConfiguration(struct soap *soap, ns1__GetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__MediaProfile
#define SOAP_TYPE_ns1__MediaProfile (711)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaProfile(struct soap*, const char*, int, const ns1__MediaProfile *, const char*);
SOAP_FMAC3 ns1__MediaProfile * SOAP_FMAC4 soap_in_ns1__MediaProfile(struct soap*, const char*, ns1__MediaProfile *, const char*);

#ifndef soap_write_ns1__MediaProfile
#define soap_write_ns1__MediaProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:MediaProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__MediaProfile * SOAP_FMAC4 soap_get_ns1__MediaProfile(struct soap*, ns1__MediaProfile *, const char*, const char*);

#ifndef soap_read_ns1__MediaProfile
#define soap_read_ns1__MediaProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__MediaProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__MediaProfile * SOAP_FMAC2 soap_instantiate_ns1__MediaProfile(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaProfile * soap_new_ns1__MediaProfile(struct soap *soap, int n = -1) { return soap_instantiate_ns1__MediaProfile(soap, n, NULL, NULL, NULL); }

inline ns1__MediaProfile * soap_new_req_ns1__MediaProfile(struct soap *soap, std::string& Name, std::string& token) { ns1__MediaProfile *_p = soap_instantiate_ns1__MediaProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__MediaProfile::Name = Name; _p->ns1__MediaProfile::token = token; } return _p; }

inline ns1__MediaProfile * soap_new_set_ns1__MediaProfile(struct soap *soap, std::string& Name, ns1__ConfigurationSet *Configurations, std::string& token, bool *fixed, char *__anyAttribute, char *__item1) { ns1__MediaProfile *_p = soap_instantiate_ns1__MediaProfile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__MediaProfile::Name = Name; _p->ns1__MediaProfile::Configurations = Configurations; _p->ns1__MediaProfile::token = token; _p->ns1__MediaProfile::fixed = fixed; _p->ns1__MediaProfile::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__MediaProfile(struct soap *soap, ns1__MediaProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__MediaProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ConfigurationSet
#define SOAP_TYPE_ns1__ConfigurationSet (710)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigurationSet(struct soap*, const char*, int, const ns1__ConfigurationSet *, const char*);
SOAP_FMAC3 ns1__ConfigurationSet * SOAP_FMAC4 soap_in_ns1__ConfigurationSet(struct soap*, const char*, ns1__ConfigurationSet *, const char*);

#ifndef soap_write_ns1__ConfigurationSet
#define soap_write_ns1__ConfigurationSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ConfigurationSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ConfigurationSet * SOAP_FMAC4 soap_get_ns1__ConfigurationSet(struct soap*, ns1__ConfigurationSet *, const char*, const char*);

#ifndef soap_read_ns1__ConfigurationSet
#define soap_read_ns1__ConfigurationSet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ConfigurationSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ConfigurationSet * SOAP_FMAC2 soap_instantiate_ns1__ConfigurationSet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigurationSet * soap_new_ns1__ConfigurationSet(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ConfigurationSet(soap, n, NULL, NULL, NULL); }

inline ns1__ConfigurationSet * soap_new_req_ns1__ConfigurationSet(struct soap *soap) { ns1__ConfigurationSet *_p = soap_instantiate_ns1__ConfigurationSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ConfigurationSet * soap_new_set_ns1__ConfigurationSet(struct soap *soap, tt__VideoSourceConfiguration *VideoSource, tt__AudioSourceConfiguration *AudioSource, tt__VideoEncoder2Configuration *VideoEncoder, tt__AudioEncoder2Configuration *AudioEncoder, tt__VideoAnalyticsConfiguration *Analytics, tt__PTZConfiguration *PTZ, tt__MetadataConfiguration *Metadata, tt__AudioOutputConfiguration *AudioOutput, tt__AudioDecoderConfiguration *AudioDecoder, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { ns1__ConfigurationSet *_p = soap_instantiate_ns1__ConfigurationSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ConfigurationSet::VideoSource = VideoSource; _p->ns1__ConfigurationSet::AudioSource = AudioSource; _p->ns1__ConfigurationSet::VideoEncoder = VideoEncoder; _p->ns1__ConfigurationSet::AudioEncoder = AudioEncoder; _p->ns1__ConfigurationSet::Analytics = Analytics; _p->ns1__ConfigurationSet::PTZ = PTZ; _p->ns1__ConfigurationSet::Metadata = Metadata; _p->ns1__ConfigurationSet::AudioOutput = AudioOutput; _p->ns1__ConfigurationSet::AudioDecoder = AudioDecoder; _p->ns1__ConfigurationSet::__any = __any; _p->ns1__ConfigurationSet::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ConfigurationSet(struct soap *soap, ns1__ConfigurationSet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ConfigurationSet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ConfigurationRef
#define SOAP_TYPE_ns1__ConfigurationRef (709)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigurationRef(struct soap*, const char*, int, const ns1__ConfigurationRef *, const char*);
SOAP_FMAC3 ns1__ConfigurationRef * SOAP_FMAC4 soap_in_ns1__ConfigurationRef(struct soap*, const char*, ns1__ConfigurationRef *, const char*);

#ifndef soap_write_ns1__ConfigurationRef
#define soap_write_ns1__ConfigurationRef(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ConfigurationRef", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ConfigurationRef * SOAP_FMAC4 soap_get_ns1__ConfigurationRef(struct soap*, ns1__ConfigurationRef *, const char*, const char*);

#ifndef soap_read_ns1__ConfigurationRef
#define soap_read_ns1__ConfigurationRef(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ConfigurationRef(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ConfigurationRef * SOAP_FMAC2 soap_instantiate_ns1__ConfigurationRef(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigurationRef * soap_new_ns1__ConfigurationRef(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ConfigurationRef(soap, n, NULL, NULL, NULL); }

inline ns1__ConfigurationRef * soap_new_req_ns1__ConfigurationRef(struct soap *soap, std::string& Type) { ns1__ConfigurationRef *_p = soap_instantiate_ns1__ConfigurationRef(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ConfigurationRef::Type = Type; } return _p; }

inline ns1__ConfigurationRef * soap_new_set_ns1__ConfigurationRef(struct soap *soap, std::string& Type, std::string *Token, char *__item1) { ns1__ConfigurationRef *_p = soap_instantiate_ns1__ConfigurationRef(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ConfigurationRef::Type = Type; _p->ns1__ConfigurationRef::Token = Token; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ConfigurationRef(struct soap *soap, ns1__ConfigurationRef *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ConfigurationRef(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__StreamingCapabilities
#define SOAP_TYPE_ns1__StreamingCapabilities (708)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StreamingCapabilities(struct soap*, const char*, int, const ns1__StreamingCapabilities *, const char*);
SOAP_FMAC3 ns1__StreamingCapabilities * SOAP_FMAC4 soap_in_ns1__StreamingCapabilities(struct soap*, const char*, ns1__StreamingCapabilities *, const char*);

#ifndef soap_write_ns1__StreamingCapabilities
#define soap_write_ns1__StreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:StreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StreamingCapabilities * SOAP_FMAC4 soap_get_ns1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities *, const char*, const char*);

#ifndef soap_read_ns1__StreamingCapabilities
#define soap_read_ns1__StreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__StreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__StreamingCapabilities * SOAP_FMAC2 soap_instantiate_ns1__StreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StreamingCapabilities * soap_new_ns1__StreamingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns1__StreamingCapabilities(soap, n, NULL, NULL, NULL); }

inline ns1__StreamingCapabilities * soap_new_req_ns1__StreamingCapabilities(struct soap *soap) { ns1__StreamingCapabilities *_p = soap_instantiate_ns1__StreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__StreamingCapabilities * soap_new_set_ns1__StreamingCapabilities(struct soap *soap, std::vector<char * >& __any, bool *RTSPStreaming, bool *RTPMulticast, bool *RTP_USCORERTSP_USCORETCP, bool *NonAggregateControl, std::string *RTSPWebSocketUri, bool *AutoStartMulticast, char *__anyAttribute, char *__item1) { ns1__StreamingCapabilities *_p = soap_instantiate_ns1__StreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__StreamingCapabilities::__any = __any; _p->ns1__StreamingCapabilities::RTSPStreaming = RTSPStreaming; _p->ns1__StreamingCapabilities::RTPMulticast = RTPMulticast; _p->ns1__StreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->ns1__StreamingCapabilities::NonAggregateControl = NonAggregateControl; _p->ns1__StreamingCapabilities::RTSPWebSocketUri = RTSPWebSocketUri; _p->ns1__StreamingCapabilities::AutoStartMulticast = AutoStartMulticast; _p->ns1__StreamingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__StreamingCapabilities(struct soap *soap, ns1__StreamingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__StreamingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ProfileCapabilities
#define SOAP_TYPE_ns1__ProfileCapabilities (707)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProfileCapabilities(struct soap*, const char*, int, const ns1__ProfileCapabilities *, const char*);
SOAP_FMAC3 ns1__ProfileCapabilities * SOAP_FMAC4 soap_in_ns1__ProfileCapabilities(struct soap*, const char*, ns1__ProfileCapabilities *, const char*);

#ifndef soap_write_ns1__ProfileCapabilities
#define soap_write_ns1__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ProfileCapabilities * SOAP_FMAC4 soap_get_ns1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities *, const char*, const char*);

#ifndef soap_read_ns1__ProfileCapabilities
#define soap_read_ns1__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_ns1__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ProfileCapabilities * soap_new_ns1__ProfileCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ProfileCapabilities(soap, n, NULL, NULL, NULL); }

inline ns1__ProfileCapabilities * soap_new_req_ns1__ProfileCapabilities(struct soap *soap) { ns1__ProfileCapabilities *_p = soap_instantiate_ns1__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ProfileCapabilities * soap_new_set_ns1__ProfileCapabilities(struct soap *soap, std::vector<char * >& __any, int *MaximumNumberOfProfiles, std::string *ConfigurationsSupported, char *__anyAttribute, char *__item1) { ns1__ProfileCapabilities *_p = soap_instantiate_ns1__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ProfileCapabilities::__any = __any; _p->ns1__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles; _p->ns1__ProfileCapabilities::ConfigurationsSupported = ConfigurationsSupported; _p->ns1__ProfileCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__ProfileCapabilities(struct soap *soap, ns1__ProfileCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ProfileCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Capabilities2
#define SOAP_TYPE_ns1__Capabilities2 (706)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Capabilities2(struct soap*, const char*, int, const ns1__Capabilities2 *, const char*);
SOAP_FMAC3 ns1__Capabilities2 * SOAP_FMAC4 soap_in_ns1__Capabilities2(struct soap*, const char*, ns1__Capabilities2 *, const char*);

#ifndef soap_write_ns1__Capabilities2
#define soap_write_ns1__Capabilities2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Capabilities2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Capabilities2 * SOAP_FMAC4 soap_get_ns1__Capabilities2(struct soap*, ns1__Capabilities2 *, const char*, const char*);

#ifndef soap_read_ns1__Capabilities2
#define soap_read_ns1__Capabilities2(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Capabilities2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__Capabilities2 * SOAP_FMAC2 soap_instantiate_ns1__Capabilities2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Capabilities2 * soap_new_ns1__Capabilities2(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Capabilities2(soap, n, NULL, NULL, NULL); }

inline ns1__Capabilities2 * soap_new_req_ns1__Capabilities2(struct soap *soap, ns1__ProfileCapabilities *ProfileCapabilities, ns1__StreamingCapabilities *StreamingCapabilities) { ns1__Capabilities2 *_p = soap_instantiate_ns1__Capabilities2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Capabilities2::ProfileCapabilities = ProfileCapabilities; _p->ns1__Capabilities2::StreamingCapabilities = StreamingCapabilities; } return _p; }

inline ns1__Capabilities2 * soap_new_set_ns1__Capabilities2(struct soap *soap, ns1__ProfileCapabilities *ProfileCapabilities, ns1__StreamingCapabilities *StreamingCapabilities, std::vector<char * >& __any, bool *SnapshotUri, bool *Rotation, bool *VideoSourceMode, bool *OSD, bool *TemporaryOSDText, bool *Mask, bool *SourceMask, char *__anyAttribute, char *__item1) { ns1__Capabilities2 *_p = soap_instantiate_ns1__Capabilities2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Capabilities2::ProfileCapabilities = ProfileCapabilities; _p->ns1__Capabilities2::StreamingCapabilities = StreamingCapabilities; _p->ns1__Capabilities2::__any = __any; _p->ns1__Capabilities2::SnapshotUri = SnapshotUri; _p->ns1__Capabilities2::Rotation = Rotation; _p->ns1__Capabilities2::VideoSourceMode = VideoSourceMode; _p->ns1__Capabilities2::OSD = OSD; _p->ns1__Capabilities2::TemporaryOSDText = TemporaryOSDText; _p->ns1__Capabilities2::Mask = Mask; _p->ns1__Capabilities2::SourceMask = SourceMask; _p->ns1__Capabilities2::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns1__Capabilities2(struct soap *soap, ns1__Capabilities2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Capabilities2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (705)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicSetType(struct soap*, const char*, int, const wstop__TopicSetType *, const char*);
SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_in_wstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType *, const char*);

#ifndef soap_write_wstop__TopicSetType
#define soap_write_wstop__TopicSetType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicSetType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicSetType * SOAP_FMAC4 soap_get_wstop__TopicSetType(struct soap*, wstop__TopicSetType *, const char*, const char*);

#ifndef soap_read_wstop__TopicSetType
#define soap_read_wstop__TopicSetType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__TopicSetType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__TopicSetType * SOAP_FMAC2 soap_instantiate_wstop__TopicSetType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicSetType * soap_new_wstop__TopicSetType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__TopicSetType(soap, n, NULL, NULL, NULL); }

inline wstop__TopicSetType * soap_new_req_wstop__TopicSetType(struct soap *soap) { wstop__TopicSetType *_p = soap_instantiate_wstop__TopicSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wstop__TopicSetType * soap_new_set_wstop__TopicSetType(struct soap *soap, std::vector<char * >& __any, wstop__Documentation *documentation1, char *__anyAttribute1, char *__item2) { wstop__TopicSetType *_p = soap_instantiate_wstop__TopicSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicSetType::__any = __any; _p->wstop__ExtensibleDocumented::documentation = documentation1; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wstop__TopicSetType(struct soap *soap, wstop__TopicSetType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicSetType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (704)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicType(struct soap*, const char*, int, const wstop__TopicType *, const char*);
SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_in_wstop__TopicType(struct soap*, const char*, wstop__TopicType *, const char*);

#ifndef soap_write_wstop__TopicType
#define soap_write_wstop__TopicType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicType * SOAP_FMAC4 soap_get_wstop__TopicType(struct soap*, wstop__TopicType *, const char*, const char*);

#ifndef soap_read_wstop__TopicType
#define soap_read_wstop__TopicType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__TopicType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__TopicType * SOAP_FMAC2 soap_instantiate_wstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicType * soap_new_wstop__TopicType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__TopicType(soap, n, NULL, NULL, NULL); }

inline wstop__TopicType * soap_new_req_wstop__TopicType(struct soap *soap, std::string& name) { wstop__TopicType *_p = soap_instantiate_wstop__TopicType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicType::name = name; } return _p; }

inline wstop__TopicType * soap_new_set_wstop__TopicType(struct soap *soap, wstop__QueryExpressionType *MessagePattern, std::vector<wstop__TopicType * >& Topic, std::vector<char * >& __any, std::string& name, std::string *messageTypes, bool final_, wstop__Documentation *documentation1, char *__anyAttribute1, char *__item2) { wstop__TopicType *_p = soap_instantiate_wstop__TopicType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicType::MessagePattern = MessagePattern; _p->wstop__TopicType::Topic = Topic; _p->wstop__TopicType::__any = __any; _p->wstop__TopicType::name = name; _p->wstop__TopicType::messageTypes = messageTypes; _p->wstop__TopicType::final_ = final_; _p->wstop__ExtensibleDocumented::documentation = documentation1; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wstop__TopicType(struct soap *soap, wstop__TopicType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (703)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__TopicNamespaceType(struct soap*, const char*, int, const wstop__TopicNamespaceType *, const char*);
SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_in_wstop__TopicNamespaceType(struct soap*, const char*, wstop__TopicNamespaceType *, const char*);

#ifndef soap_write_wstop__TopicNamespaceType
#define soap_write_wstop__TopicNamespaceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:TopicNamespaceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicNamespaceType * SOAP_FMAC4 soap_get_wstop__TopicNamespaceType(struct soap*, wstop__TopicNamespaceType *, const char*, const char*);

#ifndef soap_read_wstop__TopicNamespaceType
#define soap_read_wstop__TopicNamespaceType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__TopicNamespaceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__TopicNamespaceType * SOAP_FMAC2 soap_instantiate_wstop__TopicNamespaceType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__TopicNamespaceType * soap_new_wstop__TopicNamespaceType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__TopicNamespaceType(soap, n, NULL, NULL, NULL); }

inline wstop__TopicNamespaceType * soap_new_req_wstop__TopicNamespaceType(struct soap *soap, std::string& targetNamespace) { wstop__TopicNamespaceType *_p = soap_instantiate_wstop__TopicNamespaceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicNamespaceType::targetNamespace = targetNamespace; } return _p; }

inline wstop__TopicNamespaceType * soap_new_set_wstop__TopicNamespaceType(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*Topic, std::vector<char * >& __any, std::string *name, std::string& targetNamespace, bool final_, wstop__Documentation *documentation1, char *__anyAttribute1, char *__item2) { wstop__TopicNamespaceType *_p = soap_instantiate_wstop__TopicNamespaceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__TopicNamespaceType::Topic = Topic; _p->wstop__TopicNamespaceType::__any = __any; _p->wstop__TopicNamespaceType::name = name; _p->wstop__TopicNamespaceType::targetNamespace = targetNamespace; _p->wstop__TopicNamespaceType::final_ = final_; _p->wstop__ExtensibleDocumented::documentation = documentation1; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wstop__TopicNamespaceType(struct soap *soap, wstop__TopicNamespaceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__TopicNamespaceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (702)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__QueryExpressionType(struct soap*, const char*, int, const wstop__QueryExpressionType *, const char*);
SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_in_wstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType *, const char*);

#ifndef soap_write_wstop__QueryExpressionType
#define soap_write_wstop__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__QueryExpressionType * SOAP_FMAC4 soap_get_wstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_wstop__QueryExpressionType
#define soap_read_wstop__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wstop__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wstop__QueryExpressionType * soap_new_wstop__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_wstop__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline wstop__QueryExpressionType * soap_new_req_wstop__QueryExpressionType(struct soap *soap, std::string& Dialect) { wstop__QueryExpressionType *_p = soap_instantiate_wstop__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__QueryExpressionType::Dialect = Dialect; } return _p; }

inline wstop__QueryExpressionType * soap_new_set_wstop__QueryExpressionType(struct soap *soap, char *__any, std::string& Dialect, char *__mixed, char *__item1) { wstop__QueryExpressionType *_p = soap_instantiate_wstop__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__QueryExpressionType::__any = __any; _p->wstop__QueryExpressionType::Dialect = Dialect; _p->wstop__QueryExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__QueryExpressionType(struct soap *soap, wstop__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (701)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__ExtensibleDocumented(struct soap*, const char*, int, const wstop__ExtensibleDocumented *, const char*);
SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_in_wstop__ExtensibleDocumented(struct soap*, const char*, wstop__ExtensibleDocumented *, const char*);

#ifndef soap_write_wstop__ExtensibleDocumented
#define soap_write_wstop__ExtensibleDocumented(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:ExtensibleDocumented", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__ExtensibleDocumented * SOAP_FMAC4 soap_get_wstop__ExtensibleDocumented(struct soap*, wstop__ExtensibleDocumented *, const char*, const char*);

#ifndef soap_read_wstop__ExtensibleDocumented
#define soap_read_wstop__ExtensibleDocumented(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__ExtensibleDocumented(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__ExtensibleDocumented * SOAP_FMAC2 soap_instantiate_wstop__ExtensibleDocumented(struct soap*, int, const char*, const char*, size_t*);

inline wstop__ExtensibleDocumented * soap_new_wstop__ExtensibleDocumented(struct soap *soap, int n = -1) { return soap_instantiate_wstop__ExtensibleDocumented(soap, n, NULL, NULL, NULL); }

inline wstop__ExtensibleDocumented * soap_new_req_wstop__ExtensibleDocumented(struct soap *soap) { wstop__ExtensibleDocumented *_p = soap_instantiate_wstop__ExtensibleDocumented(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wstop__ExtensibleDocumented * soap_new_set_wstop__ExtensibleDocumented(struct soap *soap, wstop__Documentation *documentation, char *__anyAttribute, char *__item1) { wstop__ExtensibleDocumented *_p = soap_instantiate_wstop__ExtensibleDocumented(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__ExtensibleDocumented::documentation = documentation; _p->wstop__ExtensibleDocumented::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__ExtensibleDocumented(struct soap *soap, wstop__ExtensibleDocumented *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__ExtensibleDocumented(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (700)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstop__Documentation(struct soap*, const char*, int, const wstop__Documentation *, const char*);
SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_in_wstop__Documentation(struct soap*, const char*, wstop__Documentation *, const char*);

#ifndef soap_write_wstop__Documentation
#define soap_write_wstop__Documentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wstop:Documentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__Documentation * SOAP_FMAC4 soap_get_wstop__Documentation(struct soap*, wstop__Documentation *, const char*, const char*);

#ifndef soap_read_wstop__Documentation
#define soap_read_wstop__Documentation(soap, data) ( soap_begin_recv(soap) || !soap_get_wstop__Documentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wstop__Documentation * SOAP_FMAC2 soap_instantiate_wstop__Documentation(struct soap*, int, const char*, const char*, size_t*);

inline wstop__Documentation * soap_new_wstop__Documentation(struct soap *soap, int n = -1) { return soap_instantiate_wstop__Documentation(soap, n, NULL, NULL, NULL); }

inline wstop__Documentation * soap_new_req_wstop__Documentation(struct soap *soap) { wstop__Documentation *_p = soap_instantiate_wstop__Documentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wstop__Documentation * soap_new_set_wstop__Documentation(struct soap *soap, std::vector<char * >& __any, char *__mixed, char *__item1) { wstop__Documentation *_p = soap_instantiate_wstop__Documentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wstop__Documentation::__any = __any; _p->wstop__Documentation::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wstop__Documentation(struct soap *soap, wstop__Documentation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wstop__Documentation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (699)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrfbf__BaseFaultType(struct soap*, const char*, int, const wsrfbf__BaseFaultType *, const char*);
SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_in_wsrfbf__BaseFaultType(struct soap*, const char*, wsrfbf__BaseFaultType *, const char*);

#ifndef soap_write_wsrfbf__BaseFaultType
#define soap_write_wsrfbf__BaseFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsrfbf:BaseFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrfbf__BaseFaultType * SOAP_FMAC4 soap_get_wsrfbf__BaseFaultType(struct soap*, wsrfbf__BaseFaultType *, const char*, const char*);

#ifndef soap_read_wsrfbf__BaseFaultType
#define soap_read_wsrfbf__BaseFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsrfbf__BaseFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsrfbf__BaseFaultType * SOAP_FMAC2 soap_instantiate_wsrfbf__BaseFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsrfbf__BaseFaultType * soap_new_wsrfbf__BaseFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsrfbf__BaseFaultType(soap, n, NULL, NULL, NULL); }

inline wsrfbf__BaseFaultType * soap_new_req_wsrfbf__BaseFaultType(struct soap *soap, time_t Timestamp) { wsrfbf__BaseFaultType *_p = soap_instantiate_wsrfbf__BaseFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp; } return _p; }

inline wsrfbf__BaseFaultType * soap_new_set_wsrfbf__BaseFaultType(struct soap *soap, std::vector<char * >& __any, time_t Timestamp, struct wsa5__EndpointReferenceType *Originator, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode, std::vector<_wsrfbf__BaseFaultType_Description >*Description, _wsrfbf__BaseFaultType_FaultCause *FaultCause, char *__anyAttribute, char *__item1) { wsrfbf__BaseFaultType *_p = soap_instantiate_wsrfbf__BaseFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp; _p->wsrfbf__BaseFaultType::Originator = Originator; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode; _p->wsrfbf__BaseFaultType::Description = Description; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsrfbf__BaseFaultType(struct soap *soap, wsrfbf__BaseFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrfbf__BaseFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (698)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, int, const _wsnt__ResumeSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__ResumeSubscriptionResponse(struct soap*, const char*, _wsnt__ResumeSubscriptionResponse *, const char*);

#ifndef soap_write__wsnt__ResumeSubscriptionResponse
#define soap_write__wsnt__ResumeSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:ResumeSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__wsnt__ResumeSubscriptionResponse
#define soap_read__wsnt__ResumeSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__ResumeSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__ResumeSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscriptionResponse * soap_new__wsnt__ResumeSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__ResumeSubscriptionResponse * soap_new_req__wsnt__ResumeSubscriptionResponse(struct soap *soap) { _wsnt__ResumeSubscriptionResponse *_p = soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__ResumeSubscriptionResponse * soap_new_set__wsnt__ResumeSubscriptionResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__ResumeSubscriptionResponse *_p = soap_instantiate__wsnt__ResumeSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__ResumeSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__ResumeSubscriptionResponse(struct soap *soap, _wsnt__ResumeSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__ResumeSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (697)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__ResumeSubscription(struct soap*, const char*, int, const _wsnt__ResumeSubscription *, const char*);
SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_in__wsnt__ResumeSubscription(struct soap*, const char*, _wsnt__ResumeSubscription *, const char*);

#ifndef soap_write__wsnt__ResumeSubscription
#define soap_write__wsnt__ResumeSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:ResumeSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__ResumeSubscription * SOAP_FMAC4 soap_get__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription *, const char*, const char*);

#ifndef soap_read__wsnt__ResumeSubscription
#define soap_read__wsnt__ResumeSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__ResumeSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__ResumeSubscription * SOAP_FMAC2 soap_instantiate__wsnt__ResumeSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__ResumeSubscription * soap_new__wsnt__ResumeSubscription(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__ResumeSubscription(soap, n, NULL, NULL, NULL); }

inline _wsnt__ResumeSubscription * soap_new_req__wsnt__ResumeSubscription(struct soap *soap) { _wsnt__ResumeSubscription *_p = soap_instantiate__wsnt__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__ResumeSubscription * soap_new_set__wsnt__ResumeSubscription(struct soap *soap, std::vector<char * >& __any) { _wsnt__ResumeSubscription *_p = soap_instantiate__wsnt__ResumeSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__ResumeSubscription::__any = __any; } return _p; }

inline void soap_delete__wsnt__ResumeSubscription(struct soap *soap, _wsnt__ResumeSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__ResumeSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (696)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscriptionResponse(struct soap*, const char*, int, const _wsnt__PauseSubscriptionResponse *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_in__wsnt__PauseSubscriptionResponse(struct soap*, const char*, _wsnt__PauseSubscriptionResponse *, const char*);

#ifndef soap_write__wsnt__PauseSubscriptionResponse
#define soap_write__wsnt__PauseSubscriptionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:PauseSubscriptionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__PauseSubscriptionResponse * SOAP_FMAC4 soap_get__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse *, const char*, const char*);

#ifndef soap_read__wsnt__PauseSubscriptionResponse
#define soap_read__wsnt__PauseSubscriptionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__PauseSubscriptionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__PauseSubscriptionResponse * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscriptionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscriptionResponse * soap_new__wsnt__PauseSubscriptionResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__PauseSubscriptionResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__PauseSubscriptionResponse * soap_new_req__wsnt__PauseSubscriptionResponse(struct soap *soap) { _wsnt__PauseSubscriptionResponse *_p = soap_instantiate__wsnt__PauseSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__PauseSubscriptionResponse * soap_new_set__wsnt__PauseSubscriptionResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__PauseSubscriptionResponse *_p = soap_instantiate__wsnt__PauseSubscriptionResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__PauseSubscriptionResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__PauseSubscriptionResponse(struct soap *soap, _wsnt__PauseSubscriptionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__PauseSubscriptionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (695)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__PauseSubscription(struct soap*, const char*, int, const _wsnt__PauseSubscription *, const char*);
SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_in__wsnt__PauseSubscription(struct soap*, const char*, _wsnt__PauseSubscription *, const char*);

#ifndef soap_write__wsnt__PauseSubscription
#define soap_write__wsnt__PauseSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:PauseSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__PauseSubscription * SOAP_FMAC4 soap_get__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription *, const char*, const char*);

#ifndef soap_read__wsnt__PauseSubscription
#define soap_read__wsnt__PauseSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__PauseSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__PauseSubscription * SOAP_FMAC2 soap_instantiate__wsnt__PauseSubscription(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__PauseSubscription * soap_new__wsnt__PauseSubscription(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__PauseSubscription(soap, n, NULL, NULL, NULL); }

inline _wsnt__PauseSubscription * soap_new_req__wsnt__PauseSubscription(struct soap *soap) { _wsnt__PauseSubscription *_p = soap_instantiate__wsnt__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__PauseSubscription * soap_new_set__wsnt__PauseSubscription(struct soap *soap, std::vector<char * >& __any) { _wsnt__PauseSubscription *_p = soap_instantiate__wsnt__PauseSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__PauseSubscription::__any = __any; } return _p; }

inline void soap_delete__wsnt__PauseSubscription(struct soap *soap, _wsnt__PauseSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__PauseSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (694)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UnsubscribeResponse(struct soap*, const char*, int, const _wsnt__UnsubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_in__wsnt__UnsubscribeResponse(struct soap*, const char*, _wsnt__UnsubscribeResponse *, const char*);

#ifndef soap_write__wsnt__UnsubscribeResponse
#define soap_write__wsnt__UnsubscribeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnsubscribeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__UnsubscribeResponse * SOAP_FMAC4 soap_get__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse *, const char*, const char*);

#ifndef soap_read__wsnt__UnsubscribeResponse
#define soap_read__wsnt__UnsubscribeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__UnsubscribeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__UnsubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__UnsubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UnsubscribeResponse * soap_new__wsnt__UnsubscribeResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__UnsubscribeResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__UnsubscribeResponse * soap_new_req__wsnt__UnsubscribeResponse(struct soap *soap) { _wsnt__UnsubscribeResponse *_p = soap_instantiate__wsnt__UnsubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__UnsubscribeResponse * soap_new_set__wsnt__UnsubscribeResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__UnsubscribeResponse *_p = soap_instantiate__wsnt__UnsubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__UnsubscribeResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__UnsubscribeResponse(struct soap *soap, _wsnt__UnsubscribeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__UnsubscribeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (693)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Unsubscribe(struct soap*, const char*, int, const _wsnt__Unsubscribe *, const char*);
SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_in__wsnt__Unsubscribe(struct soap*, const char*, _wsnt__Unsubscribe *, const char*);

#ifndef soap_write__wsnt__Unsubscribe
#define soap_write__wsnt__Unsubscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Unsubscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Unsubscribe * SOAP_FMAC4 soap_get__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe *, const char*, const char*);

#ifndef soap_read__wsnt__Unsubscribe
#define soap_read__wsnt__Unsubscribe(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Unsubscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Unsubscribe * SOAP_FMAC2 soap_instantiate__wsnt__Unsubscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Unsubscribe * soap_new__wsnt__Unsubscribe(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Unsubscribe(soap, n, NULL, NULL, NULL); }

inline _wsnt__Unsubscribe * soap_new_req__wsnt__Unsubscribe(struct soap *soap) { _wsnt__Unsubscribe *_p = soap_instantiate__wsnt__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__Unsubscribe * soap_new_set__wsnt__Unsubscribe(struct soap *soap, std::vector<char * >& __any) { _wsnt__Unsubscribe *_p = soap_instantiate__wsnt__Unsubscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Unsubscribe::__any = __any; } return _p; }

inline void soap_delete__wsnt__Unsubscribe(struct soap *soap, _wsnt__Unsubscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Unsubscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (692)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__RenewResponse(struct soap*, const char*, int, const _wsnt__RenewResponse *, const char*);
SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_in__wsnt__RenewResponse(struct soap*, const char*, _wsnt__RenewResponse *, const char*);

#ifndef soap_write__wsnt__RenewResponse
#define soap_write__wsnt__RenewResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:RenewResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__RenewResponse * SOAP_FMAC4 soap_get__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse *, const char*, const char*);

#ifndef soap_read__wsnt__RenewResponse
#define soap_read__wsnt__RenewResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__RenewResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__RenewResponse * SOAP_FMAC2 soap_instantiate__wsnt__RenewResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__RenewResponse * soap_new__wsnt__RenewResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__RenewResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__RenewResponse * soap_new_req__wsnt__RenewResponse(struct soap *soap, time_t TerminationTime) { _wsnt__RenewResponse *_p = soap_instantiate__wsnt__RenewResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__RenewResponse::TerminationTime = TerminationTime; } return _p; }

inline _wsnt__RenewResponse * soap_new_set__wsnt__RenewResponse(struct soap *soap, time_t TerminationTime, time_t *CurrentTime, std::vector<char * >& __any) { _wsnt__RenewResponse *_p = soap_instantiate__wsnt__RenewResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__RenewResponse::TerminationTime = TerminationTime; _p->_wsnt__RenewResponse::CurrentTime = CurrentTime; _p->_wsnt__RenewResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__RenewResponse(struct soap *soap, _wsnt__RenewResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__RenewResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (691)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Renew(struct soap*, const char*, int, const _wsnt__Renew *, const char*);
SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_in__wsnt__Renew(struct soap*, const char*, _wsnt__Renew *, const char*);

#ifndef soap_write__wsnt__Renew
#define soap_write__wsnt__Renew(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Renew", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Renew * SOAP_FMAC4 soap_get__wsnt__Renew(struct soap*, _wsnt__Renew *, const char*, const char*);

#ifndef soap_read__wsnt__Renew
#define soap_read__wsnt__Renew(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Renew(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Renew * SOAP_FMAC2 soap_instantiate__wsnt__Renew(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Renew * soap_new__wsnt__Renew(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Renew(soap, n, NULL, NULL, NULL); }

inline _wsnt__Renew * soap_new_req__wsnt__Renew(struct soap *soap, std::string *TerminationTime) { _wsnt__Renew *_p = soap_instantiate__wsnt__Renew(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Renew::TerminationTime = TerminationTime; } return _p; }

inline _wsnt__Renew * soap_new_set__wsnt__Renew(struct soap *soap, std::string *TerminationTime, std::vector<char * >& __any) { _wsnt__Renew *_p = soap_instantiate__wsnt__Renew(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Renew::TerminationTime = TerminationTime; _p->_wsnt__Renew::__any = __any; } return _p; }

inline void soap_delete__wsnt__Renew(struct soap *soap, _wsnt__Renew *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Renew(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (690)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPointResponse(struct soap*, const char*, int, const _wsnt__CreatePullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_in__wsnt__CreatePullPointResponse(struct soap*, const char*, _wsnt__CreatePullPointResponse *, const char*);

#ifndef soap_write__wsnt__CreatePullPointResponse
#define soap_write__wsnt__CreatePullPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:CreatePullPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__CreatePullPointResponse * SOAP_FMAC4 soap_get__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse *, const char*, const char*);

#ifndef soap_read__wsnt__CreatePullPointResponse
#define soap_read__wsnt__CreatePullPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__CreatePullPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__CreatePullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPointResponse * soap_new__wsnt__CreatePullPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__CreatePullPointResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__CreatePullPointResponse * soap_new_req__wsnt__CreatePullPointResponse(struct soap *soap, struct wsa5__EndpointReferenceType& PullPoint) { _wsnt__CreatePullPointResponse *_p = soap_instantiate__wsnt__CreatePullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint; } return _p; }

inline _wsnt__CreatePullPointResponse * soap_new_set__wsnt__CreatePullPointResponse(struct soap *soap, struct wsa5__EndpointReferenceType& PullPoint, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__CreatePullPointResponse *_p = soap_instantiate__wsnt__CreatePullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__CreatePullPointResponse::PullPoint = PullPoint; _p->_wsnt__CreatePullPointResponse::__any = __any; _p->_wsnt__CreatePullPointResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__CreatePullPointResponse(struct soap *soap, _wsnt__CreatePullPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__CreatePullPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (689)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__CreatePullPoint(struct soap*, const char*, int, const _wsnt__CreatePullPoint *, const char*);
SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_in__wsnt__CreatePullPoint(struct soap*, const char*, _wsnt__CreatePullPoint *, const char*);

#ifndef soap_write__wsnt__CreatePullPoint
#define soap_write__wsnt__CreatePullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:CreatePullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__CreatePullPoint * SOAP_FMAC4 soap_get__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint *, const char*, const char*);

#ifndef soap_read__wsnt__CreatePullPoint
#define soap_read__wsnt__CreatePullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__CreatePullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__CreatePullPoint * SOAP_FMAC2 soap_instantiate__wsnt__CreatePullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__CreatePullPoint * soap_new__wsnt__CreatePullPoint(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__CreatePullPoint(soap, n, NULL, NULL, NULL); }

inline _wsnt__CreatePullPoint * soap_new_req__wsnt__CreatePullPoint(struct soap *soap) { _wsnt__CreatePullPoint *_p = soap_instantiate__wsnt__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__CreatePullPoint * soap_new_set__wsnt__CreatePullPoint(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__CreatePullPoint *_p = soap_instantiate__wsnt__CreatePullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__CreatePullPoint::__any = __any; _p->_wsnt__CreatePullPoint::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__CreatePullPoint(struct soap *soap, _wsnt__CreatePullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__CreatePullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (688)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPointResponse(struct soap*, const char*, int, const _wsnt__DestroyPullPointResponse *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_in__wsnt__DestroyPullPointResponse(struct soap*, const char*, _wsnt__DestroyPullPointResponse *, const char*);

#ifndef soap_write__wsnt__DestroyPullPointResponse
#define soap_write__wsnt__DestroyPullPointResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:DestroyPullPointResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__DestroyPullPointResponse * SOAP_FMAC4 soap_get__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse *, const char*, const char*);

#ifndef soap_read__wsnt__DestroyPullPointResponse
#define soap_read__wsnt__DestroyPullPointResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__DestroyPullPointResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__DestroyPullPointResponse * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPointResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPointResponse * soap_new__wsnt__DestroyPullPointResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__DestroyPullPointResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__DestroyPullPointResponse * soap_new_req__wsnt__DestroyPullPointResponse(struct soap *soap) { _wsnt__DestroyPullPointResponse *_p = soap_instantiate__wsnt__DestroyPullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__DestroyPullPointResponse * soap_new_set__wsnt__DestroyPullPointResponse(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__DestroyPullPointResponse *_p = soap_instantiate__wsnt__DestroyPullPointResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__DestroyPullPointResponse::__any = __any; _p->_wsnt__DestroyPullPointResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__DestroyPullPointResponse(struct soap *soap, _wsnt__DestroyPullPointResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__DestroyPullPointResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (687)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__DestroyPullPoint(struct soap*, const char*, int, const _wsnt__DestroyPullPoint *, const char*);
SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_in__wsnt__DestroyPullPoint(struct soap*, const char*, _wsnt__DestroyPullPoint *, const char*);

#ifndef soap_write__wsnt__DestroyPullPoint
#define soap_write__wsnt__DestroyPullPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:DestroyPullPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__DestroyPullPoint * SOAP_FMAC4 soap_get__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint *, const char*, const char*);

#ifndef soap_read__wsnt__DestroyPullPoint
#define soap_read__wsnt__DestroyPullPoint(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__DestroyPullPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__DestroyPullPoint * SOAP_FMAC2 soap_instantiate__wsnt__DestroyPullPoint(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__DestroyPullPoint * soap_new__wsnt__DestroyPullPoint(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__DestroyPullPoint(soap, n, NULL, NULL, NULL); }

inline _wsnt__DestroyPullPoint * soap_new_req__wsnt__DestroyPullPoint(struct soap *soap) { _wsnt__DestroyPullPoint *_p = soap_instantiate__wsnt__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__DestroyPullPoint * soap_new_set__wsnt__DestroyPullPoint(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__DestroyPullPoint *_p = soap_instantiate__wsnt__DestroyPullPoint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__DestroyPullPoint::__any = __any; _p->_wsnt__DestroyPullPoint::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__DestroyPullPoint(struct soap *soap, _wsnt__DestroyPullPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__DestroyPullPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (686)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessagesResponse(struct soap*, const char*, int, const _wsnt__GetMessagesResponse *, const char*);
SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_in__wsnt__GetMessagesResponse(struct soap*, const char*, _wsnt__GetMessagesResponse *, const char*);

#ifndef soap_write__wsnt__GetMessagesResponse
#define soap_write__wsnt__GetMessagesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetMessagesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetMessagesResponse * SOAP_FMAC4 soap_get__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse *, const char*, const char*);

#ifndef soap_read__wsnt__GetMessagesResponse
#define soap_read__wsnt__GetMessagesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetMessagesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetMessagesResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetMessagesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessagesResponse * soap_new__wsnt__GetMessagesResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetMessagesResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetMessagesResponse * soap_new_req__wsnt__GetMessagesResponse(struct soap *soap) { _wsnt__GetMessagesResponse *_p = soap_instantiate__wsnt__GetMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__GetMessagesResponse * soap_new_set__wsnt__GetMessagesResponse(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >& NotificationMessage, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__GetMessagesResponse *_p = soap_instantiate__wsnt__GetMessagesResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetMessagesResponse::NotificationMessage = NotificationMessage; _p->_wsnt__GetMessagesResponse::__any = __any; _p->_wsnt__GetMessagesResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__GetMessagesResponse(struct soap *soap, _wsnt__GetMessagesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetMessagesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (685)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetMessages(struct soap*, const char*, int, const _wsnt__GetMessages *, const char*);
SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_in__wsnt__GetMessages(struct soap*, const char*, _wsnt__GetMessages *, const char*);

#ifndef soap_write__wsnt__GetMessages
#define soap_write__wsnt__GetMessages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetMessages", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetMessages * SOAP_FMAC4 soap_get__wsnt__GetMessages(struct soap*, _wsnt__GetMessages *, const char*, const char*);

#ifndef soap_read__wsnt__GetMessages
#define soap_read__wsnt__GetMessages(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetMessages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetMessages * SOAP_FMAC2 soap_instantiate__wsnt__GetMessages(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetMessages * soap_new__wsnt__GetMessages(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetMessages(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetMessages * soap_new_req__wsnt__GetMessages(struct soap *soap) { _wsnt__GetMessages *_p = soap_instantiate__wsnt__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__GetMessages * soap_new_set__wsnt__GetMessages(struct soap *soap, std::string *MaximumNumber, std::vector<char * >& __any, char *__anyAttribute) { _wsnt__GetMessages *_p = soap_instantiate__wsnt__GetMessages(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetMessages::MaximumNumber = MaximumNumber; _p->_wsnt__GetMessages::__any = __any; _p->_wsnt__GetMessages::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__wsnt__GetMessages(struct soap *soap, _wsnt__GetMessages *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetMessages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (684)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessageResponse(struct soap*, const char*, int, const _wsnt__GetCurrentMessageResponse *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessageResponse(struct soap*, const char*, _wsnt__GetCurrentMessageResponse *, const char*);

#ifndef soap_write__wsnt__GetCurrentMessageResponse
#define soap_write__wsnt__GetCurrentMessageResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetCurrentMessageResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetCurrentMessageResponse * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse *, const char*, const char*);

#ifndef soap_read__wsnt__GetCurrentMessageResponse
#define soap_read__wsnt__GetCurrentMessageResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetCurrentMessageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetCurrentMessageResponse * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessageResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessageResponse * soap_new__wsnt__GetCurrentMessageResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetCurrentMessageResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetCurrentMessageResponse * soap_new_req__wsnt__GetCurrentMessageResponse(struct soap *soap) { _wsnt__GetCurrentMessageResponse *_p = soap_instantiate__wsnt__GetCurrentMessageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__GetCurrentMessageResponse * soap_new_set__wsnt__GetCurrentMessageResponse(struct soap *soap, std::vector<char * >& __any) { _wsnt__GetCurrentMessageResponse *_p = soap_instantiate__wsnt__GetCurrentMessageResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetCurrentMessageResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__GetCurrentMessageResponse(struct soap *soap, _wsnt__GetCurrentMessageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetCurrentMessageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (683)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__GetCurrentMessage(struct soap*, const char*, int, const _wsnt__GetCurrentMessage *, const char*);
SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_in__wsnt__GetCurrentMessage(struct soap*, const char*, _wsnt__GetCurrentMessage *, const char*);

#ifndef soap_write__wsnt__GetCurrentMessage
#define soap_write__wsnt__GetCurrentMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:GetCurrentMessage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__GetCurrentMessage * SOAP_FMAC4 soap_get__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage *, const char*, const char*);

#ifndef soap_read__wsnt__GetCurrentMessage
#define soap_read__wsnt__GetCurrentMessage(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__GetCurrentMessage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__GetCurrentMessage * SOAP_FMAC2 soap_instantiate__wsnt__GetCurrentMessage(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__GetCurrentMessage * soap_new__wsnt__GetCurrentMessage(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__GetCurrentMessage(soap, n, NULL, NULL, NULL); }

inline _wsnt__GetCurrentMessage * soap_new_req__wsnt__GetCurrentMessage(struct soap *soap, wsnt__TopicExpressionType *Topic) { _wsnt__GetCurrentMessage *_p = soap_instantiate__wsnt__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetCurrentMessage::Topic = Topic; } return _p; }

inline _wsnt__GetCurrentMessage * soap_new_set__wsnt__GetCurrentMessage(struct soap *soap, wsnt__TopicExpressionType *Topic, std::vector<char * >& __any) { _wsnt__GetCurrentMessage *_p = soap_instantiate__wsnt__GetCurrentMessage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__GetCurrentMessage::Topic = Topic; _p->_wsnt__GetCurrentMessage::__any = __any; } return _p; }

inline void soap_delete__wsnt__GetCurrentMessage(struct soap *soap, _wsnt__GetCurrentMessage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__GetCurrentMessage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (682)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscribeResponse(struct soap*, const char*, int, const _wsnt__SubscribeResponse *, const char*);
SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_in__wsnt__SubscribeResponse(struct soap*, const char*, _wsnt__SubscribeResponse *, const char*);

#ifndef soap_write__wsnt__SubscribeResponse
#define soap_write__wsnt__SubscribeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscribeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__SubscribeResponse * SOAP_FMAC4 soap_get__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse *, const char*, const char*);

#ifndef soap_read__wsnt__SubscribeResponse
#define soap_read__wsnt__SubscribeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__SubscribeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__SubscribeResponse * SOAP_FMAC2 soap_instantiate__wsnt__SubscribeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscribeResponse * soap_new__wsnt__SubscribeResponse(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__SubscribeResponse(soap, n, NULL, NULL, NULL); }

inline _wsnt__SubscribeResponse * soap_new_req__wsnt__SubscribeResponse(struct soap *soap, struct wsa5__EndpointReferenceType& SubscriptionReference) { _wsnt__SubscribeResponse *_p = soap_instantiate__wsnt__SubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference; } return _p; }

inline _wsnt__SubscribeResponse * soap_new_set__wsnt__SubscribeResponse(struct soap *soap, struct wsa5__EndpointReferenceType& SubscriptionReference, time_t *CurrentTime, time_t *TerminationTime, std::vector<char * >& __any) { _wsnt__SubscribeResponse *_p = soap_instantiate__wsnt__SubscribeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscribeResponse::SubscriptionReference = SubscriptionReference; _p->_wsnt__SubscribeResponse::CurrentTime = CurrentTime; _p->_wsnt__SubscribeResponse::TerminationTime = TerminationTime; _p->_wsnt__SubscribeResponse::__any = __any; } return _p; }

inline void soap_delete__wsnt__SubscribeResponse(struct soap *soap, _wsnt__SubscribeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__SubscribeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (681)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Subscribe(struct soap*, const char*, int, const _wsnt__Subscribe *, const char*);
SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_in__wsnt__Subscribe(struct soap*, const char*, _wsnt__Subscribe *, const char*);

#ifndef soap_write__wsnt__Subscribe
#define soap_write__wsnt__Subscribe(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Subscribe", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe * SOAP_FMAC4 soap_get__wsnt__Subscribe(struct soap*, _wsnt__Subscribe *, const char*, const char*);

#ifndef soap_read__wsnt__Subscribe
#define soap_read__wsnt__Subscribe(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Subscribe(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Subscribe * SOAP_FMAC2 soap_instantiate__wsnt__Subscribe(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Subscribe * soap_new__wsnt__Subscribe(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Subscribe(soap, n, NULL, NULL, NULL); }

inline _wsnt__Subscribe * soap_new_req__wsnt__Subscribe(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference) { _wsnt__Subscribe *_p = soap_instantiate__wsnt__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Subscribe::ConsumerReference = ConsumerReference; } return _p; }

inline _wsnt__Subscribe * soap_new_set__wsnt__Subscribe(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference, wsnt__FilterType *Filter, std::string *InitialTerminationTime, _wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy, std::vector<char * >& __any) { _wsnt__Subscribe *_p = soap_instantiate__wsnt__Subscribe(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Subscribe::ConsumerReference = ConsumerReference; _p->_wsnt__Subscribe::Filter = Filter; _p->_wsnt__Subscribe::InitialTerminationTime = InitialTerminationTime; _p->_wsnt__Subscribe::SubscriptionPolicy = SubscriptionPolicy; _p->_wsnt__Subscribe::__any = __any; } return _p; }

inline void soap_delete__wsnt__Subscribe(struct soap *soap, _wsnt__Subscribe *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Subscribe(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (680)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__UseRaw(struct soap*, const char*, int, const _wsnt__UseRaw *, const char*);
SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_in__wsnt__UseRaw(struct soap*, const char*, _wsnt__UseRaw *, const char*);

#ifndef soap_write__wsnt__UseRaw
#define soap_write__wsnt__UseRaw(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UseRaw", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__UseRaw * SOAP_FMAC4 soap_get__wsnt__UseRaw(struct soap*, _wsnt__UseRaw *, const char*, const char*);

#ifndef soap_read__wsnt__UseRaw
#define soap_read__wsnt__UseRaw(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__UseRaw(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__UseRaw * SOAP_FMAC2 soap_instantiate__wsnt__UseRaw(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__UseRaw * soap_new__wsnt__UseRaw(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__UseRaw(soap, n, NULL, NULL, NULL); }

inline _wsnt__UseRaw * soap_new_req__wsnt__UseRaw(struct soap *soap) { _wsnt__UseRaw *_p = soap_instantiate__wsnt__UseRaw(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__UseRaw * soap_new_set__wsnt__UseRaw(struct soap *soap) { _wsnt__UseRaw *_p = soap_instantiate__wsnt__UseRaw(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__wsnt__UseRaw(struct soap *soap, _wsnt__UseRaw *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__UseRaw(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (679)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__Notify(struct soap*, const char*, int, const _wsnt__Notify *, const char*);
SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_in__wsnt__Notify(struct soap*, const char*, _wsnt__Notify *, const char*);

#ifndef soap_write__wsnt__Notify
#define soap_write__wsnt__Notify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:Notify", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Notify * SOAP_FMAC4 soap_get__wsnt__Notify(struct soap*, _wsnt__Notify *, const char*, const char*);

#ifndef soap_read__wsnt__Notify
#define soap_read__wsnt__Notify(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__Notify(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__Notify * SOAP_FMAC2 soap_instantiate__wsnt__Notify(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__Notify * soap_new__wsnt__Notify(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__Notify(soap, n, NULL, NULL, NULL); }

inline _wsnt__Notify * soap_new_req__wsnt__Notify(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >& NotificationMessage) { _wsnt__Notify *_p = soap_instantiate__wsnt__Notify(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Notify::NotificationMessage = NotificationMessage; } return _p; }

inline _wsnt__Notify * soap_new_set__wsnt__Notify(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >& NotificationMessage, std::vector<char * >& __any) { _wsnt__Notify *_p = soap_instantiate__wsnt__Notify(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__Notify::NotificationMessage = NotificationMessage; _p->_wsnt__Notify::__any = __any; } return _p; }

inline void soap_delete__wsnt__Notify(struct soap *soap, _wsnt__Notify *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__Notify(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (678)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__SubscriptionManagerRP(struct soap*, const char*, int, const _wsnt__SubscriptionManagerRP *, const char*);
SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_in__wsnt__SubscriptionManagerRP(struct soap*, const char*, _wsnt__SubscriptionManagerRP *, const char*);

#ifndef soap_write__wsnt__SubscriptionManagerRP
#define soap_write__wsnt__SubscriptionManagerRP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscriptionManagerRP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__SubscriptionManagerRP * SOAP_FMAC4 soap_get__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP *, const char*, const char*);

#ifndef soap_read__wsnt__SubscriptionManagerRP
#define soap_read__wsnt__SubscriptionManagerRP(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__SubscriptionManagerRP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__SubscriptionManagerRP * SOAP_FMAC2 soap_instantiate__wsnt__SubscriptionManagerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__SubscriptionManagerRP * soap_new__wsnt__SubscriptionManagerRP(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__SubscriptionManagerRP(soap, n, NULL, NULL, NULL); }

inline _wsnt__SubscriptionManagerRP * soap_new_req__wsnt__SubscriptionManagerRP(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference) { _wsnt__SubscriptionManagerRP *_p = soap_instantiate__wsnt__SubscriptionManagerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference; } return _p; }

inline _wsnt__SubscriptionManagerRP * soap_new_set__wsnt__SubscriptionManagerRP(struct soap *soap, struct wsa5__EndpointReferenceType& ConsumerReference, wsnt__FilterType *Filter, wsnt__SubscriptionPolicyType *SubscriptionPolicy, time_t *CreationTime) { _wsnt__SubscriptionManagerRP *_p = soap_instantiate__wsnt__SubscriptionManagerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__SubscriptionManagerRP::ConsumerReference = ConsumerReference; _p->_wsnt__SubscriptionManagerRP::Filter = Filter; _p->_wsnt__SubscriptionManagerRP::SubscriptionPolicy = SubscriptionPolicy; _p->_wsnt__SubscriptionManagerRP::CreationTime = CreationTime; } return _p; }

inline void soap_delete__wsnt__SubscriptionManagerRP(struct soap *soap, _wsnt__SubscriptionManagerRP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__SubscriptionManagerRP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (677)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsnt__NotificationProducerRP(struct soap*, const char*, int, const _wsnt__NotificationProducerRP *, const char*);
SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_in__wsnt__NotificationProducerRP(struct soap*, const char*, _wsnt__NotificationProducerRP *, const char*);

#ifndef soap_write__wsnt__NotificationProducerRP
#define soap_write__wsnt__NotificationProducerRP(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotificationProducerRP", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__NotificationProducerRP * SOAP_FMAC4 soap_get__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP *, const char*, const char*);

#ifndef soap_read__wsnt__NotificationProducerRP
#define soap_read__wsnt__NotificationProducerRP(soap, data) ( soap_begin_recv(soap) || !soap_get__wsnt__NotificationProducerRP(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _wsnt__NotificationProducerRP * SOAP_FMAC2 soap_instantiate__wsnt__NotificationProducerRP(struct soap*, int, const char*, const char*, size_t*);

inline _wsnt__NotificationProducerRP * soap_new__wsnt__NotificationProducerRP(struct soap *soap, int n = -1) { return soap_instantiate__wsnt__NotificationProducerRP(soap, n, NULL, NULL, NULL); }

inline _wsnt__NotificationProducerRP * soap_new_req__wsnt__NotificationProducerRP(struct soap *soap) { _wsnt__NotificationProducerRP *_p = soap_instantiate__wsnt__NotificationProducerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _wsnt__NotificationProducerRP * soap_new_set__wsnt__NotificationProducerRP(struct soap *soap, std::vector<wsnt__TopicExpressionType * >& TopicExpression, bool *FixedTopicSet, std::vector<std::string >& TopicExpressionDialect, wstop__TopicSetType *wstop__TopicSet) { _wsnt__NotificationProducerRP *_p = soap_instantiate__wsnt__NotificationProducerRP(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_wsnt__NotificationProducerRP::TopicExpression = TopicExpression; _p->_wsnt__NotificationProducerRP::FixedTopicSet = FixedTopicSet; _p->_wsnt__NotificationProducerRP::TopicExpressionDialect = TopicExpressionDialect; _p->_wsnt__NotificationProducerRP::wstop__TopicSet = wstop__TopicSet; } return _p; }

inline void soap_delete__wsnt__NotificationProducerRP(struct soap *soap, _wsnt__NotificationProducerRP *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsnt__NotificationProducerRP(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (676)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__ResumeFailedFaultType(struct soap*, const char*, int, const wsnt__ResumeFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_in_wsnt__ResumeFailedFaultType(struct soap*, const char*, wsnt__ResumeFailedFaultType *, const char*);

#ifndef soap_write_wsnt__ResumeFailedFaultType
#define soap_write_wsnt__ResumeFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:ResumeFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__ResumeFailedFaultType * SOAP_FMAC4 soap_get_wsnt__ResumeFailedFaultType(struct soap*, wsnt__ResumeFailedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__ResumeFailedFaultType
#define soap_read_wsnt__ResumeFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__ResumeFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__ResumeFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__ResumeFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__ResumeFailedFaultType * soap_new_wsnt__ResumeFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__ResumeFailedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__ResumeFailedFaultType * soap_new_req_wsnt__ResumeFailedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__ResumeFailedFaultType *_p = soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__ResumeFailedFaultType * soap_new_set_wsnt__ResumeFailedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__ResumeFailedFaultType *_p = soap_instantiate_wsnt__ResumeFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__ResumeFailedFaultType(struct soap *soap, wsnt__ResumeFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__ResumeFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (675)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__PauseFailedFaultType(struct soap*, const char*, int, const wsnt__PauseFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_in_wsnt__PauseFailedFaultType(struct soap*, const char*, wsnt__PauseFailedFaultType *, const char*);

#ifndef soap_write_wsnt__PauseFailedFaultType
#define soap_write_wsnt__PauseFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:PauseFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__PauseFailedFaultType * SOAP_FMAC4 soap_get_wsnt__PauseFailedFaultType(struct soap*, wsnt__PauseFailedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__PauseFailedFaultType
#define soap_read_wsnt__PauseFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__PauseFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__PauseFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__PauseFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__PauseFailedFaultType * soap_new_wsnt__PauseFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__PauseFailedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__PauseFailedFaultType * soap_new_req_wsnt__PauseFailedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__PauseFailedFaultType *_p = soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__PauseFailedFaultType * soap_new_set_wsnt__PauseFailedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__PauseFailedFaultType *_p = soap_instantiate_wsnt__PauseFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__PauseFailedFaultType(struct soap *soap, wsnt__PauseFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__PauseFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (674)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroySubscriptionFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, const char*, wsnt__UnableToDestroySubscriptionFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToDestroySubscriptionFaultType
#define soap_write_wsnt__UnableToDestroySubscriptionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToDestroySubscriptionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, wsnt__UnableToDestroySubscriptionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToDestroySubscriptionFaultType
#define soap_read_wsnt__UnableToDestroySubscriptionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToDestroySubscriptionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToDestroySubscriptionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_req_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToDestroySubscriptionFaultType *_p = soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToDestroySubscriptionFaultType * soap_new_set_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToDestroySubscriptionFaultType *_p = soap_instantiate_wsnt__UnableToDestroySubscriptionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToDestroySubscriptionFaultType(struct soap *soap, wsnt__UnableToDestroySubscriptionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToDestroySubscriptionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (673)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableTerminationTimeFaultType *, const char*);

#ifndef soap_write_wsnt__UnacceptableTerminationTimeFaultType
#define soap_write_wsnt__UnacceptableTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnacceptableTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, wsnt__UnacceptableTerminationTimeFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnacceptableTerminationTimeFaultType
#define soap_read_wsnt__UnacceptableTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnacceptableTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnacceptableTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t Timestamp1) { wsnt__UnacceptableTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnacceptableTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t *MaximumTime, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnacceptableTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsnt__UnacceptableTerminationTimeFaultType::MaximumTime = MaximumTime; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnacceptableTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableTerminationTimeFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnacceptableTerminationTimeFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (672)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToCreatePullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToCreatePullPointFaultType(struct soap*, const char*, wsnt__UnableToCreatePullPointFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToCreatePullPointFaultType
#define soap_write_wsnt__UnableToCreatePullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToCreatePullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToCreatePullPointFaultType(struct soap*, wsnt__UnableToCreatePullPointFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToCreatePullPointFaultType
#define soap_read_wsnt__UnableToCreatePullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToCreatePullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToCreatePullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToCreatePullPointFaultType * soap_new_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToCreatePullPointFaultType * soap_new_req_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToCreatePullPointFaultType *_p = soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToCreatePullPointFaultType * soap_new_set_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToCreatePullPointFaultType *_p = soap_instantiate_wsnt__UnableToCreatePullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToCreatePullPointFaultType(struct soap *soap, wsnt__UnableToCreatePullPointFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToCreatePullPointFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (671)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, int, const wsnt__UnableToDestroyPullPointFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToDestroyPullPointFaultType(struct soap*, const char*, wsnt__UnableToDestroyPullPointFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToDestroyPullPointFaultType
#define soap_write_wsnt__UnableToDestroyPullPointFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToDestroyPullPointFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToDestroyPullPointFaultType(struct soap*, wsnt__UnableToDestroyPullPointFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToDestroyPullPointFaultType
#define soap_read_wsnt__UnableToDestroyPullPointFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToDestroyPullPointFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToDestroyPullPointFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_req_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToDestroyPullPointFaultType *_p = soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToDestroyPullPointFaultType * soap_new_set_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToDestroyPullPointFaultType *_p = soap_instantiate_wsnt__UnableToDestroyPullPointFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToDestroyPullPointFaultType(struct soap *soap, wsnt__UnableToDestroyPullPointFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToDestroyPullPointFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (670)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, int, const wsnt__UnableToGetMessagesFaultType *, const char*);
SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_in_wsnt__UnableToGetMessagesFaultType(struct soap*, const char*, wsnt__UnableToGetMessagesFaultType *, const char*);

#ifndef soap_write_wsnt__UnableToGetMessagesFaultType
#define soap_write_wsnt__UnableToGetMessagesFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnableToGetMessagesFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC4 soap_get_wsnt__UnableToGetMessagesFaultType(struct soap*, wsnt__UnableToGetMessagesFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnableToGetMessagesFaultType
#define soap_read_wsnt__UnableToGetMessagesFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnableToGetMessagesFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnableToGetMessagesFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnableToGetMessagesFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnableToGetMessagesFaultType * soap_new_wsnt__UnableToGetMessagesFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnableToGetMessagesFaultType * soap_new_req_wsnt__UnableToGetMessagesFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnableToGetMessagesFaultType *_p = soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnableToGetMessagesFaultType * soap_new_set_wsnt__UnableToGetMessagesFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnableToGetMessagesFaultType *_p = soap_instantiate_wsnt__UnableToGetMessagesFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnableToGetMessagesFaultType(struct soap *soap, wsnt__UnableToGetMessagesFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnableToGetMessagesFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (669)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, int, const wsnt__NoCurrentMessageOnTopicFaultType *, const char*);
SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_in_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, const char*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*);

#ifndef soap_write_wsnt__NoCurrentMessageOnTopicFaultType
#define soap_write_wsnt__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NoCurrentMessageOnTopicFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC4 soap_get_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, wsnt__NoCurrentMessageOnTopicFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__NoCurrentMessageOnTopicFaultType
#define soap_read_wsnt__NoCurrentMessageOnTopicFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__NoCurrentMessageOnTopicFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__NoCurrentMessageOnTopicFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, time_t Timestamp1) { wsnt__NoCurrentMessageOnTopicFaultType *_p = soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__NoCurrentMessageOnTopicFaultType * soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__NoCurrentMessageOnTopicFaultType *_p = soap_instantiate_wsnt__NoCurrentMessageOnTopicFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__NoCurrentMessageOnTopicFaultType(struct soap *soap, wsnt__NoCurrentMessageOnTopicFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NoCurrentMessageOnTopicFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (668)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, int, const wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);
SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_in_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, const char*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*);

#ifndef soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType
#define soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnacceptableInitialTerminationTimeFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC4 soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, wsnt__UnacceptableInitialTerminationTimeFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType
#define soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnacceptableInitialTerminationTimeFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t Timestamp1) { wsnt__UnacceptableInitialTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnacceptableInitialTerminationTimeFaultType * soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, time_t MinimumTime, time_t *MaximumTime, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnacceptableInitialTerminationTimeFaultType *_p = soap_instantiate_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnacceptableInitialTerminationTimeFaultType::MinimumTime = MinimumTime; _p->wsnt__UnacceptableInitialTerminationTimeFaultType::MaximumTime = MaximumTime; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap *soap, wsnt__UnacceptableInitialTerminationTimeFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnacceptableInitialTerminationTimeFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (667)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, int, const wsnt__NotifyMessageNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, const char*, wsnt__NotifyMessageNotSupportedFaultType *, const char*);

#ifndef soap_write_wsnt__NotifyMessageNotSupportedFaultType
#define soap_write_wsnt__NotifyMessageNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotifyMessageNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, wsnt__NotifyMessageNotSupportedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__NotifyMessageNotSupportedFaultType
#define soap_read_wsnt__NotifyMessageNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__NotifyMessageNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__NotifyMessageNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_req_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__NotifyMessageNotSupportedFaultType *_p = soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__NotifyMessageNotSupportedFaultType * soap_new_set_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__NotifyMessageNotSupportedFaultType *_p = soap_instantiate_wsnt__NotifyMessageNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__NotifyMessageNotSupportedFaultType(struct soap *soap, wsnt__NotifyMessageNotSupportedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NotifyMessageNotSupportedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (666)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnsupportedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnsupportedPolicyRequestFaultType *, const char*);

#ifndef soap_write_wsnt__UnsupportedPolicyRequestFaultType
#define soap_write_wsnt__UnsupportedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnsupportedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, wsnt__UnsupportedPolicyRequestFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnsupportedPolicyRequestFaultType
#define soap_read_wsnt__UnsupportedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnsupportedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnsupportedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_req_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnsupportedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnsupportedPolicyRequestFaultType * soap_new_set_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, std::vector<std::string >& UnsupportedPolicy, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnsupportedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnsupportedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnsupportedPolicyRequestFaultType::UnsupportedPolicy = UnsupportedPolicy; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnsupportedPolicyRequestFaultType(struct soap *soap, wsnt__UnsupportedPolicyRequestFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnsupportedPolicyRequestFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (665)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, int, const wsnt__UnrecognizedPolicyRequestFaultType *, const char*);
SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_in_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, const char*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*);

#ifndef soap_write_wsnt__UnrecognizedPolicyRequestFaultType
#define soap_write_wsnt__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:UnrecognizedPolicyRequestFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC4 soap_get_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, wsnt__UnrecognizedPolicyRequestFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__UnrecognizedPolicyRequestFaultType
#define soap_read_wsnt__UnrecognizedPolicyRequestFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__UnrecognizedPolicyRequestFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__UnrecognizedPolicyRequestFaultType * SOAP_FMAC2 soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, time_t Timestamp1) { wsnt__UnrecognizedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__UnrecognizedPolicyRequestFaultType * soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, std::vector<std::string >& UnrecognizedPolicy, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__UnrecognizedPolicyRequestFaultType *_p = soap_instantiate_wsnt__UnrecognizedPolicyRequestFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__UnrecognizedPolicyRequestFaultType::UnrecognizedPolicy = UnrecognizedPolicy; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__UnrecognizedPolicyRequestFaultType(struct soap *soap, wsnt__UnrecognizedPolicyRequestFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__UnrecognizedPolicyRequestFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (664)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidMessageContentExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, const char*, wsnt__InvalidMessageContentExpressionFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidMessageContentExpressionFaultType
#define soap_write_wsnt__InvalidMessageContentExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidMessageContentExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, wsnt__InvalidMessageContentExpressionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidMessageContentExpressionFaultType
#define soap_read_wsnt__InvalidMessageContentExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidMessageContentExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidMessageContentExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_req_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__InvalidMessageContentExpressionFaultType *_p = soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidMessageContentExpressionFaultType * soap_new_set_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidMessageContentExpressionFaultType *_p = soap_instantiate_wsnt__InvalidMessageContentExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidMessageContentExpressionFaultType(struct soap *soap, wsnt__InvalidMessageContentExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidMessageContentExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (663)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, const char*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType
#define soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidProducerPropertiesExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, wsnt__InvalidProducerPropertiesExpressionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType
#define soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidProducerPropertiesExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__InvalidProducerPropertiesExpressionFaultType *_p = soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidProducerPropertiesExpressionFaultType * soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidProducerPropertiesExpressionFaultType *_p = soap_instantiate_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap *soap, wsnt__InvalidProducerPropertiesExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidProducerPropertiesExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (662)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, int, const wsnt__MultipleTopicsSpecifiedFaultType *, const char*);
SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_in_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, const char*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*);

#ifndef soap_write_wsnt__MultipleTopicsSpecifiedFaultType
#define soap_write_wsnt__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:MultipleTopicsSpecifiedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC4 soap_get_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, wsnt__MultipleTopicsSpecifiedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__MultipleTopicsSpecifiedFaultType
#define soap_read_wsnt__MultipleTopicsSpecifiedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__MultipleTopicsSpecifiedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__MultipleTopicsSpecifiedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__MultipleTopicsSpecifiedFaultType *_p = soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__MultipleTopicsSpecifiedFaultType * soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__MultipleTopicsSpecifiedFaultType *_p = soap_instantiate_wsnt__MultipleTopicsSpecifiedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__MultipleTopicsSpecifiedFaultType(struct soap *soap, wsnt__MultipleTopicsSpecifiedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__MultipleTopicsSpecifiedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (661)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, int, const wsnt__TopicNotSupportedFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_in_wsnt__TopicNotSupportedFaultType(struct soap*, const char*, wsnt__TopicNotSupportedFaultType *, const char*);

#ifndef soap_write_wsnt__TopicNotSupportedFaultType
#define soap_write_wsnt__TopicNotSupportedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:TopicNotSupportedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicNotSupportedFaultType * SOAP_FMAC4 soap_get_wsnt__TopicNotSupportedFaultType(struct soap*, wsnt__TopicNotSupportedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__TopicNotSupportedFaultType
#define soap_read_wsnt__TopicNotSupportedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__TopicNotSupportedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__TopicNotSupportedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicNotSupportedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicNotSupportedFaultType * soap_new_wsnt__TopicNotSupportedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__TopicNotSupportedFaultType * soap_new_req_wsnt__TopicNotSupportedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__TopicNotSupportedFaultType *_p = soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__TopicNotSupportedFaultType * soap_new_set_wsnt__TopicNotSupportedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__TopicNotSupportedFaultType *_p = soap_instantiate_wsnt__TopicNotSupportedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__TopicNotSupportedFaultType(struct soap *soap, wsnt__TopicNotSupportedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicNotSupportedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (660)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, int, const wsnt__InvalidTopicExpressionFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidTopicExpressionFaultType(struct soap*, const char*, wsnt__InvalidTopicExpressionFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidTopicExpressionFaultType
#define soap_write_wsnt__InvalidTopicExpressionFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidTopicExpressionFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidTopicExpressionFaultType(struct soap*, wsnt__InvalidTopicExpressionFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidTopicExpressionFaultType
#define soap_read_wsnt__InvalidTopicExpressionFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidTopicExpressionFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidTopicExpressionFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidTopicExpressionFaultType * soap_new_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidTopicExpressionFaultType * soap_new_req_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, time_t Timestamp1) { wsnt__InvalidTopicExpressionFaultType *_p = soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidTopicExpressionFaultType * soap_new_set_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidTopicExpressionFaultType *_p = soap_instantiate_wsnt__InvalidTopicExpressionFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidTopicExpressionFaultType(struct soap *soap, wsnt__InvalidTopicExpressionFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidTopicExpressionFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (659)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, int, const wsnt__TopicExpressionDialectUnknownFaultType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, const char*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*);

#ifndef soap_write_wsnt__TopicExpressionDialectUnknownFaultType
#define soap_write_wsnt__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:TopicExpressionDialectUnknownFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, wsnt__TopicExpressionDialectUnknownFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__TopicExpressionDialectUnknownFaultType
#define soap_read_wsnt__TopicExpressionDialectUnknownFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__TopicExpressionDialectUnknownFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__TopicExpressionDialectUnknownFaultType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, time_t Timestamp1) { wsnt__TopicExpressionDialectUnknownFaultType *_p = soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__TopicExpressionDialectUnknownFaultType * soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__TopicExpressionDialectUnknownFaultType *_p = soap_instantiate_wsnt__TopicExpressionDialectUnknownFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__TopicExpressionDialectUnknownFaultType(struct soap *soap, wsnt__TopicExpressionDialectUnknownFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicExpressionDialectUnknownFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (658)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__InvalidFilterFaultType(struct soap*, const char*, int, const wsnt__InvalidFilterFaultType *, const char*);
SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_in_wsnt__InvalidFilterFaultType(struct soap*, const char*, wsnt__InvalidFilterFaultType *, const char*);

#ifndef soap_write_wsnt__InvalidFilterFaultType
#define soap_write_wsnt__InvalidFilterFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:InvalidFilterFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__InvalidFilterFaultType * SOAP_FMAC4 soap_get_wsnt__InvalidFilterFaultType(struct soap*, wsnt__InvalidFilterFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__InvalidFilterFaultType
#define soap_read_wsnt__InvalidFilterFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__InvalidFilterFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__InvalidFilterFaultType * SOAP_FMAC2 soap_instantiate_wsnt__InvalidFilterFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__InvalidFilterFaultType * soap_new_wsnt__InvalidFilterFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__InvalidFilterFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__InvalidFilterFaultType * soap_new_req_wsnt__InvalidFilterFaultType(struct soap *soap, std::vector<std::string >& UnknownFilter, time_t Timestamp1) { wsnt__InvalidFilterFaultType *_p = soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__InvalidFilterFaultType * soap_new_set_wsnt__InvalidFilterFaultType(struct soap *soap, std::vector<std::string >& UnknownFilter, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__InvalidFilterFaultType *_p = soap_instantiate_wsnt__InvalidFilterFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__InvalidFilterFaultType::UnknownFilter = UnknownFilter; _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__InvalidFilterFaultType(struct soap *soap, wsnt__InvalidFilterFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__InvalidFilterFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (657)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, int, const wsnt__SubscribeCreationFailedFaultType *, const char*);
SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_in_wsnt__SubscribeCreationFailedFaultType(struct soap*, const char*, wsnt__SubscribeCreationFailedFaultType *, const char*);

#ifndef soap_write_wsnt__SubscribeCreationFailedFaultType
#define soap_write_wsnt__SubscribeCreationFailedFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscribeCreationFailedFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC4 soap_get_wsnt__SubscribeCreationFailedFaultType(struct soap*, wsnt__SubscribeCreationFailedFaultType *, const char*, const char*);

#ifndef soap_read_wsnt__SubscribeCreationFailedFaultType
#define soap_read_wsnt__SubscribeCreationFailedFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__SubscribeCreationFailedFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__SubscribeCreationFailedFaultType * SOAP_FMAC2 soap_instantiate_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscribeCreationFailedFaultType * soap_new_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, n, NULL, NULL, NULL); }

inline wsnt__SubscribeCreationFailedFaultType * soap_new_req_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, time_t Timestamp1) { wsnt__SubscribeCreationFailedFaultType *_p = soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; } return _p; }

inline wsnt__SubscribeCreationFailedFaultType * soap_new_set_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, std::vector<char * >& __any1, time_t Timestamp1, struct wsa5__EndpointReferenceType *Originator1, _wsrfbf__BaseFaultType_ErrorCode *ErrorCode1, std::vector<_wsrfbf__BaseFaultType_Description >*Description1, _wsrfbf__BaseFaultType_FaultCause *FaultCause1, char *__anyAttribute1, char *__item2) { wsnt__SubscribeCreationFailedFaultType *_p = soap_instantiate_wsnt__SubscribeCreationFailedFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrfbf__BaseFaultType::__any = __any1; _p->wsrfbf__BaseFaultType::Timestamp = Timestamp1; _p->wsrfbf__BaseFaultType::Originator = Originator1; _p->wsrfbf__BaseFaultType::ErrorCode = ErrorCode1; _p->wsrfbf__BaseFaultType::Description = Description1; _p->wsrfbf__BaseFaultType::FaultCause = FaultCause1; _p->wsrfbf__BaseFaultType::__anyAttribute = __anyAttribute1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_wsnt__SubscribeCreationFailedFaultType(struct soap *soap, wsnt__SubscribeCreationFailedFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__SubscribeCreationFailedFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (656)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__NotificationMessageHolderType(struct soap*, const char*, int, const wsnt__NotificationMessageHolderType *, const char*);
SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_in_wsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType *, const char*);

#ifndef soap_write_wsnt__NotificationMessageHolderType
#define soap_write_wsnt__NotificationMessageHolderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:NotificationMessageHolderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotificationMessageHolderType * SOAP_FMAC4 soap_get_wsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *, const char*, const char*);

#ifndef soap_read_wsnt__NotificationMessageHolderType
#define soap_read_wsnt__NotificationMessageHolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__NotificationMessageHolderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__NotificationMessageHolderType * SOAP_FMAC2 soap_instantiate_wsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__NotificationMessageHolderType * soap_new_wsnt__NotificationMessageHolderType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL); }

inline wsnt__NotificationMessageHolderType * soap_new_req_wsnt__NotificationMessageHolderType(struct soap *soap, _wsnt__NotificationMessageHolderType_Message& Message) { wsnt__NotificationMessageHolderType *_p = soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__NotificationMessageHolderType::Message = Message; } return _p; }

inline wsnt__NotificationMessageHolderType * soap_new_set_wsnt__NotificationMessageHolderType(struct soap *soap, struct wsa5__EndpointReferenceType *SubscriptionReference, wsnt__TopicExpressionType *Topic, struct wsa5__EndpointReferenceType *ProducerReference, _wsnt__NotificationMessageHolderType_Message& Message, char *__item1) { wsnt__NotificationMessageHolderType *_p = soap_instantiate_wsnt__NotificationMessageHolderType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__NotificationMessageHolderType::SubscriptionReference = SubscriptionReference; _p->wsnt__NotificationMessageHolderType::Topic = Topic; _p->wsnt__NotificationMessageHolderType::ProducerReference = ProducerReference; _p->wsnt__NotificationMessageHolderType::Message = Message; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__NotificationMessageHolderType(struct soap *soap, wsnt__NotificationMessageHolderType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__NotificationMessageHolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (655)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__SubscriptionPolicyType(struct soap*, const char*, int, const wsnt__SubscriptionPolicyType *, const char*);
SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_in_wsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType *, const char*);

#ifndef soap_write_wsnt__SubscriptionPolicyType
#define soap_write_wsnt__SubscriptionPolicyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:SubscriptionPolicyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscriptionPolicyType * SOAP_FMAC4 soap_get_wsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *, const char*, const char*);

#ifndef soap_read_wsnt__SubscriptionPolicyType
#define soap_read_wsnt__SubscriptionPolicyType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__SubscriptionPolicyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__SubscriptionPolicyType * SOAP_FMAC2 soap_instantiate_wsnt__SubscriptionPolicyType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__SubscriptionPolicyType * soap_new_wsnt__SubscriptionPolicyType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__SubscriptionPolicyType(soap, n, NULL, NULL, NULL); }

inline wsnt__SubscriptionPolicyType * soap_new_req_wsnt__SubscriptionPolicyType(struct soap *soap) { wsnt__SubscriptionPolicyType *_p = soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsnt__SubscriptionPolicyType * soap_new_set_wsnt__SubscriptionPolicyType(struct soap *soap, std::vector<char * >& __any, char *__item1) { wsnt__SubscriptionPolicyType *_p = soap_instantiate_wsnt__SubscriptionPolicyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__SubscriptionPolicyType::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__SubscriptionPolicyType(struct soap *soap, wsnt__SubscriptionPolicyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__SubscriptionPolicyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (654)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__FilterType(struct soap*, const char*, int, const wsnt__FilterType *, const char*);
SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_in_wsnt__FilterType(struct soap*, const char*, wsnt__FilterType *, const char*);

#ifndef soap_write_wsnt__FilterType
#define soap_write_wsnt__FilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:FilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__FilterType * SOAP_FMAC4 soap_get_wsnt__FilterType(struct soap*, wsnt__FilterType *, const char*, const char*);

#ifndef soap_read_wsnt__FilterType
#define soap_read_wsnt__FilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__FilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__FilterType * SOAP_FMAC2 soap_instantiate_wsnt__FilterType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__FilterType * soap_new_wsnt__FilterType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__FilterType(soap, n, NULL, NULL, NULL); }

inline wsnt__FilterType * soap_new_req_wsnt__FilterType(struct soap *soap) { wsnt__FilterType *_p = soap_instantiate_wsnt__FilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsnt__FilterType * soap_new_set_wsnt__FilterType(struct soap *soap, std::vector<char * >& __any, char *__item1) { wsnt__FilterType *_p = soap_instantiate_wsnt__FilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__FilterType::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__FilterType(struct soap *soap, wsnt__FilterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__FilterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (653)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__TopicExpressionType(struct soap*, const char*, int, const wsnt__TopicExpressionType *, const char*);
SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_in_wsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType *, const char*);

#ifndef soap_write_wsnt__TopicExpressionType
#define soap_write_wsnt__TopicExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:TopicExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionType * SOAP_FMAC4 soap_get_wsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *, const char*, const char*);

#ifndef soap_read_wsnt__TopicExpressionType
#define soap_read_wsnt__TopicExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__TopicExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__TopicExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__TopicExpressionType * soap_new_wsnt__TopicExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__TopicExpressionType(soap, n, NULL, NULL, NULL); }

inline wsnt__TopicExpressionType * soap_new_req_wsnt__TopicExpressionType(struct soap *soap, std::string& Dialect) { wsnt__TopicExpressionType *_p = soap_instantiate_wsnt__TopicExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__TopicExpressionType::Dialect = Dialect; } return _p; }

inline wsnt__TopicExpressionType * soap_new_set_wsnt__TopicExpressionType(struct soap *soap, char *__any, std::string& Dialect, char *__anyAttribute, char *__mixed, char *__item1) { wsnt__TopicExpressionType *_p = soap_instantiate_wsnt__TopicExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__TopicExpressionType::__any = __any; _p->wsnt__TopicExpressionType::Dialect = Dialect; _p->wsnt__TopicExpressionType::__anyAttribute = __anyAttribute; _p->wsnt__TopicExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__TopicExpressionType(struct soap *soap, wsnt__TopicExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__TopicExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (652)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsnt__QueryExpressionType(struct soap*, const char*, int, const wsnt__QueryExpressionType *, const char*);
SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_in_wsnt__QueryExpressionType(struct soap*, const char*, wsnt__QueryExpressionType *, const char*);

#ifndef soap_write_wsnt__QueryExpressionType
#define soap_write_wsnt__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "wsnt:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__QueryExpressionType * SOAP_FMAC4 soap_get_wsnt__QueryExpressionType(struct soap*, wsnt__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_wsnt__QueryExpressionType
#define soap_read_wsnt__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsnt__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsnt__QueryExpressionType * SOAP_FMAC2 soap_instantiate_wsnt__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline wsnt__QueryExpressionType * soap_new_wsnt__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_wsnt__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline wsnt__QueryExpressionType * soap_new_req_wsnt__QueryExpressionType(struct soap *soap, std::string& Dialect) { wsnt__QueryExpressionType *_p = soap_instantiate_wsnt__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__QueryExpressionType::Dialect = Dialect; } return _p; }

inline wsnt__QueryExpressionType * soap_new_set_wsnt__QueryExpressionType(struct soap *soap, char *__any, std::string& Dialect, char *__mixed, char *__item1) { wsnt__QueryExpressionType *_p = soap_instantiate_wsnt__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsnt__QueryExpressionType::__any = __any; _p->wsnt__QueryExpressionType::Dialect = Dialect; _p->wsnt__QueryExpressionType::__mixed = __mixed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_wsnt__QueryExpressionType(struct soap *soap, wsnt__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsnt__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (651)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__Message(struct soap*, const char*, int, const _tt__Message *, const char*);
SOAP_FMAC3 _tt__Message * SOAP_FMAC4 soap_in__tt__Message(struct soap*, const char*, _tt__Message *, const char*);

#ifndef soap_write__tt__Message
#define soap_write__tt__Message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__Message * SOAP_FMAC4 soap_get__tt__Message(struct soap*, _tt__Message *, const char*, const char*);

#ifndef soap_read__tt__Message
#define soap_read__tt__Message(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__Message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__Message * SOAP_FMAC2 soap_instantiate__tt__Message(struct soap*, int, const char*, const char*, size_t*);

inline _tt__Message * soap_new__tt__Message(struct soap *soap, int n = -1) { return soap_instantiate__tt__Message(soap, n, NULL, NULL, NULL); }

inline _tt__Message * soap_new_req__tt__Message(struct soap *soap, time_t UtcTime) { _tt__Message *_p = soap_instantiate__tt__Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__Message::UtcTime = UtcTime; } return _p; }

inline _tt__Message * soap_new_set__tt__Message(struct soap *soap, tt__ItemList *Source, tt__ItemList *Key, tt__ItemList *Data, tt__MessageExtension *Extension, time_t UtcTime, enum tt__PropertyOperation *PropertyOperation, char *__anyAttribute) { _tt__Message *_p = soap_instantiate__tt__Message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__Message::Source = Source; _p->_tt__Message::Key = Key; _p->_tt__Message::Data = Data; _p->_tt__Message::Extension = Extension; _p->_tt__Message::UtcTime = UtcTime; _p->_tt__Message::PropertyOperation = PropertyOperation; _p->_tt__Message::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__tt__Message(struct soap *soap, _tt__Message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__Message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__StringItems
#define SOAP_TYPE__tt__StringItems (650)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__StringItems(struct soap*, const char*, int, const _tt__StringItems *, const char*);
SOAP_FMAC3 _tt__StringItems * SOAP_FMAC4 soap_in__tt__StringItems(struct soap*, const char*, _tt__StringItems *, const char*);

#ifndef soap_write__tt__StringItems
#define soap_write__tt__StringItems(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:StringItems", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__StringItems * SOAP_FMAC4 soap_get__tt__StringItems(struct soap*, _tt__StringItems *, const char*, const char*);

#ifndef soap_read__tt__StringItems
#define soap_read__tt__StringItems(soap, data) ( soap_begin_recv(soap) || !soap_get__tt__StringItems(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _tt__StringItems * SOAP_FMAC2 soap_instantiate__tt__StringItems(struct soap*, int, const char*, const char*, size_t*);

inline _tt__StringItems * soap_new__tt__StringItems(struct soap *soap, int n = -1) { return soap_instantiate__tt__StringItems(soap, n, NULL, NULL, NULL); }

inline _tt__StringItems * soap_new_req__tt__StringItems(struct soap *soap, std::vector<std::string >& Item) { _tt__StringItems *_p = soap_instantiate__tt__StringItems(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__StringItems::Item = Item; } return _p; }

inline _tt__StringItems * soap_new_set__tt__StringItems(struct soap *soap, std::vector<std::string >& Item) { _tt__StringItems *_p = soap_instantiate__tt__StringItems(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_tt__StringItems::Item = Item; } return _p; }

inline void soap_delete__tt__StringItems(struct soap *soap, _tt__StringItems *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__tt__StringItems(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (649)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LocationEntity(struct soap*, const char*, int, const tt__LocationEntity *, const char*);
SOAP_FMAC3 tt__LocationEntity * SOAP_FMAC4 soap_in_tt__LocationEntity(struct soap*, const char*, tt__LocationEntity *, const char*);

#ifndef soap_write_tt__LocationEntity
#define soap_write_tt__LocationEntity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LocationEntity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LocationEntity * SOAP_FMAC4 soap_get_tt__LocationEntity(struct soap*, tt__LocationEntity *, const char*, const char*);

#ifndef soap_read_tt__LocationEntity
#define soap_read_tt__LocationEntity(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LocationEntity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LocationEntity * SOAP_FMAC2 soap_instantiate_tt__LocationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__LocationEntity * soap_new_tt__LocationEntity(struct soap *soap, int n = -1) { return soap_instantiate_tt__LocationEntity(soap, n, NULL, NULL, NULL); }

inline tt__LocationEntity * soap_new_req_tt__LocationEntity(struct soap *soap) { tt__LocationEntity *_p = soap_instantiate_tt__LocationEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__LocationEntity * soap_new_set_tt__LocationEntity(struct soap *soap, tt__GeoLocation *GeoLocation, tt__GeoOrientation *GeoOrientation, tt__LocalLocation *LocalLocation, tt__LocalOrientation *LocalOrientation, std::string *Entity, std::string *Token, bool *Fixed, std::string *GeoSource, bool *AutoGeo, char *__item1) { tt__LocationEntity *_p = soap_instantiate_tt__LocationEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LocationEntity::GeoLocation = GeoLocation; _p->tt__LocationEntity::GeoOrientation = GeoOrientation; _p->tt__LocationEntity::LocalLocation = LocalLocation; _p->tt__LocationEntity::LocalOrientation = LocalOrientation; _p->tt__LocationEntity::Entity = Entity; _p->tt__LocationEntity::Token = Token; _p->tt__LocationEntity::Fixed = Fixed; _p->tt__LocationEntity::GeoSource = GeoSource; _p->tt__LocationEntity::AutoGeo = AutoGeo; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LocationEntity(struct soap *soap, tt__LocationEntity *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LocationEntity(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (648)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LocalOrientation(struct soap*, const char*, int, const tt__LocalOrientation *, const char*);
SOAP_FMAC3 tt__LocalOrientation * SOAP_FMAC4 soap_in_tt__LocalOrientation(struct soap*, const char*, tt__LocalOrientation *, const char*);

#ifndef soap_write_tt__LocalOrientation
#define soap_write_tt__LocalOrientation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LocalOrientation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LocalOrientation * SOAP_FMAC4 soap_get_tt__LocalOrientation(struct soap*, tt__LocalOrientation *, const char*, const char*);

#ifndef soap_read_tt__LocalOrientation
#define soap_read_tt__LocalOrientation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LocalOrientation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LocalOrientation * SOAP_FMAC2 soap_instantiate_tt__LocalOrientation(struct soap*, int, const char*, const char*, size_t*);

inline tt__LocalOrientation * soap_new_tt__LocalOrientation(struct soap *soap, int n = -1) { return soap_instantiate_tt__LocalOrientation(soap, n, NULL, NULL, NULL); }

inline tt__LocalOrientation * soap_new_req_tt__LocalOrientation(struct soap *soap) { tt__LocalOrientation *_p = soap_instantiate_tt__LocalOrientation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__LocalOrientation * soap_new_set_tt__LocalOrientation(struct soap *soap, std::vector<char * >& __any, float *pan, float *tilt, float *roll, char *__anyAttribute, char *__item1) { tt__LocalOrientation *_p = soap_instantiate_tt__LocalOrientation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LocalOrientation::__any = __any; _p->tt__LocalOrientation::pan = pan; _p->tt__LocalOrientation::tilt = tilt; _p->tt__LocalOrientation::roll = roll; _p->tt__LocalOrientation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LocalOrientation(struct soap *soap, tt__LocalOrientation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LocalOrientation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (647)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LocalLocation(struct soap*, const char*, int, const tt__LocalLocation *, const char*);
SOAP_FMAC3 tt__LocalLocation * SOAP_FMAC4 soap_in_tt__LocalLocation(struct soap*, const char*, tt__LocalLocation *, const char*);

#ifndef soap_write_tt__LocalLocation
#define soap_write_tt__LocalLocation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LocalLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LocalLocation * SOAP_FMAC4 soap_get_tt__LocalLocation(struct soap*, tt__LocalLocation *, const char*, const char*);

#ifndef soap_read_tt__LocalLocation
#define soap_read_tt__LocalLocation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LocalLocation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LocalLocation * SOAP_FMAC2 soap_instantiate_tt__LocalLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__LocalLocation * soap_new_tt__LocalLocation(struct soap *soap, int n = -1) { return soap_instantiate_tt__LocalLocation(soap, n, NULL, NULL, NULL); }

inline tt__LocalLocation * soap_new_req_tt__LocalLocation(struct soap *soap) { tt__LocalLocation *_p = soap_instantiate_tt__LocalLocation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__LocalLocation * soap_new_set_tt__LocalLocation(struct soap *soap, std::vector<char * >& __any, float *x, float *y, float *z, char *__anyAttribute, char *__item1) { tt__LocalLocation *_p = soap_instantiate_tt__LocalLocation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LocalLocation::__any = __any; _p->tt__LocalLocation::x = x; _p->tt__LocalLocation::y = y; _p->tt__LocalLocation::z = z; _p->tt__LocalLocation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LocalLocation(struct soap *soap, tt__LocalLocation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LocalLocation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (646)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoOrientation(struct soap*, const char*, int, const tt__GeoOrientation *, const char*);
SOAP_FMAC3 tt__GeoOrientation * SOAP_FMAC4 soap_in_tt__GeoOrientation(struct soap*, const char*, tt__GeoOrientation *, const char*);

#ifndef soap_write_tt__GeoOrientation
#define soap_write_tt__GeoOrientation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GeoOrientation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GeoOrientation * SOAP_FMAC4 soap_get_tt__GeoOrientation(struct soap*, tt__GeoOrientation *, const char*, const char*);

#ifndef soap_read_tt__GeoOrientation
#define soap_read_tt__GeoOrientation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GeoOrientation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GeoOrientation * SOAP_FMAC2 soap_instantiate_tt__GeoOrientation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoOrientation * soap_new_tt__GeoOrientation(struct soap *soap, int n = -1) { return soap_instantiate_tt__GeoOrientation(soap, n, NULL, NULL, NULL); }

inline tt__GeoOrientation * soap_new_req_tt__GeoOrientation(struct soap *soap) { tt__GeoOrientation *_p = soap_instantiate_tt__GeoOrientation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__GeoOrientation * soap_new_set_tt__GeoOrientation(struct soap *soap, std::vector<char * >& __any, float *roll, float *pitch, float *yaw, char *__anyAttribute, char *__item1) { tt__GeoOrientation *_p = soap_instantiate_tt__GeoOrientation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GeoOrientation::__any = __any; _p->tt__GeoOrientation::roll = roll; _p->tt__GeoOrientation::pitch = pitch; _p->tt__GeoOrientation::yaw = yaw; _p->tt__GeoOrientation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GeoOrientation(struct soap *soap, tt__GeoOrientation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GeoOrientation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (645)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GeoLocation(struct soap*, const char*, int, const tt__GeoLocation *, const char*);
SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_in_tt__GeoLocation(struct soap*, const char*, tt__GeoLocation *, const char*);

#ifndef soap_write_tt__GeoLocation
#define soap_write_tt__GeoLocation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GeoLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GeoLocation * SOAP_FMAC4 soap_get_tt__GeoLocation(struct soap*, tt__GeoLocation *, const char*, const char*);

#ifndef soap_read_tt__GeoLocation
#define soap_read_tt__GeoLocation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GeoLocation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GeoLocation * SOAP_FMAC2 soap_instantiate_tt__GeoLocation(struct soap*, int, const char*, const char*, size_t*);

inline tt__GeoLocation * soap_new_tt__GeoLocation(struct soap *soap, int n = -1) { return soap_instantiate_tt__GeoLocation(soap, n, NULL, NULL, NULL); }

inline tt__GeoLocation * soap_new_req_tt__GeoLocation(struct soap *soap) { tt__GeoLocation *_p = soap_instantiate_tt__GeoLocation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__GeoLocation * soap_new_set_tt__GeoLocation(struct soap *soap, std::vector<char * >& __any, double *lon, double *lat, float *elevation, char *__anyAttribute, char *__item1) { tt__GeoLocation *_p = soap_instantiate_tt__GeoLocation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GeoLocation::__any = __any; _p->tt__GeoLocation::lon = lon; _p->tt__GeoLocation::lat = lat; _p->tt__GeoLocation::elevation = elevation; _p->tt__GeoLocation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GeoLocation(struct soap *soap, tt__GeoLocation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GeoLocation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (644)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TransformationExtension(struct soap*, const char*, int, const tt__TransformationExtension *, const char*);
SOAP_FMAC3 tt__TransformationExtension * SOAP_FMAC4 soap_in_tt__TransformationExtension(struct soap*, const char*, tt__TransformationExtension *, const char*);

#ifndef soap_write_tt__TransformationExtension
#define soap_write_tt__TransformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TransformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TransformationExtension * SOAP_FMAC4 soap_get_tt__TransformationExtension(struct soap*, tt__TransformationExtension *, const char*, const char*);

#ifndef soap_read_tt__TransformationExtension
#define soap_read_tt__TransformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TransformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TransformationExtension * SOAP_FMAC2 soap_instantiate_tt__TransformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__TransformationExtension * soap_new_tt__TransformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__TransformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__TransformationExtension * soap_new_req_tt__TransformationExtension(struct soap *soap) { tt__TransformationExtension *_p = soap_instantiate_tt__TransformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__TransformationExtension * soap_new_set_tt__TransformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__TransformationExtension *_p = soap_instantiate_tt__TransformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TransformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TransformationExtension(struct soap *soap, tt__TransformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TransformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (643)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Transformation(struct soap*, const char*, int, const tt__Transformation *, const char*);
SOAP_FMAC3 tt__Transformation * SOAP_FMAC4 soap_in_tt__Transformation(struct soap*, const char*, tt__Transformation *, const char*);

#ifndef soap_write_tt__Transformation
#define soap_write_tt__Transformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Transformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Transformation * SOAP_FMAC4 soap_get_tt__Transformation(struct soap*, tt__Transformation *, const char*, const char*);

#ifndef soap_read_tt__Transformation
#define soap_read_tt__Transformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Transformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Transformation * SOAP_FMAC2 soap_instantiate_tt__Transformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__Transformation * soap_new_tt__Transformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__Transformation(soap, n, NULL, NULL, NULL); }

inline tt__Transformation * soap_new_req_tt__Transformation(struct soap *soap) { tt__Transformation *_p = soap_instantiate_tt__Transformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Transformation * soap_new_set_tt__Transformation(struct soap *soap, tt__Vector *Translate, tt__Vector *Scale, tt__TransformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__Transformation *_p = soap_instantiate_tt__Transformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Transformation::Translate = Translate; _p->tt__Transformation::Scale = Scale; _p->tt__Transformation::Extension = Extension; _p->tt__Transformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Transformation(struct soap *soap, tt__Transformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Transformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ColorDescriptor
#define SOAP_TYPE_tt__ColorDescriptor (642)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorDescriptor(struct soap*, const char*, int, const tt__ColorDescriptor *, const char*);
SOAP_FMAC3 tt__ColorDescriptor * SOAP_FMAC4 soap_in_tt__ColorDescriptor(struct soap*, const char*, tt__ColorDescriptor *, const char*);

#ifndef soap_write_tt__ColorDescriptor
#define soap_write_tt__ColorDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ColorDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorDescriptor * SOAP_FMAC4 soap_get_tt__ColorDescriptor(struct soap*, tt__ColorDescriptor *, const char*, const char*);

#ifndef soap_read_tt__ColorDescriptor
#define soap_read_tt__ColorDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ColorDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ColorDescriptor * SOAP_FMAC2 soap_instantiate_tt__ColorDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorDescriptor * soap_new_tt__ColorDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_tt__ColorDescriptor(soap, n, NULL, NULL, NULL); }

inline tt__ColorDescriptor * soap_new_req_tt__ColorDescriptor(struct soap *soap) { tt__ColorDescriptor *_p = soap_instantiate_tt__ColorDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ColorDescriptor * soap_new_set_tt__ColorDescriptor(struct soap *soap, std::vector<_tt__ColorDescriptor_ColorCluster >*ColorCluster, xsd__anyType *Extension, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ColorDescriptor *_p = soap_instantiate_tt__ColorDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorDescriptor::ColorCluster = ColorCluster; _p->tt__ColorDescriptor::Extension = Extension; _p->tt__ColorDescriptor::__any = __any; _p->tt__ColorDescriptor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ColorDescriptor(struct soap *soap, tt__ColorDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ColorDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (641)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorCovariance(struct soap*, const char*, int, const tt__ColorCovariance *, const char*);
SOAP_FMAC3 tt__ColorCovariance * SOAP_FMAC4 soap_in_tt__ColorCovariance(struct soap*, const char*, tt__ColorCovariance *, const char*);

#ifndef soap_write_tt__ColorCovariance
#define soap_write_tt__ColorCovariance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ColorCovariance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorCovariance * SOAP_FMAC4 soap_get_tt__ColorCovariance(struct soap*, tt__ColorCovariance *, const char*, const char*);

#ifndef soap_read_tt__ColorCovariance
#define soap_read_tt__ColorCovariance(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ColorCovariance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ColorCovariance * SOAP_FMAC2 soap_instantiate_tt__ColorCovariance(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorCovariance * soap_new_tt__ColorCovariance(struct soap *soap, int n = -1) { return soap_instantiate_tt__ColorCovariance(soap, n, NULL, NULL, NULL); }

inline tt__ColorCovariance * soap_new_req_tt__ColorCovariance(struct soap *soap, float XX, float YY, float ZZ) { tt__ColorCovariance *_p = soap_instantiate_tt__ColorCovariance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorCovariance::XX = XX; _p->tt__ColorCovariance::YY = YY; _p->tt__ColorCovariance::ZZ = ZZ; } return _p; }

inline tt__ColorCovariance * soap_new_set_tt__ColorCovariance(struct soap *soap, float XX, float YY, float ZZ, float *XY, float *XZ, float *YZ, std::string *Colorspace, char *__item1) { tt__ColorCovariance *_p = soap_instantiate_tt__ColorCovariance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorCovariance::XX = XX; _p->tt__ColorCovariance::YY = YY; _p->tt__ColorCovariance::ZZ = ZZ; _p->tt__ColorCovariance::XY = XY; _p->tt__ColorCovariance::XZ = XZ; _p->tt__ColorCovariance::YZ = YZ; _p->tt__ColorCovariance::Colorspace = Colorspace; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ColorCovariance(struct soap *soap, tt__ColorCovariance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ColorCovariance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (640)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Color(struct soap*, const char*, int, const tt__Color *, const char*);
SOAP_FMAC3 tt__Color * SOAP_FMAC4 soap_in_tt__Color(struct soap*, const char*, tt__Color *, const char*);

#ifndef soap_write_tt__Color
#define soap_write_tt__Color(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Color", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Color * SOAP_FMAC4 soap_get_tt__Color(struct soap*, tt__Color *, const char*, const char*);

#ifndef soap_read_tt__Color
#define soap_read_tt__Color(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Color(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Color * SOAP_FMAC2 soap_instantiate_tt__Color(struct soap*, int, const char*, const char*, size_t*);

inline tt__Color * soap_new_tt__Color(struct soap *soap, int n = -1) { return soap_instantiate_tt__Color(soap, n, NULL, NULL, NULL); }

inline tt__Color * soap_new_req_tt__Color(struct soap *soap, float X, float Y, float Z) { tt__Color *_p = soap_instantiate_tt__Color(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Color::X = X; _p->tt__Color::Y = Y; _p->tt__Color::Z = Z; } return _p; }

inline tt__Color * soap_new_set_tt__Color(struct soap *soap, float X, float Y, float Z, std::string *Colorspace, char *__item1) { tt__Color *_p = soap_instantiate_tt__Color(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Color::X = X; _p->tt__Color::Y = Y; _p->tt__Color::Z = Z; _p->tt__Color::Colorspace = Colorspace; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Color(struct soap *soap, tt__Color *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Color(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (639)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Polygon(struct soap*, const char*, int, const tt__Polygon *, const char*);
SOAP_FMAC3 tt__Polygon * SOAP_FMAC4 soap_in_tt__Polygon(struct soap*, const char*, tt__Polygon *, const char*);

#ifndef soap_write_tt__Polygon
#define soap_write_tt__Polygon(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Polygon", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Polygon * SOAP_FMAC4 soap_get_tt__Polygon(struct soap*, tt__Polygon *, const char*, const char*);

#ifndef soap_read_tt__Polygon
#define soap_read_tt__Polygon(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Polygon(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Polygon * SOAP_FMAC2 soap_instantiate_tt__Polygon(struct soap*, int, const char*, const char*, size_t*);

inline tt__Polygon * soap_new_tt__Polygon(struct soap *soap, int n = -1) { return soap_instantiate_tt__Polygon(soap, n, NULL, NULL, NULL); }

inline tt__Polygon * soap_new_req_tt__Polygon(struct soap *soap, std::vector<tt__Vector * >& Point) { tt__Polygon *_p = soap_instantiate_tt__Polygon(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Polygon::Point = Point; } return _p; }

inline tt__Polygon * soap_new_set_tt__Polygon(struct soap *soap, std::vector<tt__Vector * >& Point, char *__item1) { tt__Polygon *_p = soap_instantiate_tt__Polygon(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Polygon::Point = Point; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Polygon(struct soap *soap, tt__Polygon *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Polygon(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (638)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rectangle(struct soap*, const char*, int, const tt__Rectangle *, const char*);
SOAP_FMAC3 tt__Rectangle * SOAP_FMAC4 soap_in_tt__Rectangle(struct soap*, const char*, tt__Rectangle *, const char*);

#ifndef soap_write_tt__Rectangle
#define soap_write_tt__Rectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Rectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Rectangle * SOAP_FMAC4 soap_get_tt__Rectangle(struct soap*, tt__Rectangle *, const char*, const char*);

#ifndef soap_read_tt__Rectangle
#define soap_read_tt__Rectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Rectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Rectangle * SOAP_FMAC2 soap_instantiate_tt__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rectangle * soap_new_tt__Rectangle(struct soap *soap, int n = -1) { return soap_instantiate_tt__Rectangle(soap, n, NULL, NULL, NULL); }

inline tt__Rectangle * soap_new_req_tt__Rectangle(struct soap *soap) { tt__Rectangle *_p = soap_instantiate_tt__Rectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Rectangle * soap_new_set_tt__Rectangle(struct soap *soap, float *bottom, float *top, float *right, float *left, char *__item1) { tt__Rectangle *_p = soap_instantiate_tt__Rectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Rectangle::bottom = bottom; _p->tt__Rectangle::top = top; _p->tt__Rectangle::right = right; _p->tt__Rectangle::left = left; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Rectangle(struct soap *soap, tt__Rectangle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Rectangle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (637)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector(struct soap*, const char*, int, const tt__Vector *, const char*);
SOAP_FMAC3 tt__Vector * SOAP_FMAC4 soap_in_tt__Vector(struct soap*, const char*, tt__Vector *, const char*);

#ifndef soap_write_tt__Vector
#define soap_write_tt__Vector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Vector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Vector * SOAP_FMAC4 soap_get_tt__Vector(struct soap*, tt__Vector *, const char*, const char*);

#ifndef soap_read_tt__Vector
#define soap_read_tt__Vector(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Vector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Vector * SOAP_FMAC2 soap_instantiate_tt__Vector(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector * soap_new_tt__Vector(struct soap *soap, int n = -1) { return soap_instantiate_tt__Vector(soap, n, NULL, NULL, NULL); }

inline tt__Vector * soap_new_req_tt__Vector(struct soap *soap) { tt__Vector *_p = soap_instantiate_tt__Vector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Vector * soap_new_set_tt__Vector(struct soap *soap, float *x, float *y, char *__item1) { tt__Vector *_p = soap_instantiate_tt__Vector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Vector::x = x; _p->tt__Vector::y = y; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Vector(struct soap *soap, tt__Vector *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Vector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (636)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZMoveStatus(struct soap*, const char*, int, const tt__PTZMoveStatus *, const char*);
SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_in_tt__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus *, const char*);

#ifndef soap_write_tt__PTZMoveStatus
#define soap_write_tt__PTZMoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZMoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZMoveStatus * SOAP_FMAC4 soap_get_tt__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *, const char*, const char*);

#ifndef soap_read_tt__PTZMoveStatus
#define soap_read_tt__PTZMoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZMoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZMoveStatus * SOAP_FMAC2 soap_instantiate_tt__PTZMoveStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZMoveStatus * soap_new_tt__PTZMoveStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZMoveStatus(soap, n, NULL, NULL, NULL); }

inline tt__PTZMoveStatus * soap_new_req_tt__PTZMoveStatus(struct soap *soap) { tt__PTZMoveStatus *_p = soap_instantiate_tt__PTZMoveStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZMoveStatus * soap_new_set_tt__PTZMoveStatus(struct soap *soap, enum tt__MoveStatus *PanTilt, enum tt__MoveStatus *Zoom, char *__item1) { tt__PTZMoveStatus *_p = soap_instantiate_tt__PTZMoveStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZMoveStatus::PanTilt = PanTilt; _p->tt__PTZMoveStatus::Zoom = Zoom; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZMoveStatus(struct soap *soap, tt__PTZMoveStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZMoveStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (635)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatus(struct soap*, const char*, int, const tt__PTZStatus *, const char*);
SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_in_tt__PTZStatus(struct soap*, const char*, tt__PTZStatus *, const char*);

#ifndef soap_write_tt__PTZStatus
#define soap_write_tt__PTZStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZStatus * SOAP_FMAC4 soap_get_tt__PTZStatus(struct soap*, tt__PTZStatus *, const char*, const char*);

#ifndef soap_read_tt__PTZStatus
#define soap_read_tt__PTZStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZStatus * SOAP_FMAC2 soap_instantiate_tt__PTZStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatus * soap_new_tt__PTZStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZStatus(soap, n, NULL, NULL, NULL); }

inline tt__PTZStatus * soap_new_req_tt__PTZStatus(struct soap *soap, time_t UtcTime) { tt__PTZStatus *_p = soap_instantiate_tt__PTZStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZStatus::UtcTime = UtcTime; } return _p; }

inline tt__PTZStatus * soap_new_set_tt__PTZStatus(struct soap *soap, tt__PTZVector *Position, tt__PTZMoveStatus *MoveStatus, std::string *Error, time_t UtcTime, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTZStatus *_p = soap_instantiate_tt__PTZStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZStatus::Position = Position; _p->tt__PTZStatus::MoveStatus = MoveStatus; _p->tt__PTZStatus::Error = Error; _p->tt__PTZStatus::UtcTime = UtcTime; _p->tt__PTZStatus::__any = __any; _p->tt__PTZStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZStatus(struct soap *soap, tt__PTZStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (634)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZVector(struct soap*, const char*, int, const tt__PTZVector *, const char*);
SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_in_tt__PTZVector(struct soap*, const char*, tt__PTZVector *, const char*);

#ifndef soap_write_tt__PTZVector
#define soap_write_tt__PTZVector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZVector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZVector * SOAP_FMAC4 soap_get_tt__PTZVector(struct soap*, tt__PTZVector *, const char*, const char*);

#ifndef soap_read_tt__PTZVector
#define soap_read_tt__PTZVector(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZVector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZVector * SOAP_FMAC2 soap_instantiate_tt__PTZVector(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZVector * soap_new_tt__PTZVector(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZVector(soap, n, NULL, NULL, NULL); }

inline tt__PTZVector * soap_new_req_tt__PTZVector(struct soap *soap) { tt__PTZVector *_p = soap_instantiate_tt__PTZVector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZVector * soap_new_set_tt__PTZVector(struct soap *soap, tt__Vector2D *PanTilt, tt__Vector1D *Zoom, char *__item1) { tt__PTZVector *_p = soap_instantiate_tt__PTZVector(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZVector::PanTilt = PanTilt; _p->tt__PTZVector::Zoom = Zoom; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZVector(struct soap *soap, tt__PTZVector *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZVector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (633)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector1D(struct soap*, const char*, int, const tt__Vector1D *, const char*);
SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_in_tt__Vector1D(struct soap*, const char*, tt__Vector1D *, const char*);

#ifndef soap_write_tt__Vector1D
#define soap_write_tt__Vector1D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Vector1D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Vector1D * SOAP_FMAC4 soap_get_tt__Vector1D(struct soap*, tt__Vector1D *, const char*, const char*);

#ifndef soap_read_tt__Vector1D
#define soap_read_tt__Vector1D(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Vector1D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Vector1D * SOAP_FMAC2 soap_instantiate_tt__Vector1D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector1D * soap_new_tt__Vector1D(struct soap *soap, int n = -1) { return soap_instantiate_tt__Vector1D(soap, n, NULL, NULL, NULL); }

inline tt__Vector1D * soap_new_req_tt__Vector1D(struct soap *soap, float x) { tt__Vector1D *_p = soap_instantiate_tt__Vector1D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Vector1D::x = x; } return _p; }

inline tt__Vector1D * soap_new_set_tt__Vector1D(struct soap *soap, float x, std::string *space, char *__item1) { tt__Vector1D *_p = soap_instantiate_tt__Vector1D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Vector1D::x = x; _p->tt__Vector1D::space = space; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Vector1D(struct soap *soap, tt__Vector1D *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Vector1D(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (632)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Vector2D(struct soap*, const char*, int, const tt__Vector2D *, const char*);
SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_in_tt__Vector2D(struct soap*, const char*, tt__Vector2D *, const char*);

#ifndef soap_write_tt__Vector2D
#define soap_write_tt__Vector2D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Vector2D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Vector2D * SOAP_FMAC4 soap_get_tt__Vector2D(struct soap*, tt__Vector2D *, const char*, const char*);

#ifndef soap_read_tt__Vector2D
#define soap_read_tt__Vector2D(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Vector2D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Vector2D * SOAP_FMAC2 soap_instantiate_tt__Vector2D(struct soap*, int, const char*, const char*, size_t*);

inline tt__Vector2D * soap_new_tt__Vector2D(struct soap *soap, int n = -1) { return soap_instantiate_tt__Vector2D(soap, n, NULL, NULL, NULL); }

inline tt__Vector2D * soap_new_req_tt__Vector2D(struct soap *soap, float x, float y) { tt__Vector2D *_p = soap_instantiate_tt__Vector2D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Vector2D::x = x; _p->tt__Vector2D::y = y; } return _p; }

inline tt__Vector2D * soap_new_set_tt__Vector2D(struct soap *soap, float x, float y, std::string *space, char *__item1) { tt__Vector2D *_p = soap_instantiate_tt__Vector2D(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Vector2D::x = x; _p->tt__Vector2D::y = y; _p->tt__Vector2D::space = space; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Vector2D(struct soap *soap, tt__Vector2D *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Vector2D(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (631)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRange(struct soap*, const char*, int, const tt__IntRange *, const char*);
SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_in_tt__IntRange(struct soap*, const char*, tt__IntRange *, const char*);

#ifndef soap_write_tt__IntRange
#define soap_write_tt__IntRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IntRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntRange * SOAP_FMAC4 soap_get_tt__IntRange(struct soap*, tt__IntRange *, const char*, const char*);

#ifndef soap_read_tt__IntRange
#define soap_read_tt__IntRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IntRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IntRange * SOAP_FMAC2 soap_instantiate_tt__IntRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRange * soap_new_tt__IntRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__IntRange(soap, n, NULL, NULL, NULL); }

inline tt__IntRange * soap_new_req_tt__IntRange(struct soap *soap, int Min, int Max) { tt__IntRange *_p = soap_instantiate_tt__IntRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntRange::Min = Min; _p->tt__IntRange::Max = Max; } return _p; }

inline tt__IntRange * soap_new_set_tt__IntRange(struct soap *soap, int Min, int Max, char *__item1) { tt__IntRange *_p = soap_instantiate_tt__IntRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntRange::Min = Min; _p->tt__IntRange::Max = Max; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IntRange(struct soap *soap, tt__IntRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IntRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (630)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StorageReferencePathExtension(struct soap*, const char*, int, const tt__StorageReferencePathExtension *, const char*);
SOAP_FMAC3 tt__StorageReferencePathExtension * SOAP_FMAC4 soap_in_tt__StorageReferencePathExtension(struct soap*, const char*, tt__StorageReferencePathExtension *, const char*);

#ifndef soap_write_tt__StorageReferencePathExtension
#define soap_write_tt__StorageReferencePathExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:StorageReferencePathExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__StorageReferencePathExtension * SOAP_FMAC4 soap_get_tt__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension *, const char*, const char*);

#ifndef soap_read_tt__StorageReferencePathExtension
#define soap_read_tt__StorageReferencePathExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StorageReferencePathExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__StorageReferencePathExtension * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePathExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__StorageReferencePathExtension * soap_new_tt__StorageReferencePathExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__StorageReferencePathExtension(soap, n, NULL, NULL, NULL); }

inline tt__StorageReferencePathExtension * soap_new_req_tt__StorageReferencePathExtension(struct soap *soap) { tt__StorageReferencePathExtension *_p = soap_instantiate_tt__StorageReferencePathExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__StorageReferencePathExtension * soap_new_set_tt__StorageReferencePathExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__StorageReferencePathExtension *_p = soap_instantiate_tt__StorageReferencePathExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StorageReferencePathExtension::__any = __any; _p->tt__StorageReferencePathExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__StorageReferencePathExtension(struct soap *soap, tt__StorageReferencePathExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__StorageReferencePathExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (629)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StorageReferencePath(struct soap*, const char*, int, const tt__StorageReferencePath *, const char*);
SOAP_FMAC3 tt__StorageReferencePath * SOAP_FMAC4 soap_in_tt__StorageReferencePath(struct soap*, const char*, tt__StorageReferencePath *, const char*);

#ifndef soap_write_tt__StorageReferencePath
#define soap_write_tt__StorageReferencePath(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:StorageReferencePath", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__StorageReferencePath * SOAP_FMAC4 soap_get_tt__StorageReferencePath(struct soap*, tt__StorageReferencePath *, const char*, const char*);

#ifndef soap_read_tt__StorageReferencePath
#define soap_read_tt__StorageReferencePath(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StorageReferencePath(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__StorageReferencePath * SOAP_FMAC2 soap_instantiate_tt__StorageReferencePath(struct soap*, int, const char*, const char*, size_t*);

inline tt__StorageReferencePath * soap_new_tt__StorageReferencePath(struct soap *soap, int n = -1) { return soap_instantiate_tt__StorageReferencePath(soap, n, NULL, NULL, NULL); }

inline tt__StorageReferencePath * soap_new_req_tt__StorageReferencePath(struct soap *soap, std::string& StorageToken) { tt__StorageReferencePath *_p = soap_instantiate_tt__StorageReferencePath(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StorageReferencePath::StorageToken = StorageToken; } return _p; }

inline tt__StorageReferencePath * soap_new_set_tt__StorageReferencePath(struct soap *soap, std::string& StorageToken, std::string *RelativePath, tt__StorageReferencePathExtension *Extension, char *__anyAttribute, char *__item1) { tt__StorageReferencePath *_p = soap_instantiate_tt__StorageReferencePath(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StorageReferencePath::StorageToken = StorageToken; _p->tt__StorageReferencePath::RelativePath = RelativePath; _p->tt__StorageReferencePath::Extension = Extension; _p->tt__StorageReferencePath::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__StorageReferencePath(struct soap *soap, tt__StorageReferencePath *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__StorageReferencePath(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (628)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ArrayOfFileProgressExtension(struct soap*, const char*, int, const tt__ArrayOfFileProgressExtension *, const char*);
SOAP_FMAC3 tt__ArrayOfFileProgressExtension * SOAP_FMAC4 soap_in_tt__ArrayOfFileProgressExtension(struct soap*, const char*, tt__ArrayOfFileProgressExtension *, const char*);

#ifndef soap_write_tt__ArrayOfFileProgressExtension
#define soap_write_tt__ArrayOfFileProgressExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ArrayOfFileProgressExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ArrayOfFileProgressExtension * SOAP_FMAC4 soap_get_tt__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension *, const char*, const char*);

#ifndef soap_read_tt__ArrayOfFileProgressExtension
#define soap_read_tt__ArrayOfFileProgressExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ArrayOfFileProgressExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ArrayOfFileProgressExtension * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgressExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ArrayOfFileProgressExtension * soap_new_tt__ArrayOfFileProgressExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ArrayOfFileProgressExtension(soap, n, NULL, NULL, NULL); }

inline tt__ArrayOfFileProgressExtension * soap_new_req_tt__ArrayOfFileProgressExtension(struct soap *soap) { tt__ArrayOfFileProgressExtension *_p = soap_instantiate_tt__ArrayOfFileProgressExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ArrayOfFileProgressExtension * soap_new_set_tt__ArrayOfFileProgressExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ArrayOfFileProgressExtension *_p = soap_instantiate_tt__ArrayOfFileProgressExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ArrayOfFileProgressExtension::__any = __any; _p->tt__ArrayOfFileProgressExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ArrayOfFileProgressExtension(struct soap *soap, tt__ArrayOfFileProgressExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ArrayOfFileProgressExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (627)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ArrayOfFileProgress(struct soap*, const char*, int, const tt__ArrayOfFileProgress *, const char*);
SOAP_FMAC3 tt__ArrayOfFileProgress * SOAP_FMAC4 soap_in_tt__ArrayOfFileProgress(struct soap*, const char*, tt__ArrayOfFileProgress *, const char*);

#ifndef soap_write_tt__ArrayOfFileProgress
#define soap_write_tt__ArrayOfFileProgress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ArrayOfFileProgress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ArrayOfFileProgress * SOAP_FMAC4 soap_get_tt__ArrayOfFileProgress(struct soap*, tt__ArrayOfFileProgress *, const char*, const char*);

#ifndef soap_read_tt__ArrayOfFileProgress
#define soap_read_tt__ArrayOfFileProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ArrayOfFileProgress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ArrayOfFileProgress * SOAP_FMAC2 soap_instantiate_tt__ArrayOfFileProgress(struct soap*, int, const char*, const char*, size_t*);

inline tt__ArrayOfFileProgress * soap_new_tt__ArrayOfFileProgress(struct soap *soap, int n = -1) { return soap_instantiate_tt__ArrayOfFileProgress(soap, n, NULL, NULL, NULL); }

inline tt__ArrayOfFileProgress * soap_new_req_tt__ArrayOfFileProgress(struct soap *soap) { tt__ArrayOfFileProgress *_p = soap_instantiate_tt__ArrayOfFileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ArrayOfFileProgress * soap_new_set_tt__ArrayOfFileProgress(struct soap *soap, std::vector<tt__FileProgress * >& FileProgress, tt__ArrayOfFileProgressExtension *Extension, char *__anyAttribute, char *__item1) { tt__ArrayOfFileProgress *_p = soap_instantiate_tt__ArrayOfFileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ArrayOfFileProgress::FileProgress = FileProgress; _p->tt__ArrayOfFileProgress::Extension = Extension; _p->tt__ArrayOfFileProgress::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ArrayOfFileProgress(struct soap *soap, tt__ArrayOfFileProgress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ArrayOfFileProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (626)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FileProgress(struct soap*, const char*, int, const tt__FileProgress *, const char*);
SOAP_FMAC3 tt__FileProgress * SOAP_FMAC4 soap_in_tt__FileProgress(struct soap*, const char*, tt__FileProgress *, const char*);

#ifndef soap_write_tt__FileProgress
#define soap_write_tt__FileProgress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FileProgress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FileProgress * SOAP_FMAC4 soap_get_tt__FileProgress(struct soap*, tt__FileProgress *, const char*, const char*);

#ifndef soap_read_tt__FileProgress
#define soap_read_tt__FileProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FileProgress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FileProgress * SOAP_FMAC2 soap_instantiate_tt__FileProgress(struct soap*, int, const char*, const char*, size_t*);

inline tt__FileProgress * soap_new_tt__FileProgress(struct soap *soap, int n = -1) { return soap_instantiate_tt__FileProgress(soap, n, NULL, NULL, NULL); }

inline tt__FileProgress * soap_new_req_tt__FileProgress(struct soap *soap, std::string& FileName, float Progress) { tt__FileProgress *_p = soap_instantiate_tt__FileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FileProgress::FileName = FileName; _p->tt__FileProgress::Progress = Progress; } return _p; }

inline tt__FileProgress * soap_new_set_tt__FileProgress(struct soap *soap, std::string& FileName, float Progress, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__FileProgress *_p = soap_instantiate_tt__FileProgress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FileProgress::FileName = FileName; _p->tt__FileProgress::Progress = Progress; _p->tt__FileProgress::__any = __any; _p->tt__FileProgress::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FileProgress(struct soap *soap, tt__FileProgress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FileProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (625)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationOptionsExtension(struct soap*, const char*, int, const tt__OSDConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDConfigurationOptionsExtension(struct soap*, const char*, tt__OSDConfigurationOptionsExtension *, const char*);

#ifndef soap_write_tt__OSDConfigurationOptionsExtension
#define soap_write_tt__OSDConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDConfigurationOptionsExtension
#define soap_read_tt__OSDConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationOptionsExtension * soap_new_tt__OSDConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDConfigurationOptionsExtension * soap_new_req_tt__OSDConfigurationOptionsExtension(struct soap *soap) { tt__OSDConfigurationOptionsExtension *_p = soap_instantiate_tt__OSDConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDConfigurationOptionsExtension * soap_new_set_tt__OSDConfigurationOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDConfigurationOptionsExtension *_p = soap_instantiate_tt__OSDConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDConfigurationOptionsExtension::__any = __any; _p->tt__OSDConfigurationOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDConfigurationOptionsExtension(struct soap *soap, tt__OSDConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (624)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationOptions(struct soap*, const char*, int, const tt__OSDConfigurationOptions *, const char*);
SOAP_FMAC3 tt__OSDConfigurationOptions * SOAP_FMAC4 soap_in_tt__OSDConfigurationOptions(struct soap*, const char*, tt__OSDConfigurationOptions *, const char*);

#ifndef soap_write_tt__OSDConfigurationOptions
#define soap_write_tt__OSDConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfigurationOptions * SOAP_FMAC4 soap_get_tt__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__OSDConfigurationOptions
#define soap_read_tt__OSDConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationOptions * soap_new_tt__OSDConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__OSDConfigurationOptions * soap_new_req_tt__OSDConfigurationOptions(struct soap *soap, tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs, std::vector<enum tt__OSDType >& Type, std::vector<std::string >& PositionOption) { tt__OSDConfigurationOptions *_p = soap_instantiate_tt__OSDConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs; _p->tt__OSDConfigurationOptions::Type = Type; _p->tt__OSDConfigurationOptions::PositionOption = PositionOption; } return _p; }

inline tt__OSDConfigurationOptions * soap_new_set_tt__OSDConfigurationOptions(struct soap *soap, tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs, std::vector<enum tt__OSDType >& Type, std::vector<std::string >& PositionOption, tt__OSDTextOptions *TextOption, tt__OSDImgOptions *ImageOption, tt__OSDConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__OSDConfigurationOptions *_p = soap_instantiate_tt__OSDConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDConfigurationOptions::MaximumNumberOfOSDs = MaximumNumberOfOSDs; _p->tt__OSDConfigurationOptions::Type = Type; _p->tt__OSDConfigurationOptions::PositionOption = PositionOption; _p->tt__OSDConfigurationOptions::TextOption = TextOption; _p->tt__OSDConfigurationOptions::ImageOption = ImageOption; _p->tt__OSDConfigurationOptions::Extension = Extension; _p->tt__OSDConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDConfigurationOptions(struct soap *soap, tt__OSDConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (623)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MaximumNumberOfOSDs(struct soap*, const char*, int, const tt__MaximumNumberOfOSDs *, const char*);
SOAP_FMAC3 tt__MaximumNumberOfOSDs * SOAP_FMAC4 soap_in_tt__MaximumNumberOfOSDs(struct soap*, const char*, tt__MaximumNumberOfOSDs *, const char*);

#ifndef soap_write_tt__MaximumNumberOfOSDs
#define soap_write_tt__MaximumNumberOfOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MaximumNumberOfOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MaximumNumberOfOSDs * SOAP_FMAC4 soap_get_tt__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *, const char*, const char*);

#ifndef soap_read_tt__MaximumNumberOfOSDs
#define soap_read_tt__MaximumNumberOfOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MaximumNumberOfOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MaximumNumberOfOSDs * SOAP_FMAC2 soap_instantiate_tt__MaximumNumberOfOSDs(struct soap*, int, const char*, const char*, size_t*);

inline tt__MaximumNumberOfOSDs * soap_new_tt__MaximumNumberOfOSDs(struct soap *soap, int n = -1) { return soap_instantiate_tt__MaximumNumberOfOSDs(soap, n, NULL, NULL, NULL); }

inline tt__MaximumNumberOfOSDs * soap_new_req_tt__MaximumNumberOfOSDs(struct soap *soap, int Total) { tt__MaximumNumberOfOSDs *_p = soap_instantiate_tt__MaximumNumberOfOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MaximumNumberOfOSDs::Total = Total; } return _p; }

inline tt__MaximumNumberOfOSDs * soap_new_set_tt__MaximumNumberOfOSDs(struct soap *soap, int Total, int *Image, int *PlainText, int *Date, int *Time, int *DateAndTime, char *__anyAttribute, char *__item1) { tt__MaximumNumberOfOSDs *_p = soap_instantiate_tt__MaximumNumberOfOSDs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MaximumNumberOfOSDs::Total = Total; _p->tt__MaximumNumberOfOSDs::Image = Image; _p->tt__MaximumNumberOfOSDs::PlainText = PlainText; _p->tt__MaximumNumberOfOSDs::Date = Date; _p->tt__MaximumNumberOfOSDs::Time = Time; _p->tt__MaximumNumberOfOSDs::DateAndTime = DateAndTime; _p->tt__MaximumNumberOfOSDs::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MaximumNumberOfOSDs(struct soap *soap, tt__MaximumNumberOfOSDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MaximumNumberOfOSDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (622)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfigurationExtension(struct soap*, const char*, int, const tt__OSDConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDConfigurationExtension(struct soap*, const char*, tt__OSDConfigurationExtension *, const char*);

#ifndef soap_write_tt__OSDConfigurationExtension
#define soap_write_tt__OSDConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDConfigurationExtension
#define soap_read_tt__OSDConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfigurationExtension * soap_new_tt__OSDConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDConfigurationExtension * soap_new_req_tt__OSDConfigurationExtension(struct soap *soap) { tt__OSDConfigurationExtension *_p = soap_instantiate_tt__OSDConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDConfigurationExtension * soap_new_set_tt__OSDConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDConfigurationExtension *_p = soap_instantiate_tt__OSDConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDConfigurationExtension::__any = __any; _p->tt__OSDConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDConfigurationExtension(struct soap *soap, tt__OSDConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (621)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDConfiguration(struct soap*, const char*, int, const tt__OSDConfiguration *, const char*);
SOAP_FMAC3 tt__OSDConfiguration * SOAP_FMAC4 soap_in_tt__OSDConfiguration(struct soap*, const char*, tt__OSDConfiguration *, const char*);

#ifndef soap_write_tt__OSDConfiguration
#define soap_write_tt__OSDConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfiguration * SOAP_FMAC4 soap_get_tt__OSDConfiguration(struct soap*, tt__OSDConfiguration *, const char*, const char*);

#ifndef soap_read_tt__OSDConfiguration
#define soap_read_tt__OSDConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDConfiguration * soap_new_tt__OSDConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__OSDConfiguration * soap_new_req_tt__OSDConfiguration(struct soap *soap, tt__OSDReference *VideoSourceConfigurationToken, enum tt__OSDType Type, tt__OSDPosConfiguration *Position, std::string& token1) { tt__OSDConfiguration *_p = soap_instantiate_tt__OSDConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken; _p->tt__OSDConfiguration::Type = Type; _p->tt__OSDConfiguration::Position = Position; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__OSDConfiguration * soap_new_set_tt__OSDConfiguration(struct soap *soap, tt__OSDReference *VideoSourceConfigurationToken, enum tt__OSDType Type, tt__OSDPosConfiguration *Position, tt__OSDTextConfiguration *TextString, tt__OSDImgConfiguration *Image, tt__OSDConfigurationExtension *Extension, char *__anyAttribute, std::string& token1, char *__item2) { tt__OSDConfiguration *_p = soap_instantiate_tt__OSDConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDConfiguration::VideoSourceConfigurationToken = VideoSourceConfigurationToken; _p->tt__OSDConfiguration::Type = Type; _p->tt__OSDConfiguration::Position = Position; _p->tt__OSDConfiguration::TextString = TextString; _p->tt__OSDConfiguration::Image = Image; _p->tt__OSDConfiguration::Extension = Extension; _p->tt__OSDConfiguration::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__OSDConfiguration(struct soap *soap, tt__OSDConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (620)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgOptionsExtension(struct soap*, const char*, int, const tt__OSDImgOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDImgOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDImgOptionsExtension(struct soap*, const char*, tt__OSDImgOptionsExtension *, const char*);

#ifndef soap_write_tt__OSDImgOptionsExtension
#define soap_write_tt__OSDImgOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDImgOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDImgOptionsExtension
#define soap_read_tt__OSDImgOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDImgOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDImgOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgOptionsExtension * soap_new_tt__OSDImgOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDImgOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDImgOptionsExtension * soap_new_req_tt__OSDImgOptionsExtension(struct soap *soap) { tt__OSDImgOptionsExtension *_p = soap_instantiate_tt__OSDImgOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDImgOptionsExtension * soap_new_set_tt__OSDImgOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDImgOptionsExtension *_p = soap_instantiate_tt__OSDImgOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDImgOptionsExtension::__any = __any; _p->tt__OSDImgOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDImgOptionsExtension(struct soap *soap, tt__OSDImgOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDImgOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (619)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgOptions(struct soap*, const char*, int, const tt__OSDImgOptions *, const char*);
SOAP_FMAC3 tt__OSDImgOptions * SOAP_FMAC4 soap_in_tt__OSDImgOptions(struct soap*, const char*, tt__OSDImgOptions *, const char*);

#ifndef soap_write_tt__OSDImgOptions
#define soap_write_tt__OSDImgOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDImgOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgOptions * SOAP_FMAC4 soap_get_tt__OSDImgOptions(struct soap*, tt__OSDImgOptions *, const char*, const char*);

#ifndef soap_read_tt__OSDImgOptions
#define soap_read_tt__OSDImgOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDImgOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDImgOptions * SOAP_FMAC2 soap_instantiate_tt__OSDImgOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgOptions * soap_new_tt__OSDImgOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDImgOptions(soap, n, NULL, NULL, NULL); }

inline tt__OSDImgOptions * soap_new_req_tt__OSDImgOptions(struct soap *soap, std::vector<std::string >& ImagePath) { tt__OSDImgOptions *_p = soap_instantiate_tt__OSDImgOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDImgOptions::ImagePath = ImagePath; } return _p; }

inline tt__OSDImgOptions * soap_new_set_tt__OSDImgOptions(struct soap *soap, std::vector<std::string >& ImagePath, tt__OSDImgOptionsExtension *Extension, std::string *FormatsSupported, int *MaxSize, int *MaxWidth, int *MaxHeight, char *__anyAttribute, char *__item1) { tt__OSDImgOptions *_p = soap_instantiate_tt__OSDImgOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDImgOptions::ImagePath = ImagePath; _p->tt__OSDImgOptions::Extension = Extension; _p->tt__OSDImgOptions::FormatsSupported = FormatsSupported; _p->tt__OSDImgOptions::MaxSize = MaxSize; _p->tt__OSDImgOptions::MaxWidth = MaxWidth; _p->tt__OSDImgOptions::MaxHeight = MaxHeight; _p->tt__OSDImgOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDImgOptions(struct soap *soap, tt__OSDImgOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDImgOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (618)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextOptionsExtension(struct soap*, const char*, int, const tt__OSDTextOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDTextOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDTextOptionsExtension(struct soap*, const char*, tt__OSDTextOptionsExtension *, const char*);

#ifndef soap_write_tt__OSDTextOptionsExtension
#define soap_write_tt__OSDTextOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDTextOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDTextOptionsExtension
#define soap_read_tt__OSDTextOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDTextOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDTextOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextOptionsExtension * soap_new_tt__OSDTextOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDTextOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDTextOptionsExtension * soap_new_req_tt__OSDTextOptionsExtension(struct soap *soap) { tt__OSDTextOptionsExtension *_p = soap_instantiate_tt__OSDTextOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDTextOptionsExtension * soap_new_set_tt__OSDTextOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDTextOptionsExtension *_p = soap_instantiate_tt__OSDTextOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDTextOptionsExtension::__any = __any; _p->tt__OSDTextOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDTextOptionsExtension(struct soap *soap, tt__OSDTextOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDTextOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (617)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextOptions(struct soap*, const char*, int, const tt__OSDTextOptions *, const char*);
SOAP_FMAC3 tt__OSDTextOptions * SOAP_FMAC4 soap_in_tt__OSDTextOptions(struct soap*, const char*, tt__OSDTextOptions *, const char*);

#ifndef soap_write_tt__OSDTextOptions
#define soap_write_tt__OSDTextOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDTextOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextOptions * SOAP_FMAC4 soap_get_tt__OSDTextOptions(struct soap*, tt__OSDTextOptions *, const char*, const char*);

#ifndef soap_read_tt__OSDTextOptions
#define soap_read_tt__OSDTextOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDTextOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDTextOptions * SOAP_FMAC2 soap_instantiate_tt__OSDTextOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextOptions * soap_new_tt__OSDTextOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDTextOptions(soap, n, NULL, NULL, NULL); }

inline tt__OSDTextOptions * soap_new_req_tt__OSDTextOptions(struct soap *soap, std::vector<std::string >& Type) { tt__OSDTextOptions *_p = soap_instantiate_tt__OSDTextOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDTextOptions::Type = Type; } return _p; }

inline tt__OSDTextOptions * soap_new_set_tt__OSDTextOptions(struct soap *soap, std::vector<std::string >& Type, tt__IntRange *FontSizeRange, std::vector<std::string >& DateFormat, std::vector<std::string >& TimeFormat, tt__OSDColorOptions *FontColor, tt__OSDColorOptions *BackgroundColor, tt__OSDTextOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__OSDTextOptions *_p = soap_instantiate_tt__OSDTextOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDTextOptions::Type = Type; _p->tt__OSDTextOptions::FontSizeRange = FontSizeRange; _p->tt__OSDTextOptions::DateFormat = DateFormat; _p->tt__OSDTextOptions::TimeFormat = TimeFormat; _p->tt__OSDTextOptions::FontColor = FontColor; _p->tt__OSDTextOptions::BackgroundColor = BackgroundColor; _p->tt__OSDTextOptions::Extension = Extension; _p->tt__OSDTextOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDTextOptions(struct soap *soap, tt__OSDTextOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDTextOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (616)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColorOptionsExtension(struct soap*, const char*, int, const tt__OSDColorOptionsExtension *, const char*);
SOAP_FMAC3 tt__OSDColorOptionsExtension * SOAP_FMAC4 soap_in_tt__OSDColorOptionsExtension(struct soap*, const char*, tt__OSDColorOptionsExtension *, const char*);

#ifndef soap_write_tt__OSDColorOptionsExtension
#define soap_write_tt__OSDColorOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDColorOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDColorOptionsExtension * SOAP_FMAC4 soap_get_tt__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDColorOptionsExtension
#define soap_read_tt__OSDColorOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDColorOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDColorOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColorOptionsExtension * soap_new_tt__OSDColorOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDColorOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDColorOptionsExtension * soap_new_req_tt__OSDColorOptionsExtension(struct soap *soap) { tt__OSDColorOptionsExtension *_p = soap_instantiate_tt__OSDColorOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDColorOptionsExtension * soap_new_set_tt__OSDColorOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDColorOptionsExtension *_p = soap_instantiate_tt__OSDColorOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDColorOptionsExtension::__any = __any; _p->tt__OSDColorOptionsExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDColorOptionsExtension(struct soap *soap, tt__OSDColorOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDColorOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (615)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColorOptions(struct soap*, const char*, int, const tt__OSDColorOptions *, const char*);
SOAP_FMAC3 tt__OSDColorOptions * SOAP_FMAC4 soap_in_tt__OSDColorOptions(struct soap*, const char*, tt__OSDColorOptions *, const char*);

#ifndef soap_write_tt__OSDColorOptions
#define soap_write_tt__OSDColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDColorOptions * SOAP_FMAC4 soap_get_tt__OSDColorOptions(struct soap*, tt__OSDColorOptions *, const char*, const char*);

#ifndef soap_read_tt__OSDColorOptions
#define soap_read_tt__OSDColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDColorOptions * SOAP_FMAC2 soap_instantiate_tt__OSDColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColorOptions * soap_new_tt__OSDColorOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDColorOptions(soap, n, NULL, NULL, NULL); }

inline tt__OSDColorOptions * soap_new_req_tt__OSDColorOptions(struct soap *soap) { tt__OSDColorOptions *_p = soap_instantiate_tt__OSDColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDColorOptions * soap_new_set_tt__OSDColorOptions(struct soap *soap, tt__ColorOptions *Color, tt__IntRange *Transparent, tt__OSDColorOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__OSDColorOptions *_p = soap_instantiate_tt__OSDColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDColorOptions::Color = Color; _p->tt__OSDColorOptions::Transparent = Transparent; _p->tt__OSDColorOptions::Extension = Extension; _p->tt__OSDColorOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDColorOptions(struct soap *soap, tt__OSDColorOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDColorOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (614)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorOptions(struct soap*, const char*, int, const tt__ColorOptions *, const char*);
SOAP_FMAC3 tt__ColorOptions * SOAP_FMAC4 soap_in_tt__ColorOptions(struct soap*, const char*, tt__ColorOptions *, const char*);

#ifndef soap_write_tt__ColorOptions
#define soap_write_tt__ColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorOptions * SOAP_FMAC4 soap_get_tt__ColorOptions(struct soap*, tt__ColorOptions *, const char*, const char*);

#ifndef soap_read_tt__ColorOptions
#define soap_read_tt__ColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ColorOptions * SOAP_FMAC2 soap_instantiate_tt__ColorOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorOptions * soap_new_tt__ColorOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ColorOptions(soap, n, NULL, NULL, NULL); }

inline tt__ColorOptions * soap_new_req_tt__ColorOptions(struct soap *soap, int __union_ColorOptions, union _tt__union_ColorOptions& union_ColorOptions) { tt__ColorOptions *_p = soap_instantiate_tt__ColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorOptions::__union_ColorOptions = __union_ColorOptions; _p->tt__ColorOptions::union_ColorOptions = union_ColorOptions; } return _p; }

inline tt__ColorOptions * soap_new_set_tt__ColorOptions(struct soap *soap, int __union_ColorOptions, union _tt__union_ColorOptions& union_ColorOptions, char *__anyAttribute, char *__item1) { tt__ColorOptions *_p = soap_instantiate_tt__ColorOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorOptions::__union_ColorOptions = __union_ColorOptions; _p->tt__ColorOptions::union_ColorOptions = union_ColorOptions; _p->tt__ColorOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ColorOptions(struct soap *soap, tt__ColorOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ColorOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (613)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ColorspaceRange(struct soap*, const char*, int, const tt__ColorspaceRange *, const char*);
SOAP_FMAC3 tt__ColorspaceRange * SOAP_FMAC4 soap_in_tt__ColorspaceRange(struct soap*, const char*, tt__ColorspaceRange *, const char*);

#ifndef soap_write_tt__ColorspaceRange
#define soap_write_tt__ColorspaceRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ColorspaceRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorspaceRange * SOAP_FMAC4 soap_get_tt__ColorspaceRange(struct soap*, tt__ColorspaceRange *, const char*, const char*);

#ifndef soap_read_tt__ColorspaceRange
#define soap_read_tt__ColorspaceRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ColorspaceRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ColorspaceRange * SOAP_FMAC2 soap_instantiate_tt__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__ColorspaceRange * soap_new_tt__ColorspaceRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__ColorspaceRange(soap, n, NULL, NULL, NULL); }

inline tt__ColorspaceRange * soap_new_req_tt__ColorspaceRange(struct soap *soap, tt__FloatRange *X, tt__FloatRange *Y, tt__FloatRange *Z, std::string& Colorspace) { tt__ColorspaceRange *_p = soap_instantiate_tt__ColorspaceRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorspaceRange::X = X; _p->tt__ColorspaceRange::Y = Y; _p->tt__ColorspaceRange::Z = Z; _p->tt__ColorspaceRange::Colorspace = Colorspace; } return _p; }

inline tt__ColorspaceRange * soap_new_set_tt__ColorspaceRange(struct soap *soap, tt__FloatRange *X, tt__FloatRange *Y, tt__FloatRange *Z, std::string& Colorspace, char *__anyAttribute, char *__item1) { tt__ColorspaceRange *_p = soap_instantiate_tt__ColorspaceRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ColorspaceRange::X = X; _p->tt__ColorspaceRange::Y = Y; _p->tt__ColorspaceRange::Z = Z; _p->tt__ColorspaceRange::Colorspace = Colorspace; _p->tt__ColorspaceRange::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ColorspaceRange(struct soap *soap, tt__ColorspaceRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ColorspaceRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (612)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgConfigurationExtension(struct soap*, const char*, int, const tt__OSDImgConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDImgConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDImgConfigurationExtension(struct soap*, const char*, tt__OSDImgConfigurationExtension *, const char*);

#ifndef soap_write_tt__OSDImgConfigurationExtension
#define soap_write_tt__OSDImgConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDImgConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDImgConfigurationExtension
#define soap_read_tt__OSDImgConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDImgConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDImgConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgConfigurationExtension * soap_new_tt__OSDImgConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDImgConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDImgConfigurationExtension * soap_new_req_tt__OSDImgConfigurationExtension(struct soap *soap) { tt__OSDImgConfigurationExtension *_p = soap_instantiate_tt__OSDImgConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDImgConfigurationExtension * soap_new_set_tt__OSDImgConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDImgConfigurationExtension *_p = soap_instantiate_tt__OSDImgConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDImgConfigurationExtension::__any = __any; _p->tt__OSDImgConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDImgConfigurationExtension(struct soap *soap, tt__OSDImgConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDImgConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (611)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDImgConfiguration(struct soap*, const char*, int, const tt__OSDImgConfiguration *, const char*);
SOAP_FMAC3 tt__OSDImgConfiguration * SOAP_FMAC4 soap_in_tt__OSDImgConfiguration(struct soap*, const char*, tt__OSDImgConfiguration *, const char*);

#ifndef soap_write_tt__OSDImgConfiguration
#define soap_write_tt__OSDImgConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDImgConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgConfiguration * SOAP_FMAC4 soap_get_tt__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *, const char*, const char*);

#ifndef soap_read_tt__OSDImgConfiguration
#define soap_read_tt__OSDImgConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDImgConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDImgConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDImgConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDImgConfiguration * soap_new_tt__OSDImgConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDImgConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__OSDImgConfiguration * soap_new_req_tt__OSDImgConfiguration(struct soap *soap, std::string& ImgPath) { tt__OSDImgConfiguration *_p = soap_instantiate_tt__OSDImgConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDImgConfiguration::ImgPath = ImgPath; } return _p; }

inline tt__OSDImgConfiguration * soap_new_set_tt__OSDImgConfiguration(struct soap *soap, std::string& ImgPath, tt__OSDImgConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__OSDImgConfiguration *_p = soap_instantiate_tt__OSDImgConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDImgConfiguration::ImgPath = ImgPath; _p->tt__OSDImgConfiguration::Extension = Extension; _p->tt__OSDImgConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDImgConfiguration(struct soap *soap, tt__OSDImgConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDImgConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (610)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextConfigurationExtension(struct soap*, const char*, int, const tt__OSDTextConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDTextConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDTextConfigurationExtension(struct soap*, const char*, tt__OSDTextConfigurationExtension *, const char*);

#ifndef soap_write_tt__OSDTextConfigurationExtension
#define soap_write_tt__OSDTextConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDTextConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDTextConfigurationExtension
#define soap_read_tt__OSDTextConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDTextConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDTextConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextConfigurationExtension * soap_new_tt__OSDTextConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDTextConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDTextConfigurationExtension * soap_new_req_tt__OSDTextConfigurationExtension(struct soap *soap) { tt__OSDTextConfigurationExtension *_p = soap_instantiate_tt__OSDTextConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDTextConfigurationExtension * soap_new_set_tt__OSDTextConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDTextConfigurationExtension *_p = soap_instantiate_tt__OSDTextConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDTextConfigurationExtension::__any = __any; _p->tt__OSDTextConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDTextConfigurationExtension(struct soap *soap, tt__OSDTextConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDTextConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (609)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDTextConfiguration(struct soap*, const char*, int, const tt__OSDTextConfiguration *, const char*);
SOAP_FMAC3 tt__OSDTextConfiguration * SOAP_FMAC4 soap_in_tt__OSDTextConfiguration(struct soap*, const char*, tt__OSDTextConfiguration *, const char*);

#ifndef soap_write_tt__OSDTextConfiguration
#define soap_write_tt__OSDTextConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDTextConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextConfiguration * SOAP_FMAC4 soap_get_tt__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *, const char*, const char*);

#ifndef soap_read_tt__OSDTextConfiguration
#define soap_read_tt__OSDTextConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDTextConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDTextConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDTextConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDTextConfiguration * soap_new_tt__OSDTextConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDTextConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__OSDTextConfiguration * soap_new_req_tt__OSDTextConfiguration(struct soap *soap, std::string& Type) { tt__OSDTextConfiguration *_p = soap_instantiate_tt__OSDTextConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDTextConfiguration::Type = Type; } return _p; }

inline tt__OSDTextConfiguration * soap_new_set_tt__OSDTextConfiguration(struct soap *soap, std::string& Type, std::string *DateFormat, std::string *TimeFormat, int *FontSize, tt__OSDColor *FontColor, tt__OSDColor *BackgroundColor, std::string *PlainText, tt__OSDTextConfigurationExtension *Extension, bool *IsPersistentText, char *__anyAttribute, char *__item1) { tt__OSDTextConfiguration *_p = soap_instantiate_tt__OSDTextConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDTextConfiguration::Type = Type; _p->tt__OSDTextConfiguration::DateFormat = DateFormat; _p->tt__OSDTextConfiguration::TimeFormat = TimeFormat; _p->tt__OSDTextConfiguration::FontSize = FontSize; _p->tt__OSDTextConfiguration::FontColor = FontColor; _p->tt__OSDTextConfiguration::BackgroundColor = BackgroundColor; _p->tt__OSDTextConfiguration::PlainText = PlainText; _p->tt__OSDTextConfiguration::Extension = Extension; _p->tt__OSDTextConfiguration::IsPersistentText = IsPersistentText; _p->tt__OSDTextConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDTextConfiguration(struct soap *soap, tt__OSDTextConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDTextConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (608)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDColor(struct soap*, const char*, int, const tt__OSDColor *, const char*);
SOAP_FMAC3 tt__OSDColor * SOAP_FMAC4 soap_in_tt__OSDColor(struct soap*, const char*, tt__OSDColor *, const char*);

#ifndef soap_write_tt__OSDColor
#define soap_write_tt__OSDColor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDColor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDColor * SOAP_FMAC4 soap_get_tt__OSDColor(struct soap*, tt__OSDColor *, const char*, const char*);

#ifndef soap_read_tt__OSDColor
#define soap_read_tt__OSDColor(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDColor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDColor * SOAP_FMAC2 soap_instantiate_tt__OSDColor(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDColor * soap_new_tt__OSDColor(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDColor(soap, n, NULL, NULL, NULL); }

inline tt__OSDColor * soap_new_req_tt__OSDColor(struct soap *soap, tt__Color *Color) { tt__OSDColor *_p = soap_instantiate_tt__OSDColor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDColor::Color = Color; } return _p; }

inline tt__OSDColor * soap_new_set_tt__OSDColor(struct soap *soap, tt__Color *Color, int *Transparent, char *__anyAttribute, char *__item1) { tt__OSDColor *_p = soap_instantiate_tt__OSDColor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDColor::Color = Color; _p->tt__OSDColor::Transparent = Transparent; _p->tt__OSDColor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDColor(struct soap *soap, tt__OSDColor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDColor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (607)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDPosConfigurationExtension(struct soap*, const char*, int, const tt__OSDPosConfigurationExtension *, const char*);
SOAP_FMAC3 tt__OSDPosConfigurationExtension * SOAP_FMAC4 soap_in_tt__OSDPosConfigurationExtension(struct soap*, const char*, tt__OSDPosConfigurationExtension *, const char*);

#ifndef soap_write_tt__OSDPosConfigurationExtension
#define soap_write_tt__OSDPosConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDPosConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDPosConfigurationExtension * SOAP_FMAC4 soap_get_tt__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__OSDPosConfigurationExtension
#define soap_read_tt__OSDPosConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDPosConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDPosConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDPosConfigurationExtension * soap_new_tt__OSDPosConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDPosConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__OSDPosConfigurationExtension * soap_new_req_tt__OSDPosConfigurationExtension(struct soap *soap) { tt__OSDPosConfigurationExtension *_p = soap_instantiate_tt__OSDPosConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__OSDPosConfigurationExtension * soap_new_set_tt__OSDPosConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__OSDPosConfigurationExtension *_p = soap_instantiate_tt__OSDPosConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDPosConfigurationExtension::__any = __any; _p->tt__OSDPosConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDPosConfigurationExtension(struct soap *soap, tt__OSDPosConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDPosConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (606)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDPosConfiguration(struct soap*, const char*, int, const tt__OSDPosConfiguration *, const char*);
SOAP_FMAC3 tt__OSDPosConfiguration * SOAP_FMAC4 soap_in_tt__OSDPosConfiguration(struct soap*, const char*, tt__OSDPosConfiguration *, const char*);

#ifndef soap_write_tt__OSDPosConfiguration
#define soap_write_tt__OSDPosConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDPosConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDPosConfiguration * SOAP_FMAC4 soap_get_tt__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *, const char*, const char*);

#ifndef soap_read_tt__OSDPosConfiguration
#define soap_read_tt__OSDPosConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDPosConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDPosConfiguration * SOAP_FMAC2 soap_instantiate_tt__OSDPosConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDPosConfiguration * soap_new_tt__OSDPosConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDPosConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__OSDPosConfiguration * soap_new_req_tt__OSDPosConfiguration(struct soap *soap, std::string& Type) { tt__OSDPosConfiguration *_p = soap_instantiate_tt__OSDPosConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDPosConfiguration::Type = Type; } return _p; }

inline tt__OSDPosConfiguration * soap_new_set_tt__OSDPosConfiguration(struct soap *soap, std::string& Type, tt__Vector *Pos, tt__OSDPosConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__OSDPosConfiguration *_p = soap_instantiate_tt__OSDPosConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDPosConfiguration::Type = Type; _p->tt__OSDPosConfiguration::Pos = Pos; _p->tt__OSDPosConfiguration::Extension = Extension; _p->tt__OSDPosConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDPosConfiguration(struct soap *soap, tt__OSDPosConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDPosConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (605)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OSDReference(struct soap*, const char*, int, const tt__OSDReference *, const char*);
SOAP_FMAC3 tt__OSDReference * SOAP_FMAC4 soap_in_tt__OSDReference(struct soap*, const char*, tt__OSDReference *, const char*);

#ifndef soap_write_tt__OSDReference
#define soap_write_tt__OSDReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OSDReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDReference * SOAP_FMAC4 soap_get_tt__OSDReference(struct soap*, tt__OSDReference *, const char*, const char*);

#ifndef soap_read_tt__OSDReference
#define soap_read_tt__OSDReference(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OSDReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OSDReference * SOAP_FMAC2 soap_instantiate_tt__OSDReference(struct soap*, int, const char*, const char*, size_t*);

inline tt__OSDReference * soap_new_tt__OSDReference(struct soap *soap, int n = -1) { return soap_instantiate_tt__OSDReference(soap, n, NULL, NULL, NULL); }

inline tt__OSDReference * soap_new_req_tt__OSDReference(struct soap *soap, std::string& __item) { tt__OSDReference *_p = soap_instantiate_tt__OSDReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDReference::__item = __item; } return _p; }

inline tt__OSDReference * soap_new_set_tt__OSDReference(struct soap *soap, std::string& __item, char *__anyAttribute, char *__item1) { tt__OSDReference *_p = soap_instantiate_tt__OSDReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OSDReference::__item = __item; _p->tt__OSDReference::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OSDReference(struct soap *soap, tt__OSDReference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OSDReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (604)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileStatusExtension(struct soap*, const char*, int, const tt__ProfileStatusExtension *, const char*);
SOAP_FMAC3 tt__ProfileStatusExtension * SOAP_FMAC4 soap_in_tt__ProfileStatusExtension(struct soap*, const char*, tt__ProfileStatusExtension *, const char*);

#ifndef soap_write_tt__ProfileStatusExtension
#define soap_write_tt__ProfileStatusExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ProfileStatusExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileStatusExtension * SOAP_FMAC4 soap_get_tt__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension *, const char*, const char*);

#ifndef soap_read_tt__ProfileStatusExtension
#define soap_read_tt__ProfileStatusExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ProfileStatusExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ProfileStatusExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileStatusExtension * soap_new_tt__ProfileStatusExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ProfileStatusExtension(soap, n, NULL, NULL, NULL); }

inline tt__ProfileStatusExtension * soap_new_req_tt__ProfileStatusExtension(struct soap *soap) { tt__ProfileStatusExtension *_p = soap_instantiate_tt__ProfileStatusExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ProfileStatusExtension * soap_new_set_tt__ProfileStatusExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ProfileStatusExtension *_p = soap_instantiate_tt__ProfileStatusExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ProfileStatusExtension::__any = __any; _p->tt__ProfileStatusExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ProfileStatusExtension(struct soap *soap, tt__ProfileStatusExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ProfileStatusExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (603)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileStatus(struct soap*, const char*, int, const tt__ProfileStatus *, const char*);
SOAP_FMAC3 tt__ProfileStatus * SOAP_FMAC4 soap_in_tt__ProfileStatus(struct soap*, const char*, tt__ProfileStatus *, const char*);

#ifndef soap_write_tt__ProfileStatus
#define soap_write_tt__ProfileStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ProfileStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileStatus * SOAP_FMAC4 soap_get_tt__ProfileStatus(struct soap*, tt__ProfileStatus *, const char*, const char*);

#ifndef soap_read_tt__ProfileStatus
#define soap_read_tt__ProfileStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ProfileStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ProfileStatus * SOAP_FMAC2 soap_instantiate_tt__ProfileStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileStatus * soap_new_tt__ProfileStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__ProfileStatus(soap, n, NULL, NULL, NULL); }

inline tt__ProfileStatus * soap_new_req_tt__ProfileStatus(struct soap *soap) { tt__ProfileStatus *_p = soap_instantiate_tt__ProfileStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ProfileStatus * soap_new_set_tt__ProfileStatus(struct soap *soap, std::vector<tt__ActiveConnection * >& ActiveConnections, tt__ProfileStatusExtension *Extension, char *__item1) { tt__ProfileStatus *_p = soap_instantiate_tt__ProfileStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ProfileStatus::ActiveConnections = ActiveConnections; _p->tt__ProfileStatus::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ProfileStatus(struct soap *soap, tt__ProfileStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ProfileStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (602)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ActiveConnection(struct soap*, const char*, int, const tt__ActiveConnection *, const char*);
SOAP_FMAC3 tt__ActiveConnection * SOAP_FMAC4 soap_in_tt__ActiveConnection(struct soap*, const char*, tt__ActiveConnection *, const char*);

#ifndef soap_write_tt__ActiveConnection
#define soap_write_tt__ActiveConnection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ActiveConnection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ActiveConnection * SOAP_FMAC4 soap_get_tt__ActiveConnection(struct soap*, tt__ActiveConnection *, const char*, const char*);

#ifndef soap_read_tt__ActiveConnection
#define soap_read_tt__ActiveConnection(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ActiveConnection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ActiveConnection * SOAP_FMAC2 soap_instantiate_tt__ActiveConnection(struct soap*, int, const char*, const char*, size_t*);

inline tt__ActiveConnection * soap_new_tt__ActiveConnection(struct soap *soap, int n = -1) { return soap_instantiate_tt__ActiveConnection(soap, n, NULL, NULL, NULL); }

inline tt__ActiveConnection * soap_new_req_tt__ActiveConnection(struct soap *soap, float CurrentBitrate, float CurrentFps) { tt__ActiveConnection *_p = soap_instantiate_tt__ActiveConnection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ActiveConnection::CurrentBitrate = CurrentBitrate; _p->tt__ActiveConnection::CurrentFps = CurrentFps; } return _p; }

inline tt__ActiveConnection * soap_new_set_tt__ActiveConnection(struct soap *soap, float CurrentBitrate, float CurrentFps, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ActiveConnection *_p = soap_instantiate_tt__ActiveConnection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ActiveConnection::CurrentBitrate = CurrentBitrate; _p->tt__ActiveConnection::CurrentFps = CurrentFps; _p->tt__ActiveConnection::__any = __any; _p->tt__ActiveConnection::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ActiveConnection(struct soap *soap, tt__ActiveConnection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ActiveConnection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (601)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassDescriptorExtension(struct soap*, const char*, int, const tt__AudioClassDescriptorExtension *, const char*);
SOAP_FMAC3 tt__AudioClassDescriptorExtension * SOAP_FMAC4 soap_in_tt__AudioClassDescriptorExtension(struct soap*, const char*, tt__AudioClassDescriptorExtension *, const char*);

#ifndef soap_write_tt__AudioClassDescriptorExtension
#define soap_write_tt__AudioClassDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioClassDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioClassDescriptorExtension * SOAP_FMAC4 soap_get_tt__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension *, const char*, const char*);

#ifndef soap_read_tt__AudioClassDescriptorExtension
#define soap_read_tt__AudioClassDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioClassDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioClassDescriptorExtension * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptorExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassDescriptorExtension * soap_new_tt__AudioClassDescriptorExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioClassDescriptorExtension(soap, n, NULL, NULL, NULL); }

inline tt__AudioClassDescriptorExtension * soap_new_req_tt__AudioClassDescriptorExtension(struct soap *soap) { tt__AudioClassDescriptorExtension *_p = soap_instantiate_tt__AudioClassDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AudioClassDescriptorExtension * soap_new_set_tt__AudioClassDescriptorExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AudioClassDescriptorExtension *_p = soap_instantiate_tt__AudioClassDescriptorExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioClassDescriptorExtension::__any = __any; _p->tt__AudioClassDescriptorExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioClassDescriptorExtension(struct soap *soap, tt__AudioClassDescriptorExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioClassDescriptorExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (600)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassDescriptor(struct soap*, const char*, int, const tt__AudioClassDescriptor *, const char*);
SOAP_FMAC3 tt__AudioClassDescriptor * SOAP_FMAC4 soap_in_tt__AudioClassDescriptor(struct soap*, const char*, tt__AudioClassDescriptor *, const char*);

#ifndef soap_write_tt__AudioClassDescriptor
#define soap_write_tt__AudioClassDescriptor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioClassDescriptor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioClassDescriptor * SOAP_FMAC4 soap_get_tt__AudioClassDescriptor(struct soap*, tt__AudioClassDescriptor *, const char*, const char*);

#ifndef soap_read_tt__AudioClassDescriptor
#define soap_read_tt__AudioClassDescriptor(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioClassDescriptor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioClassDescriptor * SOAP_FMAC2 soap_instantiate_tt__AudioClassDescriptor(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassDescriptor * soap_new_tt__AudioClassDescriptor(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioClassDescriptor(soap, n, NULL, NULL, NULL); }

inline tt__AudioClassDescriptor * soap_new_req_tt__AudioClassDescriptor(struct soap *soap) { tt__AudioClassDescriptor *_p = soap_instantiate_tt__AudioClassDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AudioClassDescriptor * soap_new_set_tt__AudioClassDescriptor(struct soap *soap, std::vector<tt__AudioClassCandidate * >& ClassCandidate, tt__AudioClassDescriptorExtension *Extension, char *__anyAttribute, char *__item1) { tt__AudioClassDescriptor *_p = soap_instantiate_tt__AudioClassDescriptor(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioClassDescriptor::ClassCandidate = ClassCandidate; _p->tt__AudioClassDescriptor::Extension = Extension; _p->tt__AudioClassDescriptor::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioClassDescriptor(struct soap *soap, tt__AudioClassDescriptor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioClassDescriptor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (599)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioClassCandidate(struct soap*, const char*, int, const tt__AudioClassCandidate *, const char*);
SOAP_FMAC3 tt__AudioClassCandidate * SOAP_FMAC4 soap_in_tt__AudioClassCandidate(struct soap*, const char*, tt__AudioClassCandidate *, const char*);

#ifndef soap_write_tt__AudioClassCandidate
#define soap_write_tt__AudioClassCandidate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioClassCandidate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioClassCandidate * SOAP_FMAC4 soap_get_tt__AudioClassCandidate(struct soap*, tt__AudioClassCandidate *, const char*, const char*);

#ifndef soap_read_tt__AudioClassCandidate
#define soap_read_tt__AudioClassCandidate(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioClassCandidate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioClassCandidate * SOAP_FMAC2 soap_instantiate_tt__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioClassCandidate * soap_new_tt__AudioClassCandidate(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioClassCandidate(soap, n, NULL, NULL, NULL); }

inline tt__AudioClassCandidate * soap_new_req_tt__AudioClassCandidate(struct soap *soap, std::string& Type, float Likelihood) { tt__AudioClassCandidate *_p = soap_instantiate_tt__AudioClassCandidate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioClassCandidate::Type = Type; _p->tt__AudioClassCandidate::Likelihood = Likelihood; } return _p; }

inline tt__AudioClassCandidate * soap_new_set_tt__AudioClassCandidate(struct soap *soap, std::string& Type, float Likelihood, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AudioClassCandidate *_p = soap_instantiate_tt__AudioClassCandidate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioClassCandidate::Type = Type; _p->tt__AudioClassCandidate::Likelihood = Likelihood; _p->tt__AudioClassCandidate::__any = __any; _p->tt__AudioClassCandidate::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioClassCandidate(struct soap *soap, tt__AudioClassCandidate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioClassCandidate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (598)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ActionEngineEventPayloadExtension(struct soap*, const char*, int, const tt__ActionEngineEventPayloadExtension *, const char*);
SOAP_FMAC3 tt__ActionEngineEventPayloadExtension * SOAP_FMAC4 soap_in_tt__ActionEngineEventPayloadExtension(struct soap*, const char*, tt__ActionEngineEventPayloadExtension *, const char*);

#ifndef soap_write_tt__ActionEngineEventPayloadExtension
#define soap_write_tt__ActionEngineEventPayloadExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ActionEngineEventPayloadExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ActionEngineEventPayloadExtension * SOAP_FMAC4 soap_get_tt__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension *, const char*, const char*);

#ifndef soap_read_tt__ActionEngineEventPayloadExtension
#define soap_read_tt__ActionEngineEventPayloadExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ActionEngineEventPayloadExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ActionEngineEventPayloadExtension * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayloadExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ActionEngineEventPayloadExtension * soap_new_tt__ActionEngineEventPayloadExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ActionEngineEventPayloadExtension(soap, n, NULL, NULL, NULL); }

inline tt__ActionEngineEventPayloadExtension * soap_new_req_tt__ActionEngineEventPayloadExtension(struct soap *soap) { tt__ActionEngineEventPayloadExtension *_p = soap_instantiate_tt__ActionEngineEventPayloadExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ActionEngineEventPayloadExtension * soap_new_set_tt__ActionEngineEventPayloadExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ActionEngineEventPayloadExtension *_p = soap_instantiate_tt__ActionEngineEventPayloadExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ActionEngineEventPayloadExtension::__any = __any; _p->tt__ActionEngineEventPayloadExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ActionEngineEventPayloadExtension(struct soap *soap, tt__ActionEngineEventPayloadExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ActionEngineEventPayloadExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (597)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ActionEngineEventPayload(struct soap*, const char*, int, const tt__ActionEngineEventPayload *, const char*);
SOAP_FMAC3 tt__ActionEngineEventPayload * SOAP_FMAC4 soap_in_tt__ActionEngineEventPayload(struct soap*, const char*, tt__ActionEngineEventPayload *, const char*);

#ifndef soap_write_tt__ActionEngineEventPayload
#define soap_write_tt__ActionEngineEventPayload(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ActionEngineEventPayload", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ActionEngineEventPayload * SOAP_FMAC4 soap_get_tt__ActionEngineEventPayload(struct soap*, tt__ActionEngineEventPayload *, const char*, const char*);

#ifndef soap_read_tt__ActionEngineEventPayload
#define soap_read_tt__ActionEngineEventPayload(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ActionEngineEventPayload(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ActionEngineEventPayload * SOAP_FMAC2 soap_instantiate_tt__ActionEngineEventPayload(struct soap*, int, const char*, const char*, size_t*);

inline tt__ActionEngineEventPayload * soap_new_tt__ActionEngineEventPayload(struct soap *soap, int n = -1) { return soap_instantiate_tt__ActionEngineEventPayload(soap, n, NULL, NULL, NULL); }

inline tt__ActionEngineEventPayload * soap_new_req_tt__ActionEngineEventPayload(struct soap *soap) { tt__ActionEngineEventPayload *_p = soap_instantiate_tt__ActionEngineEventPayload(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ActionEngineEventPayload * soap_new_set_tt__ActionEngineEventPayload(struct soap *soap, struct SOAP_ENV__Envelope *RequestInfo, struct SOAP_ENV__Envelope *ResponseInfo, struct SOAP_ENV__Fault *Fault, tt__ActionEngineEventPayloadExtension *Extension, char *__anyAttribute, char *__item1) { tt__ActionEngineEventPayload *_p = soap_instantiate_tt__ActionEngineEventPayload(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ActionEngineEventPayload::RequestInfo = RequestInfo; _p->tt__ActionEngineEventPayload::ResponseInfo = ResponseInfo; _p->tt__ActionEngineEventPayload::Fault = Fault; _p->tt__ActionEngineEventPayload::Extension = Extension; _p->tt__ActionEngineEventPayload::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ActionEngineEventPayload(struct soap *soap, tt__ActionEngineEventPayload *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ActionEngineEventPayload(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (596)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsState(struct soap*, const char*, int, const tt__AnalyticsState *, const char*);
SOAP_FMAC3 tt__AnalyticsState * SOAP_FMAC4 soap_in_tt__AnalyticsState(struct soap*, const char*, tt__AnalyticsState *, const char*);

#ifndef soap_write_tt__AnalyticsState
#define soap_write_tt__AnalyticsState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsState * SOAP_FMAC4 soap_get_tt__AnalyticsState(struct soap*, tt__AnalyticsState *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsState
#define soap_read_tt__AnalyticsState(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsState * SOAP_FMAC2 soap_instantiate_tt__AnalyticsState(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsState * soap_new_tt__AnalyticsState(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsState(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsState * soap_new_req_tt__AnalyticsState(struct soap *soap, std::string& State) { tt__AnalyticsState *_p = soap_instantiate_tt__AnalyticsState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsState::State = State; } return _p; }

inline tt__AnalyticsState * soap_new_set_tt__AnalyticsState(struct soap *soap, std::string *Error, std::string& State, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AnalyticsState *_p = soap_instantiate_tt__AnalyticsState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsState::Error = Error; _p->tt__AnalyticsState::State = State; _p->tt__AnalyticsState::__any = __any; _p->tt__AnalyticsState::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsState(struct soap *soap, tt__AnalyticsState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (595)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsStateInformation(struct soap*, const char*, int, const tt__AnalyticsStateInformation *, const char*);
SOAP_FMAC3 tt__AnalyticsStateInformation * SOAP_FMAC4 soap_in_tt__AnalyticsStateInformation(struct soap*, const char*, tt__AnalyticsStateInformation *, const char*);

#ifndef soap_write_tt__AnalyticsStateInformation
#define soap_write_tt__AnalyticsStateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsStateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsStateInformation * SOAP_FMAC4 soap_get_tt__AnalyticsStateInformation(struct soap*, tt__AnalyticsStateInformation *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsStateInformation
#define soap_read_tt__AnalyticsStateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsStateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsStateInformation * SOAP_FMAC2 soap_instantiate_tt__AnalyticsStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsStateInformation * soap_new_tt__AnalyticsStateInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsStateInformation(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsStateInformation * soap_new_req_tt__AnalyticsStateInformation(struct soap *soap, std::string& AnalyticsEngineControlToken, tt__AnalyticsState *State) { tt__AnalyticsStateInformation *_p = soap_instantiate_tt__AnalyticsStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsStateInformation::AnalyticsEngineControlToken = AnalyticsEngineControlToken; _p->tt__AnalyticsStateInformation::State = State; } return _p; }

inline tt__AnalyticsStateInformation * soap_new_set_tt__AnalyticsStateInformation(struct soap *soap, std::string& AnalyticsEngineControlToken, tt__AnalyticsState *State, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AnalyticsStateInformation *_p = soap_instantiate_tt__AnalyticsStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsStateInformation::AnalyticsEngineControlToken = AnalyticsEngineControlToken; _p->tt__AnalyticsStateInformation::State = State; _p->tt__AnalyticsStateInformation::__any = __any; _p->tt__AnalyticsStateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsStateInformation(struct soap *soap, tt__AnalyticsStateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsStateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (594)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineControl(struct soap*, const char*, int, const tt__AnalyticsEngineControl *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineControl * SOAP_FMAC4 soap_in_tt__AnalyticsEngineControl(struct soap*, const char*, tt__AnalyticsEngineControl *, const char*);

#ifndef soap_write_tt__AnalyticsEngineControl
#define soap_write_tt__AnalyticsEngineControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngineControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineControl * SOAP_FMAC4 soap_get_tt__AnalyticsEngineControl(struct soap*, tt__AnalyticsEngineControl *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngineControl
#define soap_read_tt__AnalyticsEngineControl(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngineControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngineControl * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineControl(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineControl * soap_new_tt__AnalyticsEngineControl(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngineControl(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngineControl * soap_new_req_tt__AnalyticsEngineControl(struct soap *soap, std::string& EngineToken, std::string& EngineConfigToken, std::vector<std::string >& InputToken, std::vector<std::string >& ReceiverToken, tt__Config *Subscription, enum tt__ModeOfOperation Mode, std::string& Name1, int UseCount1, std::string& token1) { tt__AnalyticsEngineControl *_p = soap_instantiate_tt__AnalyticsEngineControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineControl::EngineToken = EngineToken; _p->tt__AnalyticsEngineControl::EngineConfigToken = EngineConfigToken; _p->tt__AnalyticsEngineControl::InputToken = InputToken; _p->tt__AnalyticsEngineControl::ReceiverToken = ReceiverToken; _p->tt__AnalyticsEngineControl::Subscription = Subscription; _p->tt__AnalyticsEngineControl::Mode = Mode; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AnalyticsEngineControl * soap_new_set_tt__AnalyticsEngineControl(struct soap *soap, std::string& EngineToken, std::string& EngineConfigToken, std::vector<std::string >& InputToken, std::vector<std::string >& ReceiverToken, tt__MulticastConfiguration *Multicast, tt__Config *Subscription, enum tt__ModeOfOperation Mode, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AnalyticsEngineControl *_p = soap_instantiate_tt__AnalyticsEngineControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineControl::EngineToken = EngineToken; _p->tt__AnalyticsEngineControl::EngineConfigToken = EngineConfigToken; _p->tt__AnalyticsEngineControl::InputToken = InputToken; _p->tt__AnalyticsEngineControl::ReceiverToken = ReceiverToken; _p->tt__AnalyticsEngineControl::Multicast = Multicast; _p->tt__AnalyticsEngineControl::Subscription = Subscription; _p->tt__AnalyticsEngineControl::Mode = Mode; _p->tt__AnalyticsEngineControl::__any = __any; _p->tt__AnalyticsEngineControl::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AnalyticsEngineControl(struct soap *soap, tt__AnalyticsEngineControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngineControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (593)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataInputExtension(struct soap*, const char*, int, const tt__MetadataInputExtension *, const char*);
SOAP_FMAC3 tt__MetadataInputExtension * SOAP_FMAC4 soap_in_tt__MetadataInputExtension(struct soap*, const char*, tt__MetadataInputExtension *, const char*);

#ifndef soap_write_tt__MetadataInputExtension
#define soap_write_tt__MetadataInputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataInputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataInputExtension * SOAP_FMAC4 soap_get_tt__MetadataInputExtension(struct soap*, tt__MetadataInputExtension *, const char*, const char*);

#ifndef soap_read_tt__MetadataInputExtension
#define soap_read_tt__MetadataInputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataInputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataInputExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataInputExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataInputExtension * soap_new_tt__MetadataInputExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataInputExtension(soap, n, NULL, NULL, NULL); }

inline tt__MetadataInputExtension * soap_new_req_tt__MetadataInputExtension(struct soap *soap) { tt__MetadataInputExtension *_p = soap_instantiate_tt__MetadataInputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MetadataInputExtension * soap_new_set_tt__MetadataInputExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__MetadataInputExtension *_p = soap_instantiate_tt__MetadataInputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataInputExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataInputExtension(struct soap *soap, tt__MetadataInputExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataInputExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (592)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataInput(struct soap*, const char*, int, const tt__MetadataInput *, const char*);
SOAP_FMAC3 tt__MetadataInput * SOAP_FMAC4 soap_in_tt__MetadataInput(struct soap*, const char*, tt__MetadataInput *, const char*);

#ifndef soap_write_tt__MetadataInput
#define soap_write_tt__MetadataInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataInput * SOAP_FMAC4 soap_get_tt__MetadataInput(struct soap*, tt__MetadataInput *, const char*, const char*);

#ifndef soap_read_tt__MetadataInput
#define soap_read_tt__MetadataInput(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataInput * SOAP_FMAC2 soap_instantiate_tt__MetadataInput(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataInput * soap_new_tt__MetadataInput(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataInput(soap, n, NULL, NULL, NULL); }

inline tt__MetadataInput * soap_new_req_tt__MetadataInput(struct soap *soap) { tt__MetadataInput *_p = soap_instantiate_tt__MetadataInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MetadataInput * soap_new_set_tt__MetadataInput(struct soap *soap, std::vector<tt__Config * >& MetadataConfig, tt__MetadataInputExtension *Extension, char *__anyAttribute, char *__item1) { tt__MetadataInput *_p = soap_instantiate_tt__MetadataInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataInput::MetadataConfig = MetadataConfig; _p->tt__MetadataInput::Extension = Extension; _p->tt__MetadataInput::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataInput(struct soap *soap, tt__MetadataInput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataInput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (591)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SourceIdentificationExtension(struct soap*, const char*, int, const tt__SourceIdentificationExtension *, const char*);
SOAP_FMAC3 tt__SourceIdentificationExtension * SOAP_FMAC4 soap_in_tt__SourceIdentificationExtension(struct soap*, const char*, tt__SourceIdentificationExtension *, const char*);

#ifndef soap_write_tt__SourceIdentificationExtension
#define soap_write_tt__SourceIdentificationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SourceIdentificationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SourceIdentificationExtension * SOAP_FMAC4 soap_get_tt__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension *, const char*, const char*);

#ifndef soap_read_tt__SourceIdentificationExtension
#define soap_read_tt__SourceIdentificationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SourceIdentificationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SourceIdentificationExtension * SOAP_FMAC2 soap_instantiate_tt__SourceIdentificationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SourceIdentificationExtension * soap_new_tt__SourceIdentificationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SourceIdentificationExtension(soap, n, NULL, NULL, NULL); }

inline tt__SourceIdentificationExtension * soap_new_req_tt__SourceIdentificationExtension(struct soap *soap) { tt__SourceIdentificationExtension *_p = soap_instantiate_tt__SourceIdentificationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SourceIdentificationExtension * soap_new_set_tt__SourceIdentificationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__SourceIdentificationExtension *_p = soap_instantiate_tt__SourceIdentificationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SourceIdentificationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SourceIdentificationExtension(struct soap *soap, tt__SourceIdentificationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SourceIdentificationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (590)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SourceIdentification(struct soap*, const char*, int, const tt__SourceIdentification *, const char*);
SOAP_FMAC3 tt__SourceIdentification * SOAP_FMAC4 soap_in_tt__SourceIdentification(struct soap*, const char*, tt__SourceIdentification *, const char*);

#ifndef soap_write_tt__SourceIdentification
#define soap_write_tt__SourceIdentification(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SourceIdentification", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SourceIdentification * SOAP_FMAC4 soap_get_tt__SourceIdentification(struct soap*, tt__SourceIdentification *, const char*, const char*);

#ifndef soap_read_tt__SourceIdentification
#define soap_read_tt__SourceIdentification(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SourceIdentification(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SourceIdentification * SOAP_FMAC2 soap_instantiate_tt__SourceIdentification(struct soap*, int, const char*, const char*, size_t*);

inline tt__SourceIdentification * soap_new_tt__SourceIdentification(struct soap *soap, int n = -1) { return soap_instantiate_tt__SourceIdentification(soap, n, NULL, NULL, NULL); }

inline tt__SourceIdentification * soap_new_req_tt__SourceIdentification(struct soap *soap, std::string& Name, std::vector<std::string >& Token) { tt__SourceIdentification *_p = soap_instantiate_tt__SourceIdentification(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SourceIdentification::Name = Name; _p->tt__SourceIdentification::Token = Token; } return _p; }

inline tt__SourceIdentification * soap_new_set_tt__SourceIdentification(struct soap *soap, std::string& Name, std::vector<std::string >& Token, tt__SourceIdentificationExtension *Extension, char *__anyAttribute, char *__item1) { tt__SourceIdentification *_p = soap_instantiate_tt__SourceIdentification(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SourceIdentification::Name = Name; _p->tt__SourceIdentification::Token = Token; _p->tt__SourceIdentification::Extension = Extension; _p->tt__SourceIdentification::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SourceIdentification(struct soap *soap, tt__SourceIdentification *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SourceIdentification(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (589)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineInput(struct soap*, const char*, int, const tt__AnalyticsEngineInput *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInput * SOAP_FMAC4 soap_in_tt__AnalyticsEngineInput(struct soap*, const char*, tt__AnalyticsEngineInput *, const char*);

#ifndef soap_write_tt__AnalyticsEngineInput
#define soap_write_tt__AnalyticsEngineInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngineInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineInput * SOAP_FMAC4 soap_get_tt__AnalyticsEngineInput(struct soap*, tt__AnalyticsEngineInput *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngineInput
#define soap_read_tt__AnalyticsEngineInput(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngineInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngineInput * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInput(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineInput * soap_new_tt__AnalyticsEngineInput(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngineInput(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngineInput * soap_new_req_tt__AnalyticsEngineInput(struct soap *soap, tt__SourceIdentification *SourceIdentification, tt__VideoEncoderConfiguration *VideoInput, tt__MetadataInput *MetadataInput, std::string& Name1, int UseCount1, std::string& token1) { tt__AnalyticsEngineInput *_p = soap_instantiate_tt__AnalyticsEngineInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineInput::SourceIdentification = SourceIdentification; _p->tt__AnalyticsEngineInput::VideoInput = VideoInput; _p->tt__AnalyticsEngineInput::MetadataInput = MetadataInput; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AnalyticsEngineInput * soap_new_set_tt__AnalyticsEngineInput(struct soap *soap, tt__SourceIdentification *SourceIdentification, tt__VideoEncoderConfiguration *VideoInput, tt__MetadataInput *MetadataInput, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AnalyticsEngineInput *_p = soap_instantiate_tt__AnalyticsEngineInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineInput::SourceIdentification = SourceIdentification; _p->tt__AnalyticsEngineInput::VideoInput = VideoInput; _p->tt__AnalyticsEngineInput::MetadataInput = MetadataInput; _p->tt__AnalyticsEngineInput::__any = __any; _p->tt__AnalyticsEngineInput::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AnalyticsEngineInput(struct soap *soap, tt__AnalyticsEngineInput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngineInput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (588)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineInputInfoExtension(struct soap*, const char*, int, const tt__AnalyticsEngineInputInfoExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC4 soap_in_tt__AnalyticsEngineInputInfoExtension(struct soap*, const char*, tt__AnalyticsEngineInputInfoExtension *, const char*);

#ifndef soap_write_tt__AnalyticsEngineInputInfoExtension
#define soap_write_tt__AnalyticsEngineInputInfoExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngineInputInfoExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC4 soap_get_tt__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngineInputInfoExtension
#define soap_read_tt__AnalyticsEngineInputInfoExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngineInputInfoExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngineInputInfoExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfoExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineInputInfoExtension * soap_new_tt__AnalyticsEngineInputInfoExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngineInputInfoExtension(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngineInputInfoExtension * soap_new_req_tt__AnalyticsEngineInputInfoExtension(struct soap *soap) { tt__AnalyticsEngineInputInfoExtension *_p = soap_instantiate_tt__AnalyticsEngineInputInfoExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnalyticsEngineInputInfoExtension * soap_new_set_tt__AnalyticsEngineInputInfoExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__AnalyticsEngineInputInfoExtension *_p = soap_instantiate_tt__AnalyticsEngineInputInfoExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineInputInfoExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsEngineInputInfoExtension(struct soap *soap, tt__AnalyticsEngineInputInfoExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngineInputInfoExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (587)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineInputInfo(struct soap*, const char*, int, const tt__AnalyticsEngineInputInfo *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineInputInfo * SOAP_FMAC4 soap_in_tt__AnalyticsEngineInputInfo(struct soap*, const char*, tt__AnalyticsEngineInputInfo *, const char*);

#ifndef soap_write_tt__AnalyticsEngineInputInfo
#define soap_write_tt__AnalyticsEngineInputInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngineInputInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineInputInfo * SOAP_FMAC4 soap_get_tt__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngineInputInfo
#define soap_read_tt__AnalyticsEngineInputInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngineInputInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngineInputInfo * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineInputInfo(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineInputInfo * soap_new_tt__AnalyticsEngineInputInfo(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngineInputInfo(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngineInputInfo * soap_new_req_tt__AnalyticsEngineInputInfo(struct soap *soap) { tt__AnalyticsEngineInputInfo *_p = soap_instantiate_tt__AnalyticsEngineInputInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnalyticsEngineInputInfo * soap_new_set_tt__AnalyticsEngineInputInfo(struct soap *soap, tt__Config *InputInfo, tt__AnalyticsEngineInputInfoExtension *Extension, char *__anyAttribute, char *__item1) { tt__AnalyticsEngineInputInfo *_p = soap_instantiate_tt__AnalyticsEngineInputInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineInputInfo::InputInfo = InputInfo; _p->tt__AnalyticsEngineInputInfo::Extension = Extension; _p->tt__AnalyticsEngineInputInfo::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsEngineInputInfo(struct soap *soap, tt__AnalyticsEngineInputInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngineInputInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (586)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EngineConfiguration(struct soap*, const char*, int, const tt__EngineConfiguration *, const char*);
SOAP_FMAC3 tt__EngineConfiguration * SOAP_FMAC4 soap_in_tt__EngineConfiguration(struct soap*, const char*, tt__EngineConfiguration *, const char*);

#ifndef soap_write_tt__EngineConfiguration
#define soap_write_tt__EngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EngineConfiguration * SOAP_FMAC4 soap_get_tt__EngineConfiguration(struct soap*, tt__EngineConfiguration *, const char*, const char*);

#ifndef soap_read_tt__EngineConfiguration
#define soap_read_tt__EngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__EngineConfiguration * soap_new_tt__EngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__EngineConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__EngineConfiguration * soap_new_req_tt__EngineConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration, tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo) { tt__EngineConfiguration *_p = soap_instantiate_tt__EngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EngineConfiguration::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration; _p->tt__EngineConfiguration::AnalyticsEngineInputInfo = AnalyticsEngineInputInfo; } return _p; }

inline tt__EngineConfiguration * soap_new_set_tt__EngineConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration, tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__EngineConfiguration *_p = soap_instantiate_tt__EngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EngineConfiguration::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration; _p->tt__EngineConfiguration::AnalyticsEngineInputInfo = AnalyticsEngineInputInfo; _p->tt__EngineConfiguration::__any = __any; _p->tt__EngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EngineConfiguration(struct soap *soap, tt__EngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (585)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, int, const tt__AnalyticsDeviceEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsDeviceEngineConfigurationExtension *, const char*);

#ifndef soap_write_tt__AnalyticsDeviceEngineConfigurationExtension
#define soap_write_tt__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsDeviceEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsDeviceEngineConfigurationExtension
#define soap_read_tt__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsDeviceEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsDeviceEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceEngineConfigurationExtension * soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsDeviceEngineConfigurationExtension * soap_new_req_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap) { tt__AnalyticsDeviceEngineConfigurationExtension *_p = soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnalyticsDeviceEngineConfigurationExtension * soap_new_set_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__AnalyticsDeviceEngineConfigurationExtension *_p = soap_instantiate_tt__AnalyticsDeviceEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsDeviceEngineConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap *soap, tt__AnalyticsDeviceEngineConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsDeviceEngineConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (584)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, int, const tt__AnalyticsDeviceEngineConfiguration *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, tt__AnalyticsDeviceEngineConfiguration *, const char*);

#ifndef soap_write_tt__AnalyticsDeviceEngineConfiguration
#define soap_write_tt__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsDeviceEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsDeviceEngineConfiguration
#define soap_read_tt__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsDeviceEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsDeviceEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceEngineConfiguration * soap_new_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsDeviceEngineConfiguration * soap_new_req_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, std::vector<tt__EngineConfiguration * >& EngineConfiguration) { tt__AnalyticsDeviceEngineConfiguration *_p = soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsDeviceEngineConfiguration::EngineConfiguration = EngineConfiguration; } return _p; }

inline tt__AnalyticsDeviceEngineConfiguration * soap_new_set_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, std::vector<tt__EngineConfiguration * >& EngineConfiguration, tt__AnalyticsDeviceEngineConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__AnalyticsDeviceEngineConfiguration *_p = soap_instantiate_tt__AnalyticsDeviceEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsDeviceEngineConfiguration::EngineConfiguration = EngineConfiguration; _p->tt__AnalyticsDeviceEngineConfiguration::Extension = Extension; _p->tt__AnalyticsDeviceEngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsDeviceEngineConfiguration(struct soap *soap, tt__AnalyticsDeviceEngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsDeviceEngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (583)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngine(struct soap*, const char*, int, const tt__AnalyticsEngine *, const char*);
SOAP_FMAC3 tt__AnalyticsEngine * SOAP_FMAC4 soap_in_tt__AnalyticsEngine(struct soap*, const char*, tt__AnalyticsEngine *, const char*);

#ifndef soap_write_tt__AnalyticsEngine
#define soap_write_tt__AnalyticsEngine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngine", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngine * SOAP_FMAC4 soap_get_tt__AnalyticsEngine(struct soap*, tt__AnalyticsEngine *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngine
#define soap_read_tt__AnalyticsEngine(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngine(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngine * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngine(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngine * soap_new_tt__AnalyticsEngine(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngine(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngine * soap_new_req_tt__AnalyticsEngine(struct soap *soap, tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration, std::string& Name1, int UseCount1, std::string& token1) { tt__AnalyticsEngine *_p = soap_instantiate_tt__AnalyticsEngine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngine::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AnalyticsEngine * soap_new_set_tt__AnalyticsEngine(struct soap *soap, tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AnalyticsEngine *_p = soap_instantiate_tt__AnalyticsEngine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngine::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->tt__AnalyticsEngine::__any = __any; _p->tt__AnalyticsEngine::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AnalyticsEngine(struct soap *soap, tt__AnalyticsEngine *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngine(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (582)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReplayConfiguration(struct soap*, const char*, int, const tt__ReplayConfiguration *, const char*);
SOAP_FMAC3 tt__ReplayConfiguration * SOAP_FMAC4 soap_in_tt__ReplayConfiguration(struct soap*, const char*, tt__ReplayConfiguration *, const char*);

#ifndef soap_write_tt__ReplayConfiguration
#define soap_write_tt__ReplayConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReplayConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReplayConfiguration * SOAP_FMAC4 soap_get_tt__ReplayConfiguration(struct soap*, tt__ReplayConfiguration *, const char*, const char*);

#ifndef soap_read_tt__ReplayConfiguration
#define soap_read_tt__ReplayConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReplayConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReplayConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReplayConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReplayConfiguration * soap_new_tt__ReplayConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReplayConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__ReplayConfiguration * soap_new_req_tt__ReplayConfiguration(struct soap *soap, LONG64 SessionTimeout) { tt__ReplayConfiguration *_p = soap_instantiate_tt__ReplayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReplayConfiguration::SessionTimeout = SessionTimeout; } return _p; }

inline tt__ReplayConfiguration * soap_new_set_tt__ReplayConfiguration(struct soap *soap, LONG64 SessionTimeout, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ReplayConfiguration *_p = soap_instantiate_tt__ReplayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReplayConfiguration::SessionTimeout = SessionTimeout; _p->tt__ReplayConfiguration::__any = __any; _p->tt__ReplayConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReplayConfiguration(struct soap *soap, tt__ReplayConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReplayConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (581)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetRecordingJobsResponseItem(struct soap*, const char*, int, const tt__GetRecordingJobsResponseItem *, const char*);
SOAP_FMAC3 tt__GetRecordingJobsResponseItem * SOAP_FMAC4 soap_in_tt__GetRecordingJobsResponseItem(struct soap*, const char*, tt__GetRecordingJobsResponseItem *, const char*);

#ifndef soap_write_tt__GetRecordingJobsResponseItem
#define soap_write_tt__GetRecordingJobsResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GetRecordingJobsResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GetRecordingJobsResponseItem * SOAP_FMAC4 soap_get_tt__GetRecordingJobsResponseItem(struct soap*, tt__GetRecordingJobsResponseItem *, const char*, const char*);

#ifndef soap_read_tt__GetRecordingJobsResponseItem
#define soap_read_tt__GetRecordingJobsResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GetRecordingJobsResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GetRecordingJobsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingJobsResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetRecordingJobsResponseItem * soap_new_tt__GetRecordingJobsResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_tt__GetRecordingJobsResponseItem(soap, n, NULL, NULL, NULL); }

inline tt__GetRecordingJobsResponseItem * soap_new_req_tt__GetRecordingJobsResponseItem(struct soap *soap, std::string& JobToken, tt__RecordingJobConfiguration *JobConfiguration) { tt__GetRecordingJobsResponseItem *_p = soap_instantiate_tt__GetRecordingJobsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetRecordingJobsResponseItem::JobToken = JobToken; _p->tt__GetRecordingJobsResponseItem::JobConfiguration = JobConfiguration; } return _p; }

inline tt__GetRecordingJobsResponseItem * soap_new_set_tt__GetRecordingJobsResponseItem(struct soap *soap, std::string& JobToken, tt__RecordingJobConfiguration *JobConfiguration, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__GetRecordingJobsResponseItem *_p = soap_instantiate_tt__GetRecordingJobsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetRecordingJobsResponseItem::JobToken = JobToken; _p->tt__GetRecordingJobsResponseItem::JobConfiguration = JobConfiguration; _p->tt__GetRecordingJobsResponseItem::__any = __any; _p->tt__GetRecordingJobsResponseItem::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GetRecordingJobsResponseItem(struct soap *soap, tt__GetRecordingJobsResponseItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GetRecordingJobsResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (580)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateTrack(struct soap*, const char*, int, const tt__RecordingJobStateTrack *, const char*);
SOAP_FMAC3 tt__RecordingJobStateTrack * SOAP_FMAC4 soap_in_tt__RecordingJobStateTrack(struct soap*, const char*, tt__RecordingJobStateTrack *, const char*);

#ifndef soap_write_tt__RecordingJobStateTrack
#define soap_write_tt__RecordingJobStateTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobStateTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateTrack * SOAP_FMAC4 soap_get_tt__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobStateTrack
#define soap_read_tt__RecordingJobStateTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobStateTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobStateTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateTrack * soap_new_tt__RecordingJobStateTrack(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobStateTrack(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobStateTrack * soap_new_req_tt__RecordingJobStateTrack(struct soap *soap, std::string& SourceTag, std::string& Destination, std::string& State) { tt__RecordingJobStateTrack *_p = soap_instantiate_tt__RecordingJobStateTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateTrack::SourceTag = SourceTag; _p->tt__RecordingJobStateTrack::Destination = Destination; _p->tt__RecordingJobStateTrack::State = State; } return _p; }

inline tt__RecordingJobStateTrack * soap_new_set_tt__RecordingJobStateTrack(struct soap *soap, std::string& SourceTag, std::string& Destination, std::string *Error, std::string& State, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingJobStateTrack *_p = soap_instantiate_tt__RecordingJobStateTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateTrack::SourceTag = SourceTag; _p->tt__RecordingJobStateTrack::Destination = Destination; _p->tt__RecordingJobStateTrack::Error = Error; _p->tt__RecordingJobStateTrack::State = State; _p->tt__RecordingJobStateTrack::__any = __any; _p->tt__RecordingJobStateTrack::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobStateTrack(struct soap *soap, tt__RecordingJobStateTrack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobStateTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (579)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateTracks(struct soap*, const char*, int, const tt__RecordingJobStateTracks *, const char*);
SOAP_FMAC3 tt__RecordingJobStateTracks * SOAP_FMAC4 soap_in_tt__RecordingJobStateTracks(struct soap*, const char*, tt__RecordingJobStateTracks *, const char*);

#ifndef soap_write_tt__RecordingJobStateTracks
#define soap_write_tt__RecordingJobStateTracks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobStateTracks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateTracks * SOAP_FMAC4 soap_get_tt__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobStateTracks
#define soap_read_tt__RecordingJobStateTracks(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobStateTracks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobStateTracks * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateTracks(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateTracks * soap_new_tt__RecordingJobStateTracks(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobStateTracks(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobStateTracks * soap_new_req_tt__RecordingJobStateTracks(struct soap *soap) { tt__RecordingJobStateTracks *_p = soap_instantiate_tt__RecordingJobStateTracks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RecordingJobStateTracks * soap_new_set_tt__RecordingJobStateTracks(struct soap *soap, std::vector<tt__RecordingJobStateTrack * >& Track, char *__anyAttribute, char *__item1) { tt__RecordingJobStateTracks *_p = soap_instantiate_tt__RecordingJobStateTracks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateTracks::Track = Track; _p->tt__RecordingJobStateTracks::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobStateTracks(struct soap *soap, tt__RecordingJobStateTracks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobStateTracks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (578)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateSource(struct soap*, const char*, int, const tt__RecordingJobStateSource *, const char*);
SOAP_FMAC3 tt__RecordingJobStateSource * SOAP_FMAC4 soap_in_tt__RecordingJobStateSource(struct soap*, const char*, tt__RecordingJobStateSource *, const char*);

#ifndef soap_write_tt__RecordingJobStateSource
#define soap_write_tt__RecordingJobStateSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobStateSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateSource * SOAP_FMAC4 soap_get_tt__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobStateSource
#define soap_read_tt__RecordingJobStateSource(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobStateSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobStateSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateSource * soap_new_tt__RecordingJobStateSource(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobStateSource(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobStateSource * soap_new_req_tt__RecordingJobStateSource(struct soap *soap, tt__SourceReference *SourceToken, std::string& State, tt__RecordingJobStateTracks *Tracks) { tt__RecordingJobStateSource *_p = soap_instantiate_tt__RecordingJobStateSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateSource::SourceToken = SourceToken; _p->tt__RecordingJobStateSource::State = State; _p->tt__RecordingJobStateSource::Tracks = Tracks; } return _p; }

inline tt__RecordingJobStateSource * soap_new_set_tt__RecordingJobStateSource(struct soap *soap, tt__SourceReference *SourceToken, std::string& State, tt__RecordingJobStateTracks *Tracks, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingJobStateSource *_p = soap_instantiate_tt__RecordingJobStateSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateSource::SourceToken = SourceToken; _p->tt__RecordingJobStateSource::State = State; _p->tt__RecordingJobStateSource::Tracks = Tracks; _p->tt__RecordingJobStateSource::__any = __any; _p->tt__RecordingJobStateSource::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobStateSource(struct soap *soap, tt__RecordingJobStateSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobStateSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (577)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateInformationExtension(struct soap*, const char*, int, const tt__RecordingJobStateInformationExtension *, const char*);
SOAP_FMAC3 tt__RecordingJobStateInformationExtension * SOAP_FMAC4 soap_in_tt__RecordingJobStateInformationExtension(struct soap*, const char*, tt__RecordingJobStateInformationExtension *, const char*);

#ifndef soap_write_tt__RecordingJobStateInformationExtension
#define soap_write_tt__RecordingJobStateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobStateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateInformationExtension * SOAP_FMAC4 soap_get_tt__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobStateInformationExtension
#define soap_read_tt__RecordingJobStateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobStateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobStateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateInformationExtension * soap_new_tt__RecordingJobStateInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobStateInformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobStateInformationExtension * soap_new_req_tt__RecordingJobStateInformationExtension(struct soap *soap) { tt__RecordingJobStateInformationExtension *_p = soap_instantiate_tt__RecordingJobStateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RecordingJobStateInformationExtension * soap_new_set_tt__RecordingJobStateInformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RecordingJobStateInformationExtension *_p = soap_instantiate_tt__RecordingJobStateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobStateInformationExtension(struct soap *soap, tt__RecordingJobStateInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobStateInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (576)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobStateInformation(struct soap*, const char*, int, const tt__RecordingJobStateInformation *, const char*);
SOAP_FMAC3 tt__RecordingJobStateInformation * SOAP_FMAC4 soap_in_tt__RecordingJobStateInformation(struct soap*, const char*, tt__RecordingJobStateInformation *, const char*);

#ifndef soap_write_tt__RecordingJobStateInformation
#define soap_write_tt__RecordingJobStateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobStateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateInformation * SOAP_FMAC4 soap_get_tt__RecordingJobStateInformation(struct soap*, tt__RecordingJobStateInformation *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobStateInformation
#define soap_read_tt__RecordingJobStateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobStateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobStateInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingJobStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobStateInformation * soap_new_tt__RecordingJobStateInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobStateInformation(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobStateInformation * soap_new_req_tt__RecordingJobStateInformation(struct soap *soap, std::string& RecordingToken, std::string& State) { tt__RecordingJobStateInformation *_p = soap_instantiate_tt__RecordingJobStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateInformation::RecordingToken = RecordingToken; _p->tt__RecordingJobStateInformation::State = State; } return _p; }

inline tt__RecordingJobStateInformation * soap_new_set_tt__RecordingJobStateInformation(struct soap *soap, std::string& RecordingToken, std::string& State, std::vector<tt__RecordingJobStateSource * >& Sources, tt__RecordingJobStateInformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__RecordingJobStateInformation *_p = soap_instantiate_tt__RecordingJobStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobStateInformation::RecordingToken = RecordingToken; _p->tt__RecordingJobStateInformation::State = State; _p->tt__RecordingJobStateInformation::Sources = Sources; _p->tt__RecordingJobStateInformation::Extension = Extension; _p->tt__RecordingJobStateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobStateInformation(struct soap *soap, tt__RecordingJobStateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobStateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (575)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobTrack(struct soap*, const char*, int, const tt__RecordingJobTrack *, const char*);
SOAP_FMAC3 tt__RecordingJobTrack * SOAP_FMAC4 soap_in_tt__RecordingJobTrack(struct soap*, const char*, tt__RecordingJobTrack *, const char*);

#ifndef soap_write_tt__RecordingJobTrack
#define soap_write_tt__RecordingJobTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobTrack * SOAP_FMAC4 soap_get_tt__RecordingJobTrack(struct soap*, tt__RecordingJobTrack *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobTrack
#define soap_read_tt__RecordingJobTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobTrack * SOAP_FMAC2 soap_instantiate_tt__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobTrack * soap_new_tt__RecordingJobTrack(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobTrack(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobTrack * soap_new_req_tt__RecordingJobTrack(struct soap *soap, std::string& SourceTag, std::string& Destination) { tt__RecordingJobTrack *_p = soap_instantiate_tt__RecordingJobTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobTrack::SourceTag = SourceTag; _p->tt__RecordingJobTrack::Destination = Destination; } return _p; }

inline tt__RecordingJobTrack * soap_new_set_tt__RecordingJobTrack(struct soap *soap, std::string& SourceTag, std::string& Destination, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingJobTrack *_p = soap_instantiate_tt__RecordingJobTrack(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobTrack::SourceTag = SourceTag; _p->tt__RecordingJobTrack::Destination = Destination; _p->tt__RecordingJobTrack::__any = __any; _p->tt__RecordingJobTrack::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobTrack(struct soap *soap, tt__RecordingJobTrack *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (574)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobSourceExtension(struct soap*, const char*, int, const tt__RecordingJobSourceExtension *, const char*);
SOAP_FMAC3 tt__RecordingJobSourceExtension * SOAP_FMAC4 soap_in_tt__RecordingJobSourceExtension(struct soap*, const char*, tt__RecordingJobSourceExtension *, const char*);

#ifndef soap_write_tt__RecordingJobSourceExtension
#define soap_write_tt__RecordingJobSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobSourceExtension * SOAP_FMAC4 soap_get_tt__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobSourceExtension
#define soap_read_tt__RecordingJobSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobSourceExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobSourceExtension * soap_new_tt__RecordingJobSourceExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobSourceExtension(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobSourceExtension * soap_new_req_tt__RecordingJobSourceExtension(struct soap *soap) { tt__RecordingJobSourceExtension *_p = soap_instantiate_tt__RecordingJobSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RecordingJobSourceExtension * soap_new_set_tt__RecordingJobSourceExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RecordingJobSourceExtension *_p = soap_instantiate_tt__RecordingJobSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobSourceExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobSourceExtension(struct soap *soap, tt__RecordingJobSourceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobSourceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (573)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobSource(struct soap*, const char*, int, const tt__RecordingJobSource *, const char*);
SOAP_FMAC3 tt__RecordingJobSource * SOAP_FMAC4 soap_in_tt__RecordingJobSource(struct soap*, const char*, tt__RecordingJobSource *, const char*);

#ifndef soap_write_tt__RecordingJobSource
#define soap_write_tt__RecordingJobSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobSource * SOAP_FMAC4 soap_get_tt__RecordingJobSource(struct soap*, tt__RecordingJobSource *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobSource
#define soap_read_tt__RecordingJobSource(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobSource * SOAP_FMAC2 soap_instantiate_tt__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobSource * soap_new_tt__RecordingJobSource(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobSource(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobSource * soap_new_req_tt__RecordingJobSource(struct soap *soap) { tt__RecordingJobSource *_p = soap_instantiate_tt__RecordingJobSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RecordingJobSource * soap_new_set_tt__RecordingJobSource(struct soap *soap, tt__SourceReference *SourceToken, bool *AutoCreateReceiver, std::vector<tt__RecordingJobTrack * >& Tracks, tt__RecordingJobSourceExtension *Extension, char *__anyAttribute, char *__item1) { tt__RecordingJobSource *_p = soap_instantiate_tt__RecordingJobSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobSource::SourceToken = SourceToken; _p->tt__RecordingJobSource::AutoCreateReceiver = AutoCreateReceiver; _p->tt__RecordingJobSource::Tracks = Tracks; _p->tt__RecordingJobSource::Extension = Extension; _p->tt__RecordingJobSource::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobSource(struct soap *soap, tt__RecordingJobSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (572)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobConfigurationExtension(struct soap*, const char*, int, const tt__RecordingJobConfigurationExtension *, const char*);
SOAP_FMAC3 tt__RecordingJobConfigurationExtension * SOAP_FMAC4 soap_in_tt__RecordingJobConfigurationExtension(struct soap*, const char*, tt__RecordingJobConfigurationExtension *, const char*);

#ifndef soap_write_tt__RecordingJobConfigurationExtension
#define soap_write_tt__RecordingJobConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobConfigurationExtension * SOAP_FMAC4 soap_get_tt__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobConfigurationExtension
#define soap_read_tt__RecordingJobConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobConfigurationExtension * soap_new_tt__RecordingJobConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobConfigurationExtension * soap_new_req_tt__RecordingJobConfigurationExtension(struct soap *soap) { tt__RecordingJobConfigurationExtension *_p = soap_instantiate_tt__RecordingJobConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RecordingJobConfigurationExtension * soap_new_set_tt__RecordingJobConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RecordingJobConfigurationExtension *_p = soap_instantiate_tt__RecordingJobConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobConfigurationExtension(struct soap *soap, tt__RecordingJobConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (571)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingJobConfiguration(struct soap*, const char*, int, const tt__RecordingJobConfiguration *, const char*);
SOAP_FMAC3 tt__RecordingJobConfiguration * SOAP_FMAC4 soap_in_tt__RecordingJobConfiguration(struct soap*, const char*, tt__RecordingJobConfiguration *, const char*);

#ifndef soap_write_tt__RecordingJobConfiguration
#define soap_write_tt__RecordingJobConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingJobConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobConfiguration * SOAP_FMAC4 soap_get_tt__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration *, const char*, const char*);

#ifndef soap_read_tt__RecordingJobConfiguration
#define soap_read_tt__RecordingJobConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingJobConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingJobConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingJobConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingJobConfiguration * soap_new_tt__RecordingJobConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingJobConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__RecordingJobConfiguration * soap_new_req_tt__RecordingJobConfiguration(struct soap *soap, std::string& RecordingToken, std::string& Mode, int Priority) { tt__RecordingJobConfiguration *_p = soap_instantiate_tt__RecordingJobConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobConfiguration::RecordingToken = RecordingToken; _p->tt__RecordingJobConfiguration::Mode = Mode; _p->tt__RecordingJobConfiguration::Priority = Priority; } return _p; }

inline tt__RecordingJobConfiguration * soap_new_set_tt__RecordingJobConfiguration(struct soap *soap, std::string& RecordingToken, std::string& Mode, int Priority, std::vector<tt__RecordingJobSource * >& Source, tt__RecordingJobConfigurationExtension *Extension, std::string& ScheduleToken, char *__anyAttribute, char *__item1) { tt__RecordingJobConfiguration *_p = soap_instantiate_tt__RecordingJobConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingJobConfiguration::RecordingToken = RecordingToken; _p->tt__RecordingJobConfiguration::Mode = Mode; _p->tt__RecordingJobConfiguration::Priority = Priority; _p->tt__RecordingJobConfiguration::Source = Source; _p->tt__RecordingJobConfiguration::Extension = Extension; _p->tt__RecordingJobConfiguration::ScheduleToken = ScheduleToken; _p->tt__RecordingJobConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingJobConfiguration(struct soap *soap, tt__RecordingJobConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingJobConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (570)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetTracksResponseItem(struct soap*, const char*, int, const tt__GetTracksResponseItem *, const char*);
SOAP_FMAC3 tt__GetTracksResponseItem * SOAP_FMAC4 soap_in_tt__GetTracksResponseItem(struct soap*, const char*, tt__GetTracksResponseItem *, const char*);

#ifndef soap_write_tt__GetTracksResponseItem
#define soap_write_tt__GetTracksResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GetTracksResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GetTracksResponseItem * SOAP_FMAC4 soap_get_tt__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem *, const char*, const char*);

#ifndef soap_read_tt__GetTracksResponseItem
#define soap_read_tt__GetTracksResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GetTracksResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GetTracksResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetTracksResponseItem * soap_new_tt__GetTracksResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_tt__GetTracksResponseItem(soap, n, NULL, NULL, NULL); }

inline tt__GetTracksResponseItem * soap_new_req_tt__GetTracksResponseItem(struct soap *soap, std::string& TrackToken, tt__TrackConfiguration *Configuration) { tt__GetTracksResponseItem *_p = soap_instantiate_tt__GetTracksResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetTracksResponseItem::TrackToken = TrackToken; _p->tt__GetTracksResponseItem::Configuration = Configuration; } return _p; }

inline tt__GetTracksResponseItem * soap_new_set_tt__GetTracksResponseItem(struct soap *soap, std::string& TrackToken, tt__TrackConfiguration *Configuration, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__GetTracksResponseItem *_p = soap_instantiate_tt__GetTracksResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetTracksResponseItem::TrackToken = TrackToken; _p->tt__GetTracksResponseItem::Configuration = Configuration; _p->tt__GetTracksResponseItem::__any = __any; _p->tt__GetTracksResponseItem::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GetTracksResponseItem(struct soap *soap, tt__GetTracksResponseItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GetTracksResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (569)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetTracksResponseList(struct soap*, const char*, int, const tt__GetTracksResponseList *, const char*);
SOAP_FMAC3 tt__GetTracksResponseList * SOAP_FMAC4 soap_in_tt__GetTracksResponseList(struct soap*, const char*, tt__GetTracksResponseList *, const char*);

#ifndef soap_write_tt__GetTracksResponseList
#define soap_write_tt__GetTracksResponseList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GetTracksResponseList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GetTracksResponseList * SOAP_FMAC4 soap_get_tt__GetTracksResponseList(struct soap*, tt__GetTracksResponseList *, const char*, const char*);

#ifndef soap_read_tt__GetTracksResponseList
#define soap_read_tt__GetTracksResponseList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GetTracksResponseList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GetTracksResponseList * SOAP_FMAC2 soap_instantiate_tt__GetTracksResponseList(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetTracksResponseList * soap_new_tt__GetTracksResponseList(struct soap *soap, int n = -1) { return soap_instantiate_tt__GetTracksResponseList(soap, n, NULL, NULL, NULL); }

inline tt__GetTracksResponseList * soap_new_req_tt__GetTracksResponseList(struct soap *soap) { tt__GetTracksResponseList *_p = soap_instantiate_tt__GetTracksResponseList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__GetTracksResponseList * soap_new_set_tt__GetTracksResponseList(struct soap *soap, std::vector<tt__GetTracksResponseItem * >& Track, char *__anyAttribute, char *__item1) { tt__GetTracksResponseList *_p = soap_instantiate_tt__GetTracksResponseList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetTracksResponseList::Track = Track; _p->tt__GetTracksResponseList::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GetTracksResponseList(struct soap *soap, tt__GetTracksResponseList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GetTracksResponseList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (568)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GetRecordingsResponseItem(struct soap*, const char*, int, const tt__GetRecordingsResponseItem *, const char*);
SOAP_FMAC3 tt__GetRecordingsResponseItem * SOAP_FMAC4 soap_in_tt__GetRecordingsResponseItem(struct soap*, const char*, tt__GetRecordingsResponseItem *, const char*);

#ifndef soap_write_tt__GetRecordingsResponseItem
#define soap_write_tt__GetRecordingsResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GetRecordingsResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GetRecordingsResponseItem * SOAP_FMAC4 soap_get_tt__GetRecordingsResponseItem(struct soap*, tt__GetRecordingsResponseItem *, const char*, const char*);

#ifndef soap_read_tt__GetRecordingsResponseItem
#define soap_read_tt__GetRecordingsResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GetRecordingsResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GetRecordingsResponseItem * SOAP_FMAC2 soap_instantiate_tt__GetRecordingsResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline tt__GetRecordingsResponseItem * soap_new_tt__GetRecordingsResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_tt__GetRecordingsResponseItem(soap, n, NULL, NULL, NULL); }

inline tt__GetRecordingsResponseItem * soap_new_req_tt__GetRecordingsResponseItem(struct soap *soap, std::string& RecordingToken, tt__RecordingConfiguration *Configuration, tt__GetTracksResponseList *Tracks) { tt__GetRecordingsResponseItem *_p = soap_instantiate_tt__GetRecordingsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetRecordingsResponseItem::RecordingToken = RecordingToken; _p->tt__GetRecordingsResponseItem::Configuration = Configuration; _p->tt__GetRecordingsResponseItem::Tracks = Tracks; } return _p; }

inline tt__GetRecordingsResponseItem * soap_new_set_tt__GetRecordingsResponseItem(struct soap *soap, std::string& RecordingToken, tt__RecordingConfiguration *Configuration, tt__GetTracksResponseList *Tracks, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__GetRecordingsResponseItem *_p = soap_instantiate_tt__GetRecordingsResponseItem(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GetRecordingsResponseItem::RecordingToken = RecordingToken; _p->tt__GetRecordingsResponseItem::Configuration = Configuration; _p->tt__GetRecordingsResponseItem::Tracks = Tracks; _p->tt__GetRecordingsResponseItem::__any = __any; _p->tt__GetRecordingsResponseItem::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GetRecordingsResponseItem(struct soap *soap, tt__GetRecordingsResponseItem *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GetRecordingsResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (567)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackConfiguration(struct soap*, const char*, int, const tt__TrackConfiguration *, const char*);
SOAP_FMAC3 tt__TrackConfiguration * SOAP_FMAC4 soap_in_tt__TrackConfiguration(struct soap*, const char*, tt__TrackConfiguration *, const char*);

#ifndef soap_write_tt__TrackConfiguration
#define soap_write_tt__TrackConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TrackConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackConfiguration * SOAP_FMAC4 soap_get_tt__TrackConfiguration(struct soap*, tt__TrackConfiguration *, const char*, const char*);

#ifndef soap_read_tt__TrackConfiguration
#define soap_read_tt__TrackConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TrackConfiguration * SOAP_FMAC2 soap_instantiate_tt__TrackConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackConfiguration * soap_new_tt__TrackConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__TrackConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__TrackConfiguration * soap_new_req_tt__TrackConfiguration(struct soap *soap, enum tt__TrackType TrackType, std::string& Description) { tt__TrackConfiguration *_p = soap_instantiate_tt__TrackConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackConfiguration::TrackType = TrackType; _p->tt__TrackConfiguration::Description = Description; } return _p; }

inline tt__TrackConfiguration * soap_new_set_tt__TrackConfiguration(struct soap *soap, enum tt__TrackType TrackType, std::string& Description, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__TrackConfiguration *_p = soap_instantiate_tt__TrackConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackConfiguration::TrackType = TrackType; _p->tt__TrackConfiguration::Description = Description; _p->tt__TrackConfiguration::__any = __any; _p->tt__TrackConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TrackConfiguration(struct soap *soap, tt__TrackConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TrackConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (566)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingConfiguration(struct soap*, const char*, int, const tt__RecordingConfiguration *, const char*);
SOAP_FMAC3 tt__RecordingConfiguration * SOAP_FMAC4 soap_in_tt__RecordingConfiguration(struct soap*, const char*, tt__RecordingConfiguration *, const char*);

#ifndef soap_write_tt__RecordingConfiguration
#define soap_write_tt__RecordingConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingConfiguration * SOAP_FMAC4 soap_get_tt__RecordingConfiguration(struct soap*, tt__RecordingConfiguration *, const char*, const char*);

#ifndef soap_read_tt__RecordingConfiguration
#define soap_read_tt__RecordingConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingConfiguration * SOAP_FMAC2 soap_instantiate_tt__RecordingConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingConfiguration * soap_new_tt__RecordingConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__RecordingConfiguration * soap_new_req_tt__RecordingConfiguration(struct soap *soap, tt__RecordingSourceInformation *Source, std::string& Content, LONG64 MaximumRetentionTime) { tt__RecordingConfiguration *_p = soap_instantiate_tt__RecordingConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingConfiguration::Source = Source; _p->tt__RecordingConfiguration::Content = Content; _p->tt__RecordingConfiguration::MaximumRetentionTime = MaximumRetentionTime; } return _p; }

inline tt__RecordingConfiguration * soap_new_set_tt__RecordingConfiguration(struct soap *soap, tt__RecordingSourceInformation *Source, std::string& Content, LONG64 MaximumRetentionTime, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingConfiguration *_p = soap_instantiate_tt__RecordingConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingConfiguration::Source = Source; _p->tt__RecordingConfiguration::Content = Content; _p->tt__RecordingConfiguration::MaximumRetentionTime = MaximumRetentionTime; _p->tt__RecordingConfiguration::__any = __any; _p->tt__RecordingConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingConfiguration(struct soap *soap, tt__RecordingConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (565)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataAttributes(struct soap*, const char*, int, const tt__MetadataAttributes *, const char*);
SOAP_FMAC3 tt__MetadataAttributes * SOAP_FMAC4 soap_in_tt__MetadataAttributes(struct soap*, const char*, tt__MetadataAttributes *, const char*);

#ifndef soap_write_tt__MetadataAttributes
#define soap_write_tt__MetadataAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataAttributes * SOAP_FMAC4 soap_get_tt__MetadataAttributes(struct soap*, tt__MetadataAttributes *, const char*, const char*);

#ifndef soap_read_tt__MetadataAttributes
#define soap_read_tt__MetadataAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataAttributes * SOAP_FMAC2 soap_instantiate_tt__MetadataAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataAttributes * soap_new_tt__MetadataAttributes(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataAttributes(soap, n, NULL, NULL, NULL); }

inline tt__MetadataAttributes * soap_new_req_tt__MetadataAttributes(struct soap *soap, bool CanContainPTZ, bool CanContainAnalytics, bool CanContainNotifications) { tt__MetadataAttributes *_p = soap_instantiate_tt__MetadataAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataAttributes::CanContainPTZ = CanContainPTZ; _p->tt__MetadataAttributes::CanContainAnalytics = CanContainAnalytics; _p->tt__MetadataAttributes::CanContainNotifications = CanContainNotifications; } return _p; }

inline tt__MetadataAttributes * soap_new_set_tt__MetadataAttributes(struct soap *soap, bool CanContainPTZ, bool CanContainAnalytics, bool CanContainNotifications, std::vector<char * >& __any, std::string *PtzSpaces, char *__anyAttribute, char *__item1) { tt__MetadataAttributes *_p = soap_instantiate_tt__MetadataAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataAttributes::CanContainPTZ = CanContainPTZ; _p->tt__MetadataAttributes::CanContainAnalytics = CanContainAnalytics; _p->tt__MetadataAttributes::CanContainNotifications = CanContainNotifications; _p->tt__MetadataAttributes::__any = __any; _p->tt__MetadataAttributes::PtzSpaces = PtzSpaces; _p->tt__MetadataAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataAttributes(struct soap *soap, tt__MetadataAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (564)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioAttributes(struct soap*, const char*, int, const tt__AudioAttributes *, const char*);
SOAP_FMAC3 tt__AudioAttributes * SOAP_FMAC4 soap_in_tt__AudioAttributes(struct soap*, const char*, tt__AudioAttributes *, const char*);

#ifndef soap_write_tt__AudioAttributes
#define soap_write_tt__AudioAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioAttributes * SOAP_FMAC4 soap_get_tt__AudioAttributes(struct soap*, tt__AudioAttributes *, const char*, const char*);

#ifndef soap_read_tt__AudioAttributes
#define soap_read_tt__AudioAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioAttributes * SOAP_FMAC2 soap_instantiate_tt__AudioAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioAttributes * soap_new_tt__AudioAttributes(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioAttributes(soap, n, NULL, NULL, NULL); }

inline tt__AudioAttributes * soap_new_req_tt__AudioAttributes(struct soap *soap, std::string& Encoding, int Samplerate) { tt__AudioAttributes *_p = soap_instantiate_tt__AudioAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioAttributes::Encoding = Encoding; _p->tt__AudioAttributes::Samplerate = Samplerate; } return _p; }

inline tt__AudioAttributes * soap_new_set_tt__AudioAttributes(struct soap *soap, int *Bitrate, std::string& Encoding, int Samplerate, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AudioAttributes *_p = soap_instantiate_tt__AudioAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioAttributes::Bitrate = Bitrate; _p->tt__AudioAttributes::Encoding = Encoding; _p->tt__AudioAttributes::Samplerate = Samplerate; _p->tt__AudioAttributes::__any = __any; _p->tt__AudioAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioAttributes(struct soap *soap, tt__AudioAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (563)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAttributes(struct soap*, const char*, int, const tt__VideoAttributes *, const char*);
SOAP_FMAC3 tt__VideoAttributes * SOAP_FMAC4 soap_in_tt__VideoAttributes(struct soap*, const char*, tt__VideoAttributes *, const char*);

#ifndef soap_write_tt__VideoAttributes
#define soap_write_tt__VideoAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoAttributes * SOAP_FMAC4 soap_get_tt__VideoAttributes(struct soap*, tt__VideoAttributes *, const char*, const char*);

#ifndef soap_read_tt__VideoAttributes
#define soap_read_tt__VideoAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoAttributes * SOAP_FMAC2 soap_instantiate_tt__VideoAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAttributes * soap_new_tt__VideoAttributes(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoAttributes(soap, n, NULL, NULL, NULL); }

inline tt__VideoAttributes * soap_new_req_tt__VideoAttributes(struct soap *soap, int Width, int Height, std::string& Encoding, float Framerate) { tt__VideoAttributes *_p = soap_instantiate_tt__VideoAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoAttributes::Width = Width; _p->tt__VideoAttributes::Height = Height; _p->tt__VideoAttributes::Encoding = Encoding; _p->tt__VideoAttributes::Framerate = Framerate; } return _p; }

inline tt__VideoAttributes * soap_new_set_tt__VideoAttributes(struct soap *soap, int *Bitrate, int Width, int Height, std::string& Encoding, float Framerate, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__VideoAttributes *_p = soap_instantiate_tt__VideoAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoAttributes::Bitrate = Bitrate; _p->tt__VideoAttributes::Width = Width; _p->tt__VideoAttributes::Height = Height; _p->tt__VideoAttributes::Encoding = Encoding; _p->tt__VideoAttributes::Framerate = Framerate; _p->tt__VideoAttributes::__any = __any; _p->tt__VideoAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoAttributes(struct soap *soap, tt__VideoAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (562)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackAttributesExtension(struct soap*, const char*, int, const tt__TrackAttributesExtension *, const char*);
SOAP_FMAC3 tt__TrackAttributesExtension * SOAP_FMAC4 soap_in_tt__TrackAttributesExtension(struct soap*, const char*, tt__TrackAttributesExtension *, const char*);

#ifndef soap_write_tt__TrackAttributesExtension
#define soap_write_tt__TrackAttributesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TrackAttributesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackAttributesExtension * SOAP_FMAC4 soap_get_tt__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension *, const char*, const char*);

#ifndef soap_read_tt__TrackAttributesExtension
#define soap_read_tt__TrackAttributesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackAttributesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TrackAttributesExtension * SOAP_FMAC2 soap_instantiate_tt__TrackAttributesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackAttributesExtension * soap_new_tt__TrackAttributesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__TrackAttributesExtension(soap, n, NULL, NULL, NULL); }

inline tt__TrackAttributesExtension * soap_new_req_tt__TrackAttributesExtension(struct soap *soap) { tt__TrackAttributesExtension *_p = soap_instantiate_tt__TrackAttributesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__TrackAttributesExtension * soap_new_set_tt__TrackAttributesExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__TrackAttributesExtension *_p = soap_instantiate_tt__TrackAttributesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackAttributesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TrackAttributesExtension(struct soap *soap, tt__TrackAttributesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TrackAttributesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (561)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackAttributes(struct soap*, const char*, int, const tt__TrackAttributes *, const char*);
SOAP_FMAC3 tt__TrackAttributes * SOAP_FMAC4 soap_in_tt__TrackAttributes(struct soap*, const char*, tt__TrackAttributes *, const char*);

#ifndef soap_write_tt__TrackAttributes
#define soap_write_tt__TrackAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TrackAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackAttributes * SOAP_FMAC4 soap_get_tt__TrackAttributes(struct soap*, tt__TrackAttributes *, const char*, const char*);

#ifndef soap_read_tt__TrackAttributes
#define soap_read_tt__TrackAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TrackAttributes * SOAP_FMAC2 soap_instantiate_tt__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackAttributes * soap_new_tt__TrackAttributes(struct soap *soap, int n = -1) { return soap_instantiate_tt__TrackAttributes(soap, n, NULL, NULL, NULL); }

inline tt__TrackAttributes * soap_new_req_tt__TrackAttributes(struct soap *soap, tt__TrackInformation *TrackInformation) { tt__TrackAttributes *_p = soap_instantiate_tt__TrackAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackAttributes::TrackInformation = TrackInformation; } return _p; }

inline tt__TrackAttributes * soap_new_set_tt__TrackAttributes(struct soap *soap, tt__TrackInformation *TrackInformation, tt__VideoAttributes *VideoAttributes, tt__AudioAttributes *AudioAttributes, tt__MetadataAttributes *MetadataAttributes, tt__TrackAttributesExtension *Extension, char *__anyAttribute, char *__item1) { tt__TrackAttributes *_p = soap_instantiate_tt__TrackAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackAttributes::TrackInformation = TrackInformation; _p->tt__TrackAttributes::VideoAttributes = VideoAttributes; _p->tt__TrackAttributes::AudioAttributes = AudioAttributes; _p->tt__TrackAttributes::MetadataAttributes = MetadataAttributes; _p->tt__TrackAttributes::Extension = Extension; _p->tt__TrackAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TrackAttributes(struct soap *soap, tt__TrackAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TrackAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (560)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaAttributes(struct soap*, const char*, int, const tt__MediaAttributes *, const char*);
SOAP_FMAC3 tt__MediaAttributes * SOAP_FMAC4 soap_in_tt__MediaAttributes(struct soap*, const char*, tt__MediaAttributes *, const char*);

#ifndef soap_write_tt__MediaAttributes
#define soap_write_tt__MediaAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MediaAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MediaAttributes * SOAP_FMAC4 soap_get_tt__MediaAttributes(struct soap*, tt__MediaAttributes *, const char*, const char*);

#ifndef soap_read_tt__MediaAttributes
#define soap_read_tt__MediaAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MediaAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MediaAttributes * SOAP_FMAC2 soap_instantiate_tt__MediaAttributes(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaAttributes * soap_new_tt__MediaAttributes(struct soap *soap, int n = -1) { return soap_instantiate_tt__MediaAttributes(soap, n, NULL, NULL, NULL); }

inline tt__MediaAttributes * soap_new_req_tt__MediaAttributes(struct soap *soap, std::string& RecordingToken, time_t From, time_t Until) { tt__MediaAttributes *_p = soap_instantiate_tt__MediaAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaAttributes::RecordingToken = RecordingToken; _p->tt__MediaAttributes::From = From; _p->tt__MediaAttributes::Until = Until; } return _p; }

inline tt__MediaAttributes * soap_new_set_tt__MediaAttributes(struct soap *soap, std::string& RecordingToken, std::vector<tt__TrackAttributes * >& TrackAttributes, time_t From, time_t Until, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__MediaAttributes *_p = soap_instantiate_tt__MediaAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaAttributes::RecordingToken = RecordingToken; _p->tt__MediaAttributes::TrackAttributes = TrackAttributes; _p->tt__MediaAttributes::From = From; _p->tt__MediaAttributes::Until = Until; _p->tt__MediaAttributes::__any = __any; _p->tt__MediaAttributes::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MediaAttributes(struct soap *soap, tt__MediaAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MediaAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (559)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TrackInformation(struct soap*, const char*, int, const tt__TrackInformation *, const char*);
SOAP_FMAC3 tt__TrackInformation * SOAP_FMAC4 soap_in_tt__TrackInformation(struct soap*, const char*, tt__TrackInformation *, const char*);

#ifndef soap_write_tt__TrackInformation
#define soap_write_tt__TrackInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TrackInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackInformation * SOAP_FMAC4 soap_get_tt__TrackInformation(struct soap*, tt__TrackInformation *, const char*, const char*);

#ifndef soap_read_tt__TrackInformation
#define soap_read_tt__TrackInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TrackInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TrackInformation * SOAP_FMAC2 soap_instantiate_tt__TrackInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__TrackInformation * soap_new_tt__TrackInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__TrackInformation(soap, n, NULL, NULL, NULL); }

inline tt__TrackInformation * soap_new_req_tt__TrackInformation(struct soap *soap, std::string& TrackToken, enum tt__TrackType TrackType, std::string& Description, time_t DataFrom, time_t DataTo) { tt__TrackInformation *_p = soap_instantiate_tt__TrackInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackInformation::TrackToken = TrackToken; _p->tt__TrackInformation::TrackType = TrackType; _p->tt__TrackInformation::Description = Description; _p->tt__TrackInformation::DataFrom = DataFrom; _p->tt__TrackInformation::DataTo = DataTo; } return _p; }

inline tt__TrackInformation * soap_new_set_tt__TrackInformation(struct soap *soap, std::string& TrackToken, enum tt__TrackType TrackType, std::string& Description, time_t DataFrom, time_t DataTo, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__TrackInformation *_p = soap_instantiate_tt__TrackInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TrackInformation::TrackToken = TrackToken; _p->tt__TrackInformation::TrackType = TrackType; _p->tt__TrackInformation::Description = Description; _p->tt__TrackInformation::DataFrom = DataFrom; _p->tt__TrackInformation::DataTo = DataTo; _p->tt__TrackInformation::__any = __any; _p->tt__TrackInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TrackInformation(struct soap *soap, tt__TrackInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TrackInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (558)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingSourceInformation(struct soap*, const char*, int, const tt__RecordingSourceInformation *, const char*);
SOAP_FMAC3 tt__RecordingSourceInformation * SOAP_FMAC4 soap_in_tt__RecordingSourceInformation(struct soap*, const char*, tt__RecordingSourceInformation *, const char*);

#ifndef soap_write_tt__RecordingSourceInformation
#define soap_write_tt__RecordingSourceInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingSourceInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingSourceInformation * SOAP_FMAC4 soap_get_tt__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation *, const char*, const char*);

#ifndef soap_read_tt__RecordingSourceInformation
#define soap_read_tt__RecordingSourceInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingSourceInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingSourceInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingSourceInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingSourceInformation * soap_new_tt__RecordingSourceInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingSourceInformation(soap, n, NULL, NULL, NULL); }

inline tt__RecordingSourceInformation * soap_new_req_tt__RecordingSourceInformation(struct soap *soap, std::string& SourceId, std::string& Name, std::string& Location, std::string& Description, std::string& Address) { tt__RecordingSourceInformation *_p = soap_instantiate_tt__RecordingSourceInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingSourceInformation::SourceId = SourceId; _p->tt__RecordingSourceInformation::Name = Name; _p->tt__RecordingSourceInformation::Location = Location; _p->tt__RecordingSourceInformation::Description = Description; _p->tt__RecordingSourceInformation::Address = Address; } return _p; }

inline tt__RecordingSourceInformation * soap_new_set_tt__RecordingSourceInformation(struct soap *soap, std::string& SourceId, std::string& Name, std::string& Location, std::string& Description, std::string& Address, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingSourceInformation *_p = soap_instantiate_tt__RecordingSourceInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingSourceInformation::SourceId = SourceId; _p->tt__RecordingSourceInformation::Name = Name; _p->tt__RecordingSourceInformation::Location = Location; _p->tt__RecordingSourceInformation::Description = Description; _p->tt__RecordingSourceInformation::Address = Address; _p->tt__RecordingSourceInformation::__any = __any; _p->tt__RecordingSourceInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingSourceInformation(struct soap *soap, tt__RecordingSourceInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingSourceInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (557)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingInformation(struct soap*, const char*, int, const tt__RecordingInformation *, const char*);
SOAP_FMAC3 tt__RecordingInformation * SOAP_FMAC4 soap_in_tt__RecordingInformation(struct soap*, const char*, tt__RecordingInformation *, const char*);

#ifndef soap_write_tt__RecordingInformation
#define soap_write_tt__RecordingInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingInformation * SOAP_FMAC4 soap_get_tt__RecordingInformation(struct soap*, tt__RecordingInformation *, const char*, const char*);

#ifndef soap_read_tt__RecordingInformation
#define soap_read_tt__RecordingInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingInformation * SOAP_FMAC2 soap_instantiate_tt__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingInformation * soap_new_tt__RecordingInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingInformation(soap, n, NULL, NULL, NULL); }

inline tt__RecordingInformation * soap_new_req_tt__RecordingInformation(struct soap *soap, std::string& RecordingToken, tt__RecordingSourceInformation *Source, std::string& Content, enum tt__RecordingStatus RecordingStatus) { tt__RecordingInformation *_p = soap_instantiate_tt__RecordingInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingInformation::RecordingToken = RecordingToken; _p->tt__RecordingInformation::Source = Source; _p->tt__RecordingInformation::Content = Content; _p->tt__RecordingInformation::RecordingStatus = RecordingStatus; } return _p; }

inline tt__RecordingInformation * soap_new_set_tt__RecordingInformation(struct soap *soap, std::string& RecordingToken, tt__RecordingSourceInformation *Source, time_t *EarliestRecording, time_t *LatestRecording, std::string& Content, std::vector<tt__TrackInformation * >& Track, enum tt__RecordingStatus RecordingStatus, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingInformation *_p = soap_instantiate_tt__RecordingInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingInformation::RecordingToken = RecordingToken; _p->tt__RecordingInformation::Source = Source; _p->tt__RecordingInformation::EarliestRecording = EarliestRecording; _p->tt__RecordingInformation::LatestRecording = LatestRecording; _p->tt__RecordingInformation::Content = Content; _p->tt__RecordingInformation::Track = Track; _p->tt__RecordingInformation::RecordingStatus = RecordingStatus; _p->tt__RecordingInformation::__any = __any; _p->tt__RecordingInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingInformation(struct soap *soap, tt__RecordingInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (556)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindMetadataResult(struct soap*, const char*, int, const tt__FindMetadataResult *, const char*);
SOAP_FMAC3 tt__FindMetadataResult * SOAP_FMAC4 soap_in_tt__FindMetadataResult(struct soap*, const char*, tt__FindMetadataResult *, const char*);

#ifndef soap_write_tt__FindMetadataResult
#define soap_write_tt__FindMetadataResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindMetadataResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindMetadataResult * SOAP_FMAC4 soap_get_tt__FindMetadataResult(struct soap*, tt__FindMetadataResult *, const char*, const char*);

#ifndef soap_read_tt__FindMetadataResult
#define soap_read_tt__FindMetadataResult(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindMetadataResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindMetadataResult * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindMetadataResult * soap_new_tt__FindMetadataResult(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindMetadataResult(soap, n, NULL, NULL, NULL); }

inline tt__FindMetadataResult * soap_new_req_tt__FindMetadataResult(struct soap *soap, std::string& RecordingToken, std::string& TrackToken, time_t Time) { tt__FindMetadataResult *_p = soap_instantiate_tt__FindMetadataResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindMetadataResult::RecordingToken = RecordingToken; _p->tt__FindMetadataResult::TrackToken = TrackToken; _p->tt__FindMetadataResult::Time = Time; } return _p; }

inline tt__FindMetadataResult * soap_new_set_tt__FindMetadataResult(struct soap *soap, std::string& RecordingToken, std::string& TrackToken, time_t Time, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__FindMetadataResult *_p = soap_instantiate_tt__FindMetadataResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindMetadataResult::RecordingToken = RecordingToken; _p->tt__FindMetadataResult::TrackToken = TrackToken; _p->tt__FindMetadataResult::Time = Time; _p->tt__FindMetadataResult::__any = __any; _p->tt__FindMetadataResult::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindMetadataResult(struct soap *soap, tt__FindMetadataResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindMetadataResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (555)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindMetadataResultList(struct soap*, const char*, int, const tt__FindMetadataResultList *, const char*);
SOAP_FMAC3 tt__FindMetadataResultList * SOAP_FMAC4 soap_in_tt__FindMetadataResultList(struct soap*, const char*, tt__FindMetadataResultList *, const char*);

#ifndef soap_write_tt__FindMetadataResultList
#define soap_write_tt__FindMetadataResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindMetadataResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindMetadataResultList * SOAP_FMAC4 soap_get_tt__FindMetadataResultList(struct soap*, tt__FindMetadataResultList *, const char*, const char*);

#ifndef soap_read_tt__FindMetadataResultList
#define soap_read_tt__FindMetadataResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindMetadataResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindMetadataResultList * SOAP_FMAC2 soap_instantiate_tt__FindMetadataResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindMetadataResultList * soap_new_tt__FindMetadataResultList(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindMetadataResultList(soap, n, NULL, NULL, NULL); }

inline tt__FindMetadataResultList * soap_new_req_tt__FindMetadataResultList(struct soap *soap, enum tt__SearchState SearchState) { tt__FindMetadataResultList *_p = soap_instantiate_tt__FindMetadataResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindMetadataResultList::SearchState = SearchState; } return _p; }

inline tt__FindMetadataResultList * soap_new_set_tt__FindMetadataResultList(struct soap *soap, enum tt__SearchState SearchState, std::vector<tt__FindMetadataResult * >& Result, char *__item1) { tt__FindMetadataResultList *_p = soap_instantiate_tt__FindMetadataResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindMetadataResultList::SearchState = SearchState; _p->tt__FindMetadataResultList::Result = Result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindMetadataResultList(struct soap *soap, tt__FindMetadataResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindMetadataResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (554)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindPTZPositionResult(struct soap*, const char*, int, const tt__FindPTZPositionResult *, const char*);
SOAP_FMAC3 tt__FindPTZPositionResult * SOAP_FMAC4 soap_in_tt__FindPTZPositionResult(struct soap*, const char*, tt__FindPTZPositionResult *, const char*);

#ifndef soap_write_tt__FindPTZPositionResult
#define soap_write_tt__FindPTZPositionResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindPTZPositionResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindPTZPositionResult * SOAP_FMAC4 soap_get_tt__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult *, const char*, const char*);

#ifndef soap_read_tt__FindPTZPositionResult
#define soap_read_tt__FindPTZPositionResult(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindPTZPositionResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindPTZPositionResult * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindPTZPositionResult * soap_new_tt__FindPTZPositionResult(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindPTZPositionResult(soap, n, NULL, NULL, NULL); }

inline tt__FindPTZPositionResult * soap_new_req_tt__FindPTZPositionResult(struct soap *soap, std::string& RecordingToken, std::string& TrackToken, time_t Time, tt__PTZVector *Position) { tt__FindPTZPositionResult *_p = soap_instantiate_tt__FindPTZPositionResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindPTZPositionResult::RecordingToken = RecordingToken; _p->tt__FindPTZPositionResult::TrackToken = TrackToken; _p->tt__FindPTZPositionResult::Time = Time; _p->tt__FindPTZPositionResult::Position = Position; } return _p; }

inline tt__FindPTZPositionResult * soap_new_set_tt__FindPTZPositionResult(struct soap *soap, std::string& RecordingToken, std::string& TrackToken, time_t Time, tt__PTZVector *Position, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__FindPTZPositionResult *_p = soap_instantiate_tt__FindPTZPositionResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindPTZPositionResult::RecordingToken = RecordingToken; _p->tt__FindPTZPositionResult::TrackToken = TrackToken; _p->tt__FindPTZPositionResult::Time = Time; _p->tt__FindPTZPositionResult::Position = Position; _p->tt__FindPTZPositionResult::__any = __any; _p->tt__FindPTZPositionResult::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindPTZPositionResult(struct soap *soap, tt__FindPTZPositionResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindPTZPositionResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (553)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindPTZPositionResultList(struct soap*, const char*, int, const tt__FindPTZPositionResultList *, const char*);
SOAP_FMAC3 tt__FindPTZPositionResultList * SOAP_FMAC4 soap_in_tt__FindPTZPositionResultList(struct soap*, const char*, tt__FindPTZPositionResultList *, const char*);

#ifndef soap_write_tt__FindPTZPositionResultList
#define soap_write_tt__FindPTZPositionResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindPTZPositionResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindPTZPositionResultList * SOAP_FMAC4 soap_get_tt__FindPTZPositionResultList(struct soap*, tt__FindPTZPositionResultList *, const char*, const char*);

#ifndef soap_read_tt__FindPTZPositionResultList
#define soap_read_tt__FindPTZPositionResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindPTZPositionResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindPTZPositionResultList * SOAP_FMAC2 soap_instantiate_tt__FindPTZPositionResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindPTZPositionResultList * soap_new_tt__FindPTZPositionResultList(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindPTZPositionResultList(soap, n, NULL, NULL, NULL); }

inline tt__FindPTZPositionResultList * soap_new_req_tt__FindPTZPositionResultList(struct soap *soap, enum tt__SearchState SearchState) { tt__FindPTZPositionResultList *_p = soap_instantiate_tt__FindPTZPositionResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindPTZPositionResultList::SearchState = SearchState; } return _p; }

inline tt__FindPTZPositionResultList * soap_new_set_tt__FindPTZPositionResultList(struct soap *soap, enum tt__SearchState SearchState, std::vector<tt__FindPTZPositionResult * >& Result, char *__item1) { tt__FindPTZPositionResultList *_p = soap_instantiate_tt__FindPTZPositionResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindPTZPositionResultList::SearchState = SearchState; _p->tt__FindPTZPositionResultList::Result = Result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindPTZPositionResultList(struct soap *soap, tt__FindPTZPositionResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindPTZPositionResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (552)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindEventResult(struct soap*, const char*, int, const tt__FindEventResult *, const char*);
SOAP_FMAC3 tt__FindEventResult * SOAP_FMAC4 soap_in_tt__FindEventResult(struct soap*, const char*, tt__FindEventResult *, const char*);

#ifndef soap_write_tt__FindEventResult
#define soap_write_tt__FindEventResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindEventResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindEventResult * SOAP_FMAC4 soap_get_tt__FindEventResult(struct soap*, tt__FindEventResult *, const char*, const char*);

#ifndef soap_read_tt__FindEventResult
#define soap_read_tt__FindEventResult(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindEventResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindEventResult * SOAP_FMAC2 soap_instantiate_tt__FindEventResult(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindEventResult * soap_new_tt__FindEventResult(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindEventResult(soap, n, NULL, NULL, NULL); }

inline tt__FindEventResult * soap_new_req_tt__FindEventResult(struct soap *soap, std::string& RecordingToken, std::string& TrackToken, time_t Time, wsnt__NotificationMessageHolderType *Event, bool StartStateEvent) { tt__FindEventResult *_p = soap_instantiate_tt__FindEventResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindEventResult::RecordingToken = RecordingToken; _p->tt__FindEventResult::TrackToken = TrackToken; _p->tt__FindEventResult::Time = Time; _p->tt__FindEventResult::Event = Event; _p->tt__FindEventResult::StartStateEvent = StartStateEvent; } return _p; }

inline tt__FindEventResult * soap_new_set_tt__FindEventResult(struct soap *soap, std::string& RecordingToken, std::string& TrackToken, time_t Time, wsnt__NotificationMessageHolderType *Event, bool StartStateEvent, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__FindEventResult *_p = soap_instantiate_tt__FindEventResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindEventResult::RecordingToken = RecordingToken; _p->tt__FindEventResult::TrackToken = TrackToken; _p->tt__FindEventResult::Time = Time; _p->tt__FindEventResult::Event = Event; _p->tt__FindEventResult::StartStateEvent = StartStateEvent; _p->tt__FindEventResult::__any = __any; _p->tt__FindEventResult::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindEventResult(struct soap *soap, tt__FindEventResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindEventResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (551)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindEventResultList(struct soap*, const char*, int, const tt__FindEventResultList *, const char*);
SOAP_FMAC3 tt__FindEventResultList * SOAP_FMAC4 soap_in_tt__FindEventResultList(struct soap*, const char*, tt__FindEventResultList *, const char*);

#ifndef soap_write_tt__FindEventResultList
#define soap_write_tt__FindEventResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindEventResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindEventResultList * SOAP_FMAC4 soap_get_tt__FindEventResultList(struct soap*, tt__FindEventResultList *, const char*, const char*);

#ifndef soap_read_tt__FindEventResultList
#define soap_read_tt__FindEventResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindEventResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindEventResultList * SOAP_FMAC2 soap_instantiate_tt__FindEventResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindEventResultList * soap_new_tt__FindEventResultList(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindEventResultList(soap, n, NULL, NULL, NULL); }

inline tt__FindEventResultList * soap_new_req_tt__FindEventResultList(struct soap *soap, enum tt__SearchState SearchState) { tt__FindEventResultList *_p = soap_instantiate_tt__FindEventResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindEventResultList::SearchState = SearchState; } return _p; }

inline tt__FindEventResultList * soap_new_set_tt__FindEventResultList(struct soap *soap, enum tt__SearchState SearchState, std::vector<tt__FindEventResult * >& Result, char *__item1) { tt__FindEventResultList *_p = soap_instantiate_tt__FindEventResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindEventResultList::SearchState = SearchState; _p->tt__FindEventResultList::Result = Result; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindEventResultList(struct soap *soap, tt__FindEventResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindEventResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (550)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FindRecordingResultList(struct soap*, const char*, int, const tt__FindRecordingResultList *, const char*);
SOAP_FMAC3 tt__FindRecordingResultList * SOAP_FMAC4 soap_in_tt__FindRecordingResultList(struct soap*, const char*, tt__FindRecordingResultList *, const char*);

#ifndef soap_write_tt__FindRecordingResultList
#define soap_write_tt__FindRecordingResultList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FindRecordingResultList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindRecordingResultList * SOAP_FMAC4 soap_get_tt__FindRecordingResultList(struct soap*, tt__FindRecordingResultList *, const char*, const char*);

#ifndef soap_read_tt__FindRecordingResultList
#define soap_read_tt__FindRecordingResultList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FindRecordingResultList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FindRecordingResultList * SOAP_FMAC2 soap_instantiate_tt__FindRecordingResultList(struct soap*, int, const char*, const char*, size_t*);

inline tt__FindRecordingResultList * soap_new_tt__FindRecordingResultList(struct soap *soap, int n = -1) { return soap_instantiate_tt__FindRecordingResultList(soap, n, NULL, NULL, NULL); }

inline tt__FindRecordingResultList * soap_new_req_tt__FindRecordingResultList(struct soap *soap, enum tt__SearchState SearchState) { tt__FindRecordingResultList *_p = soap_instantiate_tt__FindRecordingResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindRecordingResultList::SearchState = SearchState; } return _p; }

inline tt__FindRecordingResultList * soap_new_set_tt__FindRecordingResultList(struct soap *soap, enum tt__SearchState SearchState, std::vector<tt__RecordingInformation * >& RecordingInformation, char *__item1) { tt__FindRecordingResultList *_p = soap_instantiate_tt__FindRecordingResultList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FindRecordingResultList::SearchState = SearchState; _p->tt__FindRecordingResultList::RecordingInformation = RecordingInformation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FindRecordingResultList(struct soap *soap, tt__FindRecordingResultList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FindRecordingResultList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (549)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataFilter(struct soap*, const char*, int, const tt__MetadataFilter *, const char*);
SOAP_FMAC3 tt__MetadataFilter * SOAP_FMAC4 soap_in_tt__MetadataFilter(struct soap*, const char*, tt__MetadataFilter *, const char*);

#ifndef soap_write_tt__MetadataFilter
#define soap_write_tt__MetadataFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataFilter * SOAP_FMAC4 soap_get_tt__MetadataFilter(struct soap*, tt__MetadataFilter *, const char*, const char*);

#ifndef soap_read_tt__MetadataFilter
#define soap_read_tt__MetadataFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataFilter * SOAP_FMAC2 soap_instantiate_tt__MetadataFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataFilter * soap_new_tt__MetadataFilter(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataFilter(soap, n, NULL, NULL, NULL); }

inline tt__MetadataFilter * soap_new_req_tt__MetadataFilter(struct soap *soap, std::string& MetadataStreamFilter) { tt__MetadataFilter *_p = soap_instantiate_tt__MetadataFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataFilter::MetadataStreamFilter = MetadataStreamFilter; } return _p; }

inline tt__MetadataFilter * soap_new_set_tt__MetadataFilter(struct soap *soap, std::string& MetadataStreamFilter, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__MetadataFilter *_p = soap_instantiate_tt__MetadataFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataFilter::MetadataStreamFilter = MetadataStreamFilter; _p->tt__MetadataFilter::__any = __any; _p->tt__MetadataFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataFilter(struct soap *soap, tt__MetadataFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (548)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPositionFilter(struct soap*, const char*, int, const tt__PTZPositionFilter *, const char*);
SOAP_FMAC3 tt__PTZPositionFilter * SOAP_FMAC4 soap_in_tt__PTZPositionFilter(struct soap*, const char*, tt__PTZPositionFilter *, const char*);

#ifndef soap_write_tt__PTZPositionFilter
#define soap_write_tt__PTZPositionFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPositionFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPositionFilter * SOAP_FMAC4 soap_get_tt__PTZPositionFilter(struct soap*, tt__PTZPositionFilter *, const char*, const char*);

#ifndef soap_read_tt__PTZPositionFilter
#define soap_read_tt__PTZPositionFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPositionFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPositionFilter * SOAP_FMAC2 soap_instantiate_tt__PTZPositionFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPositionFilter * soap_new_tt__PTZPositionFilter(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPositionFilter(soap, n, NULL, NULL, NULL); }

inline tt__PTZPositionFilter * soap_new_req_tt__PTZPositionFilter(struct soap *soap, tt__PTZVector *MinPosition, tt__PTZVector *MaxPosition, bool EnterOrExit) { tt__PTZPositionFilter *_p = soap_instantiate_tt__PTZPositionFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPositionFilter::MinPosition = MinPosition; _p->tt__PTZPositionFilter::MaxPosition = MaxPosition; _p->tt__PTZPositionFilter::EnterOrExit = EnterOrExit; } return _p; }

inline tt__PTZPositionFilter * soap_new_set_tt__PTZPositionFilter(struct soap *soap, tt__PTZVector *MinPosition, tt__PTZVector *MaxPosition, bool EnterOrExit, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTZPositionFilter *_p = soap_instantiate_tt__PTZPositionFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPositionFilter::MinPosition = MinPosition; _p->tt__PTZPositionFilter::MaxPosition = MaxPosition; _p->tt__PTZPositionFilter::EnterOrExit = EnterOrExit; _p->tt__PTZPositionFilter::__any = __any; _p->tt__PTZPositionFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPositionFilter(struct soap *soap, tt__PTZPositionFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPositionFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (547)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventFilter(struct soap*, const char*, int, const tt__EventFilter *, const char*);
SOAP_FMAC3 tt__EventFilter * SOAP_FMAC4 soap_in_tt__EventFilter(struct soap*, const char*, tt__EventFilter *, const char*);

#ifndef soap_write_tt__EventFilter
#define soap_write_tt__EventFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EventFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EventFilter * SOAP_FMAC4 soap_get_tt__EventFilter(struct soap*, tt__EventFilter *, const char*, const char*);

#ifndef soap_read_tt__EventFilter
#define soap_read_tt__EventFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EventFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EventFilter * SOAP_FMAC2 soap_instantiate_tt__EventFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventFilter * soap_new_tt__EventFilter(struct soap *soap, int n = -1) { return soap_instantiate_tt__EventFilter(soap, n, NULL, NULL, NULL); }

inline tt__EventFilter * soap_new_req_tt__EventFilter(struct soap *soap) { tt__EventFilter *_p = soap_instantiate_tt__EventFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__EventFilter * soap_new_set_tt__EventFilter(struct soap *soap, char *__anyAttribute, std::vector<char * >& __any1, char *__item2) { tt__EventFilter *_p = soap_instantiate_tt__EventFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EventFilter::__anyAttribute = __anyAttribute; _p->wsnt__FilterType::__any = __any1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__EventFilter(struct soap *soap, tt__EventFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EventFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (546)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchScopeExtension(struct soap*, const char*, int, const tt__SearchScopeExtension *, const char*);
SOAP_FMAC3 tt__SearchScopeExtension * SOAP_FMAC4 soap_in_tt__SearchScopeExtension(struct soap*, const char*, tt__SearchScopeExtension *, const char*);

#ifndef soap_write_tt__SearchScopeExtension
#define soap_write_tt__SearchScopeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SearchScopeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SearchScopeExtension * SOAP_FMAC4 soap_get_tt__SearchScopeExtension(struct soap*, tt__SearchScopeExtension *, const char*, const char*);

#ifndef soap_read_tt__SearchScopeExtension
#define soap_read_tt__SearchScopeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SearchScopeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SearchScopeExtension * SOAP_FMAC2 soap_instantiate_tt__SearchScopeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchScopeExtension * soap_new_tt__SearchScopeExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SearchScopeExtension(soap, n, NULL, NULL, NULL); }

inline tt__SearchScopeExtension * soap_new_req_tt__SearchScopeExtension(struct soap *soap) { tt__SearchScopeExtension *_p = soap_instantiate_tt__SearchScopeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SearchScopeExtension * soap_new_set_tt__SearchScopeExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__SearchScopeExtension *_p = soap_instantiate_tt__SearchScopeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SearchScopeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SearchScopeExtension(struct soap *soap, tt__SearchScopeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SearchScopeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (545)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchScope(struct soap*, const char*, int, const tt__SearchScope *, const char*);
SOAP_FMAC3 tt__SearchScope * SOAP_FMAC4 soap_in_tt__SearchScope(struct soap*, const char*, tt__SearchScope *, const char*);

#ifndef soap_write_tt__SearchScope
#define soap_write_tt__SearchScope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SearchScope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SearchScope * SOAP_FMAC4 soap_get_tt__SearchScope(struct soap*, tt__SearchScope *, const char*, const char*);

#ifndef soap_read_tt__SearchScope
#define soap_read_tt__SearchScope(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SearchScope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SearchScope * SOAP_FMAC2 soap_instantiate_tt__SearchScope(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchScope * soap_new_tt__SearchScope(struct soap *soap, int n = -1) { return soap_instantiate_tt__SearchScope(soap, n, NULL, NULL, NULL); }

inline tt__SearchScope * soap_new_req_tt__SearchScope(struct soap *soap) { tt__SearchScope *_p = soap_instantiate_tt__SearchScope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SearchScope * soap_new_set_tt__SearchScope(struct soap *soap, std::vector<tt__SourceReference * >& IncludedSources, std::vector<std::string >& IncludedRecordings, std::string *RecordingInformationFilter, tt__SearchScopeExtension *Extension, char *__anyAttribute, char *__item1) { tt__SearchScope *_p = soap_instantiate_tt__SearchScope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SearchScope::IncludedSources = IncludedSources; _p->tt__SearchScope::IncludedRecordings = IncludedRecordings; _p->tt__SearchScope::RecordingInformationFilter = RecordingInformationFilter; _p->tt__SearchScope::Extension = Extension; _p->tt__SearchScope::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SearchScope(struct soap *soap, tt__SearchScope *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SearchScope(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (544)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingSummary(struct soap*, const char*, int, const tt__RecordingSummary *, const char*);
SOAP_FMAC3 tt__RecordingSummary * SOAP_FMAC4 soap_in_tt__RecordingSummary(struct soap*, const char*, tt__RecordingSummary *, const char*);

#ifndef soap_write_tt__RecordingSummary
#define soap_write_tt__RecordingSummary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingSummary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingSummary * SOAP_FMAC4 soap_get_tt__RecordingSummary(struct soap*, tt__RecordingSummary *, const char*, const char*);

#ifndef soap_read_tt__RecordingSummary
#define soap_read_tt__RecordingSummary(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingSummary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingSummary * SOAP_FMAC2 soap_instantiate_tt__RecordingSummary(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingSummary * soap_new_tt__RecordingSummary(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingSummary(soap, n, NULL, NULL, NULL); }

inline tt__RecordingSummary * soap_new_req_tt__RecordingSummary(struct soap *soap, time_t DataFrom, time_t DataUntil, int NumberRecordings) { tt__RecordingSummary *_p = soap_instantiate_tt__RecordingSummary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingSummary::DataFrom = DataFrom; _p->tt__RecordingSummary::DataUntil = DataUntil; _p->tt__RecordingSummary::NumberRecordings = NumberRecordings; } return _p; }

inline tt__RecordingSummary * soap_new_set_tt__RecordingSummary(struct soap *soap, time_t DataFrom, time_t DataUntil, int NumberRecordings, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingSummary *_p = soap_instantiate_tt__RecordingSummary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingSummary::DataFrom = DataFrom; _p->tt__RecordingSummary::DataUntil = DataUntil; _p->tt__RecordingSummary::NumberRecordings = NumberRecordings; _p->tt__RecordingSummary::__any = __any; _p->tt__RecordingSummary::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingSummary(struct soap *soap, tt__RecordingSummary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingSummary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (543)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DateTimeRange(struct soap*, const char*, int, const tt__DateTimeRange *, const char*);
SOAP_FMAC3 tt__DateTimeRange * SOAP_FMAC4 soap_in_tt__DateTimeRange(struct soap*, const char*, tt__DateTimeRange *, const char*);

#ifndef soap_write_tt__DateTimeRange
#define soap_write_tt__DateTimeRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DateTimeRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DateTimeRange * SOAP_FMAC4 soap_get_tt__DateTimeRange(struct soap*, tt__DateTimeRange *, const char*, const char*);

#ifndef soap_read_tt__DateTimeRange
#define soap_read_tt__DateTimeRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DateTimeRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DateTimeRange * SOAP_FMAC2 soap_instantiate_tt__DateTimeRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DateTimeRange * soap_new_tt__DateTimeRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__DateTimeRange(soap, n, NULL, NULL, NULL); }

inline tt__DateTimeRange * soap_new_req_tt__DateTimeRange(struct soap *soap, time_t From, time_t Until) { tt__DateTimeRange *_p = soap_instantiate_tt__DateTimeRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DateTimeRange::From = From; _p->tt__DateTimeRange::Until = Until; } return _p; }

inline tt__DateTimeRange * soap_new_set_tt__DateTimeRange(struct soap *soap, time_t From, time_t Until, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__DateTimeRange *_p = soap_instantiate_tt__DateTimeRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DateTimeRange::From = From; _p->tt__DateTimeRange::Until = Until; _p->tt__DateTimeRange::__any = __any; _p->tt__DateTimeRange::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DateTimeRange(struct soap *soap, tt__DateTimeRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DateTimeRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (542)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SourceReference(struct soap*, const char*, int, const tt__SourceReference *, const char*);
SOAP_FMAC3 tt__SourceReference * SOAP_FMAC4 soap_in_tt__SourceReference(struct soap*, const char*, tt__SourceReference *, const char*);

#ifndef soap_write_tt__SourceReference
#define soap_write_tt__SourceReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SourceReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SourceReference * SOAP_FMAC4 soap_get_tt__SourceReference(struct soap*, tt__SourceReference *, const char*, const char*);

#ifndef soap_read_tt__SourceReference
#define soap_read_tt__SourceReference(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SourceReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SourceReference * SOAP_FMAC2 soap_instantiate_tt__SourceReference(struct soap*, int, const char*, const char*, size_t*);

inline tt__SourceReference * soap_new_tt__SourceReference(struct soap *soap, int n = -1) { return soap_instantiate_tt__SourceReference(soap, n, NULL, NULL, NULL); }

inline tt__SourceReference * soap_new_req_tt__SourceReference(struct soap *soap, std::string& Token) { tt__SourceReference *_p = soap_instantiate_tt__SourceReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SourceReference::Token = Token; } return _p; }

inline tt__SourceReference * soap_new_set_tt__SourceReference(struct soap *soap, std::string& Token, std::vector<char * >& __any, std::string& Type, char *__anyAttribute, char *__item1) { tt__SourceReference *_p = soap_instantiate_tt__SourceReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SourceReference::Token = Token; _p->tt__SourceReference::__any = __any; _p->tt__SourceReference::Type = Type; _p->tt__SourceReference::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SourceReference(struct soap *soap, tt__SourceReference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SourceReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (541)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverStateInformation(struct soap*, const char*, int, const tt__ReceiverStateInformation *, const char*);
SOAP_FMAC3 tt__ReceiverStateInformation * SOAP_FMAC4 soap_in_tt__ReceiverStateInformation(struct soap*, const char*, tt__ReceiverStateInformation *, const char*);

#ifndef soap_write_tt__ReceiverStateInformation
#define soap_write_tt__ReceiverStateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReceiverStateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverStateInformation * SOAP_FMAC4 soap_get_tt__ReceiverStateInformation(struct soap*, tt__ReceiverStateInformation *, const char*, const char*);

#ifndef soap_read_tt__ReceiverStateInformation
#define soap_read_tt__ReceiverStateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverStateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReceiverStateInformation * SOAP_FMAC2 soap_instantiate_tt__ReceiverStateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverStateInformation * soap_new_tt__ReceiverStateInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReceiverStateInformation(soap, n, NULL, NULL, NULL); }

inline tt__ReceiverStateInformation * soap_new_req_tt__ReceiverStateInformation(struct soap *soap, enum tt__ReceiverState State, bool AutoCreated) { tt__ReceiverStateInformation *_p = soap_instantiate_tt__ReceiverStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverStateInformation::State = State; _p->tt__ReceiverStateInformation::AutoCreated = AutoCreated; } return _p; }

inline tt__ReceiverStateInformation * soap_new_set_tt__ReceiverStateInformation(struct soap *soap, enum tt__ReceiverState State, bool AutoCreated, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ReceiverStateInformation *_p = soap_instantiate_tt__ReceiverStateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverStateInformation::State = State; _p->tt__ReceiverStateInformation::AutoCreated = AutoCreated; _p->tt__ReceiverStateInformation::__any = __any; _p->tt__ReceiverStateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReceiverStateInformation(struct soap *soap, tt__ReceiverStateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReceiverStateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (540)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverConfiguration(struct soap*, const char*, int, const tt__ReceiverConfiguration *, const char*);
SOAP_FMAC3 tt__ReceiverConfiguration * SOAP_FMAC4 soap_in_tt__ReceiverConfiguration(struct soap*, const char*, tt__ReceiverConfiguration *, const char*);

#ifndef soap_write_tt__ReceiverConfiguration
#define soap_write_tt__ReceiverConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReceiverConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverConfiguration * SOAP_FMAC4 soap_get_tt__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration *, const char*, const char*);

#ifndef soap_read_tt__ReceiverConfiguration
#define soap_read_tt__ReceiverConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReceiverConfiguration * SOAP_FMAC2 soap_instantiate_tt__ReceiverConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverConfiguration * soap_new_tt__ReceiverConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReceiverConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__ReceiverConfiguration * soap_new_req_tt__ReceiverConfiguration(struct soap *soap, enum tt__ReceiverMode Mode, std::string& MediaUri, tt__StreamSetup *StreamSetup) { tt__ReceiverConfiguration *_p = soap_instantiate_tt__ReceiverConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverConfiguration::Mode = Mode; _p->tt__ReceiverConfiguration::MediaUri = MediaUri; _p->tt__ReceiverConfiguration::StreamSetup = StreamSetup; } return _p; }

inline tt__ReceiverConfiguration * soap_new_set_tt__ReceiverConfiguration(struct soap *soap, enum tt__ReceiverMode Mode, std::string& MediaUri, tt__StreamSetup *StreamSetup, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ReceiverConfiguration *_p = soap_instantiate_tt__ReceiverConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverConfiguration::Mode = Mode; _p->tt__ReceiverConfiguration::MediaUri = MediaUri; _p->tt__ReceiverConfiguration::StreamSetup = StreamSetup; _p->tt__ReceiverConfiguration::__any = __any; _p->tt__ReceiverConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReceiverConfiguration(struct soap *soap, tt__ReceiverConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReceiverConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (539)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Receiver(struct soap*, const char*, int, const tt__Receiver *, const char*);
SOAP_FMAC3 tt__Receiver * SOAP_FMAC4 soap_in_tt__Receiver(struct soap*, const char*, tt__Receiver *, const char*);

#ifndef soap_write_tt__Receiver
#define soap_write_tt__Receiver(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Receiver", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Receiver * SOAP_FMAC4 soap_get_tt__Receiver(struct soap*, tt__Receiver *, const char*, const char*);

#ifndef soap_read_tt__Receiver
#define soap_read_tt__Receiver(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Receiver(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Receiver * SOAP_FMAC2 soap_instantiate_tt__Receiver(struct soap*, int, const char*, const char*, size_t*);

inline tt__Receiver * soap_new_tt__Receiver(struct soap *soap, int n = -1) { return soap_instantiate_tt__Receiver(soap, n, NULL, NULL, NULL); }

inline tt__Receiver * soap_new_req_tt__Receiver(struct soap *soap, std::string& Token, tt__ReceiverConfiguration *Configuration) { tt__Receiver *_p = soap_instantiate_tt__Receiver(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Receiver::Token = Token; _p->tt__Receiver::Configuration = Configuration; } return _p; }

inline tt__Receiver * soap_new_set_tt__Receiver(struct soap *soap, std::string& Token, tt__ReceiverConfiguration *Configuration, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Receiver *_p = soap_instantiate_tt__Receiver(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Receiver::Token = Token; _p->tt__Receiver::Configuration = Configuration; _p->tt__Receiver::__any = __any; _p->tt__Receiver::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Receiver(struct soap *soap, tt__Receiver *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Receiver(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (538)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneOptionExtension(struct soap*, const char*, int, const tt__PaneOptionExtension *, const char*);
SOAP_FMAC3 tt__PaneOptionExtension * SOAP_FMAC4 soap_in_tt__PaneOptionExtension(struct soap*, const char*, tt__PaneOptionExtension *, const char*);

#ifndef soap_write_tt__PaneOptionExtension
#define soap_write_tt__PaneOptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PaneOptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneOptionExtension * SOAP_FMAC4 soap_get_tt__PaneOptionExtension(struct soap*, tt__PaneOptionExtension *, const char*, const char*);

#ifndef soap_read_tt__PaneOptionExtension
#define soap_read_tt__PaneOptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PaneOptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PaneOptionExtension * SOAP_FMAC2 soap_instantiate_tt__PaneOptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneOptionExtension * soap_new_tt__PaneOptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PaneOptionExtension(soap, n, NULL, NULL, NULL); }

inline tt__PaneOptionExtension * soap_new_req_tt__PaneOptionExtension(struct soap *soap) { tt__PaneOptionExtension *_p = soap_instantiate_tt__PaneOptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PaneOptionExtension * soap_new_set_tt__PaneOptionExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PaneOptionExtension *_p = soap_instantiate_tt__PaneOptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneOptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PaneOptionExtension(struct soap *soap, tt__PaneOptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PaneOptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (537)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneLayoutOptions(struct soap*, const char*, int, const tt__PaneLayoutOptions *, const char*);
SOAP_FMAC3 tt__PaneLayoutOptions * SOAP_FMAC4 soap_in_tt__PaneLayoutOptions(struct soap*, const char*, tt__PaneLayoutOptions *, const char*);

#ifndef soap_write_tt__PaneLayoutOptions
#define soap_write_tt__PaneLayoutOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PaneLayoutOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneLayoutOptions * SOAP_FMAC4 soap_get_tt__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions *, const char*, const char*);

#ifndef soap_read_tt__PaneLayoutOptions
#define soap_read_tt__PaneLayoutOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PaneLayoutOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PaneLayoutOptions * SOAP_FMAC2 soap_instantiate_tt__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneLayoutOptions * soap_new_tt__PaneLayoutOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PaneLayoutOptions(soap, n, NULL, NULL, NULL); }

inline tt__PaneLayoutOptions * soap_new_req_tt__PaneLayoutOptions(struct soap *soap, std::vector<tt__Rectangle * >& Area) { tt__PaneLayoutOptions *_p = soap_instantiate_tt__PaneLayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneLayoutOptions::Area = Area; } return _p; }

inline tt__PaneLayoutOptions * soap_new_set_tt__PaneLayoutOptions(struct soap *soap, std::vector<tt__Rectangle * >& Area, tt__PaneOptionExtension *Extension, char *__anyAttribute, char *__item1) { tt__PaneLayoutOptions *_p = soap_instantiate_tt__PaneLayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneLayoutOptions::Area = Area; _p->tt__PaneLayoutOptions::Extension = Extension; _p->tt__PaneLayoutOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PaneLayoutOptions(struct soap *soap, tt__PaneLayoutOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PaneLayoutOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (536)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LayoutOptionsExtension(struct soap*, const char*, int, const tt__LayoutOptionsExtension *, const char*);
SOAP_FMAC3 tt__LayoutOptionsExtension * SOAP_FMAC4 soap_in_tt__LayoutOptionsExtension(struct soap*, const char*, tt__LayoutOptionsExtension *, const char*);

#ifndef soap_write_tt__LayoutOptionsExtension
#define soap_write_tt__LayoutOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LayoutOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LayoutOptionsExtension * SOAP_FMAC4 soap_get_tt__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__LayoutOptionsExtension
#define soap_read_tt__LayoutOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LayoutOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LayoutOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__LayoutOptionsExtension * soap_new_tt__LayoutOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__LayoutOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__LayoutOptionsExtension * soap_new_req_tt__LayoutOptionsExtension(struct soap *soap) { tt__LayoutOptionsExtension *_p = soap_instantiate_tt__LayoutOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__LayoutOptionsExtension * soap_new_set_tt__LayoutOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__LayoutOptionsExtension *_p = soap_instantiate_tt__LayoutOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LayoutOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LayoutOptionsExtension(struct soap *soap, tt__LayoutOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LayoutOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (535)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LayoutOptions(struct soap*, const char*, int, const tt__LayoutOptions *, const char*);
SOAP_FMAC3 tt__LayoutOptions * SOAP_FMAC4 soap_in_tt__LayoutOptions(struct soap*, const char*, tt__LayoutOptions *, const char*);

#ifndef soap_write_tt__LayoutOptions
#define soap_write_tt__LayoutOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LayoutOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LayoutOptions * SOAP_FMAC4 soap_get_tt__LayoutOptions(struct soap*, tt__LayoutOptions *, const char*, const char*);

#ifndef soap_read_tt__LayoutOptions
#define soap_read_tt__LayoutOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LayoutOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LayoutOptions * SOAP_FMAC2 soap_instantiate_tt__LayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__LayoutOptions * soap_new_tt__LayoutOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__LayoutOptions(soap, n, NULL, NULL, NULL); }

inline tt__LayoutOptions * soap_new_req_tt__LayoutOptions(struct soap *soap, std::vector<tt__PaneLayoutOptions * >& PaneLayoutOptions) { tt__LayoutOptions *_p = soap_instantiate_tt__LayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LayoutOptions::PaneLayoutOptions = PaneLayoutOptions; } return _p; }

inline tt__LayoutOptions * soap_new_set_tt__LayoutOptions(struct soap *soap, std::vector<tt__PaneLayoutOptions * >& PaneLayoutOptions, tt__LayoutOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__LayoutOptions *_p = soap_instantiate_tt__LayoutOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LayoutOptions::PaneLayoutOptions = PaneLayoutOptions; _p->tt__LayoutOptions::Extension = Extension; _p->tt__LayoutOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LayoutOptions(struct soap *soap, tt__LayoutOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LayoutOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (534)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CodingCapabilities(struct soap*, const char*, int, const tt__CodingCapabilities *, const char*);
SOAP_FMAC3 tt__CodingCapabilities * SOAP_FMAC4 soap_in_tt__CodingCapabilities(struct soap*, const char*, tt__CodingCapabilities *, const char*);

#ifndef soap_write_tt__CodingCapabilities
#define soap_write_tt__CodingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CodingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CodingCapabilities * SOAP_FMAC4 soap_get_tt__CodingCapabilities(struct soap*, tt__CodingCapabilities *, const char*, const char*);

#ifndef soap_read_tt__CodingCapabilities
#define soap_read_tt__CodingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CodingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CodingCapabilities * SOAP_FMAC2 soap_instantiate_tt__CodingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__CodingCapabilities * soap_new_tt__CodingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__CodingCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__CodingCapabilities * soap_new_req_tt__CodingCapabilities(struct soap *soap, tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities) { tt__CodingCapabilities *_p = soap_instantiate_tt__CodingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CodingCapabilities::VideoDecodingCapabilities = VideoDecodingCapabilities; } return _p; }

inline tt__CodingCapabilities * soap_new_set_tt__CodingCapabilities(struct soap *soap, tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities, tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities, tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__CodingCapabilities *_p = soap_instantiate_tt__CodingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CodingCapabilities::AudioEncodingCapabilities = AudioEncodingCapabilities; _p->tt__CodingCapabilities::AudioDecodingCapabilities = AudioDecodingCapabilities; _p->tt__CodingCapabilities::VideoDecodingCapabilities = VideoDecodingCapabilities; _p->tt__CodingCapabilities::__any = __any; _p->tt__CodingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CodingCapabilities(struct soap *soap, tt__CodingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CodingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (533)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LayoutExtension(struct soap*, const char*, int, const tt__LayoutExtension *, const char*);
SOAP_FMAC3 tt__LayoutExtension * SOAP_FMAC4 soap_in_tt__LayoutExtension(struct soap*, const char*, tt__LayoutExtension *, const char*);

#ifndef soap_write_tt__LayoutExtension
#define soap_write_tt__LayoutExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LayoutExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LayoutExtension * SOAP_FMAC4 soap_get_tt__LayoutExtension(struct soap*, tt__LayoutExtension *, const char*, const char*);

#ifndef soap_read_tt__LayoutExtension
#define soap_read_tt__LayoutExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LayoutExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LayoutExtension * SOAP_FMAC2 soap_instantiate_tt__LayoutExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__LayoutExtension * soap_new_tt__LayoutExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__LayoutExtension(soap, n, NULL, NULL, NULL); }

inline tt__LayoutExtension * soap_new_req_tt__LayoutExtension(struct soap *soap) { tt__LayoutExtension *_p = soap_instantiate_tt__LayoutExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__LayoutExtension * soap_new_set_tt__LayoutExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__LayoutExtension *_p = soap_instantiate_tt__LayoutExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LayoutExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LayoutExtension(struct soap *soap, tt__LayoutExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LayoutExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (532)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Layout(struct soap*, const char*, int, const tt__Layout *, const char*);
SOAP_FMAC3 tt__Layout * SOAP_FMAC4 soap_in_tt__Layout(struct soap*, const char*, tt__Layout *, const char*);

#ifndef soap_write_tt__Layout
#define soap_write_tt__Layout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Layout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Layout * SOAP_FMAC4 soap_get_tt__Layout(struct soap*, tt__Layout *, const char*, const char*);

#ifndef soap_read_tt__Layout
#define soap_read_tt__Layout(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Layout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Layout * SOAP_FMAC2 soap_instantiate_tt__Layout(struct soap*, int, const char*, const char*, size_t*);

inline tt__Layout * soap_new_tt__Layout(struct soap *soap, int n = -1) { return soap_instantiate_tt__Layout(soap, n, NULL, NULL, NULL); }

inline tt__Layout * soap_new_req_tt__Layout(struct soap *soap, std::vector<tt__PaneLayout * >& PaneLayout) { tt__Layout *_p = soap_instantiate_tt__Layout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Layout::PaneLayout = PaneLayout; } return _p; }

inline tt__Layout * soap_new_set_tt__Layout(struct soap *soap, std::vector<tt__PaneLayout * >& PaneLayout, tt__LayoutExtension *Extension, char *__anyAttribute, char *__item1) { tt__Layout *_p = soap_instantiate_tt__Layout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Layout::PaneLayout = PaneLayout; _p->tt__Layout::Extension = Extension; _p->tt__Layout::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Layout(struct soap *soap, tt__Layout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Layout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (531)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneLayout(struct soap*, const char*, int, const tt__PaneLayout *, const char*);
SOAP_FMAC3 tt__PaneLayout * SOAP_FMAC4 soap_in_tt__PaneLayout(struct soap*, const char*, tt__PaneLayout *, const char*);

#ifndef soap_write_tt__PaneLayout
#define soap_write_tt__PaneLayout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PaneLayout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneLayout * SOAP_FMAC4 soap_get_tt__PaneLayout(struct soap*, tt__PaneLayout *, const char*, const char*);

#ifndef soap_read_tt__PaneLayout
#define soap_read_tt__PaneLayout(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PaneLayout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PaneLayout * SOAP_FMAC2 soap_instantiate_tt__PaneLayout(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneLayout * soap_new_tt__PaneLayout(struct soap *soap, int n = -1) { return soap_instantiate_tt__PaneLayout(soap, n, NULL, NULL, NULL); }

inline tt__PaneLayout * soap_new_req_tt__PaneLayout(struct soap *soap, std::string& Pane, tt__Rectangle *Area) { tt__PaneLayout *_p = soap_instantiate_tt__PaneLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneLayout::Pane = Pane; _p->tt__PaneLayout::Area = Area; } return _p; }

inline tt__PaneLayout * soap_new_set_tt__PaneLayout(struct soap *soap, std::string& Pane, tt__Rectangle *Area, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PaneLayout *_p = soap_instantiate_tt__PaneLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneLayout::Pane = Pane; _p->tt__PaneLayout::Area = Area; _p->tt__PaneLayout::__any = __any; _p->tt__PaneLayout::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PaneLayout(struct soap *soap, tt__PaneLayout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PaneLayout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (530)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PaneConfiguration(struct soap*, const char*, int, const tt__PaneConfiguration *, const char*);
SOAP_FMAC3 tt__PaneConfiguration * SOAP_FMAC4 soap_in_tt__PaneConfiguration(struct soap*, const char*, tt__PaneConfiguration *, const char*);

#ifndef soap_write_tt__PaneConfiguration
#define soap_write_tt__PaneConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PaneConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneConfiguration * SOAP_FMAC4 soap_get_tt__PaneConfiguration(struct soap*, tt__PaneConfiguration *, const char*, const char*);

#ifndef soap_read_tt__PaneConfiguration
#define soap_read_tt__PaneConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PaneConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PaneConfiguration * SOAP_FMAC2 soap_instantiate_tt__PaneConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PaneConfiguration * soap_new_tt__PaneConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__PaneConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__PaneConfiguration * soap_new_req_tt__PaneConfiguration(struct soap *soap, std::string& Token) { tt__PaneConfiguration *_p = soap_instantiate_tt__PaneConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneConfiguration::Token = Token; } return _p; }

inline tt__PaneConfiguration * soap_new_set_tt__PaneConfiguration(struct soap *soap, std::string *PaneName, std::string *AudioOutputToken, std::string *AudioSourceToken, tt__AudioEncoderConfiguration *AudioEncoderConfiguration, std::string *ReceiverToken, std::string& Token, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PaneConfiguration *_p = soap_instantiate_tt__PaneConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PaneConfiguration::PaneName = PaneName; _p->tt__PaneConfiguration::AudioOutputToken = AudioOutputToken; _p->tt__PaneConfiguration::AudioSourceToken = AudioSourceToken; _p->tt__PaneConfiguration::AudioEncoderConfiguration = AudioEncoderConfiguration; _p->tt__PaneConfiguration::ReceiverToken = ReceiverToken; _p->tt__PaneConfiguration::Token = Token; _p->tt__PaneConfiguration::__any = __any; _p->tt__PaneConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PaneConfiguration(struct soap *soap, tt__PaneConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PaneConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (529)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CellLayout(struct soap*, const char*, int, const tt__CellLayout *, const char*);
SOAP_FMAC3 tt__CellLayout * SOAP_FMAC4 soap_in_tt__CellLayout(struct soap*, const char*, tt__CellLayout *, const char*);

#ifndef soap_write_tt__CellLayout
#define soap_write_tt__CellLayout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CellLayout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CellLayout * SOAP_FMAC4 soap_get_tt__CellLayout(struct soap*, tt__CellLayout *, const char*, const char*);

#ifndef soap_read_tt__CellLayout
#define soap_read_tt__CellLayout(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CellLayout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CellLayout * SOAP_FMAC2 soap_instantiate_tt__CellLayout(struct soap*, int, const char*, const char*, size_t*);

inline tt__CellLayout * soap_new_tt__CellLayout(struct soap *soap, int n = -1) { return soap_instantiate_tt__CellLayout(soap, n, NULL, NULL, NULL); }

inline tt__CellLayout * soap_new_req_tt__CellLayout(struct soap *soap, tt__Transformation *Transformation, std::string& Columns, std::string& Rows) { tt__CellLayout *_p = soap_instantiate_tt__CellLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CellLayout::Transformation = Transformation; _p->tt__CellLayout::Columns = Columns; _p->tt__CellLayout::Rows = Rows; } return _p; }

inline tt__CellLayout * soap_new_set_tt__CellLayout(struct soap *soap, tt__Transformation *Transformation, std::vector<char * >& __any, std::string& Columns, std::string& Rows, char *__anyAttribute, char *__item1) { tt__CellLayout *_p = soap_instantiate_tt__CellLayout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CellLayout::Transformation = Transformation; _p->tt__CellLayout::__any = __any; _p->tt__CellLayout::Columns = Columns; _p->tt__CellLayout::Rows = Rows; _p->tt__CellLayout::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CellLayout(struct soap *soap, tt__CellLayout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CellLayout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (528)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MotionExpressionConfiguration(struct soap*, const char*, int, const tt__MotionExpressionConfiguration *, const char*);
SOAP_FMAC3 tt__MotionExpressionConfiguration * SOAP_FMAC4 soap_in_tt__MotionExpressionConfiguration(struct soap*, const char*, tt__MotionExpressionConfiguration *, const char*);

#ifndef soap_write_tt__MotionExpressionConfiguration
#define soap_write_tt__MotionExpressionConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MotionExpressionConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MotionExpressionConfiguration * SOAP_FMAC4 soap_get_tt__MotionExpressionConfiguration(struct soap*, tt__MotionExpressionConfiguration *, const char*, const char*);

#ifndef soap_read_tt__MotionExpressionConfiguration
#define soap_read_tt__MotionExpressionConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MotionExpressionConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MotionExpressionConfiguration * SOAP_FMAC2 soap_instantiate_tt__MotionExpressionConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MotionExpressionConfiguration * soap_new_tt__MotionExpressionConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__MotionExpressionConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__MotionExpressionConfiguration * soap_new_req_tt__MotionExpressionConfiguration(struct soap *soap, tt__MotionExpression *MotionExpression) { tt__MotionExpressionConfiguration *_p = soap_instantiate_tt__MotionExpressionConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MotionExpressionConfiguration::MotionExpression = MotionExpression; } return _p; }

inline tt__MotionExpressionConfiguration * soap_new_set_tt__MotionExpressionConfiguration(struct soap *soap, tt__MotionExpression *MotionExpression, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__MotionExpressionConfiguration *_p = soap_instantiate_tt__MotionExpressionConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MotionExpressionConfiguration::MotionExpression = MotionExpression; _p->tt__MotionExpressionConfiguration::__any = __any; _p->tt__MotionExpressionConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MotionExpressionConfiguration(struct soap *soap, tt__MotionExpressionConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MotionExpressionConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (527)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MotionExpression(struct soap*, const char*, int, const tt__MotionExpression *, const char*);
SOAP_FMAC3 tt__MotionExpression * SOAP_FMAC4 soap_in_tt__MotionExpression(struct soap*, const char*, tt__MotionExpression *, const char*);

#ifndef soap_write_tt__MotionExpression
#define soap_write_tt__MotionExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MotionExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MotionExpression * SOAP_FMAC4 soap_get_tt__MotionExpression(struct soap*, tt__MotionExpression *, const char*, const char*);

#ifndef soap_read_tt__MotionExpression
#define soap_read_tt__MotionExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MotionExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MotionExpression * SOAP_FMAC2 soap_instantiate_tt__MotionExpression(struct soap*, int, const char*, const char*, size_t*);

inline tt__MotionExpression * soap_new_tt__MotionExpression(struct soap *soap, int n = -1) { return soap_instantiate_tt__MotionExpression(soap, n, NULL, NULL, NULL); }

inline tt__MotionExpression * soap_new_req_tt__MotionExpression(struct soap *soap, std::string& Expression) { tt__MotionExpression *_p = soap_instantiate_tt__MotionExpression(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MotionExpression::Expression = Expression; } return _p; }

inline tt__MotionExpression * soap_new_set_tt__MotionExpression(struct soap *soap, std::string& Expression, std::vector<char * >& __any, std::string *Type, char *__anyAttribute, char *__item1) { tt__MotionExpression *_p = soap_instantiate_tt__MotionExpression(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MotionExpression::Expression = Expression; _p->tt__MotionExpression::__any = __any; _p->tt__MotionExpression::Type = Type; _p->tt__MotionExpression::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MotionExpression(struct soap *soap, tt__MotionExpression *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MotionExpression(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (526)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolylineArrayConfiguration(struct soap*, const char*, int, const tt__PolylineArrayConfiguration *, const char*);
SOAP_FMAC3 tt__PolylineArrayConfiguration * SOAP_FMAC4 soap_in_tt__PolylineArrayConfiguration(struct soap*, const char*, tt__PolylineArrayConfiguration *, const char*);

#ifndef soap_write_tt__PolylineArrayConfiguration
#define soap_write_tt__PolylineArrayConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PolylineArrayConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PolylineArrayConfiguration * SOAP_FMAC4 soap_get_tt__PolylineArrayConfiguration(struct soap*, tt__PolylineArrayConfiguration *, const char*, const char*);

#ifndef soap_read_tt__PolylineArrayConfiguration
#define soap_read_tt__PolylineArrayConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PolylineArrayConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PolylineArrayConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolylineArrayConfiguration * soap_new_tt__PolylineArrayConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__PolylineArrayConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__PolylineArrayConfiguration * soap_new_req_tt__PolylineArrayConfiguration(struct soap *soap, tt__PolylineArray *PolylineArray) { tt__PolylineArrayConfiguration *_p = soap_instantiate_tt__PolylineArrayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolylineArrayConfiguration::PolylineArray = PolylineArray; } return _p; }

inline tt__PolylineArrayConfiguration * soap_new_set_tt__PolylineArrayConfiguration(struct soap *soap, tt__PolylineArray *PolylineArray, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PolylineArrayConfiguration *_p = soap_instantiate_tt__PolylineArrayConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolylineArrayConfiguration::PolylineArray = PolylineArray; _p->tt__PolylineArrayConfiguration::__any = __any; _p->tt__PolylineArrayConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PolylineArrayConfiguration(struct soap *soap, tt__PolylineArrayConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PolylineArrayConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (525)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolylineArrayExtension(struct soap*, const char*, int, const tt__PolylineArrayExtension *, const char*);
SOAP_FMAC3 tt__PolylineArrayExtension * SOAP_FMAC4 soap_in_tt__PolylineArrayExtension(struct soap*, const char*, tt__PolylineArrayExtension *, const char*);

#ifndef soap_write_tt__PolylineArrayExtension
#define soap_write_tt__PolylineArrayExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PolylineArrayExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PolylineArrayExtension * SOAP_FMAC4 soap_get_tt__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension *, const char*, const char*);

#ifndef soap_read_tt__PolylineArrayExtension
#define soap_read_tt__PolylineArrayExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PolylineArrayExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PolylineArrayExtension * SOAP_FMAC2 soap_instantiate_tt__PolylineArrayExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolylineArrayExtension * soap_new_tt__PolylineArrayExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PolylineArrayExtension(soap, n, NULL, NULL, NULL); }

inline tt__PolylineArrayExtension * soap_new_req_tt__PolylineArrayExtension(struct soap *soap) { tt__PolylineArrayExtension *_p = soap_instantiate_tt__PolylineArrayExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PolylineArrayExtension * soap_new_set_tt__PolylineArrayExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PolylineArrayExtension *_p = soap_instantiate_tt__PolylineArrayExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolylineArrayExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PolylineArrayExtension(struct soap *soap, tt__PolylineArrayExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PolylineArrayExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (524)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolylineArray(struct soap*, const char*, int, const tt__PolylineArray *, const char*);
SOAP_FMAC3 tt__PolylineArray * SOAP_FMAC4 soap_in_tt__PolylineArray(struct soap*, const char*, tt__PolylineArray *, const char*);

#ifndef soap_write_tt__PolylineArray
#define soap_write_tt__PolylineArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PolylineArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PolylineArray * SOAP_FMAC4 soap_get_tt__PolylineArray(struct soap*, tt__PolylineArray *, const char*, const char*);

#ifndef soap_read_tt__PolylineArray
#define soap_read_tt__PolylineArray(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PolylineArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PolylineArray * SOAP_FMAC2 soap_instantiate_tt__PolylineArray(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolylineArray * soap_new_tt__PolylineArray(struct soap *soap, int n = -1) { return soap_instantiate_tt__PolylineArray(soap, n, NULL, NULL, NULL); }

inline tt__PolylineArray * soap_new_req_tt__PolylineArray(struct soap *soap, std::vector<tt__Polyline * >& Segment) { tt__PolylineArray *_p = soap_instantiate_tt__PolylineArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolylineArray::Segment = Segment; } return _p; }

inline tt__PolylineArray * soap_new_set_tt__PolylineArray(struct soap *soap, std::vector<tt__Polyline * >& Segment, tt__PolylineArrayExtension *Extension, char *__anyAttribute, char *__item1) { tt__PolylineArray *_p = soap_instantiate_tt__PolylineArray(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolylineArray::Segment = Segment; _p->tt__PolylineArray::Extension = Extension; _p->tt__PolylineArray::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PolylineArray(struct soap *soap, tt__PolylineArray *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PolylineArray(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (523)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PolygonConfiguration(struct soap*, const char*, int, const tt__PolygonConfiguration *, const char*);
SOAP_FMAC3 tt__PolygonConfiguration * SOAP_FMAC4 soap_in_tt__PolygonConfiguration(struct soap*, const char*, tt__PolygonConfiguration *, const char*);

#ifndef soap_write_tt__PolygonConfiguration
#define soap_write_tt__PolygonConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PolygonConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PolygonConfiguration * SOAP_FMAC4 soap_get_tt__PolygonConfiguration(struct soap*, tt__PolygonConfiguration *, const char*, const char*);

#ifndef soap_read_tt__PolygonConfiguration
#define soap_read_tt__PolygonConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PolygonConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PolygonConfiguration * SOAP_FMAC2 soap_instantiate_tt__PolygonConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PolygonConfiguration * soap_new_tt__PolygonConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__PolygonConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__PolygonConfiguration * soap_new_req_tt__PolygonConfiguration(struct soap *soap, tt__Polygon *Polygon) { tt__PolygonConfiguration *_p = soap_instantiate_tt__PolygonConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolygonConfiguration::Polygon = Polygon; } return _p; }

inline tt__PolygonConfiguration * soap_new_set_tt__PolygonConfiguration(struct soap *soap, tt__Polygon *Polygon, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PolygonConfiguration *_p = soap_instantiate_tt__PolygonConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PolygonConfiguration::Polygon = Polygon; _p->tt__PolygonConfiguration::__any = __any; _p->tt__PolygonConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PolygonConfiguration(struct soap *soap, tt__PolygonConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PolygonConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (522)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedAnalyticsModulesExtension(struct soap*, const char*, int, const tt__SupportedAnalyticsModulesExtension *, const char*);
SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC4 soap_in_tt__SupportedAnalyticsModulesExtension(struct soap*, const char*, tt__SupportedAnalyticsModulesExtension *, const char*);

#ifndef soap_write_tt__SupportedAnalyticsModulesExtension
#define soap_write_tt__SupportedAnalyticsModulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SupportedAnalyticsModulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC4 soap_get_tt__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension *, const char*, const char*);

#ifndef soap_read_tt__SupportedAnalyticsModulesExtension
#define soap_read_tt__SupportedAnalyticsModulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SupportedAnalyticsModulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SupportedAnalyticsModulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModulesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedAnalyticsModulesExtension * soap_new_tt__SupportedAnalyticsModulesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SupportedAnalyticsModulesExtension(soap, n, NULL, NULL, NULL); }

inline tt__SupportedAnalyticsModulesExtension * soap_new_req_tt__SupportedAnalyticsModulesExtension(struct soap *soap) { tt__SupportedAnalyticsModulesExtension *_p = soap_instantiate_tt__SupportedAnalyticsModulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SupportedAnalyticsModulesExtension * soap_new_set_tt__SupportedAnalyticsModulesExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__SupportedAnalyticsModulesExtension *_p = soap_instantiate_tt__SupportedAnalyticsModulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SupportedAnalyticsModulesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SupportedAnalyticsModulesExtension(struct soap *soap, tt__SupportedAnalyticsModulesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SupportedAnalyticsModulesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (521)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedAnalyticsModules(struct soap*, const char*, int, const tt__SupportedAnalyticsModules *, const char*);
SOAP_FMAC3 tt__SupportedAnalyticsModules * SOAP_FMAC4 soap_in_tt__SupportedAnalyticsModules(struct soap*, const char*, tt__SupportedAnalyticsModules *, const char*);

#ifndef soap_write_tt__SupportedAnalyticsModules
#define soap_write_tt__SupportedAnalyticsModules(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SupportedAnalyticsModules", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportedAnalyticsModules * SOAP_FMAC4 soap_get_tt__SupportedAnalyticsModules(struct soap*, tt__SupportedAnalyticsModules *, const char*, const char*);

#ifndef soap_read_tt__SupportedAnalyticsModules
#define soap_read_tt__SupportedAnalyticsModules(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SupportedAnalyticsModules(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SupportedAnalyticsModules * SOAP_FMAC2 soap_instantiate_tt__SupportedAnalyticsModules(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedAnalyticsModules * soap_new_tt__SupportedAnalyticsModules(struct soap *soap, int n = -1) { return soap_instantiate_tt__SupportedAnalyticsModules(soap, n, NULL, NULL, NULL); }

inline tt__SupportedAnalyticsModules * soap_new_req_tt__SupportedAnalyticsModules(struct soap *soap) { tt__SupportedAnalyticsModules *_p = soap_instantiate_tt__SupportedAnalyticsModules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SupportedAnalyticsModules * soap_new_set_tt__SupportedAnalyticsModules(struct soap *soap, std::vector<std::string >& AnalyticsModuleContentSchemaLocation, std::vector<tt__ConfigDescription * >& AnalyticsModuleDescription, tt__SupportedAnalyticsModulesExtension *Extension, char *__anyAttribute, char *__item1) { tt__SupportedAnalyticsModules *_p = soap_instantiate_tt__SupportedAnalyticsModules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SupportedAnalyticsModules::AnalyticsModuleContentSchemaLocation = AnalyticsModuleContentSchemaLocation; _p->tt__SupportedAnalyticsModules::AnalyticsModuleDescription = AnalyticsModuleDescription; _p->tt__SupportedAnalyticsModules::Extension = Extension; _p->tt__SupportedAnalyticsModules::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SupportedAnalyticsModules(struct soap *soap, tt__SupportedAnalyticsModules *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SupportedAnalyticsModules(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (520)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedRulesExtension(struct soap*, const char*, int, const tt__SupportedRulesExtension *, const char*);
SOAP_FMAC3 tt__SupportedRulesExtension * SOAP_FMAC4 soap_in_tt__SupportedRulesExtension(struct soap*, const char*, tt__SupportedRulesExtension *, const char*);

#ifndef soap_write_tt__SupportedRulesExtension
#define soap_write_tt__SupportedRulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SupportedRulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportedRulesExtension * SOAP_FMAC4 soap_get_tt__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension *, const char*, const char*);

#ifndef soap_read_tt__SupportedRulesExtension
#define soap_read_tt__SupportedRulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SupportedRulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SupportedRulesExtension * SOAP_FMAC2 soap_instantiate_tt__SupportedRulesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedRulesExtension * soap_new_tt__SupportedRulesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SupportedRulesExtension(soap, n, NULL, NULL, NULL); }

inline tt__SupportedRulesExtension * soap_new_req_tt__SupportedRulesExtension(struct soap *soap) { tt__SupportedRulesExtension *_p = soap_instantiate_tt__SupportedRulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SupportedRulesExtension * soap_new_set_tt__SupportedRulesExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__SupportedRulesExtension *_p = soap_instantiate_tt__SupportedRulesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SupportedRulesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SupportedRulesExtension(struct soap *soap, tt__SupportedRulesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SupportedRulesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (519)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportedRules(struct soap*, const char*, int, const tt__SupportedRules *, const char*);
SOAP_FMAC3 tt__SupportedRules * SOAP_FMAC4 soap_in_tt__SupportedRules(struct soap*, const char*, tt__SupportedRules *, const char*);

#ifndef soap_write_tt__SupportedRules
#define soap_write_tt__SupportedRules(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SupportedRules", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportedRules * SOAP_FMAC4 soap_get_tt__SupportedRules(struct soap*, tt__SupportedRules *, const char*, const char*);

#ifndef soap_read_tt__SupportedRules
#define soap_read_tt__SupportedRules(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SupportedRules(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SupportedRules * SOAP_FMAC2 soap_instantiate_tt__SupportedRules(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportedRules * soap_new_tt__SupportedRules(struct soap *soap, int n = -1) { return soap_instantiate_tt__SupportedRules(soap, n, NULL, NULL, NULL); }

inline tt__SupportedRules * soap_new_req_tt__SupportedRules(struct soap *soap) { tt__SupportedRules *_p = soap_instantiate_tt__SupportedRules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SupportedRules * soap_new_set_tt__SupportedRules(struct soap *soap, std::vector<std::string >& RuleContentSchemaLocation, std::vector<tt__ConfigDescription * >& RuleDescription, tt__SupportedRulesExtension *Extension, char *__anyAttribute, char *__item1) { tt__SupportedRules *_p = soap_instantiate_tt__SupportedRules(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SupportedRules::RuleContentSchemaLocation = RuleContentSchemaLocation; _p->tt__SupportedRules::RuleDescription = RuleDescription; _p->tt__SupportedRules::Extension = Extension; _p->tt__SupportedRules::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SupportedRules(struct soap *soap, tt__SupportedRules *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SupportedRules(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (518)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigDescriptionExtension(struct soap*, const char*, int, const tt__ConfigDescriptionExtension *, const char*);
SOAP_FMAC3 tt__ConfigDescriptionExtension * SOAP_FMAC4 soap_in_tt__ConfigDescriptionExtension(struct soap*, const char*, tt__ConfigDescriptionExtension *, const char*);

#ifndef soap_write_tt__ConfigDescriptionExtension
#define soap_write_tt__ConfigDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ConfigDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ConfigDescriptionExtension * SOAP_FMAC4 soap_get_tt__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension *, const char*, const char*);

#ifndef soap_read_tt__ConfigDescriptionExtension
#define soap_read_tt__ConfigDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ConfigDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ConfigDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ConfigDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigDescriptionExtension * soap_new_tt__ConfigDescriptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ConfigDescriptionExtension(soap, n, NULL, NULL, NULL); }

inline tt__ConfigDescriptionExtension * soap_new_req_tt__ConfigDescriptionExtension(struct soap *soap) { tt__ConfigDescriptionExtension *_p = soap_instantiate_tt__ConfigDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ConfigDescriptionExtension * soap_new_set_tt__ConfigDescriptionExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ConfigDescriptionExtension *_p = soap_instantiate_tt__ConfigDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ConfigDescriptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ConfigDescriptionExtension(struct soap *soap, tt__ConfigDescriptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ConfigDescriptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (517)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigDescription(struct soap*, const char*, int, const tt__ConfigDescription *, const char*);
SOAP_FMAC3 tt__ConfigDescription * SOAP_FMAC4 soap_in_tt__ConfigDescription(struct soap*, const char*, tt__ConfigDescription *, const char*);

#ifndef soap_write_tt__ConfigDescription
#define soap_write_tt__ConfigDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ConfigDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ConfigDescription * SOAP_FMAC4 soap_get_tt__ConfigDescription(struct soap*, tt__ConfigDescription *, const char*, const char*);

#ifndef soap_read_tt__ConfigDescription
#define soap_read_tt__ConfigDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ConfigDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ConfigDescription * SOAP_FMAC2 soap_instantiate_tt__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigDescription * soap_new_tt__ConfigDescription(struct soap *soap, int n = -1) { return soap_instantiate_tt__ConfigDescription(soap, n, NULL, NULL, NULL); }

inline tt__ConfigDescription * soap_new_req_tt__ConfigDescription(struct soap *soap, tt__ItemListDescription *Parameters, std::string& Name) { tt__ConfigDescription *_p = soap_instantiate_tt__ConfigDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ConfigDescription::Parameters = Parameters; _p->tt__ConfigDescription::Name = Name; } return _p; }

inline tt__ConfigDescription * soap_new_set_tt__ConfigDescription(struct soap *soap, tt__ItemListDescription *Parameters, std::vector<_tt__ConfigDescription_Messages >*Messages, tt__ConfigDescriptionExtension *Extension, std::string& Name, bool *fixed, std::string *maxInstances, char *__anyAttribute, char *__item1) { tt__ConfigDescription *_p = soap_instantiate_tt__ConfigDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ConfigDescription::Parameters = Parameters; _p->tt__ConfigDescription::Messages = Messages; _p->tt__ConfigDescription::Extension = Extension; _p->tt__ConfigDescription::Name = Name; _p->tt__ConfigDescription::fixed = fixed; _p->tt__ConfigDescription::maxInstances = maxInstances; _p->tt__ConfigDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ConfigDescription(struct soap *soap, tt__ConfigDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ConfigDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (516)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Config(struct soap*, const char*, int, const tt__Config *, const char*);
SOAP_FMAC3 tt__Config * SOAP_FMAC4 soap_in_tt__Config(struct soap*, const char*, tt__Config *, const char*);

#ifndef soap_write_tt__Config
#define soap_write_tt__Config(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Config", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Config * SOAP_FMAC4 soap_get_tt__Config(struct soap*, tt__Config *, const char*, const char*);

#ifndef soap_read_tt__Config
#define soap_read_tt__Config(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Config(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Config * SOAP_FMAC2 soap_instantiate_tt__Config(struct soap*, int, const char*, const char*, size_t*);

inline tt__Config * soap_new_tt__Config(struct soap *soap, int n = -1) { return soap_instantiate_tt__Config(soap, n, NULL, NULL, NULL); }

inline tt__Config * soap_new_req_tt__Config(struct soap *soap, tt__ItemList *Parameters, std::string& Name, std::string& Type) { tt__Config *_p = soap_instantiate_tt__Config(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Config::Parameters = Parameters; _p->tt__Config::Name = Name; _p->tt__Config::Type = Type; } return _p; }

inline tt__Config * soap_new_set_tt__Config(struct soap *soap, tt__ItemList *Parameters, std::string& Name, std::string& Type, char *__item1) { tt__Config *_p = soap_instantiate_tt__Config(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Config::Parameters = Parameters; _p->tt__Config::Name = Name; _p->tt__Config::Type = Type; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Config(struct soap *soap, tt__Config *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Config(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (515)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RuleEngineConfigurationExtension(struct soap*, const char*, int, const tt__RuleEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__RuleEngineConfigurationExtension(struct soap*, const char*, tt__RuleEngineConfigurationExtension *, const char*);

#ifndef soap_write_tt__RuleEngineConfigurationExtension
#define soap_write_tt__RuleEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RuleEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RuleEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__RuleEngineConfigurationExtension
#define soap_read_tt__RuleEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RuleEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RuleEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RuleEngineConfigurationExtension * soap_new_tt__RuleEngineConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RuleEngineConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__RuleEngineConfigurationExtension * soap_new_req_tt__RuleEngineConfigurationExtension(struct soap *soap) { tt__RuleEngineConfigurationExtension *_p = soap_instantiate_tt__RuleEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RuleEngineConfigurationExtension * soap_new_set_tt__RuleEngineConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RuleEngineConfigurationExtension *_p = soap_instantiate_tt__RuleEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RuleEngineConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RuleEngineConfigurationExtension(struct soap *soap, tt__RuleEngineConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RuleEngineConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (514)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RuleEngineConfiguration(struct soap*, const char*, int, const tt__RuleEngineConfiguration *, const char*);
SOAP_FMAC3 tt__RuleEngineConfiguration * SOAP_FMAC4 soap_in_tt__RuleEngineConfiguration(struct soap*, const char*, tt__RuleEngineConfiguration *, const char*);

#ifndef soap_write_tt__RuleEngineConfiguration
#define soap_write_tt__RuleEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RuleEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RuleEngineConfiguration * SOAP_FMAC4 soap_get_tt__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *, const char*, const char*);

#ifndef soap_read_tt__RuleEngineConfiguration
#define soap_read_tt__RuleEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RuleEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RuleEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__RuleEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__RuleEngineConfiguration * soap_new_tt__RuleEngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__RuleEngineConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__RuleEngineConfiguration * soap_new_req_tt__RuleEngineConfiguration(struct soap *soap) { tt__RuleEngineConfiguration *_p = soap_instantiate_tt__RuleEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RuleEngineConfiguration * soap_new_set_tt__RuleEngineConfiguration(struct soap *soap, std::vector<tt__Config * >& Rule, tt__RuleEngineConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__RuleEngineConfiguration *_p = soap_instantiate_tt__RuleEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RuleEngineConfiguration::Rule = Rule; _p->tt__RuleEngineConfiguration::Extension = Extension; _p->tt__RuleEngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RuleEngineConfiguration(struct soap *soap, tt__RuleEngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RuleEngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (513)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineConfigurationExtension(struct soap*, const char*, int, const tt__AnalyticsEngineConfigurationExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_in_tt__AnalyticsEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsEngineConfigurationExtension *, const char*);

#ifndef soap_write_tt__AnalyticsEngineConfigurationExtension
#define soap_write_tt__AnalyticsEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC4 soap_get_tt__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngineConfigurationExtension
#define soap_read_tt__AnalyticsEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngineConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineConfigurationExtension * soap_new_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngineConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngineConfigurationExtension * soap_new_req_tt__AnalyticsEngineConfigurationExtension(struct soap *soap) { tt__AnalyticsEngineConfigurationExtension *_p = soap_instantiate_tt__AnalyticsEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnalyticsEngineConfigurationExtension * soap_new_set_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__AnalyticsEngineConfigurationExtension *_p = soap_instantiate_tt__AnalyticsEngineConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsEngineConfigurationExtension(struct soap *soap, tt__AnalyticsEngineConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngineConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (512)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsEngineConfiguration(struct soap*, const char*, int, const tt__AnalyticsEngineConfiguration *, const char*);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_in_tt__AnalyticsEngineConfiguration(struct soap*, const char*, tt__AnalyticsEngineConfiguration *, const char*);

#ifndef soap_write_tt__AnalyticsEngineConfiguration
#define soap_write_tt__AnalyticsEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineConfiguration * SOAP_FMAC4 soap_get_tt__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsEngineConfiguration
#define soap_read_tt__AnalyticsEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsEngineConfiguration * SOAP_FMAC2 soap_instantiate_tt__AnalyticsEngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsEngineConfiguration * soap_new_tt__AnalyticsEngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsEngineConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsEngineConfiguration * soap_new_req_tt__AnalyticsEngineConfiguration(struct soap *soap) { tt__AnalyticsEngineConfiguration *_p = soap_instantiate_tt__AnalyticsEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnalyticsEngineConfiguration * soap_new_set_tt__AnalyticsEngineConfiguration(struct soap *soap, std::vector<tt__Config * >& AnalyticsModule, tt__AnalyticsEngineConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__AnalyticsEngineConfiguration *_p = soap_instantiate_tt__AnalyticsEngineConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsEngineConfiguration::AnalyticsModule = AnalyticsModule; _p->tt__AnalyticsEngineConfiguration::Extension = Extension; _p->tt__AnalyticsEngineConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsEngineConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsEngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (511)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Polyline(struct soap*, const char*, int, const tt__Polyline *, const char*);
SOAP_FMAC3 tt__Polyline * SOAP_FMAC4 soap_in_tt__Polyline(struct soap*, const char*, tt__Polyline *, const char*);

#ifndef soap_write_tt__Polyline
#define soap_write_tt__Polyline(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Polyline", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Polyline * SOAP_FMAC4 soap_get_tt__Polyline(struct soap*, tt__Polyline *, const char*, const char*);

#ifndef soap_read_tt__Polyline
#define soap_read_tt__Polyline(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Polyline(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Polyline * SOAP_FMAC2 soap_instantiate_tt__Polyline(struct soap*, int, const char*, const char*, size_t*);

inline tt__Polyline * soap_new_tt__Polyline(struct soap *soap, int n = -1) { return soap_instantiate_tt__Polyline(soap, n, NULL, NULL, NULL); }

inline tt__Polyline * soap_new_req_tt__Polyline(struct soap *soap, std::vector<tt__Vector * >& Point) { tt__Polyline *_p = soap_instantiate_tt__Polyline(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Polyline::Point = Point; } return _p; }

inline tt__Polyline * soap_new_set_tt__Polyline(struct soap *soap, std::vector<tt__Vector * >& Point, char *__item1) { tt__Polyline *_p = soap_instantiate_tt__Polyline(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Polyline::Point = Point; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Polyline(struct soap *soap, tt__Polyline *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Polyline(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (510)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListDescriptionExtension(struct soap*, const char*, int, const tt__ItemListDescriptionExtension *, const char*);
SOAP_FMAC3 tt__ItemListDescriptionExtension * SOAP_FMAC4 soap_in_tt__ItemListDescriptionExtension(struct soap*, const char*, tt__ItemListDescriptionExtension *, const char*);

#ifndef soap_write_tt__ItemListDescriptionExtension
#define soap_write_tt__ItemListDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemListDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemListDescriptionExtension * SOAP_FMAC4 soap_get_tt__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension *, const char*, const char*);

#ifndef soap_read_tt__ItemListDescriptionExtension
#define soap_read_tt__ItemListDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ItemListDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ItemListDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListDescriptionExtension * soap_new_tt__ItemListDescriptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ItemListDescriptionExtension(soap, n, NULL, NULL, NULL); }

inline tt__ItemListDescriptionExtension * soap_new_req_tt__ItemListDescriptionExtension(struct soap *soap) { tt__ItemListDescriptionExtension *_p = soap_instantiate_tt__ItemListDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ItemListDescriptionExtension * soap_new_set_tt__ItemListDescriptionExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ItemListDescriptionExtension *_p = soap_instantiate_tt__ItemListDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ItemListDescriptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ItemListDescriptionExtension(struct soap *soap, tt__ItemListDescriptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ItemListDescriptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (509)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListDescription(struct soap*, const char*, int, const tt__ItemListDescription *, const char*);
SOAP_FMAC3 tt__ItemListDescription * SOAP_FMAC4 soap_in_tt__ItemListDescription(struct soap*, const char*, tt__ItemListDescription *, const char*);

#ifndef soap_write_tt__ItemListDescription
#define soap_write_tt__ItemListDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemListDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemListDescription * SOAP_FMAC4 soap_get_tt__ItemListDescription(struct soap*, tt__ItemListDescription *, const char*, const char*);

#ifndef soap_read_tt__ItemListDescription
#define soap_read_tt__ItemListDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ItemListDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ItemListDescription * SOAP_FMAC2 soap_instantiate_tt__ItemListDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListDescription * soap_new_tt__ItemListDescription(struct soap *soap, int n = -1) { return soap_instantiate_tt__ItemListDescription(soap, n, NULL, NULL, NULL); }

inline tt__ItemListDescription * soap_new_req_tt__ItemListDescription(struct soap *soap) { tt__ItemListDescription *_p = soap_instantiate_tt__ItemListDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ItemListDescription * soap_new_set_tt__ItemListDescription(struct soap *soap, std::vector<_tt__ItemListDescription_SimpleItemDescription >*SimpleItemDescription, std::vector<_tt__ItemListDescription_ElementItemDescription >*ElementItemDescription, tt__ItemListDescriptionExtension *Extension, char *__anyAttribute, char *__item1) { tt__ItemListDescription *_p = soap_instantiate_tt__ItemListDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ItemListDescription::SimpleItemDescription = SimpleItemDescription; _p->tt__ItemListDescription::ElementItemDescription = ElementItemDescription; _p->tt__ItemListDescription::Extension = Extension; _p->tt__ItemListDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ItemListDescription(struct soap *soap, tt__ItemListDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ItemListDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (508)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MessageDescriptionExtension(struct soap*, const char*, int, const tt__MessageDescriptionExtension *, const char*);
SOAP_FMAC3 tt__MessageDescriptionExtension * SOAP_FMAC4 soap_in_tt__MessageDescriptionExtension(struct soap*, const char*, tt__MessageDescriptionExtension *, const char*);

#ifndef soap_write_tt__MessageDescriptionExtension
#define soap_write_tt__MessageDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MessageDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MessageDescriptionExtension * SOAP_FMAC4 soap_get_tt__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension *, const char*, const char*);

#ifndef soap_read_tt__MessageDescriptionExtension
#define soap_read_tt__MessageDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MessageDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MessageDescriptionExtension * SOAP_FMAC2 soap_instantiate_tt__MessageDescriptionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MessageDescriptionExtension * soap_new_tt__MessageDescriptionExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__MessageDescriptionExtension(soap, n, NULL, NULL, NULL); }

inline tt__MessageDescriptionExtension * soap_new_req_tt__MessageDescriptionExtension(struct soap *soap) { tt__MessageDescriptionExtension *_p = soap_instantiate_tt__MessageDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MessageDescriptionExtension * soap_new_set_tt__MessageDescriptionExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__MessageDescriptionExtension *_p = soap_instantiate_tt__MessageDescriptionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MessageDescriptionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MessageDescriptionExtension(struct soap *soap, tt__MessageDescriptionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MessageDescriptionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (507)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MessageDescription(struct soap*, const char*, int, const tt__MessageDescription *, const char*);
SOAP_FMAC3 tt__MessageDescription * SOAP_FMAC4 soap_in_tt__MessageDescription(struct soap*, const char*, tt__MessageDescription *, const char*);

#ifndef soap_write_tt__MessageDescription
#define soap_write_tt__MessageDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MessageDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MessageDescription * SOAP_FMAC4 soap_get_tt__MessageDescription(struct soap*, tt__MessageDescription *, const char*, const char*);

#ifndef soap_read_tt__MessageDescription
#define soap_read_tt__MessageDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MessageDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MessageDescription * SOAP_FMAC2 soap_instantiate_tt__MessageDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__MessageDescription * soap_new_tt__MessageDescription(struct soap *soap, int n = -1) { return soap_instantiate_tt__MessageDescription(soap, n, NULL, NULL, NULL); }

inline tt__MessageDescription * soap_new_req_tt__MessageDescription(struct soap *soap) { tt__MessageDescription *_p = soap_instantiate_tt__MessageDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MessageDescription * soap_new_set_tt__MessageDescription(struct soap *soap, tt__ItemListDescription *Source, tt__ItemListDescription *Key, tt__ItemListDescription *Data, tt__MessageDescriptionExtension *Extension, bool *IsProperty, char *__anyAttribute, char *__item1) { tt__MessageDescription *_p = soap_instantiate_tt__MessageDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MessageDescription::Source = Source; _p->tt__MessageDescription::Key = Key; _p->tt__MessageDescription::Data = Data; _p->tt__MessageDescription::Extension = Extension; _p->tt__MessageDescription::IsProperty = IsProperty; _p->tt__MessageDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MessageDescription(struct soap *soap, tt__MessageDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MessageDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (506)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemListExtension(struct soap*, const char*, int, const tt__ItemListExtension *, const char*);
SOAP_FMAC3 tt__ItemListExtension * SOAP_FMAC4 soap_in_tt__ItemListExtension(struct soap*, const char*, tt__ItemListExtension *, const char*);

#ifndef soap_write_tt__ItemListExtension
#define soap_write_tt__ItemListExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemListExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemListExtension * SOAP_FMAC4 soap_get_tt__ItemListExtension(struct soap*, tt__ItemListExtension *, const char*, const char*);

#ifndef soap_read_tt__ItemListExtension
#define soap_read_tt__ItemListExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ItemListExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ItemListExtension * SOAP_FMAC2 soap_instantiate_tt__ItemListExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemListExtension * soap_new_tt__ItemListExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ItemListExtension(soap, n, NULL, NULL, NULL); }

inline tt__ItemListExtension * soap_new_req_tt__ItemListExtension(struct soap *soap) { tt__ItemListExtension *_p = soap_instantiate_tt__ItemListExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ItemListExtension * soap_new_set_tt__ItemListExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ItemListExtension *_p = soap_instantiate_tt__ItemListExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ItemListExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ItemListExtension(struct soap *soap, tt__ItemListExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ItemListExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (505)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ItemList(struct soap*, const char*, int, const tt__ItemList *, const char*);
SOAP_FMAC3 tt__ItemList * SOAP_FMAC4 soap_in_tt__ItemList(struct soap*, const char*, tt__ItemList *, const char*);

#ifndef soap_write_tt__ItemList
#define soap_write_tt__ItemList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ItemList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemList * SOAP_FMAC4 soap_get_tt__ItemList(struct soap*, tt__ItemList *, const char*, const char*);

#ifndef soap_read_tt__ItemList
#define soap_read_tt__ItemList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ItemList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ItemList * SOAP_FMAC2 soap_instantiate_tt__ItemList(struct soap*, int, const char*, const char*, size_t*);

inline tt__ItemList * soap_new_tt__ItemList(struct soap *soap, int n = -1) { return soap_instantiate_tt__ItemList(soap, n, NULL, NULL, NULL); }

inline tt__ItemList * soap_new_req_tt__ItemList(struct soap *soap) { tt__ItemList *_p = soap_instantiate_tt__ItemList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ItemList * soap_new_set_tt__ItemList(struct soap *soap, std::vector<_tt__ItemList_SimpleItem >*SimpleItem, std::vector<_tt__ItemList_ElementItem >*ElementItem, tt__ItemListExtension *Extension, char *__anyAttribute, char *__item1) { tt__ItemList *_p = soap_instantiate_tt__ItemList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ItemList::SimpleItem = SimpleItem; _p->tt__ItemList::ElementItem = ElementItem; _p->tt__ItemList::Extension = Extension; _p->tt__ItemList::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ItemList(struct soap *soap, tt__ItemList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ItemList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (504)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MessageExtension(struct soap*, const char*, int, const tt__MessageExtension *, const char*);
SOAP_FMAC3 tt__MessageExtension * SOAP_FMAC4 soap_in_tt__MessageExtension(struct soap*, const char*, tt__MessageExtension *, const char*);

#ifndef soap_write_tt__MessageExtension
#define soap_write_tt__MessageExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MessageExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MessageExtension * SOAP_FMAC4 soap_get_tt__MessageExtension(struct soap*, tt__MessageExtension *, const char*, const char*);

#ifndef soap_read_tt__MessageExtension
#define soap_read_tt__MessageExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MessageExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MessageExtension * SOAP_FMAC2 soap_instantiate_tt__MessageExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MessageExtension * soap_new_tt__MessageExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__MessageExtension(soap, n, NULL, NULL, NULL); }

inline tt__MessageExtension * soap_new_req_tt__MessageExtension(struct soap *soap) { tt__MessageExtension *_p = soap_instantiate_tt__MessageExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MessageExtension * soap_new_set_tt__MessageExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__MessageExtension *_p = soap_instantiate_tt__MessageExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MessageExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MessageExtension(struct soap *soap, tt__MessageExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MessageExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (503)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NoiseReductionOptions(struct soap*, const char*, int, const tt__NoiseReductionOptions *, const char*);
SOAP_FMAC3 tt__NoiseReductionOptions * SOAP_FMAC4 soap_in_tt__NoiseReductionOptions(struct soap*, const char*, tt__NoiseReductionOptions *, const char*);

#ifndef soap_write_tt__NoiseReductionOptions
#define soap_write_tt__NoiseReductionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NoiseReductionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NoiseReductionOptions * SOAP_FMAC4 soap_get_tt__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions *, const char*, const char*);

#ifndef soap_read_tt__NoiseReductionOptions
#define soap_read_tt__NoiseReductionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NoiseReductionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NoiseReductionOptions * SOAP_FMAC2 soap_instantiate_tt__NoiseReductionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__NoiseReductionOptions * soap_new_tt__NoiseReductionOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__NoiseReductionOptions(soap, n, NULL, NULL, NULL); }

inline tt__NoiseReductionOptions * soap_new_req_tt__NoiseReductionOptions(struct soap *soap, bool Level) { tt__NoiseReductionOptions *_p = soap_instantiate_tt__NoiseReductionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NoiseReductionOptions::Level = Level; } return _p; }

inline tt__NoiseReductionOptions * soap_new_set_tt__NoiseReductionOptions(struct soap *soap, bool Level, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__NoiseReductionOptions *_p = soap_instantiate_tt__NoiseReductionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NoiseReductionOptions::Level = Level; _p->tt__NoiseReductionOptions::__any = __any; _p->tt__NoiseReductionOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NoiseReductionOptions(struct soap *soap, tt__NoiseReductionOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NoiseReductionOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (502)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingOptions(struct soap*, const char*, int, const tt__DefoggingOptions *, const char*);
SOAP_FMAC3 tt__DefoggingOptions * SOAP_FMAC4 soap_in_tt__DefoggingOptions(struct soap*, const char*, tt__DefoggingOptions *, const char*);

#ifndef soap_write_tt__DefoggingOptions
#define soap_write_tt__DefoggingOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DefoggingOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DefoggingOptions * SOAP_FMAC4 soap_get_tt__DefoggingOptions(struct soap*, tt__DefoggingOptions *, const char*, const char*);

#ifndef soap_read_tt__DefoggingOptions
#define soap_read_tt__DefoggingOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DefoggingOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DefoggingOptions * SOAP_FMAC2 soap_instantiate_tt__DefoggingOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingOptions * soap_new_tt__DefoggingOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__DefoggingOptions(soap, n, NULL, NULL, NULL); }

inline tt__DefoggingOptions * soap_new_req_tt__DefoggingOptions(struct soap *soap, std::vector<std::string >& Mode, bool Level) { tt__DefoggingOptions *_p = soap_instantiate_tt__DefoggingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DefoggingOptions::Mode = Mode; _p->tt__DefoggingOptions::Level = Level; } return _p; }

inline tt__DefoggingOptions * soap_new_set_tt__DefoggingOptions(struct soap *soap, std::vector<std::string >& Mode, bool Level, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__DefoggingOptions *_p = soap_instantiate_tt__DefoggingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DefoggingOptions::Mode = Mode; _p->tt__DefoggingOptions::Level = Level; _p->tt__DefoggingOptions::__any = __any; _p->tt__DefoggingOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DefoggingOptions(struct soap *soap, tt__DefoggingOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DefoggingOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (501)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationOptions(struct soap*, const char*, int, const tt__ToneCompensationOptions *, const char*);
SOAP_FMAC3 tt__ToneCompensationOptions * SOAP_FMAC4 soap_in_tt__ToneCompensationOptions(struct soap*, const char*, tt__ToneCompensationOptions *, const char*);

#ifndef soap_write_tt__ToneCompensationOptions
#define soap_write_tt__ToneCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ToneCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensationOptions * SOAP_FMAC4 soap_get_tt__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions *, const char*, const char*);

#ifndef soap_read_tt__ToneCompensationOptions
#define soap_read_tt__ToneCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ToneCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ToneCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationOptions * soap_new_tt__ToneCompensationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ToneCompensationOptions(soap, n, NULL, NULL, NULL); }

inline tt__ToneCompensationOptions * soap_new_req_tt__ToneCompensationOptions(struct soap *soap, std::vector<std::string >& Mode, bool Level) { tt__ToneCompensationOptions *_p = soap_instantiate_tt__ToneCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensationOptions::Mode = Mode; _p->tt__ToneCompensationOptions::Level = Level; } return _p; }

inline tt__ToneCompensationOptions * soap_new_set_tt__ToneCompensationOptions(struct soap *soap, std::vector<std::string >& Mode, bool Level, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ToneCompensationOptions *_p = soap_instantiate_tt__ToneCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensationOptions::Mode = Mode; _p->tt__ToneCompensationOptions::Level = Level; _p->tt__ToneCompensationOptions::__any = __any; _p->tt__ToneCompensationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ToneCompensationOptions(struct soap *soap, tt__ToneCompensationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ToneCompensationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (500)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusOptions20Extension(struct soap*, const char*, int, const tt__FocusOptions20Extension *, const char*);
SOAP_FMAC3 tt__FocusOptions20Extension * SOAP_FMAC4 soap_in_tt__FocusOptions20Extension(struct soap*, const char*, tt__FocusOptions20Extension *, const char*);

#ifndef soap_write_tt__FocusOptions20Extension
#define soap_write_tt__FocusOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusOptions20Extension * SOAP_FMAC4 soap_get_tt__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension *, const char*, const char*);

#ifndef soap_read_tt__FocusOptions20Extension
#define soap_read_tt__FocusOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusOptions20Extension * soap_new_tt__FocusOptions20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusOptions20Extension(soap, n, NULL, NULL, NULL); }

inline tt__FocusOptions20Extension * soap_new_req_tt__FocusOptions20Extension(struct soap *soap) { tt__FocusOptions20Extension *_p = soap_instantiate_tt__FocusOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__FocusOptions20Extension * soap_new_set_tt__FocusOptions20Extension(struct soap *soap, std::vector<char * >& __any, std::string *AFModes, char *__item1) { tt__FocusOptions20Extension *_p = soap_instantiate_tt__FocusOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusOptions20Extension::__any = __any; _p->tt__FocusOptions20Extension::AFModes = AFModes; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusOptions20Extension(struct soap *soap, tt__FocusOptions20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusOptions20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (499)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusOptions20(struct soap*, const char*, int, const tt__FocusOptions20 *, const char*);
SOAP_FMAC3 tt__FocusOptions20 * SOAP_FMAC4 soap_in_tt__FocusOptions20(struct soap*, const char*, tt__FocusOptions20 *, const char*);

#ifndef soap_write_tt__FocusOptions20
#define soap_write_tt__FocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusOptions20 * SOAP_FMAC4 soap_get_tt__FocusOptions20(struct soap*, tt__FocusOptions20 *, const char*, const char*);

#ifndef soap_read_tt__FocusOptions20
#define soap_read_tt__FocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__FocusOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusOptions20 * soap_new_tt__FocusOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusOptions20(soap, n, NULL, NULL, NULL); }

inline tt__FocusOptions20 * soap_new_req_tt__FocusOptions20(struct soap *soap) { tt__FocusOptions20 *_p = soap_instantiate_tt__FocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__FocusOptions20 * soap_new_set_tt__FocusOptions20(struct soap *soap, std::vector<enum tt__AutoFocusMode >& AutoFocusModes, tt__FloatRange *DefaultSpeed, tt__FloatRange *NearLimit, tt__FloatRange *FarLimit, tt__FocusOptions20Extension *Extension, char *__item1) { tt__FocusOptions20 *_p = soap_instantiate_tt__FocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusOptions20::AutoFocusModes = AutoFocusModes; _p->tt__FocusOptions20::DefaultSpeed = DefaultSpeed; _p->tt__FocusOptions20::NearLimit = NearLimit; _p->tt__FocusOptions20::FarLimit = FarLimit; _p->tt__FocusOptions20::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusOptions20(struct soap *soap, tt__FocusOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (498)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceOptions20Extension(struct soap*, const char*, int, const tt__WhiteBalanceOptions20Extension *, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions20Extension * SOAP_FMAC4 soap_in_tt__WhiteBalanceOptions20Extension(struct soap*, const char*, tt__WhiteBalanceOptions20Extension *, const char*);

#ifndef soap_write_tt__WhiteBalanceOptions20Extension
#define soap_write_tt__WhiteBalanceOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalanceOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceOptions20Extension * SOAP_FMAC4 soap_get_tt__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalanceOptions20Extension
#define soap_read_tt__WhiteBalanceOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalanceOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalanceOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceOptions20Extension * soap_new_tt__WhiteBalanceOptions20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalanceOptions20Extension(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalanceOptions20Extension * soap_new_req_tt__WhiteBalanceOptions20Extension(struct soap *soap) { tt__WhiteBalanceOptions20Extension *_p = soap_instantiate_tt__WhiteBalanceOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__WhiteBalanceOptions20Extension * soap_new_set_tt__WhiteBalanceOptions20Extension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__WhiteBalanceOptions20Extension *_p = soap_instantiate_tt__WhiteBalanceOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceOptions20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalanceOptions20Extension(struct soap *soap, tt__WhiteBalanceOptions20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalanceOptions20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (497)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceOptions20(struct soap*, const char*, int, const tt__WhiteBalanceOptions20 *, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions20 * SOAP_FMAC4 soap_in_tt__WhiteBalanceOptions20(struct soap*, const char*, tt__WhiteBalanceOptions20 *, const char*);

#ifndef soap_write_tt__WhiteBalanceOptions20
#define soap_write_tt__WhiteBalanceOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalanceOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceOptions20 * SOAP_FMAC4 soap_get_tt__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalanceOptions20
#define soap_read_tt__WhiteBalanceOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalanceOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalanceOptions20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceOptions20 * soap_new_tt__WhiteBalanceOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalanceOptions20(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalanceOptions20 * soap_new_req_tt__WhiteBalanceOptions20(struct soap *soap, std::vector<enum tt__WhiteBalanceMode >& Mode) { tt__WhiteBalanceOptions20 *_p = soap_instantiate_tt__WhiteBalanceOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceOptions20::Mode = Mode; } return _p; }

inline tt__WhiteBalanceOptions20 * soap_new_set_tt__WhiteBalanceOptions20(struct soap *soap, std::vector<enum tt__WhiteBalanceMode >& Mode, tt__FloatRange *YrGain, tt__FloatRange *YbGain, tt__WhiteBalanceOptions20Extension *Extension, char *__item1) { tt__WhiteBalanceOptions20 *_p = soap_instantiate_tt__WhiteBalanceOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceOptions20::Mode = Mode; _p->tt__WhiteBalanceOptions20::YrGain = YrGain; _p->tt__WhiteBalanceOptions20::YbGain = YbGain; _p->tt__WhiteBalanceOptions20::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalanceOptions20(struct soap *soap, tt__WhiteBalanceOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalanceOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (496)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration20Extension(struct soap*, const char*, int, const tt__FocusConfiguration20Extension *, const char*);
SOAP_FMAC3 tt__FocusConfiguration20Extension * SOAP_FMAC4 soap_in_tt__FocusConfiguration20Extension(struct soap*, const char*, tt__FocusConfiguration20Extension *, const char*);

#ifndef soap_write_tt__FocusConfiguration20Extension
#define soap_write_tt__FocusConfiguration20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusConfiguration20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusConfiguration20Extension * SOAP_FMAC4 soap_get_tt__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *, const char*, const char*);

#ifndef soap_read_tt__FocusConfiguration20Extension
#define soap_read_tt__FocusConfiguration20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusConfiguration20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusConfiguration20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration20Extension * soap_new_tt__FocusConfiguration20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusConfiguration20Extension(soap, n, NULL, NULL, NULL); }

inline tt__FocusConfiguration20Extension * soap_new_req_tt__FocusConfiguration20Extension(struct soap *soap) { tt__FocusConfiguration20Extension *_p = soap_instantiate_tt__FocusConfiguration20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__FocusConfiguration20Extension * soap_new_set_tt__FocusConfiguration20Extension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__FocusConfiguration20Extension *_p = soap_instantiate_tt__FocusConfiguration20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusConfiguration20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusConfiguration20Extension(struct soap *soap, tt__FocusConfiguration20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusConfiguration20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (495)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration20(struct soap*, const char*, int, const tt__FocusConfiguration20 *, const char*);
SOAP_FMAC3 tt__FocusConfiguration20 * SOAP_FMAC4 soap_in_tt__FocusConfiguration20(struct soap*, const char*, tt__FocusConfiguration20 *, const char*);

#ifndef soap_write_tt__FocusConfiguration20
#define soap_write_tt__FocusConfiguration20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusConfiguration20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusConfiguration20 * SOAP_FMAC4 soap_get_tt__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *, const char*, const char*);

#ifndef soap_read_tt__FocusConfiguration20
#define soap_read_tt__FocusConfiguration20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusConfiguration20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusConfiguration20 * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration20 * soap_new_tt__FocusConfiguration20(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusConfiguration20(soap, n, NULL, NULL, NULL); }

inline tt__FocusConfiguration20 * soap_new_req_tt__FocusConfiguration20(struct soap *soap, enum tt__AutoFocusMode AutoFocusMode) { tt__FocusConfiguration20 *_p = soap_instantiate_tt__FocusConfiguration20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusConfiguration20::AutoFocusMode = AutoFocusMode; } return _p; }

inline tt__FocusConfiguration20 * soap_new_set_tt__FocusConfiguration20(struct soap *soap, enum tt__AutoFocusMode AutoFocusMode, float *DefaultSpeed, float *NearLimit, float *FarLimit, tt__FocusConfiguration20Extension *Extension, std::string *AFMode, char *__anyAttribute, char *__item1) { tt__FocusConfiguration20 *_p = soap_instantiate_tt__FocusConfiguration20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusConfiguration20::AutoFocusMode = AutoFocusMode; _p->tt__FocusConfiguration20::DefaultSpeed = DefaultSpeed; _p->tt__FocusConfiguration20::NearLimit = NearLimit; _p->tt__FocusConfiguration20::FarLimit = FarLimit; _p->tt__FocusConfiguration20::Extension = Extension; _p->tt__FocusConfiguration20::AFMode = AFMode; _p->tt__FocusConfiguration20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusConfiguration20(struct soap *soap, tt__FocusConfiguration20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusConfiguration20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (494)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance20Extension(struct soap*, const char*, int, const tt__WhiteBalance20Extension *, const char*);
SOAP_FMAC3 tt__WhiteBalance20Extension * SOAP_FMAC4 soap_in_tt__WhiteBalance20Extension(struct soap*, const char*, tt__WhiteBalance20Extension *, const char*);

#ifndef soap_write_tt__WhiteBalance20Extension
#define soap_write_tt__WhiteBalance20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalance20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalance20Extension * SOAP_FMAC4 soap_get_tt__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalance20Extension
#define soap_read_tt__WhiteBalance20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalance20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalance20Extension * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance20Extension * soap_new_tt__WhiteBalance20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalance20Extension(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalance20Extension * soap_new_req_tt__WhiteBalance20Extension(struct soap *soap) { tt__WhiteBalance20Extension *_p = soap_instantiate_tt__WhiteBalance20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__WhiteBalance20Extension * soap_new_set_tt__WhiteBalance20Extension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__WhiteBalance20Extension *_p = soap_instantiate_tt__WhiteBalance20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalance20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalance20Extension(struct soap *soap, tt__WhiteBalance20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalance20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (493)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance20(struct soap*, const char*, int, const tt__WhiteBalance20 *, const char*);
SOAP_FMAC3 tt__WhiteBalance20 * SOAP_FMAC4 soap_in_tt__WhiteBalance20(struct soap*, const char*, tt__WhiteBalance20 *, const char*);

#ifndef soap_write_tt__WhiteBalance20
#define soap_write_tt__WhiteBalance20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalance20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalance20 * SOAP_FMAC4 soap_get_tt__WhiteBalance20(struct soap*, tt__WhiteBalance20 *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalance20
#define soap_read_tt__WhiteBalance20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalance20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalance20 * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance20 * soap_new_tt__WhiteBalance20(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalance20(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalance20 * soap_new_req_tt__WhiteBalance20(struct soap *soap, enum tt__WhiteBalanceMode Mode) { tt__WhiteBalance20 *_p = soap_instantiate_tt__WhiteBalance20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalance20::Mode = Mode; } return _p; }

inline tt__WhiteBalance20 * soap_new_set_tt__WhiteBalance20(struct soap *soap, enum tt__WhiteBalanceMode Mode, float *CrGain, float *CbGain, tt__WhiteBalance20Extension *Extension, char *__anyAttribute, char *__item1) { tt__WhiteBalance20 *_p = soap_instantiate_tt__WhiteBalance20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalance20::Mode = Mode; _p->tt__WhiteBalance20::CrGain = CrGain; _p->tt__WhiteBalance20::CbGain = CbGain; _p->tt__WhiteBalance20::Extension = Extension; _p->tt__WhiteBalance20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalance20(struct soap *soap, tt__WhiteBalance20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalance20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (492)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelativeFocusOptions20(struct soap*, const char*, int, const tt__RelativeFocusOptions20 *, const char*);
SOAP_FMAC3 tt__RelativeFocusOptions20 * SOAP_FMAC4 soap_in_tt__RelativeFocusOptions20(struct soap*, const char*, tt__RelativeFocusOptions20 *, const char*);

#ifndef soap_write_tt__RelativeFocusOptions20
#define soap_write_tt__RelativeFocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelativeFocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelativeFocusOptions20 * SOAP_FMAC4 soap_get_tt__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 *, const char*, const char*);

#ifndef soap_read_tt__RelativeFocusOptions20
#define soap_read_tt__RelativeFocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelativeFocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelativeFocusOptions20 * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelativeFocusOptions20 * soap_new_tt__RelativeFocusOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelativeFocusOptions20(soap, n, NULL, NULL, NULL); }

inline tt__RelativeFocusOptions20 * soap_new_req_tt__RelativeFocusOptions20(struct soap *soap, tt__FloatRange *Distance) { tt__RelativeFocusOptions20 *_p = soap_instantiate_tt__RelativeFocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelativeFocusOptions20::Distance = Distance; } return _p; }

inline tt__RelativeFocusOptions20 * soap_new_set_tt__RelativeFocusOptions20(struct soap *soap, tt__FloatRange *Distance, tt__FloatRange *Speed, char *__item1) { tt__RelativeFocusOptions20 *_p = soap_instantiate_tt__RelativeFocusOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelativeFocusOptions20::Distance = Distance; _p->tt__RelativeFocusOptions20::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelativeFocusOptions20(struct soap *soap, tt__RelativeFocusOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelativeFocusOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (491)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveOptions20(struct soap*, const char*, int, const tt__MoveOptions20 *, const char*);
SOAP_FMAC3 tt__MoveOptions20 * SOAP_FMAC4 soap_in_tt__MoveOptions20(struct soap*, const char*, tt__MoveOptions20 *, const char*);

#ifndef soap_write_tt__MoveOptions20
#define soap_write_tt__MoveOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MoveOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MoveOptions20 * SOAP_FMAC4 soap_get_tt__MoveOptions20(struct soap*, tt__MoveOptions20 *, const char*, const char*);

#ifndef soap_read_tt__MoveOptions20
#define soap_read_tt__MoveOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MoveOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MoveOptions20 * SOAP_FMAC2 soap_instantiate_tt__MoveOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__MoveOptions20 * soap_new_tt__MoveOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__MoveOptions20(soap, n, NULL, NULL, NULL); }

inline tt__MoveOptions20 * soap_new_req_tt__MoveOptions20(struct soap *soap) { tt__MoveOptions20 *_p = soap_instantiate_tt__MoveOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MoveOptions20 * soap_new_set_tt__MoveOptions20(struct soap *soap, tt__AbsoluteFocusOptions *Absolute, tt__RelativeFocusOptions20 *Relative, tt__ContinuousFocusOptions *Continuous, char *__item1) { tt__MoveOptions20 *_p = soap_instantiate_tt__MoveOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MoveOptions20::Absolute = Absolute; _p->tt__MoveOptions20::Relative = Relative; _p->tt__MoveOptions20::Continuous = Continuous; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MoveOptions20(struct soap *soap, tt__MoveOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MoveOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (490)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureOptions20(struct soap*, const char*, int, const tt__ExposureOptions20 *, const char*);
SOAP_FMAC3 tt__ExposureOptions20 * SOAP_FMAC4 soap_in_tt__ExposureOptions20(struct soap*, const char*, tt__ExposureOptions20 *, const char*);

#ifndef soap_write_tt__ExposureOptions20
#define soap_write_tt__ExposureOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ExposureOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ExposureOptions20 * SOAP_FMAC4 soap_get_tt__ExposureOptions20(struct soap*, tt__ExposureOptions20 *, const char*, const char*);

#ifndef soap_read_tt__ExposureOptions20
#define soap_read_tt__ExposureOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ExposureOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ExposureOptions20 * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposureOptions20 * soap_new_tt__ExposureOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__ExposureOptions20(soap, n, NULL, NULL, NULL); }

inline tt__ExposureOptions20 * soap_new_req_tt__ExposureOptions20(struct soap *soap, std::vector<enum tt__ExposureMode >& Mode) { tt__ExposureOptions20 *_p = soap_instantiate_tt__ExposureOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposureOptions20::Mode = Mode; } return _p; }

inline tt__ExposureOptions20 * soap_new_set_tt__ExposureOptions20(struct soap *soap, std::vector<enum tt__ExposureMode >& Mode, std::vector<enum tt__ExposurePriority >& Priority, tt__FloatRange *MinExposureTime, tt__FloatRange *MaxExposureTime, tt__FloatRange *MinGain, tt__FloatRange *MaxGain, tt__FloatRange *MinIris, tt__FloatRange *MaxIris, tt__FloatRange *ExposureTime, tt__FloatRange *Gain, tt__FloatRange *Iris, char *__item1) { tt__ExposureOptions20 *_p = soap_instantiate_tt__ExposureOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposureOptions20::Mode = Mode; _p->tt__ExposureOptions20::Priority = Priority; _p->tt__ExposureOptions20::MinExposureTime = MinExposureTime; _p->tt__ExposureOptions20::MaxExposureTime = MaxExposureTime; _p->tt__ExposureOptions20::MinGain = MinGain; _p->tt__ExposureOptions20::MaxGain = MaxGain; _p->tt__ExposureOptions20::MinIris = MinIris; _p->tt__ExposureOptions20::MaxIris = MaxIris; _p->tt__ExposureOptions20::ExposureTime = ExposureTime; _p->tt__ExposureOptions20::Gain = Gain; _p->tt__ExposureOptions20::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ExposureOptions20(struct soap *soap, tt__ExposureOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ExposureOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (489)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationOptions20(struct soap*, const char*, int, const tt__BacklightCompensationOptions20 *, const char*);
SOAP_FMAC3 tt__BacklightCompensationOptions20 * SOAP_FMAC4 soap_in_tt__BacklightCompensationOptions20(struct soap*, const char*, tt__BacklightCompensationOptions20 *, const char*);

#ifndef soap_write_tt__BacklightCompensationOptions20
#define soap_write_tt__BacklightCompensationOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BacklightCompensationOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensationOptions20 * SOAP_FMAC4 soap_get_tt__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 *, const char*, const char*);

#ifndef soap_read_tt__BacklightCompensationOptions20
#define soap_read_tt__BacklightCompensationOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BacklightCompensationOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BacklightCompensationOptions20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensationOptions20 * soap_new_tt__BacklightCompensationOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__BacklightCompensationOptions20(soap, n, NULL, NULL, NULL); }

inline tt__BacklightCompensationOptions20 * soap_new_req_tt__BacklightCompensationOptions20(struct soap *soap, std::vector<enum tt__BacklightCompensationMode >& Mode) { tt__BacklightCompensationOptions20 *_p = soap_instantiate_tt__BacklightCompensationOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensationOptions20::Mode = Mode; } return _p; }

inline tt__BacklightCompensationOptions20 * soap_new_set_tt__BacklightCompensationOptions20(struct soap *soap, std::vector<enum tt__BacklightCompensationMode >& Mode, tt__FloatRange *Level, char *__item1) { tt__BacklightCompensationOptions20 *_p = soap_instantiate_tt__BacklightCompensationOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensationOptions20::Mode = Mode; _p->tt__BacklightCompensationOptions20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BacklightCompensationOptions20(struct soap *soap, tt__BacklightCompensationOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BacklightCompensationOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (488)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRangeOptions20(struct soap*, const char*, int, const tt__WideDynamicRangeOptions20 *, const char*);
SOAP_FMAC3 tt__WideDynamicRangeOptions20 * SOAP_FMAC4 soap_in_tt__WideDynamicRangeOptions20(struct soap*, const char*, tt__WideDynamicRangeOptions20 *, const char*);

#ifndef soap_write_tt__WideDynamicRangeOptions20
#define soap_write_tt__WideDynamicRangeOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WideDynamicRangeOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRangeOptions20 * SOAP_FMAC4 soap_get_tt__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 *, const char*, const char*);

#ifndef soap_read_tt__WideDynamicRangeOptions20
#define soap_read_tt__WideDynamicRangeOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WideDynamicRangeOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WideDynamicRangeOptions20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRangeOptions20 * soap_new_tt__WideDynamicRangeOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__WideDynamicRangeOptions20(soap, n, NULL, NULL, NULL); }

inline tt__WideDynamicRangeOptions20 * soap_new_req_tt__WideDynamicRangeOptions20(struct soap *soap, std::vector<enum tt__WideDynamicMode >& Mode) { tt__WideDynamicRangeOptions20 *_p = soap_instantiate_tt__WideDynamicRangeOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRangeOptions20::Mode = Mode; } return _p; }

inline tt__WideDynamicRangeOptions20 * soap_new_set_tt__WideDynamicRangeOptions20(struct soap *soap, std::vector<enum tt__WideDynamicMode >& Mode, tt__FloatRange *Level, char *__item1) { tt__WideDynamicRangeOptions20 *_p = soap_instantiate_tt__WideDynamicRangeOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRangeOptions20::Mode = Mode; _p->tt__WideDynamicRangeOptions20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WideDynamicRangeOptions20(struct soap *soap, tt__WideDynamicRangeOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WideDynamicRangeOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (487)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentOptionsExtension *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptionsExtension *, const char*);

#ifndef soap_write_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_write_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IrCutFilterAutoAdjustmentOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_read_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_req_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap) { tt__IrCutFilterAutoAdjustmentOptionsExtension *_p = soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IrCutFilterAutoAdjustmentOptionsExtension * soap_new_set_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__IrCutFilterAutoAdjustmentOptionsExtension *_p = soap_instantiate_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoAdjustmentOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (486)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentOptions *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptions *, const char*);

#ifndef soap_write_tt__IrCutFilterAutoAdjustmentOptions
#define soap_write_tt__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IrCutFilterAutoAdjustmentOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterAutoAdjustmentOptions
#define soap_read_tt__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterAutoAdjustmentOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentOptions * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentOptions * soap_new_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(soap, n, NULL, NULL, NULL); }

inline tt__IrCutFilterAutoAdjustmentOptions * soap_new_req_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, std::vector<std::string >& BoundaryType) { tt__IrCutFilterAutoAdjustmentOptions *_p = soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoAdjustmentOptions::BoundaryType = BoundaryType; } return _p; }

inline tt__IrCutFilterAutoAdjustmentOptions * soap_new_set_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, std::vector<std::string >& BoundaryType, bool *BoundaryOffset, tt__DurationRange *ResponseTimeRange, tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__IrCutFilterAutoAdjustmentOptions *_p = soap_instantiate_tt__IrCutFilterAutoAdjustmentOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoAdjustmentOptions::BoundaryType = BoundaryType; _p->tt__IrCutFilterAutoAdjustmentOptions::BoundaryOffset = BoundaryOffset; _p->tt__IrCutFilterAutoAdjustmentOptions::ResponseTimeRange = ResponseTimeRange; _p->tt__IrCutFilterAutoAdjustmentOptions::Extension = Extension; _p->tt__IrCutFilterAutoAdjustmentOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IrCutFilterAutoAdjustmentOptions(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IrCutFilterAutoAdjustmentOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (485)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationOptionsExtension(struct soap*, const char*, int, const tt__ImageStabilizationOptionsExtension *, const char*);
SOAP_FMAC3 tt__ImageStabilizationOptionsExtension * SOAP_FMAC4 soap_in_tt__ImageStabilizationOptionsExtension(struct soap*, const char*, tt__ImageStabilizationOptionsExtension *, const char*);

#ifndef soap_write_tt__ImageStabilizationOptionsExtension
#define soap_write_tt__ImageStabilizationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImageStabilizationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationOptionsExtension * SOAP_FMAC4 soap_get_tt__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__ImageStabilizationOptionsExtension
#define soap_read_tt__ImageStabilizationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageStabilizationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImageStabilizationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationOptionsExtension * soap_new_tt__ImageStabilizationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImageStabilizationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__ImageStabilizationOptionsExtension * soap_new_req_tt__ImageStabilizationOptionsExtension(struct soap *soap) { tt__ImageStabilizationOptionsExtension *_p = soap_instantiate_tt__ImageStabilizationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImageStabilizationOptionsExtension * soap_new_set_tt__ImageStabilizationOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ImageStabilizationOptionsExtension *_p = soap_instantiate_tt__ImageStabilizationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilizationOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImageStabilizationOptionsExtension(struct soap *soap, tt__ImageStabilizationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImageStabilizationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (484)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationOptions(struct soap*, const char*, int, const tt__ImageStabilizationOptions *, const char*);
SOAP_FMAC3 tt__ImageStabilizationOptions * SOAP_FMAC4 soap_in_tt__ImageStabilizationOptions(struct soap*, const char*, tt__ImageStabilizationOptions *, const char*);

#ifndef soap_write_tt__ImageStabilizationOptions
#define soap_write_tt__ImageStabilizationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImageStabilizationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationOptions * SOAP_FMAC4 soap_get_tt__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions *, const char*, const char*);

#ifndef soap_read_tt__ImageStabilizationOptions
#define soap_read_tt__ImageStabilizationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageStabilizationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImageStabilizationOptions * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationOptions * soap_new_tt__ImageStabilizationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImageStabilizationOptions(soap, n, NULL, NULL, NULL); }

inline tt__ImageStabilizationOptions * soap_new_req_tt__ImageStabilizationOptions(struct soap *soap, std::vector<enum tt__ImageStabilizationMode >& Mode) { tt__ImageStabilizationOptions *_p = soap_instantiate_tt__ImageStabilizationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilizationOptions::Mode = Mode; } return _p; }

inline tt__ImageStabilizationOptions * soap_new_set_tt__ImageStabilizationOptions(struct soap *soap, std::vector<enum tt__ImageStabilizationMode >& Mode, tt__FloatRange *Level, tt__ImageStabilizationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__ImageStabilizationOptions *_p = soap_instantiate_tt__ImageStabilizationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilizationOptions::Mode = Mode; _p->tt__ImageStabilizationOptions::Level = Level; _p->tt__ImageStabilizationOptions::Extension = Extension; _p->tt__ImageStabilizationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImageStabilizationOptions(struct soap *soap, tt__ImageStabilizationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImageStabilizationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (483)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension4(struct soap*, const char*, int, const tt__ImagingOptions20Extension4 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension4 * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension4(struct soap*, const char*, tt__ImagingOptions20Extension4 *, const char*);

#ifndef soap_write_tt__ImagingOptions20Extension4
#define soap_write_tt__ImagingOptions20Extension4(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingOptions20Extension4", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension4 * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 *, const char*, const char*);

#ifndef soap_read_tt__ImagingOptions20Extension4
#define soap_read_tt__ImagingOptions20Extension4(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingOptions20Extension4(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingOptions20Extension4 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension4(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension4 * soap_new_tt__ImagingOptions20Extension4(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingOptions20Extension4(soap, n, NULL, NULL, NULL); }

inline tt__ImagingOptions20Extension4 * soap_new_req_tt__ImagingOptions20Extension4(struct soap *soap) { tt__ImagingOptions20Extension4 *_p = soap_instantiate_tt__ImagingOptions20Extension4(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingOptions20Extension4 * soap_new_set_tt__ImagingOptions20Extension4(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ImagingOptions20Extension4 *_p = soap_instantiate_tt__ImagingOptions20Extension4(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions20Extension4::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingOptions20Extension4(struct soap *soap, tt__ImagingOptions20Extension4 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingOptions20Extension4(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (482)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension3(struct soap*, const char*, int, const tt__ImagingOptions20Extension3 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension3 * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension3(struct soap*, const char*, tt__ImagingOptions20Extension3 *, const char*);

#ifndef soap_write_tt__ImagingOptions20Extension3
#define soap_write_tt__ImagingOptions20Extension3(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingOptions20Extension3", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension3 * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 *, const char*, const char*);

#ifndef soap_read_tt__ImagingOptions20Extension3
#define soap_read_tt__ImagingOptions20Extension3(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingOptions20Extension3(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingOptions20Extension3 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension3(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension3 * soap_new_tt__ImagingOptions20Extension3(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingOptions20Extension3(soap, n, NULL, NULL, NULL); }

inline tt__ImagingOptions20Extension3 * soap_new_req_tt__ImagingOptions20Extension3(struct soap *soap) { tt__ImagingOptions20Extension3 *_p = soap_instantiate_tt__ImagingOptions20Extension3(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingOptions20Extension3 * soap_new_set_tt__ImagingOptions20Extension3(struct soap *soap, tt__ToneCompensationOptions *ToneCompensationOptions, tt__DefoggingOptions *DefoggingOptions, tt__NoiseReductionOptions *NoiseReductionOptions, tt__ImagingOptions20Extension4 *Extension, char *__item1) { tt__ImagingOptions20Extension3 *_p = soap_instantiate_tt__ImagingOptions20Extension3(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions20Extension3::ToneCompensationOptions = ToneCompensationOptions; _p->tt__ImagingOptions20Extension3::DefoggingOptions = DefoggingOptions; _p->tt__ImagingOptions20Extension3::NoiseReductionOptions = NoiseReductionOptions; _p->tt__ImagingOptions20Extension3::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingOptions20Extension3(struct soap *soap, tt__ImagingOptions20Extension3 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingOptions20Extension3(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (481)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension2(struct soap*, const char*, int, const tt__ImagingOptions20Extension2 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension2 * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension2(struct soap*, const char*, tt__ImagingOptions20Extension2 *, const char*);

#ifndef soap_write_tt__ImagingOptions20Extension2
#define soap_write_tt__ImagingOptions20Extension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingOptions20Extension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension2 * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 *, const char*, const char*);

#ifndef soap_read_tt__ImagingOptions20Extension2
#define soap_read_tt__ImagingOptions20Extension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingOptions20Extension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingOptions20Extension2 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension2 * soap_new_tt__ImagingOptions20Extension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingOptions20Extension2(soap, n, NULL, NULL, NULL); }

inline tt__ImagingOptions20Extension2 * soap_new_req_tt__ImagingOptions20Extension2(struct soap *soap) { tt__ImagingOptions20Extension2 *_p = soap_instantiate_tt__ImagingOptions20Extension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingOptions20Extension2 * soap_new_set_tt__ImagingOptions20Extension2(struct soap *soap, tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment, tt__ImagingOptions20Extension3 *Extension, char *__item1) { tt__ImagingOptions20Extension2 *_p = soap_instantiate_tt__ImagingOptions20Extension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions20Extension2::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment; _p->tt__ImagingOptions20Extension2::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingOptions20Extension2(struct soap *soap, tt__ImagingOptions20Extension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingOptions20Extension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (480)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20Extension(struct soap*, const char*, int, const tt__ImagingOptions20Extension *, const char*);
SOAP_FMAC3 tt__ImagingOptions20Extension * SOAP_FMAC4 soap_in_tt__ImagingOptions20Extension(struct soap*, const char*, tt__ImagingOptions20Extension *, const char*);

#ifndef soap_write_tt__ImagingOptions20Extension
#define soap_write_tt__ImagingOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension * SOAP_FMAC4 soap_get_tt__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension *, const char*, const char*);

#ifndef soap_read_tt__ImagingOptions20Extension
#define soap_read_tt__ImagingOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingOptions20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20Extension * soap_new_tt__ImagingOptions20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingOptions20Extension(soap, n, NULL, NULL, NULL); }

inline tt__ImagingOptions20Extension * soap_new_req_tt__ImagingOptions20Extension(struct soap *soap) { tt__ImagingOptions20Extension *_p = soap_instantiate_tt__ImagingOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingOptions20Extension * soap_new_set_tt__ImagingOptions20Extension(struct soap *soap, std::vector<char * >& __any, tt__ImageStabilizationOptions *ImageStabilization, tt__ImagingOptions20Extension2 *Extension, char *__item1) { tt__ImagingOptions20Extension *_p = soap_instantiate_tt__ImagingOptions20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions20Extension::__any = __any; _p->tt__ImagingOptions20Extension::ImageStabilization = ImageStabilization; _p->tt__ImagingOptions20Extension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingOptions20Extension(struct soap *soap, tt__ImagingOptions20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingOptions20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (479)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions20(struct soap*, const char*, int, const tt__ImagingOptions20 *, const char*);
SOAP_FMAC3 tt__ImagingOptions20 * SOAP_FMAC4 soap_in_tt__ImagingOptions20(struct soap*, const char*, tt__ImagingOptions20 *, const char*);

#ifndef soap_write_tt__ImagingOptions20
#define soap_write_tt__ImagingOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20 * SOAP_FMAC4 soap_get_tt__ImagingOptions20(struct soap*, tt__ImagingOptions20 *, const char*, const char*);

#ifndef soap_read_tt__ImagingOptions20
#define soap_read_tt__ImagingOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingOptions20 * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions20 * soap_new_tt__ImagingOptions20(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingOptions20(soap, n, NULL, NULL, NULL); }

inline tt__ImagingOptions20 * soap_new_req_tt__ImagingOptions20(struct soap *soap) { tt__ImagingOptions20 *_p = soap_instantiate_tt__ImagingOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingOptions20 * soap_new_set_tt__ImagingOptions20(struct soap *soap, tt__BacklightCompensationOptions20 *BacklightCompensation, tt__FloatRange *Brightness, tt__FloatRange *ColorSaturation, tt__FloatRange *Contrast, tt__ExposureOptions20 *Exposure, tt__FocusOptions20 *Focus, std::vector<enum tt__IrCutFilterMode >& IrCutFilterModes, tt__FloatRange *Sharpness, tt__WideDynamicRangeOptions20 *WideDynamicRange, tt__WhiteBalanceOptions20 *WhiteBalance, tt__ImagingOptions20Extension *Extension, char *__anyAttribute, char *__item1) { tt__ImagingOptions20 *_p = soap_instantiate_tt__ImagingOptions20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions20::BacklightCompensation = BacklightCompensation; _p->tt__ImagingOptions20::Brightness = Brightness; _p->tt__ImagingOptions20::ColorSaturation = ColorSaturation; _p->tt__ImagingOptions20::Contrast = Contrast; _p->tt__ImagingOptions20::Exposure = Exposure; _p->tt__ImagingOptions20::Focus = Focus; _p->tt__ImagingOptions20::IrCutFilterModes = IrCutFilterModes; _p->tt__ImagingOptions20::Sharpness = Sharpness; _p->tt__ImagingOptions20::WideDynamicRange = WideDynamicRange; _p->tt__ImagingOptions20::WhiteBalance = WhiteBalance; _p->tt__ImagingOptions20::Extension = Extension; _p->tt__ImagingOptions20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingOptions20(struct soap *soap, tt__ImagingOptions20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingOptions20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (478)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NoiseReduction(struct soap*, const char*, int, const tt__NoiseReduction *, const char*);
SOAP_FMAC3 tt__NoiseReduction * SOAP_FMAC4 soap_in_tt__NoiseReduction(struct soap*, const char*, tt__NoiseReduction *, const char*);

#ifndef soap_write_tt__NoiseReduction
#define soap_write_tt__NoiseReduction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NoiseReduction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NoiseReduction * SOAP_FMAC4 soap_get_tt__NoiseReduction(struct soap*, tt__NoiseReduction *, const char*, const char*);

#ifndef soap_read_tt__NoiseReduction
#define soap_read_tt__NoiseReduction(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NoiseReduction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NoiseReduction * SOAP_FMAC2 soap_instantiate_tt__NoiseReduction(struct soap*, int, const char*, const char*, size_t*);

inline tt__NoiseReduction * soap_new_tt__NoiseReduction(struct soap *soap, int n = -1) { return soap_instantiate_tt__NoiseReduction(soap, n, NULL, NULL, NULL); }

inline tt__NoiseReduction * soap_new_req_tt__NoiseReduction(struct soap *soap, float Level) { tt__NoiseReduction *_p = soap_instantiate_tt__NoiseReduction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NoiseReduction::Level = Level; } return _p; }

inline tt__NoiseReduction * soap_new_set_tt__NoiseReduction(struct soap *soap, float Level, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__NoiseReduction *_p = soap_instantiate_tt__NoiseReduction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NoiseReduction::Level = Level; _p->tt__NoiseReduction::__any = __any; _p->tt__NoiseReduction::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NoiseReduction(struct soap *soap, tt__NoiseReduction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NoiseReduction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (477)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DefoggingExtension(struct soap*, const char*, int, const tt__DefoggingExtension *, const char*);
SOAP_FMAC3 tt__DefoggingExtension * SOAP_FMAC4 soap_in_tt__DefoggingExtension(struct soap*, const char*, tt__DefoggingExtension *, const char*);

#ifndef soap_write_tt__DefoggingExtension
#define soap_write_tt__DefoggingExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DefoggingExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DefoggingExtension * SOAP_FMAC4 soap_get_tt__DefoggingExtension(struct soap*, tt__DefoggingExtension *, const char*, const char*);

#ifndef soap_read_tt__DefoggingExtension
#define soap_read_tt__DefoggingExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DefoggingExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DefoggingExtension * SOAP_FMAC2 soap_instantiate_tt__DefoggingExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DefoggingExtension * soap_new_tt__DefoggingExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__DefoggingExtension(soap, n, NULL, NULL, NULL); }

inline tt__DefoggingExtension * soap_new_req_tt__DefoggingExtension(struct soap *soap) { tt__DefoggingExtension *_p = soap_instantiate_tt__DefoggingExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__DefoggingExtension * soap_new_set_tt__DefoggingExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__DefoggingExtension *_p = soap_instantiate_tt__DefoggingExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DefoggingExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DefoggingExtension(struct soap *soap, tt__DefoggingExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DefoggingExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (476)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Defogging(struct soap*, const char*, int, const tt__Defogging *, const char*);
SOAP_FMAC3 tt__Defogging * SOAP_FMAC4 soap_in_tt__Defogging(struct soap*, const char*, tt__Defogging *, const char*);

#ifndef soap_write_tt__Defogging
#define soap_write_tt__Defogging(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Defogging", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Defogging * SOAP_FMAC4 soap_get_tt__Defogging(struct soap*, tt__Defogging *, const char*, const char*);

#ifndef soap_read_tt__Defogging
#define soap_read_tt__Defogging(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Defogging(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Defogging * SOAP_FMAC2 soap_instantiate_tt__Defogging(struct soap*, int, const char*, const char*, size_t*);

inline tt__Defogging * soap_new_tt__Defogging(struct soap *soap, int n = -1) { return soap_instantiate_tt__Defogging(soap, n, NULL, NULL, NULL); }

inline tt__Defogging * soap_new_req_tt__Defogging(struct soap *soap, std::string& Mode) { tt__Defogging *_p = soap_instantiate_tt__Defogging(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Defogging::Mode = Mode; } return _p; }

inline tt__Defogging * soap_new_set_tt__Defogging(struct soap *soap, std::string& Mode, float *Level, tt__DefoggingExtension *Extension, char *__anyAttribute, char *__item1) { tt__Defogging *_p = soap_instantiate_tt__Defogging(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Defogging::Mode = Mode; _p->tt__Defogging::Level = Level; _p->tt__Defogging::Extension = Extension; _p->tt__Defogging::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Defogging(struct soap *soap, tt__Defogging *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Defogging(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (475)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensationExtension(struct soap*, const char*, int, const tt__ToneCompensationExtension *, const char*);
SOAP_FMAC3 tt__ToneCompensationExtension * SOAP_FMAC4 soap_in_tt__ToneCompensationExtension(struct soap*, const char*, tt__ToneCompensationExtension *, const char*);

#ifndef soap_write_tt__ToneCompensationExtension
#define soap_write_tt__ToneCompensationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ToneCompensationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensationExtension * SOAP_FMAC4 soap_get_tt__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *, const char*, const char*);

#ifndef soap_read_tt__ToneCompensationExtension
#define soap_read_tt__ToneCompensationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ToneCompensationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ToneCompensationExtension * SOAP_FMAC2 soap_instantiate_tt__ToneCompensationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensationExtension * soap_new_tt__ToneCompensationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ToneCompensationExtension(soap, n, NULL, NULL, NULL); }

inline tt__ToneCompensationExtension * soap_new_req_tt__ToneCompensationExtension(struct soap *soap) { tt__ToneCompensationExtension *_p = soap_instantiate_tt__ToneCompensationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ToneCompensationExtension * soap_new_set_tt__ToneCompensationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ToneCompensationExtension *_p = soap_instantiate_tt__ToneCompensationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ToneCompensationExtension(struct soap *soap, tt__ToneCompensationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ToneCompensationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (474)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ToneCompensation(struct soap*, const char*, int, const tt__ToneCompensation *, const char*);
SOAP_FMAC3 tt__ToneCompensation * SOAP_FMAC4 soap_in_tt__ToneCompensation(struct soap*, const char*, tt__ToneCompensation *, const char*);

#ifndef soap_write_tt__ToneCompensation
#define soap_write_tt__ToneCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ToneCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensation * SOAP_FMAC4 soap_get_tt__ToneCompensation(struct soap*, tt__ToneCompensation *, const char*, const char*);

#ifndef soap_read_tt__ToneCompensation
#define soap_read_tt__ToneCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ToneCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ToneCompensation * SOAP_FMAC2 soap_instantiate_tt__ToneCompensation(struct soap*, int, const char*, const char*, size_t*);

inline tt__ToneCompensation * soap_new_tt__ToneCompensation(struct soap *soap, int n = -1) { return soap_instantiate_tt__ToneCompensation(soap, n, NULL, NULL, NULL); }

inline tt__ToneCompensation * soap_new_req_tt__ToneCompensation(struct soap *soap, std::string& Mode) { tt__ToneCompensation *_p = soap_instantiate_tt__ToneCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensation::Mode = Mode; } return _p; }

inline tt__ToneCompensation * soap_new_set_tt__ToneCompensation(struct soap *soap, std::string& Mode, float *Level, tt__ToneCompensationExtension *Extension, char *__anyAttribute, char *__item1) { tt__ToneCompensation *_p = soap_instantiate_tt__ToneCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ToneCompensation::Mode = Mode; _p->tt__ToneCompensation::Level = Level; _p->tt__ToneCompensation::Extension = Extension; _p->tt__ToneCompensation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ToneCompensation(struct soap *soap, tt__ToneCompensation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ToneCompensation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (473)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Exposure20(struct soap*, const char*, int, const tt__Exposure20 *, const char*);
SOAP_FMAC3 tt__Exposure20 * SOAP_FMAC4 soap_in_tt__Exposure20(struct soap*, const char*, tt__Exposure20 *, const char*);

#ifndef soap_write_tt__Exposure20
#define soap_write_tt__Exposure20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Exposure20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Exposure20 * SOAP_FMAC4 soap_get_tt__Exposure20(struct soap*, tt__Exposure20 *, const char*, const char*);

#ifndef soap_read_tt__Exposure20
#define soap_read_tt__Exposure20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Exposure20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Exposure20 * SOAP_FMAC2 soap_instantiate_tt__Exposure20(struct soap*, int, const char*, const char*, size_t*);

inline tt__Exposure20 * soap_new_tt__Exposure20(struct soap *soap, int n = -1) { return soap_instantiate_tt__Exposure20(soap, n, NULL, NULL, NULL); }

inline tt__Exposure20 * soap_new_req_tt__Exposure20(struct soap *soap, enum tt__ExposureMode Mode) { tt__Exposure20 *_p = soap_instantiate_tt__Exposure20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Exposure20::Mode = Mode; } return _p; }

inline tt__Exposure20 * soap_new_set_tt__Exposure20(struct soap *soap, enum tt__ExposureMode Mode, enum tt__ExposurePriority *Priority, tt__Rectangle *Window, float *MinExposureTime, float *MaxExposureTime, float *MinGain, float *MaxGain, float *MinIris, float *MaxIris, float *ExposureTime, float *Gain, float *Iris, char *__item1) { tt__Exposure20 *_p = soap_instantiate_tt__Exposure20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Exposure20::Mode = Mode; _p->tt__Exposure20::Priority = Priority; _p->tt__Exposure20::Window = Window; _p->tt__Exposure20::MinExposureTime = MinExposureTime; _p->tt__Exposure20::MaxExposureTime = MaxExposureTime; _p->tt__Exposure20::MinGain = MinGain; _p->tt__Exposure20::MaxGain = MaxGain; _p->tt__Exposure20::MinIris = MinIris; _p->tt__Exposure20::MaxIris = MaxIris; _p->tt__Exposure20::ExposureTime = ExposureTime; _p->tt__Exposure20::Gain = Gain; _p->tt__Exposure20::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Exposure20(struct soap *soap, tt__Exposure20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Exposure20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (472)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensation20(struct soap*, const char*, int, const tt__BacklightCompensation20 *, const char*);
SOAP_FMAC3 tt__BacklightCompensation20 * SOAP_FMAC4 soap_in_tt__BacklightCompensation20(struct soap*, const char*, tt__BacklightCompensation20 *, const char*);

#ifndef soap_write_tt__BacklightCompensation20
#define soap_write_tt__BacklightCompensation20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BacklightCompensation20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensation20 * SOAP_FMAC4 soap_get_tt__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *, const char*, const char*);

#ifndef soap_read_tt__BacklightCompensation20
#define soap_read_tt__BacklightCompensation20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BacklightCompensation20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BacklightCompensation20 * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation20(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensation20 * soap_new_tt__BacklightCompensation20(struct soap *soap, int n = -1) { return soap_instantiate_tt__BacklightCompensation20(soap, n, NULL, NULL, NULL); }

inline tt__BacklightCompensation20 * soap_new_req_tt__BacklightCompensation20(struct soap *soap, enum tt__BacklightCompensationMode Mode) { tt__BacklightCompensation20 *_p = soap_instantiate_tt__BacklightCompensation20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensation20::Mode = Mode; } return _p; }

inline tt__BacklightCompensation20 * soap_new_set_tt__BacklightCompensation20(struct soap *soap, enum tt__BacklightCompensationMode Mode, float *Level, char *__item1) { tt__BacklightCompensation20 *_p = soap_instantiate_tt__BacklightCompensation20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensation20::Mode = Mode; _p->tt__BacklightCompensation20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BacklightCompensation20(struct soap *soap, tt__BacklightCompensation20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BacklightCompensation20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (471)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRange20(struct soap*, const char*, int, const tt__WideDynamicRange20 *, const char*);
SOAP_FMAC3 tt__WideDynamicRange20 * SOAP_FMAC4 soap_in_tt__WideDynamicRange20(struct soap*, const char*, tt__WideDynamicRange20 *, const char*);

#ifndef soap_write_tt__WideDynamicRange20
#define soap_write_tt__WideDynamicRange20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WideDynamicRange20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRange20 * SOAP_FMAC4 soap_get_tt__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *, const char*, const char*);

#ifndef soap_read_tt__WideDynamicRange20
#define soap_read_tt__WideDynamicRange20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WideDynamicRange20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WideDynamicRange20 * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange20(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRange20 * soap_new_tt__WideDynamicRange20(struct soap *soap, int n = -1) { return soap_instantiate_tt__WideDynamicRange20(soap, n, NULL, NULL, NULL); }

inline tt__WideDynamicRange20 * soap_new_req_tt__WideDynamicRange20(struct soap *soap, enum tt__WideDynamicMode Mode) { tt__WideDynamicRange20 *_p = soap_instantiate_tt__WideDynamicRange20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRange20::Mode = Mode; } return _p; }

inline tt__WideDynamicRange20 * soap_new_set_tt__WideDynamicRange20(struct soap *soap, enum tt__WideDynamicMode Mode, float *Level, char *__item1) { tt__WideDynamicRange20 *_p = soap_instantiate_tt__WideDynamicRange20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRange20::Mode = Mode; _p->tt__WideDynamicRange20::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WideDynamicRange20(struct soap *soap, tt__WideDynamicRange20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WideDynamicRange20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (470)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustmentExtension *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentExtension *, const char*);

#ifndef soap_write_tt__IrCutFilterAutoAdjustmentExtension
#define soap_write_tt__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IrCutFilterAutoAdjustmentExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterAutoAdjustmentExtension
#define soap_read_tt__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterAutoAdjustmentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IrCutFilterAutoAdjustmentExtension * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(soap, n, NULL, NULL, NULL); }

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_req_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap) { tt__IrCutFilterAutoAdjustmentExtension *_p = soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IrCutFilterAutoAdjustmentExtension * soap_new_set_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__IrCutFilterAutoAdjustmentExtension *_p = soap_instantiate_tt__IrCutFilterAutoAdjustmentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoAdjustmentExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IrCutFilterAutoAdjustmentExtension(struct soap *soap, tt__IrCutFilterAutoAdjustmentExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IrCutFilterAutoAdjustmentExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (469)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const tt__IrCutFilterAutoAdjustment *, const char*);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_in_tt__IrCutFilterAutoAdjustment(struct soap*, const char*, tt__IrCutFilterAutoAdjustment *, const char*);

#ifndef soap_write_tt__IrCutFilterAutoAdjustment
#define soap_write_tt__IrCutFilterAutoAdjustment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IrCutFilterAutoAdjustment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustment * SOAP_FMAC4 soap_get_tt__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *, const char*, const char*);

#ifndef soap_read_tt__IrCutFilterAutoAdjustment
#define soap_read_tt__IrCutFilterAutoAdjustment(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IrCutFilterAutoAdjustment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IrCutFilterAutoAdjustment * SOAP_FMAC2 soap_instantiate_tt__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline tt__IrCutFilterAutoAdjustment * soap_new_tt__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1) { return soap_instantiate_tt__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL); }

inline tt__IrCutFilterAutoAdjustment * soap_new_req_tt__IrCutFilterAutoAdjustment(struct soap *soap, std::string& BoundaryType) { tt__IrCutFilterAutoAdjustment *_p = soap_instantiate_tt__IrCutFilterAutoAdjustment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType; } return _p; }

inline tt__IrCutFilterAutoAdjustment * soap_new_set_tt__IrCutFilterAutoAdjustment(struct soap *soap, std::string& BoundaryType, float *BoundaryOffset, LONG64 *ResponseTime, tt__IrCutFilterAutoAdjustmentExtension *Extension, char *__anyAttribute, char *__item1) { tt__IrCutFilterAutoAdjustment *_p = soap_instantiate_tt__IrCutFilterAutoAdjustment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IrCutFilterAutoAdjustment::BoundaryType = BoundaryType; _p->tt__IrCutFilterAutoAdjustment::BoundaryOffset = BoundaryOffset; _p->tt__IrCutFilterAutoAdjustment::ResponseTime = ResponseTime; _p->tt__IrCutFilterAutoAdjustment::Extension = Extension; _p->tt__IrCutFilterAutoAdjustment::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IrCutFilterAutoAdjustment(struct soap *soap, tt__IrCutFilterAutoAdjustment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IrCutFilterAutoAdjustment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (468)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilizationExtension(struct soap*, const char*, int, const tt__ImageStabilizationExtension *, const char*);
SOAP_FMAC3 tt__ImageStabilizationExtension * SOAP_FMAC4 soap_in_tt__ImageStabilizationExtension(struct soap*, const char*, tt__ImageStabilizationExtension *, const char*);

#ifndef soap_write_tt__ImageStabilizationExtension
#define soap_write_tt__ImageStabilizationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImageStabilizationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationExtension * SOAP_FMAC4 soap_get_tt__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *, const char*, const char*);

#ifndef soap_read_tt__ImageStabilizationExtension
#define soap_read_tt__ImageStabilizationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageStabilizationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImageStabilizationExtension * SOAP_FMAC2 soap_instantiate_tt__ImageStabilizationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilizationExtension * soap_new_tt__ImageStabilizationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImageStabilizationExtension(soap, n, NULL, NULL, NULL); }

inline tt__ImageStabilizationExtension * soap_new_req_tt__ImageStabilizationExtension(struct soap *soap) { tt__ImageStabilizationExtension *_p = soap_instantiate_tt__ImageStabilizationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImageStabilizationExtension * soap_new_set_tt__ImageStabilizationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ImageStabilizationExtension *_p = soap_instantiate_tt__ImageStabilizationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilizationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImageStabilizationExtension(struct soap *soap, tt__ImageStabilizationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImageStabilizationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (467)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImageStabilization(struct soap*, const char*, int, const tt__ImageStabilization *, const char*);
SOAP_FMAC3 tt__ImageStabilization * SOAP_FMAC4 soap_in_tt__ImageStabilization(struct soap*, const char*, tt__ImageStabilization *, const char*);

#ifndef soap_write_tt__ImageStabilization
#define soap_write_tt__ImageStabilization(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImageStabilization", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilization * SOAP_FMAC4 soap_get_tt__ImageStabilization(struct soap*, tt__ImageStabilization *, const char*, const char*);

#ifndef soap_read_tt__ImageStabilization
#define soap_read_tt__ImageStabilization(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImageStabilization(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImageStabilization * SOAP_FMAC2 soap_instantiate_tt__ImageStabilization(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImageStabilization * soap_new_tt__ImageStabilization(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImageStabilization(soap, n, NULL, NULL, NULL); }

inline tt__ImageStabilization * soap_new_req_tt__ImageStabilization(struct soap *soap, enum tt__ImageStabilizationMode Mode) { tt__ImageStabilization *_p = soap_instantiate_tt__ImageStabilization(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilization::Mode = Mode; } return _p; }

inline tt__ImageStabilization * soap_new_set_tt__ImageStabilization(struct soap *soap, enum tt__ImageStabilizationMode Mode, float *Level, tt__ImageStabilizationExtension *Extension, char *__anyAttribute, char *__item1) { tt__ImageStabilization *_p = soap_instantiate_tt__ImageStabilization(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImageStabilization::Mode = Mode; _p->tt__ImageStabilization::Level = Level; _p->tt__ImageStabilization::Extension = Extension; _p->tt__ImageStabilization::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImageStabilization(struct soap *soap, tt__ImageStabilization *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImageStabilization(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (466)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension204(struct soap*, const char*, int, const tt__ImagingSettingsExtension204 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension204 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension204(struct soap*, const char*, tt__ImagingSettingsExtension204 *, const char*);

#ifndef soap_write_tt__ImagingSettingsExtension204
#define soap_write_tt__ImagingSettingsExtension204(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettingsExtension204", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension204 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettingsExtension204
#define soap_read_tt__ImagingSettingsExtension204(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettingsExtension204(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettingsExtension204 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension204(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension204 * soap_new_tt__ImagingSettingsExtension204(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettingsExtension204(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettingsExtension204 * soap_new_req_tt__ImagingSettingsExtension204(struct soap *soap) { tt__ImagingSettingsExtension204 *_p = soap_instantiate_tt__ImagingSettingsExtension204(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettingsExtension204 * soap_new_set_tt__ImagingSettingsExtension204(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ImagingSettingsExtension204 *_p = soap_instantiate_tt__ImagingSettingsExtension204(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettingsExtension204::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettingsExtension204(struct soap *soap, tt__ImagingSettingsExtension204 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettingsExtension204(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (465)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension203(struct soap*, const char*, int, const tt__ImagingSettingsExtension203 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension203 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension203(struct soap*, const char*, tt__ImagingSettingsExtension203 *, const char*);

#ifndef soap_write_tt__ImagingSettingsExtension203
#define soap_write_tt__ImagingSettingsExtension203(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettingsExtension203", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension203 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettingsExtension203
#define soap_read_tt__ImagingSettingsExtension203(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettingsExtension203(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettingsExtension203 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension203(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension203 * soap_new_tt__ImagingSettingsExtension203(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettingsExtension203(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettingsExtension203 * soap_new_req_tt__ImagingSettingsExtension203(struct soap *soap) { tt__ImagingSettingsExtension203 *_p = soap_instantiate_tt__ImagingSettingsExtension203(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettingsExtension203 * soap_new_set_tt__ImagingSettingsExtension203(struct soap *soap, tt__ToneCompensation *ToneCompensation, tt__Defogging *Defogging, tt__NoiseReduction *NoiseReduction, tt__ImagingSettingsExtension204 *Extension, char *__item1) { tt__ImagingSettingsExtension203 *_p = soap_instantiate_tt__ImagingSettingsExtension203(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettingsExtension203::ToneCompensation = ToneCompensation; _p->tt__ImagingSettingsExtension203::Defogging = Defogging; _p->tt__ImagingSettingsExtension203::NoiseReduction = NoiseReduction; _p->tt__ImagingSettingsExtension203::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettingsExtension203(struct soap *soap, tt__ImagingSettingsExtension203 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettingsExtension203(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (464)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension202(struct soap*, const char*, int, const tt__ImagingSettingsExtension202 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension202 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension202(struct soap*, const char*, tt__ImagingSettingsExtension202 *, const char*);

#ifndef soap_write_tt__ImagingSettingsExtension202
#define soap_write_tt__ImagingSettingsExtension202(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettingsExtension202", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension202 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettingsExtension202
#define soap_read_tt__ImagingSettingsExtension202(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettingsExtension202(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettingsExtension202 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension202(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension202 * soap_new_tt__ImagingSettingsExtension202(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettingsExtension202(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettingsExtension202 * soap_new_req_tt__ImagingSettingsExtension202(struct soap *soap) { tt__ImagingSettingsExtension202 *_p = soap_instantiate_tt__ImagingSettingsExtension202(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettingsExtension202 * soap_new_set_tt__ImagingSettingsExtension202(struct soap *soap, std::vector<tt__IrCutFilterAutoAdjustment * >& IrCutFilterAutoAdjustment, tt__ImagingSettingsExtension203 *Extension, char *__item1) { tt__ImagingSettingsExtension202 *_p = soap_instantiate_tt__ImagingSettingsExtension202(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettingsExtension202::IrCutFilterAutoAdjustment = IrCutFilterAutoAdjustment; _p->tt__ImagingSettingsExtension202::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettingsExtension202(struct soap *soap, tt__ImagingSettingsExtension202 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettingsExtension202(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (463)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension20(struct soap*, const char*, int, const tt__ImagingSettingsExtension20 *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension20 * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension20(struct soap*, const char*, tt__ImagingSettingsExtension20 *, const char*);

#ifndef soap_write_tt__ImagingSettingsExtension20
#define soap_write_tt__ImagingSettingsExtension20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettingsExtension20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension20 * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettingsExtension20
#define soap_read_tt__ImagingSettingsExtension20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettingsExtension20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettingsExtension20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension20 * soap_new_tt__ImagingSettingsExtension20(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettingsExtension20(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettingsExtension20 * soap_new_req_tt__ImagingSettingsExtension20(struct soap *soap) { tt__ImagingSettingsExtension20 *_p = soap_instantiate_tt__ImagingSettingsExtension20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettingsExtension20 * soap_new_set_tt__ImagingSettingsExtension20(struct soap *soap, std::vector<char * >& __any, tt__ImageStabilization *ImageStabilization, tt__ImagingSettingsExtension202 *Extension, char *__item1) { tt__ImagingSettingsExtension20 *_p = soap_instantiate_tt__ImagingSettingsExtension20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettingsExtension20::__any = __any; _p->tt__ImagingSettingsExtension20::ImageStabilization = ImageStabilization; _p->tt__ImagingSettingsExtension20::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettingsExtension20(struct soap *soap, tt__ImagingSettingsExtension20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettingsExtension20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (462)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettings20(struct soap*, const char*, int, const tt__ImagingSettings20 *, const char*);
SOAP_FMAC3 tt__ImagingSettings20 * SOAP_FMAC4 soap_in_tt__ImagingSettings20(struct soap*, const char*, tt__ImagingSettings20 *, const char*);

#ifndef soap_write_tt__ImagingSettings20
#define soap_write_tt__ImagingSettings20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettings20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettings20 * SOAP_FMAC4 soap_get_tt__ImagingSettings20(struct soap*, tt__ImagingSettings20 *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettings20
#define soap_read_tt__ImagingSettings20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettings20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettings20 * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettings20 * soap_new_tt__ImagingSettings20(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettings20(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettings20 * soap_new_req_tt__ImagingSettings20(struct soap *soap) { tt__ImagingSettings20 *_p = soap_instantiate_tt__ImagingSettings20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettings20 * soap_new_set_tt__ImagingSettings20(struct soap *soap, tt__BacklightCompensation20 *BacklightCompensation, float *Brightness, float *ColorSaturation, float *Contrast, tt__Exposure20 *Exposure, tt__FocusConfiguration20 *Focus, enum tt__IrCutFilterMode *IrCutFilter, float *Sharpness, tt__WideDynamicRange20 *WideDynamicRange, tt__WhiteBalance20 *WhiteBalance, tt__ImagingSettingsExtension20 *Extension, char *__anyAttribute, char *__item1) { tt__ImagingSettings20 *_p = soap_instantiate_tt__ImagingSettings20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettings20::BacklightCompensation = BacklightCompensation; _p->tt__ImagingSettings20::Brightness = Brightness; _p->tt__ImagingSettings20::ColorSaturation = ColorSaturation; _p->tt__ImagingSettings20::Contrast = Contrast; _p->tt__ImagingSettings20::Exposure = Exposure; _p->tt__ImagingSettings20::Focus = Focus; _p->tt__ImagingSettings20::IrCutFilter = IrCutFilter; _p->tt__ImagingSettings20::Sharpness = Sharpness; _p->tt__ImagingSettings20::WideDynamicRange = WideDynamicRange; _p->tt__ImagingSettings20::WhiteBalance = WhiteBalance; _p->tt__ImagingSettings20::Extension = Extension; _p->tt__ImagingSettings20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettings20(struct soap *soap, tt__ImagingSettings20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettings20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (461)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusStatus20Extension(struct soap*, const char*, int, const tt__FocusStatus20Extension *, const char*);
SOAP_FMAC3 tt__FocusStatus20Extension * SOAP_FMAC4 soap_in_tt__FocusStatus20Extension(struct soap*, const char*, tt__FocusStatus20Extension *, const char*);

#ifndef soap_write_tt__FocusStatus20Extension
#define soap_write_tt__FocusStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusStatus20Extension * SOAP_FMAC4 soap_get_tt__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension *, const char*, const char*);

#ifndef soap_read_tt__FocusStatus20Extension
#define soap_read_tt__FocusStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusStatus20Extension * soap_new_tt__FocusStatus20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusStatus20Extension(soap, n, NULL, NULL, NULL); }

inline tt__FocusStatus20Extension * soap_new_req_tt__FocusStatus20Extension(struct soap *soap) { tt__FocusStatus20Extension *_p = soap_instantiate_tt__FocusStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__FocusStatus20Extension * soap_new_set_tt__FocusStatus20Extension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__FocusStatus20Extension *_p = soap_instantiate_tt__FocusStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusStatus20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusStatus20Extension(struct soap *soap, tt__FocusStatus20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusStatus20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (460)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusStatus20(struct soap*, const char*, int, const tt__FocusStatus20 *, const char*);
SOAP_FMAC3 tt__FocusStatus20 * SOAP_FMAC4 soap_in_tt__FocusStatus20(struct soap*, const char*, tt__FocusStatus20 *, const char*);

#ifndef soap_write_tt__FocusStatus20
#define soap_write_tt__FocusStatus20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusStatus20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusStatus20 * SOAP_FMAC4 soap_get_tt__FocusStatus20(struct soap*, tt__FocusStatus20 *, const char*, const char*);

#ifndef soap_read_tt__FocusStatus20
#define soap_read_tt__FocusStatus20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusStatus20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusStatus20 * SOAP_FMAC2 soap_instantiate_tt__FocusStatus20(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusStatus20 * soap_new_tt__FocusStatus20(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusStatus20(soap, n, NULL, NULL, NULL); }

inline tt__FocusStatus20 * soap_new_req_tt__FocusStatus20(struct soap *soap, float Position, enum tt__MoveStatus MoveStatus) { tt__FocusStatus20 *_p = soap_instantiate_tt__FocusStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusStatus20::Position = Position; _p->tt__FocusStatus20::MoveStatus = MoveStatus; } return _p; }

inline tt__FocusStatus20 * soap_new_set_tt__FocusStatus20(struct soap *soap, float Position, enum tt__MoveStatus MoveStatus, std::string *Error, tt__FocusStatus20Extension *Extension, char *__anyAttribute, char *__item1) { tt__FocusStatus20 *_p = soap_instantiate_tt__FocusStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusStatus20::Position = Position; _p->tt__FocusStatus20::MoveStatus = MoveStatus; _p->tt__FocusStatus20::Error = Error; _p->tt__FocusStatus20::Extension = Extension; _p->tt__FocusStatus20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusStatus20(struct soap *soap, tt__FocusStatus20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusStatus20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (459)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingStatus20Extension(struct soap*, const char*, int, const tt__ImagingStatus20Extension *, const char*);
SOAP_FMAC3 tt__ImagingStatus20Extension * SOAP_FMAC4 soap_in_tt__ImagingStatus20Extension(struct soap*, const char*, tt__ImagingStatus20Extension *, const char*);

#ifndef soap_write_tt__ImagingStatus20Extension
#define soap_write_tt__ImagingStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingStatus20Extension * SOAP_FMAC4 soap_get_tt__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension *, const char*, const char*);

#ifndef soap_read_tt__ImagingStatus20Extension
#define soap_read_tt__ImagingStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingStatus20Extension * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20Extension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingStatus20Extension * soap_new_tt__ImagingStatus20Extension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingStatus20Extension(soap, n, NULL, NULL, NULL); }

inline tt__ImagingStatus20Extension * soap_new_req_tt__ImagingStatus20Extension(struct soap *soap) { tt__ImagingStatus20Extension *_p = soap_instantiate_tt__ImagingStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingStatus20Extension * soap_new_set_tt__ImagingStatus20Extension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ImagingStatus20Extension *_p = soap_instantiate_tt__ImagingStatus20Extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingStatus20Extension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingStatus20Extension(struct soap *soap, tt__ImagingStatus20Extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingStatus20Extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (458)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingStatus20(struct soap*, const char*, int, const tt__ImagingStatus20 *, const char*);
SOAP_FMAC3 tt__ImagingStatus20 * SOAP_FMAC4 soap_in_tt__ImagingStatus20(struct soap*, const char*, tt__ImagingStatus20 *, const char*);

#ifndef soap_write_tt__ImagingStatus20
#define soap_write_tt__ImagingStatus20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingStatus20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingStatus20 * SOAP_FMAC4 soap_get_tt__ImagingStatus20(struct soap*, tt__ImagingStatus20 *, const char*, const char*);

#ifndef soap_read_tt__ImagingStatus20
#define soap_read_tt__ImagingStatus20(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingStatus20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingStatus20 * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus20(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingStatus20 * soap_new_tt__ImagingStatus20(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingStatus20(soap, n, NULL, NULL, NULL); }

inline tt__ImagingStatus20 * soap_new_req_tt__ImagingStatus20(struct soap *soap) { tt__ImagingStatus20 *_p = soap_instantiate_tt__ImagingStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingStatus20 * soap_new_set_tt__ImagingStatus20(struct soap *soap, tt__FocusStatus20 *FocusStatus20, tt__ImagingStatus20Extension *Extension, char *__anyAttribute, char *__item1) { tt__ImagingStatus20 *_p = soap_instantiate_tt__ImagingStatus20(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingStatus20::FocusStatus20 = FocusStatus20; _p->tt__ImagingStatus20::Extension = Extension; _p->tt__ImagingStatus20::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingStatus20(struct soap *soap, tt__ImagingStatus20 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingStatus20(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (457)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalance(struct soap*, const char*, int, const tt__WhiteBalance *, const char*);
SOAP_FMAC3 tt__WhiteBalance * SOAP_FMAC4 soap_in_tt__WhiteBalance(struct soap*, const char*, tt__WhiteBalance *, const char*);

#ifndef soap_write_tt__WhiteBalance
#define soap_write_tt__WhiteBalance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalance * SOAP_FMAC4 soap_get_tt__WhiteBalance(struct soap*, tt__WhiteBalance *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalance
#define soap_read_tt__WhiteBalance(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalance * SOAP_FMAC2 soap_instantiate_tt__WhiteBalance(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalance * soap_new_tt__WhiteBalance(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalance(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalance * soap_new_req_tt__WhiteBalance(struct soap *soap, enum tt__WhiteBalanceMode Mode, float CrGain, float CbGain) { tt__WhiteBalance *_p = soap_instantiate_tt__WhiteBalance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalance::Mode = Mode; _p->tt__WhiteBalance::CrGain = CrGain; _p->tt__WhiteBalance::CbGain = CbGain; } return _p; }

inline tt__WhiteBalance * soap_new_set_tt__WhiteBalance(struct soap *soap, enum tt__WhiteBalanceMode Mode, float CrGain, float CbGain, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__WhiteBalance *_p = soap_instantiate_tt__WhiteBalance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalance::Mode = Mode; _p->tt__WhiteBalance::CrGain = CrGain; _p->tt__WhiteBalance::CbGain = CbGain; _p->tt__WhiteBalance::__any = __any; _p->tt__WhiteBalance::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalance(struct soap *soap, tt__WhiteBalance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (456)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ContinuousFocusOptions(struct soap*, const char*, int, const tt__ContinuousFocusOptions *, const char*);
SOAP_FMAC3 tt__ContinuousFocusOptions * SOAP_FMAC4 soap_in_tt__ContinuousFocusOptions(struct soap*, const char*, tt__ContinuousFocusOptions *, const char*);

#ifndef soap_write_tt__ContinuousFocusOptions
#define soap_write_tt__ContinuousFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ContinuousFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ContinuousFocusOptions * SOAP_FMAC4 soap_get_tt__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions *, const char*, const char*);

#ifndef soap_read_tt__ContinuousFocusOptions
#define soap_read_tt__ContinuousFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ContinuousFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ContinuousFocusOptions * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ContinuousFocusOptions * soap_new_tt__ContinuousFocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ContinuousFocusOptions(soap, n, NULL, NULL, NULL); }

inline tt__ContinuousFocusOptions * soap_new_req_tt__ContinuousFocusOptions(struct soap *soap, tt__FloatRange *Speed) { tt__ContinuousFocusOptions *_p = soap_instantiate_tt__ContinuousFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ContinuousFocusOptions::Speed = Speed; } return _p; }

inline tt__ContinuousFocusOptions * soap_new_set_tt__ContinuousFocusOptions(struct soap *soap, tt__FloatRange *Speed, char *__item1) { tt__ContinuousFocusOptions *_p = soap_instantiate_tt__ContinuousFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ContinuousFocusOptions::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ContinuousFocusOptions(struct soap *soap, tt__ContinuousFocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ContinuousFocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (455)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelativeFocusOptions(struct soap*, const char*, int, const tt__RelativeFocusOptions *, const char*);
SOAP_FMAC3 tt__RelativeFocusOptions * SOAP_FMAC4 soap_in_tt__RelativeFocusOptions(struct soap*, const char*, tt__RelativeFocusOptions *, const char*);

#ifndef soap_write_tt__RelativeFocusOptions
#define soap_write_tt__RelativeFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelativeFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelativeFocusOptions * SOAP_FMAC4 soap_get_tt__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions *, const char*, const char*);

#ifndef soap_read_tt__RelativeFocusOptions
#define soap_read_tt__RelativeFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelativeFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelativeFocusOptions * SOAP_FMAC2 soap_instantiate_tt__RelativeFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelativeFocusOptions * soap_new_tt__RelativeFocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelativeFocusOptions(soap, n, NULL, NULL, NULL); }

inline tt__RelativeFocusOptions * soap_new_req_tt__RelativeFocusOptions(struct soap *soap, tt__FloatRange *Distance, tt__FloatRange *Speed) { tt__RelativeFocusOptions *_p = soap_instantiate_tt__RelativeFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelativeFocusOptions::Distance = Distance; _p->tt__RelativeFocusOptions::Speed = Speed; } return _p; }

inline tt__RelativeFocusOptions * soap_new_set_tt__RelativeFocusOptions(struct soap *soap, tt__FloatRange *Distance, tt__FloatRange *Speed, char *__item1) { tt__RelativeFocusOptions *_p = soap_instantiate_tt__RelativeFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelativeFocusOptions::Distance = Distance; _p->tt__RelativeFocusOptions::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelativeFocusOptions(struct soap *soap, tt__RelativeFocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelativeFocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (454)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AbsoluteFocusOptions(struct soap*, const char*, int, const tt__AbsoluteFocusOptions *, const char*);
SOAP_FMAC3 tt__AbsoluteFocusOptions * SOAP_FMAC4 soap_in_tt__AbsoluteFocusOptions(struct soap*, const char*, tt__AbsoluteFocusOptions *, const char*);

#ifndef soap_write_tt__AbsoluteFocusOptions
#define soap_write_tt__AbsoluteFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AbsoluteFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AbsoluteFocusOptions * SOAP_FMAC4 soap_get_tt__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions *, const char*, const char*);

#ifndef soap_read_tt__AbsoluteFocusOptions
#define soap_read_tt__AbsoluteFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AbsoluteFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AbsoluteFocusOptions * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AbsoluteFocusOptions * soap_new_tt__AbsoluteFocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AbsoluteFocusOptions(soap, n, NULL, NULL, NULL); }

inline tt__AbsoluteFocusOptions * soap_new_req_tt__AbsoluteFocusOptions(struct soap *soap, tt__FloatRange *Position) { tt__AbsoluteFocusOptions *_p = soap_instantiate_tt__AbsoluteFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AbsoluteFocusOptions::Position = Position; } return _p; }

inline tt__AbsoluteFocusOptions * soap_new_set_tt__AbsoluteFocusOptions(struct soap *soap, tt__FloatRange *Position, tt__FloatRange *Speed, char *__item1) { tt__AbsoluteFocusOptions *_p = soap_instantiate_tt__AbsoluteFocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AbsoluteFocusOptions::Position = Position; _p->tt__AbsoluteFocusOptions::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AbsoluteFocusOptions(struct soap *soap, tt__AbsoluteFocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AbsoluteFocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (453)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MoveOptions(struct soap*, const char*, int, const tt__MoveOptions *, const char*);
SOAP_FMAC3 tt__MoveOptions * SOAP_FMAC4 soap_in_tt__MoveOptions(struct soap*, const char*, tt__MoveOptions *, const char*);

#ifndef soap_write_tt__MoveOptions
#define soap_write_tt__MoveOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MoveOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MoveOptions * SOAP_FMAC4 soap_get_tt__MoveOptions(struct soap*, tt__MoveOptions *, const char*, const char*);

#ifndef soap_read_tt__MoveOptions
#define soap_read_tt__MoveOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MoveOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MoveOptions * SOAP_FMAC2 soap_instantiate_tt__MoveOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__MoveOptions * soap_new_tt__MoveOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__MoveOptions(soap, n, NULL, NULL, NULL); }

inline tt__MoveOptions * soap_new_req_tt__MoveOptions(struct soap *soap) { tt__MoveOptions *_p = soap_instantiate_tt__MoveOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MoveOptions * soap_new_set_tt__MoveOptions(struct soap *soap, tt__AbsoluteFocusOptions *Absolute, tt__RelativeFocusOptions *Relative, tt__ContinuousFocusOptions *Continuous, char *__item1) { tt__MoveOptions *_p = soap_instantiate_tt__MoveOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MoveOptions::Absolute = Absolute; _p->tt__MoveOptions::Relative = Relative; _p->tt__MoveOptions::Continuous = Continuous; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MoveOptions(struct soap *soap, tt__MoveOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MoveOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (452)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ContinuousFocus(struct soap*, const char*, int, const tt__ContinuousFocus *, const char*);
SOAP_FMAC3 tt__ContinuousFocus * SOAP_FMAC4 soap_in_tt__ContinuousFocus(struct soap*, const char*, tt__ContinuousFocus *, const char*);

#ifndef soap_write_tt__ContinuousFocus
#define soap_write_tt__ContinuousFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ContinuousFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ContinuousFocus * SOAP_FMAC4 soap_get_tt__ContinuousFocus(struct soap*, tt__ContinuousFocus *, const char*, const char*);

#ifndef soap_read_tt__ContinuousFocus
#define soap_read_tt__ContinuousFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ContinuousFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ContinuousFocus * SOAP_FMAC2 soap_instantiate_tt__ContinuousFocus(struct soap*, int, const char*, const char*, size_t*);

inline tt__ContinuousFocus * soap_new_tt__ContinuousFocus(struct soap *soap, int n = -1) { return soap_instantiate_tt__ContinuousFocus(soap, n, NULL, NULL, NULL); }

inline tt__ContinuousFocus * soap_new_req_tt__ContinuousFocus(struct soap *soap, float Speed) { tt__ContinuousFocus *_p = soap_instantiate_tt__ContinuousFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ContinuousFocus::Speed = Speed; } return _p; }

inline tt__ContinuousFocus * soap_new_set_tt__ContinuousFocus(struct soap *soap, float Speed, char *__item1) { tt__ContinuousFocus *_p = soap_instantiate_tt__ContinuousFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ContinuousFocus::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ContinuousFocus(struct soap *soap, tt__ContinuousFocus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ContinuousFocus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (451)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelativeFocus(struct soap*, const char*, int, const tt__RelativeFocus *, const char*);
SOAP_FMAC3 tt__RelativeFocus * SOAP_FMAC4 soap_in_tt__RelativeFocus(struct soap*, const char*, tt__RelativeFocus *, const char*);

#ifndef soap_write_tt__RelativeFocus
#define soap_write_tt__RelativeFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelativeFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelativeFocus * SOAP_FMAC4 soap_get_tt__RelativeFocus(struct soap*, tt__RelativeFocus *, const char*, const char*);

#ifndef soap_read_tt__RelativeFocus
#define soap_read_tt__RelativeFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelativeFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelativeFocus * SOAP_FMAC2 soap_instantiate_tt__RelativeFocus(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelativeFocus * soap_new_tt__RelativeFocus(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelativeFocus(soap, n, NULL, NULL, NULL); }

inline tt__RelativeFocus * soap_new_req_tt__RelativeFocus(struct soap *soap, float Distance) { tt__RelativeFocus *_p = soap_instantiate_tt__RelativeFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelativeFocus::Distance = Distance; } return _p; }

inline tt__RelativeFocus * soap_new_set_tt__RelativeFocus(struct soap *soap, float Distance, float *Speed, char *__item1) { tt__RelativeFocus *_p = soap_instantiate_tt__RelativeFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelativeFocus::Distance = Distance; _p->tt__RelativeFocus::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelativeFocus(struct soap *soap, tt__RelativeFocus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelativeFocus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (450)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AbsoluteFocus(struct soap*, const char*, int, const tt__AbsoluteFocus *, const char*);
SOAP_FMAC3 tt__AbsoluteFocus * SOAP_FMAC4 soap_in_tt__AbsoluteFocus(struct soap*, const char*, tt__AbsoluteFocus *, const char*);

#ifndef soap_write_tt__AbsoluteFocus
#define soap_write_tt__AbsoluteFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AbsoluteFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AbsoluteFocus * SOAP_FMAC4 soap_get_tt__AbsoluteFocus(struct soap*, tt__AbsoluteFocus *, const char*, const char*);

#ifndef soap_read_tt__AbsoluteFocus
#define soap_read_tt__AbsoluteFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AbsoluteFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AbsoluteFocus * SOAP_FMAC2 soap_instantiate_tt__AbsoluteFocus(struct soap*, int, const char*, const char*, size_t*);

inline tt__AbsoluteFocus * soap_new_tt__AbsoluteFocus(struct soap *soap, int n = -1) { return soap_instantiate_tt__AbsoluteFocus(soap, n, NULL, NULL, NULL); }

inline tt__AbsoluteFocus * soap_new_req_tt__AbsoluteFocus(struct soap *soap, float Position) { tt__AbsoluteFocus *_p = soap_instantiate_tt__AbsoluteFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AbsoluteFocus::Position = Position; } return _p; }

inline tt__AbsoluteFocus * soap_new_set_tt__AbsoluteFocus(struct soap *soap, float Position, float *Speed, char *__item1) { tt__AbsoluteFocus *_p = soap_instantiate_tt__AbsoluteFocus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AbsoluteFocus::Position = Position; _p->tt__AbsoluteFocus::Speed = Speed; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AbsoluteFocus(struct soap *soap, tt__AbsoluteFocus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AbsoluteFocus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (449)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusMove(struct soap*, const char*, int, const tt__FocusMove *, const char*);
SOAP_FMAC3 tt__FocusMove * SOAP_FMAC4 soap_in_tt__FocusMove(struct soap*, const char*, tt__FocusMove *, const char*);

#ifndef soap_write_tt__FocusMove
#define soap_write_tt__FocusMove(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusMove", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusMove * SOAP_FMAC4 soap_get_tt__FocusMove(struct soap*, tt__FocusMove *, const char*, const char*);

#ifndef soap_read_tt__FocusMove
#define soap_read_tt__FocusMove(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusMove(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusMove * SOAP_FMAC2 soap_instantiate_tt__FocusMove(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusMove * soap_new_tt__FocusMove(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusMove(soap, n, NULL, NULL, NULL); }

inline tt__FocusMove * soap_new_req_tt__FocusMove(struct soap *soap) { tt__FocusMove *_p = soap_instantiate_tt__FocusMove(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__FocusMove * soap_new_set_tt__FocusMove(struct soap *soap, tt__AbsoluteFocus *Absolute, tt__RelativeFocus *Relative, tt__ContinuousFocus *Continuous, char *__item1) { tt__FocusMove *_p = soap_instantiate_tt__FocusMove(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusMove::Absolute = Absolute; _p->tt__FocusMove::Relative = Relative; _p->tt__FocusMove::Continuous = Continuous; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusMove(struct soap *soap, tt__FocusMove *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusMove(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (448)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WhiteBalanceOptions(struct soap*, const char*, int, const tt__WhiteBalanceOptions *, const char*);
SOAP_FMAC3 tt__WhiteBalanceOptions * SOAP_FMAC4 soap_in_tt__WhiteBalanceOptions(struct soap*, const char*, tt__WhiteBalanceOptions *, const char*);

#ifndef soap_write_tt__WhiteBalanceOptions
#define soap_write_tt__WhiteBalanceOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WhiteBalanceOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceOptions * SOAP_FMAC4 soap_get_tt__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions *, const char*, const char*);

#ifndef soap_read_tt__WhiteBalanceOptions
#define soap_read_tt__WhiteBalanceOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WhiteBalanceOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WhiteBalanceOptions * SOAP_FMAC2 soap_instantiate_tt__WhiteBalanceOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__WhiteBalanceOptions * soap_new_tt__WhiteBalanceOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__WhiteBalanceOptions(soap, n, NULL, NULL, NULL); }

inline tt__WhiteBalanceOptions * soap_new_req_tt__WhiteBalanceOptions(struct soap *soap, std::vector<enum tt__WhiteBalanceMode >& Mode, tt__FloatRange *YrGain, tt__FloatRange *YbGain) { tt__WhiteBalanceOptions *_p = soap_instantiate_tt__WhiteBalanceOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceOptions::Mode = Mode; _p->tt__WhiteBalanceOptions::YrGain = YrGain; _p->tt__WhiteBalanceOptions::YbGain = YbGain; } return _p; }

inline tt__WhiteBalanceOptions * soap_new_set_tt__WhiteBalanceOptions(struct soap *soap, std::vector<enum tt__WhiteBalanceMode >& Mode, tt__FloatRange *YrGain, tt__FloatRange *YbGain, char *__item1) { tt__WhiteBalanceOptions *_p = soap_instantiate_tt__WhiteBalanceOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WhiteBalanceOptions::Mode = Mode; _p->tt__WhiteBalanceOptions::YrGain = YrGain; _p->tt__WhiteBalanceOptions::YbGain = YbGain; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WhiteBalanceOptions(struct soap *soap, tt__WhiteBalanceOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WhiteBalanceOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (447)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ExposureOptions(struct soap*, const char*, int, const tt__ExposureOptions *, const char*);
SOAP_FMAC3 tt__ExposureOptions * SOAP_FMAC4 soap_in_tt__ExposureOptions(struct soap*, const char*, tt__ExposureOptions *, const char*);

#ifndef soap_write_tt__ExposureOptions
#define soap_write_tt__ExposureOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ExposureOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ExposureOptions * SOAP_FMAC4 soap_get_tt__ExposureOptions(struct soap*, tt__ExposureOptions *, const char*, const char*);

#ifndef soap_read_tt__ExposureOptions
#define soap_read_tt__ExposureOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ExposureOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ExposureOptions * SOAP_FMAC2 soap_instantiate_tt__ExposureOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ExposureOptions * soap_new_tt__ExposureOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ExposureOptions(soap, n, NULL, NULL, NULL); }

inline tt__ExposureOptions * soap_new_req_tt__ExposureOptions(struct soap *soap, std::vector<enum tt__ExposureMode >& Mode, std::vector<enum tt__ExposurePriority >& Priority, tt__FloatRange *MinExposureTime, tt__FloatRange *MaxExposureTime, tt__FloatRange *MinGain, tt__FloatRange *MaxGain, tt__FloatRange *MinIris, tt__FloatRange *MaxIris, tt__FloatRange *ExposureTime, tt__FloatRange *Gain, tt__FloatRange *Iris) { tt__ExposureOptions *_p = soap_instantiate_tt__ExposureOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposureOptions::Mode = Mode; _p->tt__ExposureOptions::Priority = Priority; _p->tt__ExposureOptions::MinExposureTime = MinExposureTime; _p->tt__ExposureOptions::MaxExposureTime = MaxExposureTime; _p->tt__ExposureOptions::MinGain = MinGain; _p->tt__ExposureOptions::MaxGain = MaxGain; _p->tt__ExposureOptions::MinIris = MinIris; _p->tt__ExposureOptions::MaxIris = MaxIris; _p->tt__ExposureOptions::ExposureTime = ExposureTime; _p->tt__ExposureOptions::Gain = Gain; _p->tt__ExposureOptions::Iris = Iris; } return _p; }

inline tt__ExposureOptions * soap_new_set_tt__ExposureOptions(struct soap *soap, std::vector<enum tt__ExposureMode >& Mode, std::vector<enum tt__ExposurePriority >& Priority, tt__FloatRange *MinExposureTime, tt__FloatRange *MaxExposureTime, tt__FloatRange *MinGain, tt__FloatRange *MaxGain, tt__FloatRange *MinIris, tt__FloatRange *MaxIris, tt__FloatRange *ExposureTime, tt__FloatRange *Gain, tt__FloatRange *Iris, char *__item1) { tt__ExposureOptions *_p = soap_instantiate_tt__ExposureOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ExposureOptions::Mode = Mode; _p->tt__ExposureOptions::Priority = Priority; _p->tt__ExposureOptions::MinExposureTime = MinExposureTime; _p->tt__ExposureOptions::MaxExposureTime = MaxExposureTime; _p->tt__ExposureOptions::MinGain = MinGain; _p->tt__ExposureOptions::MaxGain = MaxGain; _p->tt__ExposureOptions::MinIris = MinIris; _p->tt__ExposureOptions::MaxIris = MaxIris; _p->tt__ExposureOptions::ExposureTime = ExposureTime; _p->tt__ExposureOptions::Gain = Gain; _p->tt__ExposureOptions::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ExposureOptions(struct soap *soap, tt__ExposureOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ExposureOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (446)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusOptions(struct soap*, const char*, int, const tt__FocusOptions *, const char*);
SOAP_FMAC3 tt__FocusOptions * SOAP_FMAC4 soap_in_tt__FocusOptions(struct soap*, const char*, tt__FocusOptions *, const char*);

#ifndef soap_write_tt__FocusOptions
#define soap_write_tt__FocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusOptions * SOAP_FMAC4 soap_get_tt__FocusOptions(struct soap*, tt__FocusOptions *, const char*, const char*);

#ifndef soap_read_tt__FocusOptions
#define soap_read_tt__FocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusOptions * SOAP_FMAC2 soap_instantiate_tt__FocusOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusOptions * soap_new_tt__FocusOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusOptions(soap, n, NULL, NULL, NULL); }

inline tt__FocusOptions * soap_new_req_tt__FocusOptions(struct soap *soap, tt__FloatRange *DefaultSpeed, tt__FloatRange *NearLimit, tt__FloatRange *FarLimit) { tt__FocusOptions *_p = soap_instantiate_tt__FocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusOptions::DefaultSpeed = DefaultSpeed; _p->tt__FocusOptions::NearLimit = NearLimit; _p->tt__FocusOptions::FarLimit = FarLimit; } return _p; }

inline tt__FocusOptions * soap_new_set_tt__FocusOptions(struct soap *soap, std::vector<enum tt__AutoFocusMode >& AutoFocusModes, tt__FloatRange *DefaultSpeed, tt__FloatRange *NearLimit, tt__FloatRange *FarLimit, char *__item1) { tt__FocusOptions *_p = soap_instantiate_tt__FocusOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusOptions::AutoFocusModes = AutoFocusModes; _p->tt__FocusOptions::DefaultSpeed = DefaultSpeed; _p->tt__FocusOptions::NearLimit = NearLimit; _p->tt__FocusOptions::FarLimit = FarLimit; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusOptions(struct soap *soap, tt__FocusOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (445)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensationOptions(struct soap*, const char*, int, const tt__BacklightCompensationOptions *, const char*);
SOAP_FMAC3 tt__BacklightCompensationOptions * SOAP_FMAC4 soap_in_tt__BacklightCompensationOptions(struct soap*, const char*, tt__BacklightCompensationOptions *, const char*);

#ifndef soap_write_tt__BacklightCompensationOptions
#define soap_write_tt__BacklightCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BacklightCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensationOptions * SOAP_FMAC4 soap_get_tt__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions *, const char*, const char*);

#ifndef soap_read_tt__BacklightCompensationOptions
#define soap_read_tt__BacklightCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BacklightCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BacklightCompensationOptions * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensationOptions * soap_new_tt__BacklightCompensationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__BacklightCompensationOptions(soap, n, NULL, NULL, NULL); }

inline tt__BacklightCompensationOptions * soap_new_req_tt__BacklightCompensationOptions(struct soap *soap, std::vector<enum tt__WideDynamicMode >& Mode, tt__FloatRange *Level) { tt__BacklightCompensationOptions *_p = soap_instantiate_tt__BacklightCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensationOptions::Mode = Mode; _p->tt__BacklightCompensationOptions::Level = Level; } return _p; }

inline tt__BacklightCompensationOptions * soap_new_set_tt__BacklightCompensationOptions(struct soap *soap, std::vector<enum tt__WideDynamicMode >& Mode, tt__FloatRange *Level, char *__item1) { tt__BacklightCompensationOptions *_p = soap_instantiate_tt__BacklightCompensationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensationOptions::Mode = Mode; _p->tt__BacklightCompensationOptions::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BacklightCompensationOptions(struct soap *soap, tt__BacklightCompensationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BacklightCompensationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (444)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRangeOptions(struct soap*, const char*, int, const tt__WideDynamicRangeOptions *, const char*);
SOAP_FMAC3 tt__WideDynamicRangeOptions * SOAP_FMAC4 soap_in_tt__WideDynamicRangeOptions(struct soap*, const char*, tt__WideDynamicRangeOptions *, const char*);

#ifndef soap_write_tt__WideDynamicRangeOptions
#define soap_write_tt__WideDynamicRangeOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WideDynamicRangeOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRangeOptions * SOAP_FMAC4 soap_get_tt__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions *, const char*, const char*);

#ifndef soap_read_tt__WideDynamicRangeOptions
#define soap_read_tt__WideDynamicRangeOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WideDynamicRangeOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WideDynamicRangeOptions * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRangeOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRangeOptions * soap_new_tt__WideDynamicRangeOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__WideDynamicRangeOptions(soap, n, NULL, NULL, NULL); }

inline tt__WideDynamicRangeOptions * soap_new_req_tt__WideDynamicRangeOptions(struct soap *soap, std::vector<enum tt__WideDynamicMode >& Mode, tt__FloatRange *Level) { tt__WideDynamicRangeOptions *_p = soap_instantiate_tt__WideDynamicRangeOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRangeOptions::Mode = Mode; _p->tt__WideDynamicRangeOptions::Level = Level; } return _p; }

inline tt__WideDynamicRangeOptions * soap_new_set_tt__WideDynamicRangeOptions(struct soap *soap, std::vector<enum tt__WideDynamicMode >& Mode, tt__FloatRange *Level, char *__item1) { tt__WideDynamicRangeOptions *_p = soap_instantiate_tt__WideDynamicRangeOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRangeOptions::Mode = Mode; _p->tt__WideDynamicRangeOptions::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WideDynamicRangeOptions(struct soap *soap, tt__WideDynamicRangeOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WideDynamicRangeOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (443)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingOptions(struct soap*, const char*, int, const tt__ImagingOptions *, const char*);
SOAP_FMAC3 tt__ImagingOptions * SOAP_FMAC4 soap_in_tt__ImagingOptions(struct soap*, const char*, tt__ImagingOptions *, const char*);

#ifndef soap_write_tt__ImagingOptions
#define soap_write_tt__ImagingOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions * SOAP_FMAC4 soap_get_tt__ImagingOptions(struct soap*, tt__ImagingOptions *, const char*, const char*);

#ifndef soap_read_tt__ImagingOptions
#define soap_read_tt__ImagingOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingOptions * SOAP_FMAC2 soap_instantiate_tt__ImagingOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingOptions * soap_new_tt__ImagingOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingOptions(soap, n, NULL, NULL, NULL); }

inline tt__ImagingOptions * soap_new_req_tt__ImagingOptions(struct soap *soap, tt__BacklightCompensationOptions *BacklightCompensation, tt__FloatRange *Brightness, tt__FloatRange *ColorSaturation, tt__FloatRange *Contrast, tt__ExposureOptions *Exposure, tt__FocusOptions *Focus, std::vector<enum tt__IrCutFilterMode >& IrCutFilterModes, tt__FloatRange *Sharpness, tt__WideDynamicRangeOptions *WideDynamicRange, tt__WhiteBalanceOptions *WhiteBalance) { tt__ImagingOptions *_p = soap_instantiate_tt__ImagingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions::BacklightCompensation = BacklightCompensation; _p->tt__ImagingOptions::Brightness = Brightness; _p->tt__ImagingOptions::ColorSaturation = ColorSaturation; _p->tt__ImagingOptions::Contrast = Contrast; _p->tt__ImagingOptions::Exposure = Exposure; _p->tt__ImagingOptions::Focus = Focus; _p->tt__ImagingOptions::IrCutFilterModes = IrCutFilterModes; _p->tt__ImagingOptions::Sharpness = Sharpness; _p->tt__ImagingOptions::WideDynamicRange = WideDynamicRange; _p->tt__ImagingOptions::WhiteBalance = WhiteBalance; } return _p; }

inline tt__ImagingOptions * soap_new_set_tt__ImagingOptions(struct soap *soap, tt__BacklightCompensationOptions *BacklightCompensation, tt__FloatRange *Brightness, tt__FloatRange *ColorSaturation, tt__FloatRange *Contrast, tt__ExposureOptions *Exposure, tt__FocusOptions *Focus, std::vector<enum tt__IrCutFilterMode >& IrCutFilterModes, tt__FloatRange *Sharpness, tt__WideDynamicRangeOptions *WideDynamicRange, tt__WhiteBalanceOptions *WhiteBalance, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ImagingOptions *_p = soap_instantiate_tt__ImagingOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingOptions::BacklightCompensation = BacklightCompensation; _p->tt__ImagingOptions::Brightness = Brightness; _p->tt__ImagingOptions::ColorSaturation = ColorSaturation; _p->tt__ImagingOptions::Contrast = Contrast; _p->tt__ImagingOptions::Exposure = Exposure; _p->tt__ImagingOptions::Focus = Focus; _p->tt__ImagingOptions::IrCutFilterModes = IrCutFilterModes; _p->tt__ImagingOptions::Sharpness = Sharpness; _p->tt__ImagingOptions::WideDynamicRange = WideDynamicRange; _p->tt__ImagingOptions::WhiteBalance = WhiteBalance; _p->tt__ImagingOptions::__any = __any; _p->tt__ImagingOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingOptions(struct soap *soap, tt__ImagingOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (442)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BacklightCompensation(struct soap*, const char*, int, const tt__BacklightCompensation *, const char*);
SOAP_FMAC3 tt__BacklightCompensation * SOAP_FMAC4 soap_in_tt__BacklightCompensation(struct soap*, const char*, tt__BacklightCompensation *, const char*);

#ifndef soap_write_tt__BacklightCompensation
#define soap_write_tt__BacklightCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BacklightCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensation * SOAP_FMAC4 soap_get_tt__BacklightCompensation(struct soap*, tt__BacklightCompensation *, const char*, const char*);

#ifndef soap_read_tt__BacklightCompensation
#define soap_read_tt__BacklightCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BacklightCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BacklightCompensation * SOAP_FMAC2 soap_instantiate_tt__BacklightCompensation(struct soap*, int, const char*, const char*, size_t*);

inline tt__BacklightCompensation * soap_new_tt__BacklightCompensation(struct soap *soap, int n = -1) { return soap_instantiate_tt__BacklightCompensation(soap, n, NULL, NULL, NULL); }

inline tt__BacklightCompensation * soap_new_req_tt__BacklightCompensation(struct soap *soap, enum tt__BacklightCompensationMode Mode, float Level) { tt__BacklightCompensation *_p = soap_instantiate_tt__BacklightCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensation::Mode = Mode; _p->tt__BacklightCompensation::Level = Level; } return _p; }

inline tt__BacklightCompensation * soap_new_set_tt__BacklightCompensation(struct soap *soap, enum tt__BacklightCompensationMode Mode, float Level, char *__item1) { tt__BacklightCompensation *_p = soap_instantiate_tt__BacklightCompensation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BacklightCompensation::Mode = Mode; _p->tt__BacklightCompensation::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BacklightCompensation(struct soap *soap, tt__BacklightCompensation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BacklightCompensation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (441)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__WideDynamicRange(struct soap*, const char*, int, const tt__WideDynamicRange *, const char*);
SOAP_FMAC3 tt__WideDynamicRange * SOAP_FMAC4 soap_in_tt__WideDynamicRange(struct soap*, const char*, tt__WideDynamicRange *, const char*);

#ifndef soap_write_tt__WideDynamicRange
#define soap_write_tt__WideDynamicRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:WideDynamicRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRange * SOAP_FMAC4 soap_get_tt__WideDynamicRange(struct soap*, tt__WideDynamicRange *, const char*, const char*);

#ifndef soap_read_tt__WideDynamicRange
#define soap_read_tt__WideDynamicRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__WideDynamicRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__WideDynamicRange * SOAP_FMAC2 soap_instantiate_tt__WideDynamicRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__WideDynamicRange * soap_new_tt__WideDynamicRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__WideDynamicRange(soap, n, NULL, NULL, NULL); }

inline tt__WideDynamicRange * soap_new_req_tt__WideDynamicRange(struct soap *soap, enum tt__WideDynamicMode Mode, float Level) { tt__WideDynamicRange *_p = soap_instantiate_tt__WideDynamicRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRange::Mode = Mode; _p->tt__WideDynamicRange::Level = Level; } return _p; }

inline tt__WideDynamicRange * soap_new_set_tt__WideDynamicRange(struct soap *soap, enum tt__WideDynamicMode Mode, float Level, char *__item1) { tt__WideDynamicRange *_p = soap_instantiate_tt__WideDynamicRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__WideDynamicRange::Mode = Mode; _p->tt__WideDynamicRange::Level = Level; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__WideDynamicRange(struct soap *soap, tt__WideDynamicRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__WideDynamicRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (440)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Exposure(struct soap*, const char*, int, const tt__Exposure *, const char*);
SOAP_FMAC3 tt__Exposure * SOAP_FMAC4 soap_in_tt__Exposure(struct soap*, const char*, tt__Exposure *, const char*);

#ifndef soap_write_tt__Exposure
#define soap_write_tt__Exposure(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Exposure", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Exposure * SOAP_FMAC4 soap_get_tt__Exposure(struct soap*, tt__Exposure *, const char*, const char*);

#ifndef soap_read_tt__Exposure
#define soap_read_tt__Exposure(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Exposure(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Exposure * SOAP_FMAC2 soap_instantiate_tt__Exposure(struct soap*, int, const char*, const char*, size_t*);

inline tt__Exposure * soap_new_tt__Exposure(struct soap *soap, int n = -1) { return soap_instantiate_tt__Exposure(soap, n, NULL, NULL, NULL); }

inline tt__Exposure * soap_new_req_tt__Exposure(struct soap *soap, enum tt__ExposureMode Mode, enum tt__ExposurePriority Priority, tt__Rectangle *Window, float MinExposureTime, float MaxExposureTime, float MinGain, float MaxGain, float MinIris, float MaxIris, float ExposureTime, float Gain, float Iris) { tt__Exposure *_p = soap_instantiate_tt__Exposure(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Exposure::Mode = Mode; _p->tt__Exposure::Priority = Priority; _p->tt__Exposure::Window = Window; _p->tt__Exposure::MinExposureTime = MinExposureTime; _p->tt__Exposure::MaxExposureTime = MaxExposureTime; _p->tt__Exposure::MinGain = MinGain; _p->tt__Exposure::MaxGain = MaxGain; _p->tt__Exposure::MinIris = MinIris; _p->tt__Exposure::MaxIris = MaxIris; _p->tt__Exposure::ExposureTime = ExposureTime; _p->tt__Exposure::Gain = Gain; _p->tt__Exposure::Iris = Iris; } return _p; }

inline tt__Exposure * soap_new_set_tt__Exposure(struct soap *soap, enum tt__ExposureMode Mode, enum tt__ExposurePriority Priority, tt__Rectangle *Window, float MinExposureTime, float MaxExposureTime, float MinGain, float MaxGain, float MinIris, float MaxIris, float ExposureTime, float Gain, float Iris, char *__item1) { tt__Exposure *_p = soap_instantiate_tt__Exposure(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Exposure::Mode = Mode; _p->tt__Exposure::Priority = Priority; _p->tt__Exposure::Window = Window; _p->tt__Exposure::MinExposureTime = MinExposureTime; _p->tt__Exposure::MaxExposureTime = MaxExposureTime; _p->tt__Exposure::MinGain = MinGain; _p->tt__Exposure::MaxGain = MaxGain; _p->tt__Exposure::MinIris = MinIris; _p->tt__Exposure::MaxIris = MaxIris; _p->tt__Exposure::ExposureTime = ExposureTime; _p->tt__Exposure::Gain = Gain; _p->tt__Exposure::Iris = Iris; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Exposure(struct soap *soap, tt__Exposure *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Exposure(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (439)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettingsExtension(struct soap*, const char*, int, const tt__ImagingSettingsExtension *, const char*);
SOAP_FMAC3 tt__ImagingSettingsExtension * SOAP_FMAC4 soap_in_tt__ImagingSettingsExtension(struct soap*, const char*, tt__ImagingSettingsExtension *, const char*);

#ifndef soap_write_tt__ImagingSettingsExtension
#define soap_write_tt__ImagingSettingsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettingsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension * SOAP_FMAC4 soap_get_tt__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettingsExtension
#define soap_read_tt__ImagingSettingsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettingsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettingsExtension * SOAP_FMAC2 soap_instantiate_tt__ImagingSettingsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettingsExtension * soap_new_tt__ImagingSettingsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettingsExtension(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettingsExtension * soap_new_req_tt__ImagingSettingsExtension(struct soap *soap) { tt__ImagingSettingsExtension *_p = soap_instantiate_tt__ImagingSettingsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettingsExtension * soap_new_set_tt__ImagingSettingsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ImagingSettingsExtension *_p = soap_instantiate_tt__ImagingSettingsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettingsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettingsExtension(struct soap *soap, tt__ImagingSettingsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettingsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (438)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingSettings(struct soap*, const char*, int, const tt__ImagingSettings *, const char*);
SOAP_FMAC3 tt__ImagingSettings * SOAP_FMAC4 soap_in_tt__ImagingSettings(struct soap*, const char*, tt__ImagingSettings *, const char*);

#ifndef soap_write_tt__ImagingSettings
#define soap_write_tt__ImagingSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettings * SOAP_FMAC4 soap_get_tt__ImagingSettings(struct soap*, tt__ImagingSettings *, const char*, const char*);

#ifndef soap_read_tt__ImagingSettings
#define soap_read_tt__ImagingSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingSettings * SOAP_FMAC2 soap_instantiate_tt__ImagingSettings(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingSettings * soap_new_tt__ImagingSettings(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingSettings(soap, n, NULL, NULL, NULL); }

inline tt__ImagingSettings * soap_new_req_tt__ImagingSettings(struct soap *soap) { tt__ImagingSettings *_p = soap_instantiate_tt__ImagingSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ImagingSettings * soap_new_set_tt__ImagingSettings(struct soap *soap, tt__BacklightCompensation *BacklightCompensation, float *Brightness, float *ColorSaturation, float *Contrast, tt__Exposure *Exposure, tt__FocusConfiguration *Focus, enum tt__IrCutFilterMode *IrCutFilter, float *Sharpness, tt__WideDynamicRange *WideDynamicRange, tt__WhiteBalance *WhiteBalance, tt__ImagingSettingsExtension *Extension, char *__anyAttribute, char *__item1) { tt__ImagingSettings *_p = soap_instantiate_tt__ImagingSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingSettings::BacklightCompensation = BacklightCompensation; _p->tt__ImagingSettings::Brightness = Brightness; _p->tt__ImagingSettings::ColorSaturation = ColorSaturation; _p->tt__ImagingSettings::Contrast = Contrast; _p->tt__ImagingSettings::Exposure = Exposure; _p->tt__ImagingSettings::Focus = Focus; _p->tt__ImagingSettings::IrCutFilter = IrCutFilter; _p->tt__ImagingSettings::Sharpness = Sharpness; _p->tt__ImagingSettings::WideDynamicRange = WideDynamicRange; _p->tt__ImagingSettings::WhiteBalance = WhiteBalance; _p->tt__ImagingSettings::Extension = Extension; _p->tt__ImagingSettings::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingSettings(struct soap *soap, tt__ImagingSettings *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingSettings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (437)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusConfiguration(struct soap*, const char*, int, const tt__FocusConfiguration *, const char*);
SOAP_FMAC3 tt__FocusConfiguration * SOAP_FMAC4 soap_in_tt__FocusConfiguration(struct soap*, const char*, tt__FocusConfiguration *, const char*);

#ifndef soap_write_tt__FocusConfiguration
#define soap_write_tt__FocusConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusConfiguration * SOAP_FMAC4 soap_get_tt__FocusConfiguration(struct soap*, tt__FocusConfiguration *, const char*, const char*);

#ifndef soap_read_tt__FocusConfiguration
#define soap_read_tt__FocusConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusConfiguration * SOAP_FMAC2 soap_instantiate_tt__FocusConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusConfiguration * soap_new_tt__FocusConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__FocusConfiguration * soap_new_req_tt__FocusConfiguration(struct soap *soap, enum tt__AutoFocusMode AutoFocusMode, float DefaultSpeed, float NearLimit, float FarLimit) { tt__FocusConfiguration *_p = soap_instantiate_tt__FocusConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusConfiguration::AutoFocusMode = AutoFocusMode; _p->tt__FocusConfiguration::DefaultSpeed = DefaultSpeed; _p->tt__FocusConfiguration::NearLimit = NearLimit; _p->tt__FocusConfiguration::FarLimit = FarLimit; } return _p; }

inline tt__FocusConfiguration * soap_new_set_tt__FocusConfiguration(struct soap *soap, enum tt__AutoFocusMode AutoFocusMode, float DefaultSpeed, float NearLimit, float FarLimit, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__FocusConfiguration *_p = soap_instantiate_tt__FocusConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusConfiguration::AutoFocusMode = AutoFocusMode; _p->tt__FocusConfiguration::DefaultSpeed = DefaultSpeed; _p->tt__FocusConfiguration::NearLimit = NearLimit; _p->tt__FocusConfiguration::FarLimit = FarLimit; _p->tt__FocusConfiguration::__any = __any; _p->tt__FocusConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusConfiguration(struct soap *soap, tt__FocusConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (436)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FocusStatus(struct soap*, const char*, int, const tt__FocusStatus *, const char*);
SOAP_FMAC3 tt__FocusStatus * SOAP_FMAC4 soap_in_tt__FocusStatus(struct soap*, const char*, tt__FocusStatus *, const char*);

#ifndef soap_write_tt__FocusStatus
#define soap_write_tt__FocusStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FocusStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusStatus * SOAP_FMAC4 soap_get_tt__FocusStatus(struct soap*, tt__FocusStatus *, const char*, const char*);

#ifndef soap_read_tt__FocusStatus
#define soap_read_tt__FocusStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FocusStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FocusStatus * SOAP_FMAC2 soap_instantiate_tt__FocusStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__FocusStatus * soap_new_tt__FocusStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__FocusStatus(soap, n, NULL, NULL, NULL); }

inline tt__FocusStatus * soap_new_req_tt__FocusStatus(struct soap *soap, float Position, enum tt__MoveStatus MoveStatus, std::string& Error) { tt__FocusStatus *_p = soap_instantiate_tt__FocusStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusStatus::Position = Position; _p->tt__FocusStatus::MoveStatus = MoveStatus; _p->tt__FocusStatus::Error = Error; } return _p; }

inline tt__FocusStatus * soap_new_set_tt__FocusStatus(struct soap *soap, float Position, enum tt__MoveStatus MoveStatus, std::string& Error, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__FocusStatus *_p = soap_instantiate_tt__FocusStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FocusStatus::Position = Position; _p->tt__FocusStatus::MoveStatus = MoveStatus; _p->tt__FocusStatus::Error = Error; _p->tt__FocusStatus::__any = __any; _p->tt__FocusStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FocusStatus(struct soap *soap, tt__FocusStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FocusStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (435)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingStatus(struct soap*, const char*, int, const tt__ImagingStatus *, const char*);
SOAP_FMAC3 tt__ImagingStatus * SOAP_FMAC4 soap_in_tt__ImagingStatus(struct soap*, const char*, tt__ImagingStatus *, const char*);

#ifndef soap_write_tt__ImagingStatus
#define soap_write_tt__ImagingStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingStatus * SOAP_FMAC4 soap_get_tt__ImagingStatus(struct soap*, tt__ImagingStatus *, const char*, const char*);

#ifndef soap_read_tt__ImagingStatus
#define soap_read_tt__ImagingStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingStatus * SOAP_FMAC2 soap_instantiate_tt__ImagingStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingStatus * soap_new_tt__ImagingStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingStatus(soap, n, NULL, NULL, NULL); }

inline tt__ImagingStatus * soap_new_req_tt__ImagingStatus(struct soap *soap, tt__FocusStatus *FocusStatus) { tt__ImagingStatus *_p = soap_instantiate_tt__ImagingStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingStatus::FocusStatus = FocusStatus; } return _p; }

inline tt__ImagingStatus * soap_new_set_tt__ImagingStatus(struct soap *soap, tt__FocusStatus *FocusStatus, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ImagingStatus *_p = soap_instantiate_tt__ImagingStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingStatus::FocusStatus = FocusStatus; _p->tt__ImagingStatus::__any = __any; _p->tt__ImagingStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingStatus(struct soap *soap, tt__ImagingStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (434)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourStartingConditionOptionsExtension
#define soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourStartingConditionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourStartingConditionOptionsExtension
#define soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourStartingConditionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap) { tt__PTZPresetTourStartingConditionOptionsExtension *_p = soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourStartingConditionOptionsExtension * soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourStartingConditionOptionsExtension *_p = soap_instantiate_tt__PTZPresetTourStartingConditionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStartingConditionOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap *soap, tt__PTZPresetTourStartingConditionOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourStartingConditionOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (433)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions *, const char*);

#ifndef soap_write_tt__PTZPresetTourStartingConditionOptions
#define soap_write_tt__PTZPresetTourStartingConditionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourStartingConditionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourStartingConditionOptions
#define soap_read_tt__PTZPresetTourStartingConditionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourStartingConditionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourStartingConditionOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionOptions * soap_new_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourStartingConditionOptions * soap_new_req_tt__PTZPresetTourStartingConditionOptions(struct soap *soap) { tt__PTZPresetTourStartingConditionOptions *_p = soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourStartingConditionOptions * soap_new_set_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__IntRange *RecurringTime, tt__DurationRange *RecurringDuration, std::vector<enum tt__PTZPresetTourDirection >& Direction, tt__PTZPresetTourStartingConditionOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZPresetTourStartingConditionOptions *_p = soap_instantiate_tt__PTZPresetTourStartingConditionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStartingConditionOptions::RecurringTime = RecurringTime; _p->tt__PTZPresetTourStartingConditionOptions::RecurringDuration = RecurringDuration; _p->tt__PTZPresetTourStartingConditionOptions::Direction = Direction; _p->tt__PTZPresetTourStartingConditionOptions::Extension = Extension; _p->tt__PTZPresetTourStartingConditionOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourStartingConditionOptions(struct soap *soap, tt__PTZPresetTourStartingConditionOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourStartingConditionOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (432)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourPresetDetailOptionsExtension
#define soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourPresetDetailOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourPresetDetailOptionsExtension
#define soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourPresetDetailOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap) { tt__PTZPresetTourPresetDetailOptionsExtension *_p = soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourPresetDetailOptionsExtension * soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourPresetDetailOptionsExtension *_p = soap_instantiate_tt__PTZPresetTourPresetDetailOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourPresetDetailOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap *soap, tt__PTZPresetTourPresetDetailOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourPresetDetailOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (431)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetailOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions *, const char*);

#ifndef soap_write_tt__PTZPresetTourPresetDetailOptions
#define soap_write_tt__PTZPresetTourPresetDetailOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourPresetDetailOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourPresetDetailOptions
#define soap_read_tt__PTZPresetTourPresetDetailOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourPresetDetailOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourPresetDetailOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetailOptions * soap_new_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourPresetDetailOptions * soap_new_req_tt__PTZPresetTourPresetDetailOptions(struct soap *soap) { tt__PTZPresetTourPresetDetailOptions *_p = soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourPresetDetailOptions * soap_new_set_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, std::vector<std::string >& PresetToken, bool *Home, tt__Space2DDescription *PanTiltPositionSpace, tt__Space1DDescription *ZoomPositionSpace, tt__PTZPresetTourPresetDetailOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZPresetTourPresetDetailOptions *_p = soap_instantiate_tt__PTZPresetTourPresetDetailOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourPresetDetailOptions::PresetToken = PresetToken; _p->tt__PTZPresetTourPresetDetailOptions::Home = Home; _p->tt__PTZPresetTourPresetDetailOptions::PanTiltPositionSpace = PanTiltPositionSpace; _p->tt__PTZPresetTourPresetDetailOptions::ZoomPositionSpace = ZoomPositionSpace; _p->tt__PTZPresetTourPresetDetailOptions::Extension = Extension; _p->tt__PTZPresetTourPresetDetailOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourPresetDetailOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourPresetDetailOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (430)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotOptions(struct soap*, const char*, int, const tt__PTZPresetTourSpotOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions *, const char*);

#ifndef soap_write_tt__PTZPresetTourSpotOptions
#define soap_write_tt__PTZPresetTourSpotOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourSpotOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSpotOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourSpotOptions
#define soap_read_tt__PTZPresetTourSpotOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourSpotOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourSpotOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotOptions * soap_new_tt__PTZPresetTourSpotOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourSpotOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourSpotOptions * soap_new_req_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *PresetDetail, tt__DurationRange *StayTime) { tt__PTZPresetTourSpotOptions *_p = soap_instantiate_tt__PTZPresetTourSpotOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail; _p->tt__PTZPresetTourSpotOptions::StayTime = StayTime; } return _p; }

inline tt__PTZPresetTourSpotOptions * soap_new_set_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourPresetDetailOptions *PresetDetail, tt__DurationRange *StayTime, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTZPresetTourSpotOptions *_p = soap_instantiate_tt__PTZPresetTourSpotOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSpotOptions::PresetDetail = PresetDetail; _p->tt__PTZPresetTourSpotOptions::StayTime = StayTime; _p->tt__PTZPresetTourSpotOptions::__any = __any; _p->tt__PTZPresetTourSpotOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourSpotOptions(struct soap *soap, tt__PTZPresetTourSpotOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourSpotOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (429)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourOptions(struct soap*, const char*, int, const tt__PTZPresetTourOptions *, const char*);
SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_in_tt__PTZPresetTourOptions(struct soap*, const char*, tt__PTZPresetTourOptions *, const char*);

#ifndef soap_write_tt__PTZPresetTourOptions
#define soap_write_tt__PTZPresetTourOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourOptions * SOAP_FMAC4 soap_get_tt__PTZPresetTourOptions(struct soap*, tt__PTZPresetTourOptions *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourOptions
#define soap_read_tt__PTZPresetTourOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourOptions * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourOptions * soap_new_tt__PTZPresetTourOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourOptions * soap_new_req_tt__PTZPresetTourOptions(struct soap *soap, bool AutoStart, tt__PTZPresetTourStartingConditionOptions *StartingCondition, tt__PTZPresetTourSpotOptions *TourSpot) { tt__PTZPresetTourOptions *_p = soap_instantiate_tt__PTZPresetTourOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourOptions::AutoStart = AutoStart; _p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition; _p->tt__PTZPresetTourOptions::TourSpot = TourSpot; } return _p; }

inline tt__PTZPresetTourOptions * soap_new_set_tt__PTZPresetTourOptions(struct soap *soap, bool AutoStart, tt__PTZPresetTourStartingConditionOptions *StartingCondition, tt__PTZPresetTourSpotOptions *TourSpot, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTZPresetTourOptions *_p = soap_instantiate_tt__PTZPresetTourOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourOptions::AutoStart = AutoStart; _p->tt__PTZPresetTourOptions::StartingCondition = StartingCondition; _p->tt__PTZPresetTourOptions::TourSpot = TourSpot; _p->tt__PTZPresetTourOptions::__any = __any; _p->tt__PTZPresetTourOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourOptions(struct soap *soap, tt__PTZPresetTourOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (428)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, int, const tt__PTZPresetTourStartingConditionExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourStartingConditionExtension
#define soap_write_tt__PTZPresetTourStartingConditionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourStartingConditionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourStartingConditionExtension
#define soap_read_tt__PTZPresetTourStartingConditionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourStartingConditionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourStartingConditionExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingConditionExtension * soap_new_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourStartingConditionExtension * soap_new_req_tt__PTZPresetTourStartingConditionExtension(struct soap *soap) { tt__PTZPresetTourStartingConditionExtension *_p = soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourStartingConditionExtension * soap_new_set_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourStartingConditionExtension *_p = soap_instantiate_tt__PTZPresetTourStartingConditionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStartingConditionExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourStartingConditionExtension(struct soap *soap, tt__PTZPresetTourStartingConditionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourStartingConditionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (427)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStartingCondition(struct soap*, const char*, int, const tt__PTZPresetTourStartingCondition *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_in_tt__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition *, const char*);

#ifndef soap_write_tt__PTZPresetTourStartingCondition
#define soap_write_tt__PTZPresetTourStartingCondition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourStartingCondition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingCondition * SOAP_FMAC4 soap_get_tt__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourStartingCondition
#define soap_read_tt__PTZPresetTourStartingCondition(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourStartingCondition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourStartingCondition * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStartingCondition(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStartingCondition * soap_new_tt__PTZPresetTourStartingCondition(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourStartingCondition(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourStartingCondition * soap_new_req_tt__PTZPresetTourStartingCondition(struct soap *soap) { tt__PTZPresetTourStartingCondition *_p = soap_instantiate_tt__PTZPresetTourStartingCondition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourStartingCondition * soap_new_set_tt__PTZPresetTourStartingCondition(struct soap *soap, int *RecurringTime, LONG64 *RecurringDuration, enum tt__PTZPresetTourDirection *Direction, tt__PTZPresetTourStartingConditionExtension *Extension, bool *RandomPresetOrder, char *__anyAttribute, char *__item1) { tt__PTZPresetTourStartingCondition *_p = soap_instantiate_tt__PTZPresetTourStartingCondition(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStartingCondition::RecurringTime = RecurringTime; _p->tt__PTZPresetTourStartingCondition::RecurringDuration = RecurringDuration; _p->tt__PTZPresetTourStartingCondition::Direction = Direction; _p->tt__PTZPresetTourStartingCondition::Extension = Extension; _p->tt__PTZPresetTourStartingCondition::RandomPresetOrder = RandomPresetOrder; _p->tt__PTZPresetTourStartingCondition::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourStartingCondition(struct soap *soap, tt__PTZPresetTourStartingCondition *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourStartingCondition(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (426)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatusExtension(struct soap*, const char*, int, const tt__PTZPresetTourStatusExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourStatusExtension
#define soap_write_tt__PTZPresetTourStatusExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourStatusExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStatusExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourStatusExtension
#define soap_read_tt__PTZPresetTourStatusExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourStatusExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourStatusExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatusExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatusExtension * soap_new_tt__PTZPresetTourStatusExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourStatusExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourStatusExtension * soap_new_req_tt__PTZPresetTourStatusExtension(struct soap *soap) { tt__PTZPresetTourStatusExtension *_p = soap_instantiate_tt__PTZPresetTourStatusExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourStatusExtension * soap_new_set_tt__PTZPresetTourStatusExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourStatusExtension *_p = soap_instantiate_tt__PTZPresetTourStatusExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStatusExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourStatusExtension(struct soap *soap, tt__PTZPresetTourStatusExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourStatusExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (425)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourStatus(struct soap*, const char*, int, const tt__PTZPresetTourStatus *, const char*);
SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_in_tt__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus *, const char*);

#ifndef soap_write_tt__PTZPresetTourStatus
#define soap_write_tt__PTZPresetTourStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStatus * SOAP_FMAC4 soap_get_tt__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourStatus
#define soap_read_tt__PTZPresetTourStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourStatus * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourStatus * soap_new_tt__PTZPresetTourStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourStatus(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourStatus * soap_new_req_tt__PTZPresetTourStatus(struct soap *soap, enum tt__PTZPresetTourState State) { tt__PTZPresetTourStatus *_p = soap_instantiate_tt__PTZPresetTourStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStatus::State = State; } return _p; }

inline tt__PTZPresetTourStatus * soap_new_set_tt__PTZPresetTourStatus(struct soap *soap, enum tt__PTZPresetTourState State, tt__PTZPresetTourSpot *CurrentTourSpot, tt__PTZPresetTourStatusExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZPresetTourStatus *_p = soap_instantiate_tt__PTZPresetTourStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourStatus::State = State; _p->tt__PTZPresetTourStatus::CurrentTourSpot = CurrentTourSpot; _p->tt__PTZPresetTourStatus::Extension = Extension; _p->tt__PTZPresetTourStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourStatus(struct soap *soap, tt__PTZPresetTourStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (424)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourTypeExtension(struct soap*, const char*, int, const tt__PTZPresetTourTypeExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourTypeExtension
#define soap_write_tt__PTZPresetTourTypeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourTypeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourTypeExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourTypeExtension
#define soap_read_tt__PTZPresetTourTypeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourTypeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourTypeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourTypeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourTypeExtension * soap_new_tt__PTZPresetTourTypeExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourTypeExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourTypeExtension * soap_new_req_tt__PTZPresetTourTypeExtension(struct soap *soap) { tt__PTZPresetTourTypeExtension *_p = soap_instantiate_tt__PTZPresetTourTypeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourTypeExtension * soap_new_set_tt__PTZPresetTourTypeExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourTypeExtension *_p = soap_instantiate_tt__PTZPresetTourTypeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourTypeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourTypeExtension(struct soap *soap, tt__PTZPresetTourTypeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourTypeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (423)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourPresetDetail(struct soap*, const char*, int, const tt__PTZPresetTourPresetDetail *, const char*);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in_tt__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail *, const char*);

#ifndef soap_write_tt__PTZPresetTourPresetDetail
#define soap_write_tt__PTZPresetTourPresetDetail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourPresetDetail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourPresetDetail * SOAP_FMAC4 soap_get_tt__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourPresetDetail
#define soap_read_tt__PTZPresetTourPresetDetail(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourPresetDetail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourPresetDetail * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourPresetDetail(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourPresetDetail * soap_new_tt__PTZPresetTourPresetDetail(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourPresetDetail(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourPresetDetail * soap_new_req_tt__PTZPresetTourPresetDetail(struct soap *soap, int __union_PTZPresetTourPresetDetail, union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail) { tt__PTZPresetTourPresetDetail *_p = soap_instantiate_tt__PTZPresetTourPresetDetail(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail; _p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail; } return _p; }

inline tt__PTZPresetTourPresetDetail * soap_new_set_tt__PTZPresetTourPresetDetail(struct soap *soap, int __union_PTZPresetTourPresetDetail, union _tt__union_PTZPresetTourPresetDetail& union_PTZPresetTourPresetDetail, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTZPresetTourPresetDetail *_p = soap_instantiate_tt__PTZPresetTourPresetDetail(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourPresetDetail::__union_PTZPresetTourPresetDetail = __union_PTZPresetTourPresetDetail; _p->tt__PTZPresetTourPresetDetail::union_PTZPresetTourPresetDetail = union_PTZPresetTourPresetDetail; _p->tt__PTZPresetTourPresetDetail::__any = __any; _p->tt__PTZPresetTourPresetDetail::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourPresetDetail(struct soap *soap, tt__PTZPresetTourPresetDetail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourPresetDetail(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (422)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpotExtension(struct soap*, const char*, int, const tt__PTZPresetTourSpotExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourSpotExtension
#define soap_write_tt__PTZPresetTourSpotExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourSpotExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSpotExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourSpotExtension
#define soap_read_tt__PTZPresetTourSpotExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourSpotExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourSpotExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpotExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpotExtension * soap_new_tt__PTZPresetTourSpotExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourSpotExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourSpotExtension * soap_new_req_tt__PTZPresetTourSpotExtension(struct soap *soap) { tt__PTZPresetTourSpotExtension *_p = soap_instantiate_tt__PTZPresetTourSpotExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourSpotExtension * soap_new_set_tt__PTZPresetTourSpotExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourSpotExtension *_p = soap_instantiate_tt__PTZPresetTourSpotExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSpotExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourSpotExtension(struct soap *soap, tt__PTZPresetTourSpotExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourSpotExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (421)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSpot(struct soap*, const char*, int, const tt__PTZPresetTourSpot *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_in_tt__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot *, const char*);

#ifndef soap_write_tt__PTZPresetTourSpot
#define soap_write_tt__PTZPresetTourSpot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourSpot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSpot * SOAP_FMAC4 soap_get_tt__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourSpot
#define soap_read_tt__PTZPresetTourSpot(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourSpot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourSpot * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSpot * soap_new_tt__PTZPresetTourSpot(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourSpot(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourSpot * soap_new_req_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourPresetDetail *PresetDetail) { tt__PTZPresetTourSpot *_p = soap_instantiate_tt__PTZPresetTourSpot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail; } return _p; }

inline tt__PTZPresetTourSpot * soap_new_set_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourPresetDetail *PresetDetail, tt__PTZSpeed *Speed, LONG64 *StayTime, tt__PTZPresetTourSpotExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZPresetTourSpot *_p = soap_instantiate_tt__PTZPresetTourSpot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSpot::PresetDetail = PresetDetail; _p->tt__PTZPresetTourSpot::Speed = Speed; _p->tt__PTZPresetTourSpot::StayTime = StayTime; _p->tt__PTZPresetTourSpot::Extension = Extension; _p->tt__PTZPresetTourSpot::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourSpot(struct soap *soap, tt__PTZPresetTourSpot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourSpot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (420)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourExtension(struct soap*, const char*, int, const tt__PTZPresetTourExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourExtension
#define soap_write_tt__PTZPresetTourExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourExtension
#define soap_read_tt__PTZPresetTourExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourExtension * soap_new_tt__PTZPresetTourExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourExtension * soap_new_req_tt__PTZPresetTourExtension(struct soap *soap) { tt__PTZPresetTourExtension *_p = soap_instantiate_tt__PTZPresetTourExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourExtension * soap_new_set_tt__PTZPresetTourExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourExtension *_p = soap_instantiate_tt__PTZPresetTourExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourExtension(struct soap *soap, tt__PTZPresetTourExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (419)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PresetTour(struct soap*, const char*, int, const tt__PresetTour *, const char*);
SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_in_tt__PresetTour(struct soap*, const char*, tt__PresetTour *, const char*);

#ifndef soap_write_tt__PresetTour
#define soap_write_tt__PresetTour(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PresetTour", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PresetTour * SOAP_FMAC4 soap_get_tt__PresetTour(struct soap*, tt__PresetTour *, const char*, const char*);

#ifndef soap_read_tt__PresetTour
#define soap_read_tt__PresetTour(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PresetTour(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PresetTour * SOAP_FMAC2 soap_instantiate_tt__PresetTour(struct soap*, int, const char*, const char*, size_t*);

inline tt__PresetTour * soap_new_tt__PresetTour(struct soap *soap, int n = -1) { return soap_instantiate_tt__PresetTour(soap, n, NULL, NULL, NULL); }

inline tt__PresetTour * soap_new_req_tt__PresetTour(struct soap *soap, tt__PTZPresetTourStatus *Status, bool AutoStart, tt__PTZPresetTourStartingCondition *StartingCondition) { tt__PresetTour *_p = soap_instantiate_tt__PresetTour(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PresetTour::Status = Status; _p->tt__PresetTour::AutoStart = AutoStart; _p->tt__PresetTour::StartingCondition = StartingCondition; } return _p; }

inline tt__PresetTour * soap_new_set_tt__PresetTour(struct soap *soap, std::string *Name, tt__PTZPresetTourStatus *Status, bool AutoStart, tt__PTZPresetTourStartingCondition *StartingCondition, std::vector<tt__PTZPresetTourSpot * >& TourSpot, tt__PTZPresetTourExtension *Extension, std::string *token, char *__anyAttribute, char *__item1) { tt__PresetTour *_p = soap_instantiate_tt__PresetTour(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PresetTour::Name = Name; _p->tt__PresetTour::Status = Status; _p->tt__PresetTour::AutoStart = AutoStart; _p->tt__PresetTour::StartingCondition = StartingCondition; _p->tt__PresetTour::TourSpot = TourSpot; _p->tt__PresetTour::Extension = Extension; _p->tt__PresetTour::token = token; _p->tt__PresetTour::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PresetTour(struct soap *soap, tt__PresetTour *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PresetTour(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (418)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPreset(struct soap*, const char*, int, const tt__PTZPreset *, const char*);
SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_in_tt__PTZPreset(struct soap*, const char*, tt__PTZPreset *, const char*);

#ifndef soap_write_tt__PTZPreset
#define soap_write_tt__PTZPreset(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPreset", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPreset * SOAP_FMAC4 soap_get_tt__PTZPreset(struct soap*, tt__PTZPreset *, const char*, const char*);

#ifndef soap_read_tt__PTZPreset
#define soap_read_tt__PTZPreset(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPreset(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPreset * SOAP_FMAC2 soap_instantiate_tt__PTZPreset(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPreset * soap_new_tt__PTZPreset(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPreset(soap, n, NULL, NULL, NULL); }

inline tt__PTZPreset * soap_new_req_tt__PTZPreset(struct soap *soap) { tt__PTZPreset *_p = soap_instantiate_tt__PTZPreset(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPreset * soap_new_set_tt__PTZPreset(struct soap *soap, std::string *Name, tt__PTZVector *PTZPosition, std::string *token, char *__anyAttribute, char *__item1) { tt__PTZPreset *_p = soap_instantiate_tt__PTZPreset(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPreset::Name = Name; _p->tt__PTZPreset::PTZPosition = PTZPosition; _p->tt__PTZPreset::token = token; _p->tt__PTZPreset::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPreset(struct soap *soap, tt__PTZPreset *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPreset(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (417)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpeed(struct soap*, const char*, int, const tt__PTZSpeed *, const char*);
SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_in_tt__PTZSpeed(struct soap*, const char*, tt__PTZSpeed *, const char*);

#ifndef soap_write_tt__PTZSpeed
#define soap_write_tt__PTZSpeed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZSpeed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZSpeed * SOAP_FMAC4 soap_get_tt__PTZSpeed(struct soap*, tt__PTZSpeed *, const char*, const char*);

#ifndef soap_read_tt__PTZSpeed
#define soap_read_tt__PTZSpeed(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZSpeed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZSpeed * SOAP_FMAC2 soap_instantiate_tt__PTZSpeed(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpeed * soap_new_tt__PTZSpeed(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZSpeed(soap, n, NULL, NULL, NULL); }

inline tt__PTZSpeed * soap_new_req_tt__PTZSpeed(struct soap *soap) { tt__PTZSpeed *_p = soap_instantiate_tt__PTZSpeed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZSpeed * soap_new_set_tt__PTZSpeed(struct soap *soap, tt__Vector2D *PanTilt, tt__Vector1D *Zoom, char *__item1) { tt__PTZSpeed *_p = soap_instantiate_tt__PTZSpeed(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZSpeed::PanTilt = PanTilt; _p->tt__PTZSpeed::Zoom = Zoom; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZSpeed(struct soap *soap, tt__PTZSpeed *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZSpeed(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (416)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space1DDescription(struct soap*, const char*, int, const tt__Space1DDescription *, const char*);
SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_in_tt__Space1DDescription(struct soap*, const char*, tt__Space1DDescription *, const char*);

#ifndef soap_write_tt__Space1DDescription
#define soap_write_tt__Space1DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Space1DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Space1DDescription * SOAP_FMAC4 soap_get_tt__Space1DDescription(struct soap*, tt__Space1DDescription *, const char*, const char*);

#ifndef soap_read_tt__Space1DDescription
#define soap_read_tt__Space1DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Space1DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Space1DDescription * SOAP_FMAC2 soap_instantiate_tt__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space1DDescription * soap_new_tt__Space1DDescription(struct soap *soap, int n = -1) { return soap_instantiate_tt__Space1DDescription(soap, n, NULL, NULL, NULL); }

inline tt__Space1DDescription * soap_new_req_tt__Space1DDescription(struct soap *soap, std::string& URI, tt__FloatRange *XRange) { tt__Space1DDescription *_p = soap_instantiate_tt__Space1DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Space1DDescription::URI = URI; _p->tt__Space1DDescription::XRange = XRange; } return _p; }

inline tt__Space1DDescription * soap_new_set_tt__Space1DDescription(struct soap *soap, std::string& URI, tt__FloatRange *XRange, char *__item1) { tt__Space1DDescription *_p = soap_instantiate_tt__Space1DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Space1DDescription::URI = URI; _p->tt__Space1DDescription::XRange = XRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Space1DDescription(struct soap *soap, tt__Space1DDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Space1DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (415)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Space2DDescription(struct soap*, const char*, int, const tt__Space2DDescription *, const char*);
SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_in_tt__Space2DDescription(struct soap*, const char*, tt__Space2DDescription *, const char*);

#ifndef soap_write_tt__Space2DDescription
#define soap_write_tt__Space2DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Space2DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Space2DDescription * SOAP_FMAC4 soap_get_tt__Space2DDescription(struct soap*, tt__Space2DDescription *, const char*, const char*);

#ifndef soap_read_tt__Space2DDescription
#define soap_read_tt__Space2DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Space2DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Space2DDescription * SOAP_FMAC2 soap_instantiate_tt__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__Space2DDescription * soap_new_tt__Space2DDescription(struct soap *soap, int n = -1) { return soap_instantiate_tt__Space2DDescription(soap, n, NULL, NULL, NULL); }

inline tt__Space2DDescription * soap_new_req_tt__Space2DDescription(struct soap *soap, std::string& URI, tt__FloatRange *XRange, tt__FloatRange *YRange) { tt__Space2DDescription *_p = soap_instantiate_tt__Space2DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Space2DDescription::URI = URI; _p->tt__Space2DDescription::XRange = XRange; _p->tt__Space2DDescription::YRange = YRange; } return _p; }

inline tt__Space2DDescription * soap_new_set_tt__Space2DDescription(struct soap *soap, std::string& URI, tt__FloatRange *XRange, tt__FloatRange *YRange, char *__item1) { tt__Space2DDescription *_p = soap_instantiate_tt__Space2DDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Space2DDescription::URI = URI; _p->tt__Space2DDescription::XRange = XRange; _p->tt__Space2DDescription::YRange = YRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Space2DDescription(struct soap *soap, tt__Space2DDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Space2DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (414)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpacesExtension(struct soap*, const char*, int, const tt__PTZSpacesExtension *, const char*);
SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_in_tt__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension *, const char*);

#ifndef soap_write_tt__PTZSpacesExtension
#define soap_write_tt__PTZSpacesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZSpacesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZSpacesExtension * SOAP_FMAC4 soap_get_tt__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZSpacesExtension
#define soap_read_tt__PTZSpacesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZSpacesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZSpacesExtension * SOAP_FMAC2 soap_instantiate_tt__PTZSpacesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpacesExtension * soap_new_tt__PTZSpacesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZSpacesExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZSpacesExtension * soap_new_req_tt__PTZSpacesExtension(struct soap *soap) { tt__PTZSpacesExtension *_p = soap_instantiate_tt__PTZSpacesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZSpacesExtension * soap_new_set_tt__PTZSpacesExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZSpacesExtension *_p = soap_instantiate_tt__PTZSpacesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZSpacesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZSpacesExtension(struct soap *soap, tt__PTZSpacesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZSpacesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (413)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZSpaces(struct soap*, const char*, int, const tt__PTZSpaces *, const char*);
SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_in_tt__PTZSpaces(struct soap*, const char*, tt__PTZSpaces *, const char*);

#ifndef soap_write_tt__PTZSpaces
#define soap_write_tt__PTZSpaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZSpaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZSpaces * SOAP_FMAC4 soap_get_tt__PTZSpaces(struct soap*, tt__PTZSpaces *, const char*, const char*);

#ifndef soap_read_tt__PTZSpaces
#define soap_read_tt__PTZSpaces(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZSpaces(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZSpaces * SOAP_FMAC2 soap_instantiate_tt__PTZSpaces(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZSpaces * soap_new_tt__PTZSpaces(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZSpaces(soap, n, NULL, NULL, NULL); }

inline tt__PTZSpaces * soap_new_req_tt__PTZSpaces(struct soap *soap) { tt__PTZSpaces *_p = soap_instantiate_tt__PTZSpaces(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZSpaces * soap_new_set_tt__PTZSpaces(struct soap *soap, std::vector<tt__Space2DDescription * >& AbsolutePanTiltPositionSpace, std::vector<tt__Space1DDescription * >& AbsoluteZoomPositionSpace, std::vector<tt__Space2DDescription * >& RelativePanTiltTranslationSpace, std::vector<tt__Space1DDescription * >& RelativeZoomTranslationSpace, std::vector<tt__Space2DDescription * >& ContinuousPanTiltVelocitySpace, std::vector<tt__Space1DDescription * >& ContinuousZoomVelocitySpace, std::vector<tt__Space1DDescription * >& PanTiltSpeedSpace, std::vector<tt__Space1DDescription * >& ZoomSpeedSpace, tt__PTZSpacesExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZSpaces *_p = soap_instantiate_tt__PTZSpaces(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZSpaces::AbsolutePanTiltPositionSpace = AbsolutePanTiltPositionSpace; _p->tt__PTZSpaces::AbsoluteZoomPositionSpace = AbsoluteZoomPositionSpace; _p->tt__PTZSpaces::RelativePanTiltTranslationSpace = RelativePanTiltTranslationSpace; _p->tt__PTZSpaces::RelativeZoomTranslationSpace = RelativeZoomTranslationSpace; _p->tt__PTZSpaces::ContinuousPanTiltVelocitySpace = ContinuousPanTiltVelocitySpace; _p->tt__PTZSpaces::ContinuousZoomVelocitySpace = ContinuousZoomVelocitySpace; _p->tt__PTZSpaces::PanTiltSpeedSpace = PanTiltSpeedSpace; _p->tt__PTZSpaces::ZoomSpeedSpace = ZoomSpeedSpace; _p->tt__PTZSpaces::Extension = Extension; _p->tt__PTZSpaces::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZSpaces(struct soap *soap, tt__PTZSpaces *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZSpaces(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (412)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ZoomLimits(struct soap*, const char*, int, const tt__ZoomLimits *, const char*);
SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_in_tt__ZoomLimits(struct soap*, const char*, tt__ZoomLimits *, const char*);

#ifndef soap_write_tt__ZoomLimits
#define soap_write_tt__ZoomLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ZoomLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ZoomLimits * SOAP_FMAC4 soap_get_tt__ZoomLimits(struct soap*, tt__ZoomLimits *, const char*, const char*);

#ifndef soap_read_tt__ZoomLimits
#define soap_read_tt__ZoomLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ZoomLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ZoomLimits * SOAP_FMAC2 soap_instantiate_tt__ZoomLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__ZoomLimits * soap_new_tt__ZoomLimits(struct soap *soap, int n = -1) { return soap_instantiate_tt__ZoomLimits(soap, n, NULL, NULL, NULL); }

inline tt__ZoomLimits * soap_new_req_tt__ZoomLimits(struct soap *soap, tt__Space1DDescription *Range) { tt__ZoomLimits *_p = soap_instantiate_tt__ZoomLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ZoomLimits::Range = Range; } return _p; }

inline tt__ZoomLimits * soap_new_set_tt__ZoomLimits(struct soap *soap, tt__Space1DDescription *Range, char *__item1) { tt__ZoomLimits *_p = soap_instantiate_tt__ZoomLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ZoomLimits::Range = Range; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ZoomLimits(struct soap *soap, tt__ZoomLimits *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ZoomLimits(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (411)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PanTiltLimits(struct soap*, const char*, int, const tt__PanTiltLimits *, const char*);
SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_in_tt__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits *, const char*);

#ifndef soap_write_tt__PanTiltLimits
#define soap_write_tt__PanTiltLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PanTiltLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PanTiltLimits * SOAP_FMAC4 soap_get_tt__PanTiltLimits(struct soap*, tt__PanTiltLimits *, const char*, const char*);

#ifndef soap_read_tt__PanTiltLimits
#define soap_read_tt__PanTiltLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PanTiltLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PanTiltLimits * SOAP_FMAC2 soap_instantiate_tt__PanTiltLimits(struct soap*, int, const char*, const char*, size_t*);

inline tt__PanTiltLimits * soap_new_tt__PanTiltLimits(struct soap *soap, int n = -1) { return soap_instantiate_tt__PanTiltLimits(soap, n, NULL, NULL, NULL); }

inline tt__PanTiltLimits * soap_new_req_tt__PanTiltLimits(struct soap *soap, tt__Space2DDescription *Range) { tt__PanTiltLimits *_p = soap_instantiate_tt__PanTiltLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PanTiltLimits::Range = Range; } return _p; }

inline tt__PanTiltLimits * soap_new_set_tt__PanTiltLimits(struct soap *soap, tt__Space2DDescription *Range, char *__item1) { tt__PanTiltLimits *_p = soap_instantiate_tt__PanTiltLimits(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PanTiltLimits::Range = Range; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PanTiltLimits(struct soap *soap, tt__PanTiltLimits *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PanTiltLimits(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (410)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptionsExtension(struct soap*, const char*, int, const tt__ReverseOptionsExtension *, const char*);
SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_in_tt__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension *, const char*);

#ifndef soap_write_tt__ReverseOptionsExtension
#define soap_write_tt__ReverseOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReverseOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReverseOptionsExtension * SOAP_FMAC4 soap_get_tt__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__ReverseOptionsExtension
#define soap_read_tt__ReverseOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReverseOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReverseOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__ReverseOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptionsExtension * soap_new_tt__ReverseOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReverseOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__ReverseOptionsExtension * soap_new_req_tt__ReverseOptionsExtension(struct soap *soap) { tt__ReverseOptionsExtension *_p = soap_instantiate_tt__ReverseOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ReverseOptionsExtension * soap_new_set_tt__ReverseOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ReverseOptionsExtension *_p = soap_instantiate_tt__ReverseOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReverseOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReverseOptionsExtension(struct soap *soap, tt__ReverseOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReverseOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (409)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReverseOptions(struct soap*, const char*, int, const tt__ReverseOptions *, const char*);
SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_in_tt__ReverseOptions(struct soap*, const char*, tt__ReverseOptions *, const char*);

#ifndef soap_write_tt__ReverseOptions
#define soap_write_tt__ReverseOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReverseOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReverseOptions * SOAP_FMAC4 soap_get_tt__ReverseOptions(struct soap*, tt__ReverseOptions *, const char*, const char*);

#ifndef soap_read_tt__ReverseOptions
#define soap_read_tt__ReverseOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReverseOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReverseOptions * SOAP_FMAC2 soap_instantiate_tt__ReverseOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReverseOptions * soap_new_tt__ReverseOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReverseOptions(soap, n, NULL, NULL, NULL); }

inline tt__ReverseOptions * soap_new_req_tt__ReverseOptions(struct soap *soap) { tt__ReverseOptions *_p = soap_instantiate_tt__ReverseOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ReverseOptions * soap_new_set_tt__ReverseOptions(struct soap *soap, std::vector<enum tt__ReverseMode >& Mode, tt__ReverseOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__ReverseOptions *_p = soap_instantiate_tt__ReverseOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReverseOptions::Mode = Mode; _p->tt__ReverseOptions::Extension = Extension; _p->tt__ReverseOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReverseOptions(struct soap *soap, tt__ReverseOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReverseOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (408)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptionsExtension(struct soap*, const char*, int, const tt__EFlipOptionsExtension *, const char*);
SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_in_tt__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension *, const char*);

#ifndef soap_write_tt__EFlipOptionsExtension
#define soap_write_tt__EFlipOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EFlipOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlipOptionsExtension * SOAP_FMAC4 soap_get_tt__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__EFlipOptionsExtension
#define soap_read_tt__EFlipOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EFlipOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EFlipOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__EFlipOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptionsExtension * soap_new_tt__EFlipOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__EFlipOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__EFlipOptionsExtension * soap_new_req_tt__EFlipOptionsExtension(struct soap *soap) { tt__EFlipOptionsExtension *_p = soap_instantiate_tt__EFlipOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__EFlipOptionsExtension * soap_new_set_tt__EFlipOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__EFlipOptionsExtension *_p = soap_instantiate_tt__EFlipOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EFlipOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EFlipOptionsExtension(struct soap *soap, tt__EFlipOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EFlipOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (407)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlipOptions(struct soap*, const char*, int, const tt__EFlipOptions *, const char*);
SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_in_tt__EFlipOptions(struct soap*, const char*, tt__EFlipOptions *, const char*);

#ifndef soap_write_tt__EFlipOptions
#define soap_write_tt__EFlipOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EFlipOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlipOptions * SOAP_FMAC4 soap_get_tt__EFlipOptions(struct soap*, tt__EFlipOptions *, const char*, const char*);

#ifndef soap_read_tt__EFlipOptions
#define soap_read_tt__EFlipOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EFlipOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EFlipOptions * SOAP_FMAC2 soap_instantiate_tt__EFlipOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlipOptions * soap_new_tt__EFlipOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__EFlipOptions(soap, n, NULL, NULL, NULL); }

inline tt__EFlipOptions * soap_new_req_tt__EFlipOptions(struct soap *soap) { tt__EFlipOptions *_p = soap_instantiate_tt__EFlipOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__EFlipOptions * soap_new_set_tt__EFlipOptions(struct soap *soap, std::vector<enum tt__EFlipMode >& Mode, tt__EFlipOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__EFlipOptions *_p = soap_instantiate_tt__EFlipOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EFlipOptions::Mode = Mode; _p->tt__EFlipOptions::Extension = Extension; _p->tt__EFlipOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EFlipOptions(struct soap *soap, tt__EFlipOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EFlipOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (406)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, int, const tt__PTControlDirectionOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension *, const char*);

#ifndef soap_write_tt__PTControlDirectionOptionsExtension
#define soap_write_tt__PTControlDirectionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTControlDirectionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirectionOptionsExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__PTControlDirectionOptionsExtension
#define soap_read_tt__PTControlDirectionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTControlDirectionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTControlDirectionOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptionsExtension * soap_new_tt__PTControlDirectionOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTControlDirectionOptionsExtension * soap_new_req_tt__PTControlDirectionOptionsExtension(struct soap *soap) { tt__PTControlDirectionOptionsExtension *_p = soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTControlDirectionOptionsExtension * soap_new_set_tt__PTControlDirectionOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTControlDirectionOptionsExtension *_p = soap_instantiate_tt__PTControlDirectionOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTControlDirectionOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTControlDirectionOptionsExtension(struct soap *soap, tt__PTControlDirectionOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTControlDirectionOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (405)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionOptions(struct soap*, const char*, int, const tt__PTControlDirectionOptions *, const char*);
SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_in_tt__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions *, const char*);

#ifndef soap_write_tt__PTControlDirectionOptions
#define soap_write_tt__PTControlDirectionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTControlDirectionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirectionOptions * SOAP_FMAC4 soap_get_tt__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *, const char*, const char*);

#ifndef soap_read_tt__PTControlDirectionOptions
#define soap_read_tt__PTControlDirectionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTControlDirectionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTControlDirectionOptions * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionOptions * soap_new_tt__PTControlDirectionOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTControlDirectionOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTControlDirectionOptions * soap_new_req_tt__PTControlDirectionOptions(struct soap *soap) { tt__PTControlDirectionOptions *_p = soap_instantiate_tt__PTControlDirectionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTControlDirectionOptions * soap_new_set_tt__PTControlDirectionOptions(struct soap *soap, tt__EFlipOptions *EFlip, tt__ReverseOptions *Reverse, tt__PTControlDirectionOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTControlDirectionOptions *_p = soap_instantiate_tt__PTControlDirectionOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTControlDirectionOptions::EFlip = EFlip; _p->tt__PTControlDirectionOptions::Reverse = Reverse; _p->tt__PTControlDirectionOptions::Extension = Extension; _p->tt__PTControlDirectionOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTControlDirectionOptions(struct soap *soap, tt__PTControlDirectionOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTControlDirectionOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (404)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions2(struct soap*, const char*, int, const tt__PTZConfigurationOptions2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 *, const char*);

#ifndef soap_write_tt__PTZConfigurationOptions2
#define soap_write_tt__PTZConfigurationOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZConfigurationOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationOptions2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *, const char*, const char*);

#ifndef soap_read_tt__PTZConfigurationOptions2
#define soap_read_tt__PTZConfigurationOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZConfigurationOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZConfigurationOptions2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions2 * soap_new_tt__PTZConfigurationOptions2(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZConfigurationOptions2(soap, n, NULL, NULL, NULL); }

inline tt__PTZConfigurationOptions2 * soap_new_req_tt__PTZConfigurationOptions2(struct soap *soap) { tt__PTZConfigurationOptions2 *_p = soap_instantiate_tt__PTZConfigurationOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZConfigurationOptions2 * soap_new_set_tt__PTZConfigurationOptions2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZConfigurationOptions2 *_p = soap_instantiate_tt__PTZConfigurationOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfigurationOptions2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZConfigurationOptions2(struct soap *soap, tt__PTZConfigurationOptions2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZConfigurationOptions2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (403)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationOptions(struct soap*, const char*, int, const tt__PTZConfigurationOptions *, const char*);
SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_in_tt__PTZConfigurationOptions(struct soap*, const char*, tt__PTZConfigurationOptions *, const char*);

#ifndef soap_write_tt__PTZConfigurationOptions
#define soap_write_tt__PTZConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationOptions * SOAP_FMAC4 soap_get_tt__PTZConfigurationOptions(struct soap*, tt__PTZConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__PTZConfigurationOptions
#define soap_read_tt__PTZConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationOptions * soap_new_tt__PTZConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTZConfigurationOptions * soap_new_req_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZSpaces *Spaces, tt__DurationRange *PTZTimeout) { tt__PTZConfigurationOptions *_p = soap_instantiate_tt__PTZConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfigurationOptions::Spaces = Spaces; _p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout; } return _p; }

inline tt__PTZConfigurationOptions * soap_new_set_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZSpaces *Spaces, tt__DurationRange *PTZTimeout, std::vector<char * >& __any, tt__PTControlDirectionOptions *PTControlDirection, tt__PTZConfigurationOptions2 *Extension, std::string *PTZRamps, char *__anyAttribute, char *__item1) { tt__PTZConfigurationOptions *_p = soap_instantiate_tt__PTZConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfigurationOptions::Spaces = Spaces; _p->tt__PTZConfigurationOptions::PTZTimeout = PTZTimeout; _p->tt__PTZConfigurationOptions::__any = __any; _p->tt__PTZConfigurationOptions::PTControlDirection = PTControlDirection; _p->tt__PTZConfigurationOptions::Extension = Extension; _p->tt__PTZConfigurationOptions::PTZRamps = PTZRamps; _p->tt__PTZConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZConfigurationOptions(struct soap *soap, tt__PTZConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (402)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Reverse(struct soap*, const char*, int, const tt__Reverse *, const char*);
SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_in_tt__Reverse(struct soap*, const char*, tt__Reverse *, const char*);

#ifndef soap_write_tt__Reverse
#define soap_write_tt__Reverse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Reverse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Reverse * SOAP_FMAC4 soap_get_tt__Reverse(struct soap*, tt__Reverse *, const char*, const char*);

#ifndef soap_read_tt__Reverse
#define soap_read_tt__Reverse(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Reverse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Reverse * SOAP_FMAC2 soap_instantiate_tt__Reverse(struct soap*, int, const char*, const char*, size_t*);

inline tt__Reverse * soap_new_tt__Reverse(struct soap *soap, int n = -1) { return soap_instantiate_tt__Reverse(soap, n, NULL, NULL, NULL); }

inline tt__Reverse * soap_new_req_tt__Reverse(struct soap *soap, enum tt__ReverseMode Mode) { tt__Reverse *_p = soap_instantiate_tt__Reverse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Reverse::Mode = Mode; } return _p; }

inline tt__Reverse * soap_new_set_tt__Reverse(struct soap *soap, enum tt__ReverseMode Mode, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Reverse *_p = soap_instantiate_tt__Reverse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Reverse::Mode = Mode; _p->tt__Reverse::__any = __any; _p->tt__Reverse::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Reverse(struct soap *soap, tt__Reverse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Reverse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (401)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EFlip(struct soap*, const char*, int, const tt__EFlip *, const char*);
SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_in_tt__EFlip(struct soap*, const char*, tt__EFlip *, const char*);

#ifndef soap_write_tt__EFlip
#define soap_write_tt__EFlip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EFlip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlip * SOAP_FMAC4 soap_get_tt__EFlip(struct soap*, tt__EFlip *, const char*, const char*);

#ifndef soap_read_tt__EFlip
#define soap_read_tt__EFlip(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EFlip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EFlip * SOAP_FMAC2 soap_instantiate_tt__EFlip(struct soap*, int, const char*, const char*, size_t*);

inline tt__EFlip * soap_new_tt__EFlip(struct soap *soap, int n = -1) { return soap_instantiate_tt__EFlip(soap, n, NULL, NULL, NULL); }

inline tt__EFlip * soap_new_req_tt__EFlip(struct soap *soap, enum tt__EFlipMode Mode) { tt__EFlip *_p = soap_instantiate_tt__EFlip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EFlip::Mode = Mode; } return _p; }

inline tt__EFlip * soap_new_set_tt__EFlip(struct soap *soap, enum tt__EFlipMode Mode, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__EFlip *_p = soap_instantiate_tt__EFlip(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EFlip::Mode = Mode; _p->tt__EFlip::__any = __any; _p->tt__EFlip::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EFlip(struct soap *soap, tt__EFlip *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EFlip(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (400)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirectionExtension(struct soap*, const char*, int, const tt__PTControlDirectionExtension *, const char*);
SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_in_tt__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension *, const char*);

#ifndef soap_write_tt__PTControlDirectionExtension
#define soap_write_tt__PTControlDirectionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTControlDirectionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirectionExtension * SOAP_FMAC4 soap_get_tt__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *, const char*, const char*);

#ifndef soap_read_tt__PTControlDirectionExtension
#define soap_read_tt__PTControlDirectionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTControlDirectionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTControlDirectionExtension * SOAP_FMAC2 soap_instantiate_tt__PTControlDirectionExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirectionExtension * soap_new_tt__PTControlDirectionExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTControlDirectionExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTControlDirectionExtension * soap_new_req_tt__PTControlDirectionExtension(struct soap *soap) { tt__PTControlDirectionExtension *_p = soap_instantiate_tt__PTControlDirectionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTControlDirectionExtension * soap_new_set_tt__PTControlDirectionExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTControlDirectionExtension *_p = soap_instantiate_tt__PTControlDirectionExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTControlDirectionExtension::__any = __any; _p->tt__PTControlDirectionExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTControlDirectionExtension(struct soap *soap, tt__PTControlDirectionExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTControlDirectionExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (399)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTControlDirection(struct soap*, const char*, int, const tt__PTControlDirection *, const char*);
SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_in_tt__PTControlDirection(struct soap*, const char*, tt__PTControlDirection *, const char*);

#ifndef soap_write_tt__PTControlDirection
#define soap_write_tt__PTControlDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTControlDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirection * SOAP_FMAC4 soap_get_tt__PTControlDirection(struct soap*, tt__PTControlDirection *, const char*, const char*);

#ifndef soap_read_tt__PTControlDirection
#define soap_read_tt__PTControlDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTControlDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTControlDirection * SOAP_FMAC2 soap_instantiate_tt__PTControlDirection(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTControlDirection * soap_new_tt__PTControlDirection(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTControlDirection(soap, n, NULL, NULL, NULL); }

inline tt__PTControlDirection * soap_new_req_tt__PTControlDirection(struct soap *soap) { tt__PTControlDirection *_p = soap_instantiate_tt__PTControlDirection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTControlDirection * soap_new_set_tt__PTControlDirection(struct soap *soap, tt__EFlip *EFlip, tt__Reverse *Reverse, tt__PTControlDirectionExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTControlDirection *_p = soap_instantiate_tt__PTControlDirection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTControlDirection::EFlip = EFlip; _p->tt__PTControlDirection::Reverse = Reverse; _p->tt__PTControlDirection::Extension = Extension; _p->tt__PTControlDirection::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTControlDirection(struct soap *soap, tt__PTControlDirection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTControlDirection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (398)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension2(struct soap*, const char*, int, const tt__PTZConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 *, const char*);

#ifndef soap_write_tt__PTZConfigurationExtension2
#define soap_write_tt__PTZConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_tt__PTZConfigurationExtension2
#define soap_read_tt__PTZConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension2 * soap_new_tt__PTZConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline tt__PTZConfigurationExtension2 * soap_new_req_tt__PTZConfigurationExtension2(struct soap *soap) { tt__PTZConfigurationExtension2 *_p = soap_instantiate_tt__PTZConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZConfigurationExtension2 * soap_new_set_tt__PTZConfigurationExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZConfigurationExtension2 *_p = soap_instantiate_tt__PTZConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZConfigurationExtension2(struct soap *soap, tt__PTZConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (397)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfigurationExtension(struct soap*, const char*, int, const tt__PTZConfigurationExtension *, const char*);
SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_in_tt__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension *, const char*);

#ifndef soap_write_tt__PTZConfigurationExtension
#define soap_write_tt__PTZConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationExtension * SOAP_FMAC4 soap_get_tt__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZConfigurationExtension
#define soap_read_tt__PTZConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__PTZConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfigurationExtension * soap_new_tt__PTZConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZConfigurationExtension * soap_new_req_tt__PTZConfigurationExtension(struct soap *soap) { tt__PTZConfigurationExtension *_p = soap_instantiate_tt__PTZConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZConfigurationExtension * soap_new_set_tt__PTZConfigurationExtension(struct soap *soap, std::vector<char * >& __any, tt__PTControlDirection *PTControlDirection, tt__PTZConfigurationExtension2 *Extension, char *__item1) { tt__PTZConfigurationExtension *_p = soap_instantiate_tt__PTZConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfigurationExtension::__any = __any; _p->tt__PTZConfigurationExtension::PTControlDirection = PTControlDirection; _p->tt__PTZConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZConfigurationExtension(struct soap *soap, tt__PTZConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (396)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZConfiguration(struct soap*, const char*, int, const tt__PTZConfiguration *, const char*);
SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_in_tt__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration *, const char*);

#ifndef soap_write_tt__PTZConfiguration
#define soap_write_tt__PTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfiguration * SOAP_FMAC4 soap_get_tt__PTZConfiguration(struct soap*, tt__PTZConfiguration *, const char*, const char*);

#ifndef soap_read_tt__PTZConfiguration
#define soap_read_tt__PTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZConfiguration * SOAP_FMAC2 soap_instantiate_tt__PTZConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZConfiguration * soap_new_tt__PTZConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__PTZConfiguration * soap_new_req_tt__PTZConfiguration(struct soap *soap, std::string& NodeToken, std::string& Name1, int UseCount1, std::string& token1) { tt__PTZConfiguration *_p = soap_instantiate_tt__PTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfiguration::NodeToken = NodeToken; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__PTZConfiguration * soap_new_set_tt__PTZConfiguration(struct soap *soap, std::string& NodeToken, std::string *DefaultAbsolutePantTiltPositionSpace, std::string *DefaultAbsoluteZoomPositionSpace, std::string *DefaultRelativePanTiltTranslationSpace, std::string *DefaultRelativeZoomTranslationSpace, std::string *DefaultContinuousPanTiltVelocitySpace, std::string *DefaultContinuousZoomVelocitySpace, tt__PTZSpeed *DefaultPTZSpeed, LONG64 *DefaultPTZTimeout, tt__PanTiltLimits *PanTiltLimits, tt__ZoomLimits *ZoomLimits, tt__PTZConfigurationExtension *Extension, int *MoveRamp, int *PresetRamp, int *PresetTourRamp, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__PTZConfiguration *_p = soap_instantiate_tt__PTZConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZConfiguration::NodeToken = NodeToken; _p->tt__PTZConfiguration::DefaultAbsolutePantTiltPositionSpace = DefaultAbsolutePantTiltPositionSpace; _p->tt__PTZConfiguration::DefaultAbsoluteZoomPositionSpace = DefaultAbsoluteZoomPositionSpace; _p->tt__PTZConfiguration::DefaultRelativePanTiltTranslationSpace = DefaultRelativePanTiltTranslationSpace; _p->tt__PTZConfiguration::DefaultRelativeZoomTranslationSpace = DefaultRelativeZoomTranslationSpace; _p->tt__PTZConfiguration::DefaultContinuousPanTiltVelocitySpace = DefaultContinuousPanTiltVelocitySpace; _p->tt__PTZConfiguration::DefaultContinuousZoomVelocitySpace = DefaultContinuousZoomVelocitySpace; _p->tt__PTZConfiguration::DefaultPTZSpeed = DefaultPTZSpeed; _p->tt__PTZConfiguration::DefaultPTZTimeout = DefaultPTZTimeout; _p->tt__PTZConfiguration::PanTiltLimits = PanTiltLimits; _p->tt__PTZConfiguration::ZoomLimits = ZoomLimits; _p->tt__PTZConfiguration::Extension = Extension; _p->tt__PTZConfiguration::MoveRamp = MoveRamp; _p->tt__PTZConfiguration::PresetRamp = PresetRamp; _p->tt__PTZConfiguration::PresetTourRamp = PresetTourRamp; _p->tt__PTZConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__PTZConfiguration(struct soap *soap, tt__PTZConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (395)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, int, const tt__PTZPresetTourSupportedExtension *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension *, const char*);

#ifndef soap_write_tt__PTZPresetTourSupportedExtension
#define soap_write_tt__PTZPresetTourSupportedExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourSupportedExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSupportedExtension * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourSupportedExtension
#define soap_read_tt__PTZPresetTourSupportedExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourSupportedExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourSupportedExtension * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupportedExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupportedExtension * soap_new_tt__PTZPresetTourSupportedExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourSupportedExtension * soap_new_req_tt__PTZPresetTourSupportedExtension(struct soap *soap) { tt__PTZPresetTourSupportedExtension *_p = soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZPresetTourSupportedExtension * soap_new_set_tt__PTZPresetTourSupportedExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZPresetTourSupportedExtension *_p = soap_instantiate_tt__PTZPresetTourSupportedExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSupportedExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourSupportedExtension(struct soap *soap, tt__PTZPresetTourSupportedExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourSupportedExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (394)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZPresetTourSupported(struct soap*, const char*, int, const tt__PTZPresetTourSupported *, const char*);
SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_in_tt__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported *, const char*);

#ifndef soap_write_tt__PTZPresetTourSupported
#define soap_write_tt__PTZPresetTourSupported(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZPresetTourSupported", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSupported * SOAP_FMAC4 soap_get_tt__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *, const char*, const char*);

#ifndef soap_read_tt__PTZPresetTourSupported
#define soap_read_tt__PTZPresetTourSupported(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZPresetTourSupported(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZPresetTourSupported * SOAP_FMAC2 soap_instantiate_tt__PTZPresetTourSupported(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZPresetTourSupported * soap_new_tt__PTZPresetTourSupported(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZPresetTourSupported(soap, n, NULL, NULL, NULL); }

inline tt__PTZPresetTourSupported * soap_new_req_tt__PTZPresetTourSupported(struct soap *soap, int MaximumNumberOfPresetTours) { tt__PTZPresetTourSupported *_p = soap_instantiate_tt__PTZPresetTourSupported(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours; } return _p; }

inline tt__PTZPresetTourSupported * soap_new_set_tt__PTZPresetTourSupported(struct soap *soap, int MaximumNumberOfPresetTours, std::vector<enum tt__PTZPresetTourOperation >& PTZPresetTourOperation, tt__PTZPresetTourSupportedExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZPresetTourSupported *_p = soap_instantiate_tt__PTZPresetTourSupported(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZPresetTourSupported::MaximumNumberOfPresetTours = MaximumNumberOfPresetTours; _p->tt__PTZPresetTourSupported::PTZPresetTourOperation = PTZPresetTourOperation; _p->tt__PTZPresetTourSupported::Extension = Extension; _p->tt__PTZPresetTourSupported::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZPresetTourSupported(struct soap *soap, tt__PTZPresetTourSupported *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZPresetTourSupported(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (393)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension2(struct soap*, const char*, int, const tt__PTZNodeExtension2 *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_in_tt__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 *, const char*);

#ifndef soap_write_tt__PTZNodeExtension2
#define soap_write_tt__PTZNodeExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZNodeExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZNodeExtension2 * SOAP_FMAC4 soap_get_tt__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *, const char*, const char*);

#ifndef soap_read_tt__PTZNodeExtension2
#define soap_read_tt__PTZNodeExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZNodeExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZNodeExtension2 * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension2 * soap_new_tt__PTZNodeExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZNodeExtension2(soap, n, NULL, NULL, NULL); }

inline tt__PTZNodeExtension2 * soap_new_req_tt__PTZNodeExtension2(struct soap *soap) { tt__PTZNodeExtension2 *_p = soap_instantiate_tt__PTZNodeExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZNodeExtension2 * soap_new_set_tt__PTZNodeExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZNodeExtension2 *_p = soap_instantiate_tt__PTZNodeExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZNodeExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZNodeExtension2(struct soap *soap, tt__PTZNodeExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZNodeExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (392)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNodeExtension(struct soap*, const char*, int, const tt__PTZNodeExtension *, const char*);
SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_in_tt__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension *, const char*);

#ifndef soap_write_tt__PTZNodeExtension
#define soap_write_tt__PTZNodeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZNodeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZNodeExtension * SOAP_FMAC4 soap_get_tt__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZNodeExtension
#define soap_read_tt__PTZNodeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZNodeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZNodeExtension * SOAP_FMAC2 soap_instantiate_tt__PTZNodeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNodeExtension * soap_new_tt__PTZNodeExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZNodeExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZNodeExtension * soap_new_req_tt__PTZNodeExtension(struct soap *soap) { tt__PTZNodeExtension *_p = soap_instantiate_tt__PTZNodeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZNodeExtension * soap_new_set_tt__PTZNodeExtension(struct soap *soap, std::vector<char * >& __any, tt__PTZPresetTourSupported *SupportedPresetTour, tt__PTZNodeExtension2 *Extension, char *__item1) { tt__PTZNodeExtension *_p = soap_instantiate_tt__PTZNodeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZNodeExtension::__any = __any; _p->tt__PTZNodeExtension::SupportedPresetTour = SupportedPresetTour; _p->tt__PTZNodeExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZNodeExtension(struct soap *soap, tt__PTZNodeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZNodeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (391)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZNode(struct soap*, const char*, int, const tt__PTZNode *, const char*);
SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_in_tt__PTZNode(struct soap*, const char*, tt__PTZNode *, const char*);

#ifndef soap_write_tt__PTZNode
#define soap_write_tt__PTZNode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZNode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZNode * SOAP_FMAC4 soap_get_tt__PTZNode(struct soap*, tt__PTZNode *, const char*, const char*);

#ifndef soap_read_tt__PTZNode
#define soap_read_tt__PTZNode(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZNode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZNode * SOAP_FMAC2 soap_instantiate_tt__PTZNode(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZNode * soap_new_tt__PTZNode(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZNode(soap, n, NULL, NULL, NULL); }

inline tt__PTZNode * soap_new_req_tt__PTZNode(struct soap *soap, tt__PTZSpaces *SupportedPTZSpaces, int MaximumNumberOfPresets, bool HomeSupported, std::string& token1) { tt__PTZNode *_p = soap_instantiate_tt__PTZNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces; _p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets; _p->tt__PTZNode::HomeSupported = HomeSupported; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__PTZNode * soap_new_set_tt__PTZNode(struct soap *soap, std::string *Name, tt__PTZSpaces *SupportedPTZSpaces, int MaximumNumberOfPresets, bool HomeSupported, std::vector<std::string >& AuxiliaryCommands, tt__PTZNodeExtension *Extension, bool *FixedHomePosition, bool *GeoMove, char *__anyAttribute, std::string& token1, char *__item2) { tt__PTZNode *_p = soap_instantiate_tt__PTZNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZNode::Name = Name; _p->tt__PTZNode::SupportedPTZSpaces = SupportedPTZSpaces; _p->tt__PTZNode::MaximumNumberOfPresets = MaximumNumberOfPresets; _p->tt__PTZNode::HomeSupported = HomeSupported; _p->tt__PTZNode::AuxiliaryCommands = AuxiliaryCommands; _p->tt__PTZNode::Extension = Extension; _p->tt__PTZNode::FixedHomePosition = FixedHomePosition; _p->tt__PTZNode::GeoMove = GeoMove; _p->tt__PTZNode::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__PTZNode(struct soap *soap, tt__PTZNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (390)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DigitalInput(struct soap*, const char*, int, const tt__DigitalInput *, const char*);
SOAP_FMAC3 tt__DigitalInput * SOAP_FMAC4 soap_in_tt__DigitalInput(struct soap*, const char*, tt__DigitalInput *, const char*);

#ifndef soap_write_tt__DigitalInput
#define soap_write_tt__DigitalInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DigitalInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DigitalInput * SOAP_FMAC4 soap_get_tt__DigitalInput(struct soap*, tt__DigitalInput *, const char*, const char*);

#ifndef soap_read_tt__DigitalInput
#define soap_read_tt__DigitalInput(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DigitalInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DigitalInput * SOAP_FMAC2 soap_instantiate_tt__DigitalInput(struct soap*, int, const char*, const char*, size_t*);

inline tt__DigitalInput * soap_new_tt__DigitalInput(struct soap *soap, int n = -1) { return soap_instantiate_tt__DigitalInput(soap, n, NULL, NULL, NULL); }

inline tt__DigitalInput * soap_new_req_tt__DigitalInput(struct soap *soap, std::string& token1) { tt__DigitalInput *_p = soap_instantiate_tt__DigitalInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__DigitalInput * soap_new_set_tt__DigitalInput(struct soap *soap, std::vector<char * >& __any, enum tt__DigitalIdleState *IdleState, char *__anyAttribute, std::string& token1, char *__item2) { tt__DigitalInput *_p = soap_instantiate_tt__DigitalInput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DigitalInput::__any = __any; _p->tt__DigitalInput::IdleState = IdleState; _p->tt__DigitalInput::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__DigitalInput(struct soap *soap, tt__DigitalInput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DigitalInput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (389)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayOutput(struct soap*, const char*, int, const tt__RelayOutput *, const char*);
SOAP_FMAC3 tt__RelayOutput * SOAP_FMAC4 soap_in_tt__RelayOutput(struct soap*, const char*, tt__RelayOutput *, const char*);

#ifndef soap_write_tt__RelayOutput
#define soap_write_tt__RelayOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelayOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelayOutput * SOAP_FMAC4 soap_get_tt__RelayOutput(struct soap*, tt__RelayOutput *, const char*, const char*);

#ifndef soap_read_tt__RelayOutput
#define soap_read_tt__RelayOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelayOutput * SOAP_FMAC2 soap_instantiate_tt__RelayOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayOutput * soap_new_tt__RelayOutput(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelayOutput(soap, n, NULL, NULL, NULL); }

inline tt__RelayOutput * soap_new_req_tt__RelayOutput(struct soap *soap, tt__RelayOutputSettings *Properties, std::string& token1) { tt__RelayOutput *_p = soap_instantiate_tt__RelayOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayOutput::Properties = Properties; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__RelayOutput * soap_new_set_tt__RelayOutput(struct soap *soap, tt__RelayOutputSettings *Properties, std::vector<char * >& __any, char *__anyAttribute, std::string& token1, char *__item2) { tt__RelayOutput *_p = soap_instantiate_tt__RelayOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayOutput::Properties = Properties; _p->tt__RelayOutput::__any = __any; _p->tt__RelayOutput::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__RelayOutput(struct soap *soap, tt__RelayOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelayOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (388)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RelayOutputSettings(struct soap*, const char*, int, const tt__RelayOutputSettings *, const char*);
SOAP_FMAC3 tt__RelayOutputSettings * SOAP_FMAC4 soap_in_tt__RelayOutputSettings(struct soap*, const char*, tt__RelayOutputSettings *, const char*);

#ifndef soap_write_tt__RelayOutputSettings
#define soap_write_tt__RelayOutputSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RelayOutputSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelayOutputSettings * SOAP_FMAC4 soap_get_tt__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *, const char*, const char*);

#ifndef soap_read_tt__RelayOutputSettings
#define soap_read_tt__RelayOutputSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RelayOutputSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RelayOutputSettings * SOAP_FMAC2 soap_instantiate_tt__RelayOutputSettings(struct soap*, int, const char*, const char*, size_t*);

inline tt__RelayOutputSettings * soap_new_tt__RelayOutputSettings(struct soap *soap, int n = -1) { return soap_instantiate_tt__RelayOutputSettings(soap, n, NULL, NULL, NULL); }

inline tt__RelayOutputSettings * soap_new_req_tt__RelayOutputSettings(struct soap *soap, enum tt__RelayMode Mode, LONG64 DelayTime, enum tt__RelayIdleState IdleState) { tt__RelayOutputSettings *_p = soap_instantiate_tt__RelayOutputSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayOutputSettings::Mode = Mode; _p->tt__RelayOutputSettings::DelayTime = DelayTime; _p->tt__RelayOutputSettings::IdleState = IdleState; } return _p; }

inline tt__RelayOutputSettings * soap_new_set_tt__RelayOutputSettings(struct soap *soap, enum tt__RelayMode Mode, LONG64 DelayTime, enum tt__RelayIdleState IdleState, char *__item1) { tt__RelayOutputSettings *_p = soap_instantiate_tt__RelayOutputSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RelayOutputSettings::Mode = Mode; _p->tt__RelayOutputSettings::DelayTime = DelayTime; _p->tt__RelayOutputSettings::IdleState = IdleState; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RelayOutputSettings(struct soap *soap, tt__RelayOutputSettings *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RelayOutputSettings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (387)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__GenericEapPwdConfigurationExtension(struct soap*, const char*, int, const tt__GenericEapPwdConfigurationExtension *, const char*);
SOAP_FMAC3 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC4 soap_in_tt__GenericEapPwdConfigurationExtension(struct soap*, const char*, tt__GenericEapPwdConfigurationExtension *, const char*);

#ifndef soap_write_tt__GenericEapPwdConfigurationExtension
#define soap_write_tt__GenericEapPwdConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:GenericEapPwdConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC4 soap_get_tt__GenericEapPwdConfigurationExtension(struct soap*, tt__GenericEapPwdConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__GenericEapPwdConfigurationExtension
#define soap_read_tt__GenericEapPwdConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__GenericEapPwdConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__GenericEapPwdConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__GenericEapPwdConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__GenericEapPwdConfigurationExtension * soap_new_tt__GenericEapPwdConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__GenericEapPwdConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__GenericEapPwdConfigurationExtension * soap_new_req_tt__GenericEapPwdConfigurationExtension(struct soap *soap) { tt__GenericEapPwdConfigurationExtension *_p = soap_instantiate_tt__GenericEapPwdConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__GenericEapPwdConfigurationExtension * soap_new_set_tt__GenericEapPwdConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__GenericEapPwdConfigurationExtension *_p = soap_instantiate_tt__GenericEapPwdConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__GenericEapPwdConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__GenericEapPwdConfigurationExtension(struct soap *soap, tt__GenericEapPwdConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__GenericEapPwdConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (386)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TLSConfiguration(struct soap*, const char*, int, const tt__TLSConfiguration *, const char*);
SOAP_FMAC3 tt__TLSConfiguration * SOAP_FMAC4 soap_in_tt__TLSConfiguration(struct soap*, const char*, tt__TLSConfiguration *, const char*);

#ifndef soap_write_tt__TLSConfiguration
#define soap_write_tt__TLSConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TLSConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TLSConfiguration * SOAP_FMAC4 soap_get_tt__TLSConfiguration(struct soap*, tt__TLSConfiguration *, const char*, const char*);

#ifndef soap_read_tt__TLSConfiguration
#define soap_read_tt__TLSConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TLSConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TLSConfiguration * SOAP_FMAC2 soap_instantiate_tt__TLSConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__TLSConfiguration * soap_new_tt__TLSConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__TLSConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__TLSConfiguration * soap_new_req_tt__TLSConfiguration(struct soap *soap, std::string& CertificateID) { tt__TLSConfiguration *_p = soap_instantiate_tt__TLSConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TLSConfiguration::CertificateID = CertificateID; } return _p; }

inline tt__TLSConfiguration * soap_new_set_tt__TLSConfiguration(struct soap *soap, std::string& CertificateID, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__TLSConfiguration *_p = soap_instantiate_tt__TLSConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TLSConfiguration::CertificateID = CertificateID; _p->tt__TLSConfiguration::__any = __any; _p->tt__TLSConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TLSConfiguration(struct soap *soap, tt__TLSConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TLSConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (385)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EapMethodExtension(struct soap*, const char*, int, const tt__EapMethodExtension *, const char*);
SOAP_FMAC3 tt__EapMethodExtension * SOAP_FMAC4 soap_in_tt__EapMethodExtension(struct soap*, const char*, tt__EapMethodExtension *, const char*);

#ifndef soap_write_tt__EapMethodExtension
#define soap_write_tt__EapMethodExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EapMethodExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EapMethodExtension * SOAP_FMAC4 soap_get_tt__EapMethodExtension(struct soap*, tt__EapMethodExtension *, const char*, const char*);

#ifndef soap_read_tt__EapMethodExtension
#define soap_read_tt__EapMethodExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EapMethodExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EapMethodExtension * SOAP_FMAC2 soap_instantiate_tt__EapMethodExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__EapMethodExtension * soap_new_tt__EapMethodExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__EapMethodExtension(soap, n, NULL, NULL, NULL); }

inline tt__EapMethodExtension * soap_new_req_tt__EapMethodExtension(struct soap *soap) { tt__EapMethodExtension *_p = soap_instantiate_tt__EapMethodExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__EapMethodExtension * soap_new_set_tt__EapMethodExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__EapMethodExtension *_p = soap_instantiate_tt__EapMethodExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EapMethodExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EapMethodExtension(struct soap *soap, tt__EapMethodExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EapMethodExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (384)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EAPMethodConfiguration(struct soap*, const char*, int, const tt__EAPMethodConfiguration *, const char*);
SOAP_FMAC3 tt__EAPMethodConfiguration * SOAP_FMAC4 soap_in_tt__EAPMethodConfiguration(struct soap*, const char*, tt__EAPMethodConfiguration *, const char*);

#ifndef soap_write_tt__EAPMethodConfiguration
#define soap_write_tt__EAPMethodConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EAPMethodConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EAPMethodConfiguration * SOAP_FMAC4 soap_get_tt__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *, const char*, const char*);

#ifndef soap_read_tt__EAPMethodConfiguration
#define soap_read_tt__EAPMethodConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EAPMethodConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EAPMethodConfiguration * SOAP_FMAC2 soap_instantiate_tt__EAPMethodConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__EAPMethodConfiguration * soap_new_tt__EAPMethodConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__EAPMethodConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__EAPMethodConfiguration * soap_new_req_tt__EAPMethodConfiguration(struct soap *soap) { tt__EAPMethodConfiguration *_p = soap_instantiate_tt__EAPMethodConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__EAPMethodConfiguration * soap_new_set_tt__EAPMethodConfiguration(struct soap *soap, tt__TLSConfiguration *TLSConfiguration, std::string *Password, tt__EapMethodExtension *Extension, char *__anyAttribute, char *__item1) { tt__EAPMethodConfiguration *_p = soap_instantiate_tt__EAPMethodConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EAPMethodConfiguration::TLSConfiguration = TLSConfiguration; _p->tt__EAPMethodConfiguration::Password = Password; _p->tt__EAPMethodConfiguration::Extension = Extension; _p->tt__EAPMethodConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EAPMethodConfiguration(struct soap *soap, tt__EAPMethodConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EAPMethodConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (383)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot1XConfigurationExtension(struct soap*, const char*, int, const tt__Dot1XConfigurationExtension *, const char*);
SOAP_FMAC3 tt__Dot1XConfigurationExtension * SOAP_FMAC4 soap_in_tt__Dot1XConfigurationExtension(struct soap*, const char*, tt__Dot1XConfigurationExtension *, const char*);

#ifndef soap_write_tt__Dot1XConfigurationExtension
#define soap_write_tt__Dot1XConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot1XConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot1XConfigurationExtension * SOAP_FMAC4 soap_get_tt__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__Dot1XConfigurationExtension
#define soap_read_tt__Dot1XConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot1XConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot1XConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot1XConfigurationExtension * soap_new_tt__Dot1XConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot1XConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__Dot1XConfigurationExtension * soap_new_req_tt__Dot1XConfigurationExtension(struct soap *soap) { tt__Dot1XConfigurationExtension *_p = soap_instantiate_tt__Dot1XConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Dot1XConfigurationExtension * soap_new_set_tt__Dot1XConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__Dot1XConfigurationExtension *_p = soap_instantiate_tt__Dot1XConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot1XConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot1XConfigurationExtension(struct soap *soap, tt__Dot1XConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot1XConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (382)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot1XConfiguration(struct soap*, const char*, int, const tt__Dot1XConfiguration *, const char*);
SOAP_FMAC3 tt__Dot1XConfiguration * SOAP_FMAC4 soap_in_tt__Dot1XConfiguration(struct soap*, const char*, tt__Dot1XConfiguration *, const char*);

#ifndef soap_write_tt__Dot1XConfiguration
#define soap_write_tt__Dot1XConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot1XConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot1XConfiguration * SOAP_FMAC4 soap_get_tt__Dot1XConfiguration(struct soap*, tt__Dot1XConfiguration *, const char*, const char*);

#ifndef soap_read_tt__Dot1XConfiguration
#define soap_read_tt__Dot1XConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot1XConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot1XConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot1XConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot1XConfiguration * soap_new_tt__Dot1XConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot1XConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__Dot1XConfiguration * soap_new_req_tt__Dot1XConfiguration(struct soap *soap, std::string& Dot1XConfigurationToken, std::string& Identity, int EAPMethod) { tt__Dot1XConfiguration *_p = soap_instantiate_tt__Dot1XConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken; _p->tt__Dot1XConfiguration::Identity = Identity; _p->tt__Dot1XConfiguration::EAPMethod = EAPMethod; } return _p; }

inline tt__Dot1XConfiguration * soap_new_set_tt__Dot1XConfiguration(struct soap *soap, std::string& Dot1XConfigurationToken, std::string& Identity, std::string *AnonymousID, int EAPMethod, std::vector<std::string >& CACertificateID, tt__EAPMethodConfiguration *EAPMethodConfiguration, tt__Dot1XConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__Dot1XConfiguration *_p = soap_instantiate_tt__Dot1XConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot1XConfiguration::Dot1XConfigurationToken = Dot1XConfigurationToken; _p->tt__Dot1XConfiguration::Identity = Identity; _p->tt__Dot1XConfiguration::AnonymousID = AnonymousID; _p->tt__Dot1XConfiguration::EAPMethod = EAPMethod; _p->tt__Dot1XConfiguration::CACertificateID = CACertificateID; _p->tt__Dot1XConfiguration::EAPMethodConfiguration = EAPMethodConfiguration; _p->tt__Dot1XConfiguration::Extension = Extension; _p->tt__Dot1XConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot1XConfiguration(struct soap *soap, tt__Dot1XConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot1XConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (381)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateInformationExtension(struct soap*, const char*, int, const tt__CertificateInformationExtension *, const char*);
SOAP_FMAC3 tt__CertificateInformationExtension * SOAP_FMAC4 soap_in_tt__CertificateInformationExtension(struct soap*, const char*, tt__CertificateInformationExtension *, const char*);

#ifndef soap_write_tt__CertificateInformationExtension
#define soap_write_tt__CertificateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateInformationExtension * SOAP_FMAC4 soap_get_tt__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *, const char*, const char*);

#ifndef soap_read_tt__CertificateInformationExtension
#define soap_read_tt__CertificateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateInformationExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateInformationExtension * soap_new_tt__CertificateInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateInformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__CertificateInformationExtension * soap_new_req_tt__CertificateInformationExtension(struct soap *soap) { tt__CertificateInformationExtension *_p = soap_instantiate_tt__CertificateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__CertificateInformationExtension * soap_new_set_tt__CertificateInformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__CertificateInformationExtension *_p = soap_instantiate_tt__CertificateInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateInformationExtension(struct soap *soap, tt__CertificateInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (380)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateUsage(struct soap*, const char*, int, const tt__CertificateUsage *, const char*);
SOAP_FMAC3 tt__CertificateUsage * SOAP_FMAC4 soap_in_tt__CertificateUsage(struct soap*, const char*, tt__CertificateUsage *, const char*);

#ifndef soap_write_tt__CertificateUsage
#define soap_write_tt__CertificateUsage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateUsage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateUsage * SOAP_FMAC4 soap_get_tt__CertificateUsage(struct soap*, tt__CertificateUsage *, const char*, const char*);

#ifndef soap_read_tt__CertificateUsage
#define soap_read_tt__CertificateUsage(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateUsage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateUsage * SOAP_FMAC2 soap_instantiate_tt__CertificateUsage(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateUsage * soap_new_tt__CertificateUsage(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateUsage(soap, n, NULL, NULL, NULL); }

inline tt__CertificateUsage * soap_new_req_tt__CertificateUsage(struct soap *soap, std::string& __item, bool Critical) { tt__CertificateUsage *_p = soap_instantiate_tt__CertificateUsage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateUsage::__item = __item; _p->tt__CertificateUsage::Critical = Critical; } return _p; }

inline tt__CertificateUsage * soap_new_set_tt__CertificateUsage(struct soap *soap, std::string& __item, bool Critical, char *__item1) { tt__CertificateUsage *_p = soap_instantiate_tt__CertificateUsage(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateUsage::__item = __item; _p->tt__CertificateUsage::Critical = Critical; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateUsage(struct soap *soap, tt__CertificateUsage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateUsage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (379)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateInformation(struct soap*, const char*, int, const tt__CertificateInformation *, const char*);
SOAP_FMAC3 tt__CertificateInformation * SOAP_FMAC4 soap_in_tt__CertificateInformation(struct soap*, const char*, tt__CertificateInformation *, const char*);

#ifndef soap_write_tt__CertificateInformation
#define soap_write_tt__CertificateInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateInformation * SOAP_FMAC4 soap_get_tt__CertificateInformation(struct soap*, tt__CertificateInformation *, const char*, const char*);

#ifndef soap_read_tt__CertificateInformation
#define soap_read_tt__CertificateInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateInformation * SOAP_FMAC2 soap_instantiate_tt__CertificateInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateInformation * soap_new_tt__CertificateInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateInformation(soap, n, NULL, NULL, NULL); }

inline tt__CertificateInformation * soap_new_req_tt__CertificateInformation(struct soap *soap, std::string& CertificateID) { tt__CertificateInformation *_p = soap_instantiate_tt__CertificateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateInformation::CertificateID = CertificateID; } return _p; }

inline tt__CertificateInformation * soap_new_set_tt__CertificateInformation(struct soap *soap, std::string& CertificateID, std::string *IssuerDN, std::string *SubjectDN, tt__CertificateUsage *KeyUsage, tt__CertificateUsage *ExtendedKeyUsage, int *KeyLength, std::string *Version, std::string *SerialNum, std::string *SignatureAlgorithm, tt__DateTimeRange *Validity, tt__CertificateInformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__CertificateInformation *_p = soap_instantiate_tt__CertificateInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateInformation::CertificateID = CertificateID; _p->tt__CertificateInformation::IssuerDN = IssuerDN; _p->tt__CertificateInformation::SubjectDN = SubjectDN; _p->tt__CertificateInformation::KeyUsage = KeyUsage; _p->tt__CertificateInformation::ExtendedKeyUsage = ExtendedKeyUsage; _p->tt__CertificateInformation::KeyLength = KeyLength; _p->tt__CertificateInformation::Version = Version; _p->tt__CertificateInformation::SerialNum = SerialNum; _p->tt__CertificateInformation::SignatureAlgorithm = SignatureAlgorithm; _p->tt__CertificateInformation::Validity = Validity; _p->tt__CertificateInformation::Extension = Extension; _p->tt__CertificateInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateInformation(struct soap *soap, tt__CertificateInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (378)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateWithPrivateKey(struct soap*, const char*, int, const tt__CertificateWithPrivateKey *, const char*);
SOAP_FMAC3 tt__CertificateWithPrivateKey * SOAP_FMAC4 soap_in_tt__CertificateWithPrivateKey(struct soap*, const char*, tt__CertificateWithPrivateKey *, const char*);

#ifndef soap_write_tt__CertificateWithPrivateKey
#define soap_write_tt__CertificateWithPrivateKey(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateWithPrivateKey", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateWithPrivateKey * SOAP_FMAC4 soap_get_tt__CertificateWithPrivateKey(struct soap*, tt__CertificateWithPrivateKey *, const char*, const char*);

#ifndef soap_read_tt__CertificateWithPrivateKey
#define soap_read_tt__CertificateWithPrivateKey(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateWithPrivateKey(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateWithPrivateKey * SOAP_FMAC2 soap_instantiate_tt__CertificateWithPrivateKey(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateWithPrivateKey * soap_new_tt__CertificateWithPrivateKey(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateWithPrivateKey(soap, n, NULL, NULL, NULL); }

inline tt__CertificateWithPrivateKey * soap_new_req_tt__CertificateWithPrivateKey(struct soap *soap, tt__BinaryData *Certificate, tt__BinaryData *PrivateKey) { tt__CertificateWithPrivateKey *_p = soap_instantiate_tt__CertificateWithPrivateKey(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateWithPrivateKey::Certificate = Certificate; _p->tt__CertificateWithPrivateKey::PrivateKey = PrivateKey; } return _p; }

inline tt__CertificateWithPrivateKey * soap_new_set_tt__CertificateWithPrivateKey(struct soap *soap, std::string *CertificateID, tt__BinaryData *Certificate, tt__BinaryData *PrivateKey, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__CertificateWithPrivateKey *_p = soap_instantiate_tt__CertificateWithPrivateKey(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateWithPrivateKey::CertificateID = CertificateID; _p->tt__CertificateWithPrivateKey::Certificate = Certificate; _p->tt__CertificateWithPrivateKey::PrivateKey = PrivateKey; _p->tt__CertificateWithPrivateKey::__any = __any; _p->tt__CertificateWithPrivateKey::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateWithPrivateKey(struct soap *soap, tt__CertificateWithPrivateKey *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateWithPrivateKey(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (377)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateStatus(struct soap*, const char*, int, const tt__CertificateStatus *, const char*);
SOAP_FMAC3 tt__CertificateStatus * SOAP_FMAC4 soap_in_tt__CertificateStatus(struct soap*, const char*, tt__CertificateStatus *, const char*);

#ifndef soap_write_tt__CertificateStatus
#define soap_write_tt__CertificateStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateStatus * SOAP_FMAC4 soap_get_tt__CertificateStatus(struct soap*, tt__CertificateStatus *, const char*, const char*);

#ifndef soap_read_tt__CertificateStatus
#define soap_read_tt__CertificateStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateStatus * SOAP_FMAC2 soap_instantiate_tt__CertificateStatus(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateStatus * soap_new_tt__CertificateStatus(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateStatus(soap, n, NULL, NULL, NULL); }

inline tt__CertificateStatus * soap_new_req_tt__CertificateStatus(struct soap *soap, std::string& CertificateID, bool Status) { tt__CertificateStatus *_p = soap_instantiate_tt__CertificateStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateStatus::CertificateID = CertificateID; _p->tt__CertificateStatus::Status = Status; } return _p; }

inline tt__CertificateStatus * soap_new_set_tt__CertificateStatus(struct soap *soap, std::string& CertificateID, bool Status, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__CertificateStatus *_p = soap_instantiate_tt__CertificateStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateStatus::CertificateID = CertificateID; _p->tt__CertificateStatus::Status = Status; _p->tt__CertificateStatus::__any = __any; _p->tt__CertificateStatus::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateStatus(struct soap *soap, tt__CertificateStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (376)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Certificate(struct soap*, const char*, int, const tt__Certificate *, const char*);
SOAP_FMAC3 tt__Certificate * SOAP_FMAC4 soap_in_tt__Certificate(struct soap*, const char*, tt__Certificate *, const char*);

#ifndef soap_write_tt__Certificate
#define soap_write_tt__Certificate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Certificate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Certificate * SOAP_FMAC4 soap_get_tt__Certificate(struct soap*, tt__Certificate *, const char*, const char*);

#ifndef soap_read_tt__Certificate
#define soap_read_tt__Certificate(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Certificate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Certificate * SOAP_FMAC2 soap_instantiate_tt__Certificate(struct soap*, int, const char*, const char*, size_t*);

inline tt__Certificate * soap_new_tt__Certificate(struct soap *soap, int n = -1) { return soap_instantiate_tt__Certificate(soap, n, NULL, NULL, NULL); }

inline tt__Certificate * soap_new_req_tt__Certificate(struct soap *soap, std::string& CertificateID, tt__BinaryData *Certificate) { tt__Certificate *_p = soap_instantiate_tt__Certificate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Certificate::CertificateID = CertificateID; _p->tt__Certificate::Certificate = Certificate; } return _p; }

inline tt__Certificate * soap_new_set_tt__Certificate(struct soap *soap, std::string& CertificateID, tt__BinaryData *Certificate, char *__item1) { tt__Certificate *_p = soap_instantiate_tt__Certificate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Certificate::CertificateID = CertificateID; _p->tt__Certificate::Certificate = Certificate; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Certificate(struct soap *soap, tt__Certificate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Certificate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (375)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateGenerationParametersExtension(struct soap*, const char*, int, const tt__CertificateGenerationParametersExtension *, const char*);
SOAP_FMAC3 tt__CertificateGenerationParametersExtension * SOAP_FMAC4 soap_in_tt__CertificateGenerationParametersExtension(struct soap*, const char*, tt__CertificateGenerationParametersExtension *, const char*);

#ifndef soap_write_tt__CertificateGenerationParametersExtension
#define soap_write_tt__CertificateGenerationParametersExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateGenerationParametersExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateGenerationParametersExtension * SOAP_FMAC4 soap_get_tt__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension *, const char*, const char*);

#ifndef soap_read_tt__CertificateGenerationParametersExtension
#define soap_read_tt__CertificateGenerationParametersExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateGenerationParametersExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateGenerationParametersExtension * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParametersExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateGenerationParametersExtension * soap_new_tt__CertificateGenerationParametersExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateGenerationParametersExtension(soap, n, NULL, NULL, NULL); }

inline tt__CertificateGenerationParametersExtension * soap_new_req_tt__CertificateGenerationParametersExtension(struct soap *soap) { tt__CertificateGenerationParametersExtension *_p = soap_instantiate_tt__CertificateGenerationParametersExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__CertificateGenerationParametersExtension * soap_new_set_tt__CertificateGenerationParametersExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__CertificateGenerationParametersExtension *_p = soap_instantiate_tt__CertificateGenerationParametersExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateGenerationParametersExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateGenerationParametersExtension(struct soap *soap, tt__CertificateGenerationParametersExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateGenerationParametersExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (374)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CertificateGenerationParameters(struct soap*, const char*, int, const tt__CertificateGenerationParameters *, const char*);
SOAP_FMAC3 tt__CertificateGenerationParameters * SOAP_FMAC4 soap_in_tt__CertificateGenerationParameters(struct soap*, const char*, tt__CertificateGenerationParameters *, const char*);

#ifndef soap_write_tt__CertificateGenerationParameters
#define soap_write_tt__CertificateGenerationParameters(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CertificateGenerationParameters", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateGenerationParameters * SOAP_FMAC4 soap_get_tt__CertificateGenerationParameters(struct soap*, tt__CertificateGenerationParameters *, const char*, const char*);

#ifndef soap_read_tt__CertificateGenerationParameters
#define soap_read_tt__CertificateGenerationParameters(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CertificateGenerationParameters(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CertificateGenerationParameters * SOAP_FMAC2 soap_instantiate_tt__CertificateGenerationParameters(struct soap*, int, const char*, const char*, size_t*);

inline tt__CertificateGenerationParameters * soap_new_tt__CertificateGenerationParameters(struct soap *soap, int n = -1) { return soap_instantiate_tt__CertificateGenerationParameters(soap, n, NULL, NULL, NULL); }

inline tt__CertificateGenerationParameters * soap_new_req_tt__CertificateGenerationParameters(struct soap *soap) { tt__CertificateGenerationParameters *_p = soap_instantiate_tt__CertificateGenerationParameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__CertificateGenerationParameters * soap_new_set_tt__CertificateGenerationParameters(struct soap *soap, std::string *CertificateID, std::string *Subject, std::string *ValidNotBefore, std::string *ValidNotAfter, tt__CertificateGenerationParametersExtension *Extension, char *__anyAttribute, char *__item1) { tt__CertificateGenerationParameters *_p = soap_instantiate_tt__CertificateGenerationParameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CertificateGenerationParameters::CertificateID = CertificateID; _p->tt__CertificateGenerationParameters::Subject = Subject; _p->tt__CertificateGenerationParameters::ValidNotBefore = ValidNotBefore; _p->tt__CertificateGenerationParameters::ValidNotAfter = ValidNotAfter; _p->tt__CertificateGenerationParameters::Extension = Extension; _p->tt__CertificateGenerationParameters::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CertificateGenerationParameters(struct soap *soap, tt__CertificateGenerationParameters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CertificateGenerationParameters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (373)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__UserExtension(struct soap*, const char*, int, const tt__UserExtension *, const char*);
SOAP_FMAC3 tt__UserExtension * SOAP_FMAC4 soap_in_tt__UserExtension(struct soap*, const char*, tt__UserExtension *, const char*);

#ifndef soap_write_tt__UserExtension
#define soap_write_tt__UserExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:UserExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__UserExtension * SOAP_FMAC4 soap_get_tt__UserExtension(struct soap*, tt__UserExtension *, const char*, const char*);

#ifndef soap_read_tt__UserExtension
#define soap_read_tt__UserExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__UserExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__UserExtension * SOAP_FMAC2 soap_instantiate_tt__UserExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__UserExtension * soap_new_tt__UserExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__UserExtension(soap, n, NULL, NULL, NULL); }

inline tt__UserExtension * soap_new_req_tt__UserExtension(struct soap *soap) { tt__UserExtension *_p = soap_instantiate_tt__UserExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__UserExtension * soap_new_set_tt__UserExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__UserExtension *_p = soap_instantiate_tt__UserExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__UserExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__UserExtension(struct soap *soap, tt__UserExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__UserExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (372)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__User(struct soap*, const char*, int, const tt__User *, const char*);
SOAP_FMAC3 tt__User * SOAP_FMAC4 soap_in_tt__User(struct soap*, const char*, tt__User *, const char*);

#ifndef soap_write_tt__User
#define soap_write_tt__User(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:User", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__User * SOAP_FMAC4 soap_get_tt__User(struct soap*, tt__User *, const char*, const char*);

#ifndef soap_read_tt__User
#define soap_read_tt__User(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__User(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__User * SOAP_FMAC2 soap_instantiate_tt__User(struct soap*, int, const char*, const char*, size_t*);

inline tt__User * soap_new_tt__User(struct soap *soap, int n = -1) { return soap_instantiate_tt__User(soap, n, NULL, NULL, NULL); }

inline tt__User * soap_new_req_tt__User(struct soap *soap, std::string& Username, enum tt__UserLevel UserLevel) { tt__User *_p = soap_instantiate_tt__User(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__User::Username = Username; _p->tt__User::UserLevel = UserLevel; } return _p; }

inline tt__User * soap_new_set_tt__User(struct soap *soap, std::string& Username, std::string *Password, enum tt__UserLevel UserLevel, tt__UserExtension *Extension, char *__anyAttribute, char *__item1) { tt__User *_p = soap_instantiate_tt__User(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__User::Username = Username; _p->tt__User::Password = Password; _p->tt__User::UserLevel = UserLevel; _p->tt__User::Extension = Extension; _p->tt__User::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__User(struct soap *soap, tt__User *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__User(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (371)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RemoteUser(struct soap*, const char*, int, const tt__RemoteUser *, const char*);
SOAP_FMAC3 tt__RemoteUser * SOAP_FMAC4 soap_in_tt__RemoteUser(struct soap*, const char*, tt__RemoteUser *, const char*);

#ifndef soap_write_tt__RemoteUser
#define soap_write_tt__RemoteUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RemoteUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RemoteUser * SOAP_FMAC4 soap_get_tt__RemoteUser(struct soap*, tt__RemoteUser *, const char*, const char*);

#ifndef soap_read_tt__RemoteUser
#define soap_read_tt__RemoteUser(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RemoteUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RemoteUser * SOAP_FMAC2 soap_instantiate_tt__RemoteUser(struct soap*, int, const char*, const char*, size_t*);

inline tt__RemoteUser * soap_new_tt__RemoteUser(struct soap *soap, int n = -1) { return soap_instantiate_tt__RemoteUser(soap, n, NULL, NULL, NULL); }

inline tt__RemoteUser * soap_new_req_tt__RemoteUser(struct soap *soap, std::string& Username, bool UseDerivedPassword) { tt__RemoteUser *_p = soap_instantiate_tt__RemoteUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RemoteUser::Username = Username; _p->tt__RemoteUser::UseDerivedPassword = UseDerivedPassword; } return _p; }

inline tt__RemoteUser * soap_new_set_tt__RemoteUser(struct soap *soap, std::string& Username, std::string *Password, bool UseDerivedPassword, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RemoteUser *_p = soap_instantiate_tt__RemoteUser(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RemoteUser::Username = Username; _p->tt__RemoteUser::Password = Password; _p->tt__RemoteUser::UseDerivedPassword = UseDerivedPassword; _p->tt__RemoteUser::__any = __any; _p->tt__RemoteUser::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RemoteUser(struct soap *soap, tt__RemoteUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RemoteUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (370)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__TimeZone(struct soap*, const char*, int, const tt__TimeZone *, const char*);
SOAP_FMAC3 tt__TimeZone * SOAP_FMAC4 soap_in_tt__TimeZone(struct soap*, const char*, tt__TimeZone *, const char*);

#ifndef soap_write_tt__TimeZone
#define soap_write_tt__TimeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:TimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TimeZone * SOAP_FMAC4 soap_get_tt__TimeZone(struct soap*, tt__TimeZone *, const char*, const char*);

#ifndef soap_read_tt__TimeZone
#define soap_read_tt__TimeZone(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__TimeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__TimeZone * SOAP_FMAC2 soap_instantiate_tt__TimeZone(struct soap*, int, const char*, const char*, size_t*);

inline tt__TimeZone * soap_new_tt__TimeZone(struct soap *soap, int n = -1) { return soap_instantiate_tt__TimeZone(soap, n, NULL, NULL, NULL); }

inline tt__TimeZone * soap_new_req_tt__TimeZone(struct soap *soap, std::string& TZ) { tt__TimeZone *_p = soap_instantiate_tt__TimeZone(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TimeZone::TZ = TZ; } return _p; }

inline tt__TimeZone * soap_new_set_tt__TimeZone(struct soap *soap, std::string& TZ, char *__item1) { tt__TimeZone *_p = soap_instantiate_tt__TimeZone(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__TimeZone::TZ = TZ; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__TimeZone(struct soap *soap, tt__TimeZone *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__TimeZone(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (369)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Time(struct soap*, const char*, int, const tt__Time *, const char*);
SOAP_FMAC3 tt__Time * SOAP_FMAC4 soap_in_tt__Time(struct soap*, const char*, tt__Time *, const char*);

#ifndef soap_write_tt__Time
#define soap_write_tt__Time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Time * SOAP_FMAC4 soap_get_tt__Time(struct soap*, tt__Time *, const char*, const char*);

#ifndef soap_read_tt__Time
#define soap_read_tt__Time(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Time * SOAP_FMAC2 soap_instantiate_tt__Time(struct soap*, int, const char*, const char*, size_t*);

inline tt__Time * soap_new_tt__Time(struct soap *soap, int n = -1) { return soap_instantiate_tt__Time(soap, n, NULL, NULL, NULL); }

inline tt__Time * soap_new_req_tt__Time(struct soap *soap, int Hour, int Minute, int Second) { tt__Time *_p = soap_instantiate_tt__Time(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Time::Hour = Hour; _p->tt__Time::Minute = Minute; _p->tt__Time::Second = Second; } return _p; }

inline tt__Time * soap_new_set_tt__Time(struct soap *soap, int Hour, int Minute, int Second, char *__item1) { tt__Time *_p = soap_instantiate_tt__Time(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Time::Hour = Hour; _p->tt__Time::Minute = Minute; _p->tt__Time::Second = Second; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Time(struct soap *soap, tt__Time *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Time(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (368)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Date(struct soap*, const char*, int, const tt__Date *, const char*);
SOAP_FMAC3 tt__Date * SOAP_FMAC4 soap_in_tt__Date(struct soap*, const char*, tt__Date *, const char*);

#ifndef soap_write_tt__Date
#define soap_write_tt__Date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Date * SOAP_FMAC4 soap_get_tt__Date(struct soap*, tt__Date *, const char*, const char*);

#ifndef soap_read_tt__Date
#define soap_read_tt__Date(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Date(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Date * SOAP_FMAC2 soap_instantiate_tt__Date(struct soap*, int, const char*, const char*, size_t*);

inline tt__Date * soap_new_tt__Date(struct soap *soap, int n = -1) { return soap_instantiate_tt__Date(soap, n, NULL, NULL, NULL); }

inline tt__Date * soap_new_req_tt__Date(struct soap *soap, int Year, int Month, int Day) { tt__Date *_p = soap_instantiate_tt__Date(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Date::Year = Year; _p->tt__Date::Month = Month; _p->tt__Date::Day = Day; } return _p; }

inline tt__Date * soap_new_set_tt__Date(struct soap *soap, int Year, int Month, int Day, char *__item1) { tt__Date *_p = soap_instantiate_tt__Date(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Date::Year = Year; _p->tt__Date::Month = Month; _p->tt__Date::Day = Day; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Date(struct soap *soap, tt__Date *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Date(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (367)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DateTime(struct soap*, const char*, int, const tt__DateTime *, const char*);
SOAP_FMAC3 tt__DateTime * SOAP_FMAC4 soap_in_tt__DateTime(struct soap*, const char*, tt__DateTime *, const char*);

#ifndef soap_write_tt__DateTime
#define soap_write_tt__DateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DateTime * SOAP_FMAC4 soap_get_tt__DateTime(struct soap*, tt__DateTime *, const char*, const char*);

#ifndef soap_read_tt__DateTime
#define soap_read_tt__DateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DateTime * SOAP_FMAC2 soap_instantiate_tt__DateTime(struct soap*, int, const char*, const char*, size_t*);

inline tt__DateTime * soap_new_tt__DateTime(struct soap *soap, int n = -1) { return soap_instantiate_tt__DateTime(soap, n, NULL, NULL, NULL); }

inline tt__DateTime * soap_new_req_tt__DateTime(struct soap *soap, tt__Time *Time, tt__Date *Date) { tt__DateTime *_p = soap_instantiate_tt__DateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DateTime::Time = Time; _p->tt__DateTime::Date = Date; } return _p; }

inline tt__DateTime * soap_new_set_tt__DateTime(struct soap *soap, tt__Time *Time, tt__Date *Date, char *__item1) { tt__DateTime *_p = soap_instantiate_tt__DateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DateTime::Time = Time; _p->tt__DateTime::Date = Date; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DateTime(struct soap *soap, tt__DateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (366)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemDateTimeExtension(struct soap*, const char*, int, const tt__SystemDateTimeExtension *, const char*);
SOAP_FMAC3 tt__SystemDateTimeExtension * SOAP_FMAC4 soap_in_tt__SystemDateTimeExtension(struct soap*, const char*, tt__SystemDateTimeExtension *, const char*);

#ifndef soap_write_tt__SystemDateTimeExtension
#define soap_write_tt__SystemDateTimeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemDateTimeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemDateTimeExtension * SOAP_FMAC4 soap_get_tt__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *, const char*, const char*);

#ifndef soap_read_tt__SystemDateTimeExtension
#define soap_read_tt__SystemDateTimeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemDateTimeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemDateTimeExtension * SOAP_FMAC2 soap_instantiate_tt__SystemDateTimeExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemDateTimeExtension * soap_new_tt__SystemDateTimeExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemDateTimeExtension(soap, n, NULL, NULL, NULL); }

inline tt__SystemDateTimeExtension * soap_new_req_tt__SystemDateTimeExtension(struct soap *soap) { tt__SystemDateTimeExtension *_p = soap_instantiate_tt__SystemDateTimeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SystemDateTimeExtension * soap_new_set_tt__SystemDateTimeExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__SystemDateTimeExtension *_p = soap_instantiate_tt__SystemDateTimeExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemDateTimeExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemDateTimeExtension(struct soap *soap, tt__SystemDateTimeExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemDateTimeExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (365)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemDateTime(struct soap*, const char*, int, const tt__SystemDateTime *, const char*);
SOAP_FMAC3 tt__SystemDateTime * SOAP_FMAC4 soap_in_tt__SystemDateTime(struct soap*, const char*, tt__SystemDateTime *, const char*);

#ifndef soap_write_tt__SystemDateTime
#define soap_write_tt__SystemDateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemDateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemDateTime * SOAP_FMAC4 soap_get_tt__SystemDateTime(struct soap*, tt__SystemDateTime *, const char*, const char*);

#ifndef soap_read_tt__SystemDateTime
#define soap_read_tt__SystemDateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemDateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemDateTime * SOAP_FMAC2 soap_instantiate_tt__SystemDateTime(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemDateTime * soap_new_tt__SystemDateTime(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemDateTime(soap, n, NULL, NULL, NULL); }

inline tt__SystemDateTime * soap_new_req_tt__SystemDateTime(struct soap *soap, enum tt__SetDateTimeType DateTimeType, bool DaylightSavings) { tt__SystemDateTime *_p = soap_instantiate_tt__SystemDateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemDateTime::DateTimeType = DateTimeType; _p->tt__SystemDateTime::DaylightSavings = DaylightSavings; } return _p; }

inline tt__SystemDateTime * soap_new_set_tt__SystemDateTime(struct soap *soap, enum tt__SetDateTimeType DateTimeType, bool DaylightSavings, tt__TimeZone *TimeZone, tt__DateTime *UTCDateTime, tt__DateTime *LocalDateTime, tt__SystemDateTimeExtension *Extension, char *__anyAttribute, char *__item1) { tt__SystemDateTime *_p = soap_instantiate_tt__SystemDateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemDateTime::DateTimeType = DateTimeType; _p->tt__SystemDateTime::DaylightSavings = DaylightSavings; _p->tt__SystemDateTime::TimeZone = TimeZone; _p->tt__SystemDateTime::UTCDateTime = UTCDateTime; _p->tt__SystemDateTime::LocalDateTime = LocalDateTime; _p->tt__SystemDateTime::Extension = Extension; _p->tt__SystemDateTime::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemDateTime(struct soap *soap, tt__SystemDateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemDateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (364)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogUri(struct soap*, const char*, int, const tt__SystemLogUri *, const char*);
SOAP_FMAC3 tt__SystemLogUri * SOAP_FMAC4 soap_in_tt__SystemLogUri(struct soap*, const char*, tt__SystemLogUri *, const char*);

#ifndef soap_write_tt__SystemLogUri
#define soap_write_tt__SystemLogUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemLogUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemLogUri * SOAP_FMAC4 soap_get_tt__SystemLogUri(struct soap*, tt__SystemLogUri *, const char*, const char*);

#ifndef soap_read_tt__SystemLogUri
#define soap_read_tt__SystemLogUri(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemLogUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemLogUri * SOAP_FMAC2 soap_instantiate_tt__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogUri * soap_new_tt__SystemLogUri(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemLogUri(soap, n, NULL, NULL, NULL); }

inline tt__SystemLogUri * soap_new_req_tt__SystemLogUri(struct soap *soap, enum tt__SystemLogType Type, std::string& Uri) { tt__SystemLogUri *_p = soap_instantiate_tt__SystemLogUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemLogUri::Type = Type; _p->tt__SystemLogUri::Uri = Uri; } return _p; }

inline tt__SystemLogUri * soap_new_set_tt__SystemLogUri(struct soap *soap, enum tt__SystemLogType Type, std::string& Uri, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__SystemLogUri *_p = soap_instantiate_tt__SystemLogUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemLogUri::Type = Type; _p->tt__SystemLogUri::Uri = Uri; _p->tt__SystemLogUri::__any = __any; _p->tt__SystemLogUri::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemLogUri(struct soap *soap, tt__SystemLogUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemLogUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (363)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLogUriList(struct soap*, const char*, int, const tt__SystemLogUriList *, const char*);
SOAP_FMAC3 tt__SystemLogUriList * SOAP_FMAC4 soap_in_tt__SystemLogUriList(struct soap*, const char*, tt__SystemLogUriList *, const char*);

#ifndef soap_write_tt__SystemLogUriList
#define soap_write_tt__SystemLogUriList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemLogUriList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemLogUriList * SOAP_FMAC4 soap_get_tt__SystemLogUriList(struct soap*, tt__SystemLogUriList *, const char*, const char*);

#ifndef soap_read_tt__SystemLogUriList
#define soap_read_tt__SystemLogUriList(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemLogUriList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemLogUriList * SOAP_FMAC2 soap_instantiate_tt__SystemLogUriList(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLogUriList * soap_new_tt__SystemLogUriList(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemLogUriList(soap, n, NULL, NULL, NULL); }

inline tt__SystemLogUriList * soap_new_req_tt__SystemLogUriList(struct soap *soap) { tt__SystemLogUriList *_p = soap_instantiate_tt__SystemLogUriList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SystemLogUriList * soap_new_set_tt__SystemLogUriList(struct soap *soap, std::vector<tt__SystemLogUri * >& SystemLog, char *__item1) { tt__SystemLogUriList *_p = soap_instantiate_tt__SystemLogUriList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemLogUriList::SystemLog = SystemLog; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemLogUriList(struct soap *soap, tt__SystemLogUriList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemLogUriList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (362)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BackupFile(struct soap*, const char*, int, const tt__BackupFile *, const char*);
SOAP_FMAC3 tt__BackupFile * SOAP_FMAC4 soap_in_tt__BackupFile(struct soap*, const char*, tt__BackupFile *, const char*);

#ifndef soap_write_tt__BackupFile
#define soap_write_tt__BackupFile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BackupFile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BackupFile * SOAP_FMAC4 soap_get_tt__BackupFile(struct soap*, tt__BackupFile *, const char*, const char*);

#ifndef soap_read_tt__BackupFile
#define soap_read_tt__BackupFile(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BackupFile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BackupFile * SOAP_FMAC2 soap_instantiate_tt__BackupFile(struct soap*, int, const char*, const char*, size_t*);

inline tt__BackupFile * soap_new_tt__BackupFile(struct soap *soap, int n = -1) { return soap_instantiate_tt__BackupFile(soap, n, NULL, NULL, NULL); }

inline tt__BackupFile * soap_new_req_tt__BackupFile(struct soap *soap, std::string& Name, tt__AttachmentData *Data) { tt__BackupFile *_p = soap_instantiate_tt__BackupFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BackupFile::Name = Name; _p->tt__BackupFile::Data = Data; } return _p; }

inline tt__BackupFile * soap_new_set_tt__BackupFile(struct soap *soap, std::string& Name, tt__AttachmentData *Data, char *__item1) { tt__BackupFile *_p = soap_instantiate_tt__BackupFile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BackupFile::Name = Name; _p->tt__BackupFile::Data = Data; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BackupFile(struct soap *soap, tt__BackupFile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BackupFile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (361)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AttachmentData(struct soap*, const char*, int, const tt__AttachmentData *, const char*);
SOAP_FMAC3 tt__AttachmentData * SOAP_FMAC4 soap_in_tt__AttachmentData(struct soap*, const char*, tt__AttachmentData *, const char*);

#ifndef soap_write_tt__AttachmentData
#define soap_write_tt__AttachmentData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AttachmentData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AttachmentData * SOAP_FMAC4 soap_get_tt__AttachmentData(struct soap*, tt__AttachmentData *, const char*, const char*);

#ifndef soap_read_tt__AttachmentData
#define soap_read_tt__AttachmentData(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AttachmentData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AttachmentData * SOAP_FMAC2 soap_instantiate_tt__AttachmentData(struct soap*, int, const char*, const char*, size_t*);

inline tt__AttachmentData * soap_new_tt__AttachmentData(struct soap *soap, int n = -1) { return soap_instantiate_tt__AttachmentData(soap, n, NULL, NULL, NULL); }

inline tt__AttachmentData * soap_new_req_tt__AttachmentData(struct soap *soap, struct _xop__Include& xop__Include) { tt__AttachmentData *_p = soap_instantiate_tt__AttachmentData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AttachmentData::xop__Include = xop__Include; } return _p; }

inline tt__AttachmentData * soap_new_set_tt__AttachmentData(struct soap *soap, struct _xop__Include& xop__Include, char *xmime__contentType, char *__item1) { tt__AttachmentData *_p = soap_instantiate_tt__AttachmentData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AttachmentData::xop__Include = xop__Include; _p->tt__AttachmentData::xmime__contentType = xmime__contentType; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AttachmentData(struct soap *soap, tt__AttachmentData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AttachmentData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (360)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__BinaryData(struct soap*, const char*, int, const tt__BinaryData *, const char*);
SOAP_FMAC3 tt__BinaryData * SOAP_FMAC4 soap_in_tt__BinaryData(struct soap*, const char*, tt__BinaryData *, const char*);

#ifndef soap_write_tt__BinaryData
#define soap_write_tt__BinaryData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:BinaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BinaryData * SOAP_FMAC4 soap_get_tt__BinaryData(struct soap*, tt__BinaryData *, const char*, const char*);

#ifndef soap_read_tt__BinaryData
#define soap_read_tt__BinaryData(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__BinaryData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__BinaryData * SOAP_FMAC2 soap_instantiate_tt__BinaryData(struct soap*, int, const char*, const char*, size_t*);

inline tt__BinaryData * soap_new_tt__BinaryData(struct soap *soap, int n = -1) { return soap_instantiate_tt__BinaryData(soap, n, NULL, NULL, NULL); }

inline tt__BinaryData * soap_new_req_tt__BinaryData(struct soap *soap, xsd__base64Binary& Data) { tt__BinaryData *_p = soap_instantiate_tt__BinaryData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BinaryData::Data = Data; } return _p; }

inline tt__BinaryData * soap_new_set_tt__BinaryData(struct soap *soap, xsd__base64Binary& Data, char *xmime__contentType, char *__item1) { tt__BinaryData *_p = soap_instantiate_tt__BinaryData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__BinaryData::Data = Data; _p->tt__BinaryData::xmime__contentType = xmime__contentType; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__BinaryData(struct soap *soap, tt__BinaryData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__BinaryData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (359)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SupportInformation(struct soap*, const char*, int, const tt__SupportInformation *, const char*);
SOAP_FMAC3 tt__SupportInformation * SOAP_FMAC4 soap_in_tt__SupportInformation(struct soap*, const char*, tt__SupportInformation *, const char*);

#ifndef soap_write_tt__SupportInformation
#define soap_write_tt__SupportInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SupportInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportInformation * SOAP_FMAC4 soap_get_tt__SupportInformation(struct soap*, tt__SupportInformation *, const char*, const char*);

#ifndef soap_read_tt__SupportInformation
#define soap_read_tt__SupportInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SupportInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SupportInformation * SOAP_FMAC2 soap_instantiate_tt__SupportInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__SupportInformation * soap_new_tt__SupportInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__SupportInformation(soap, n, NULL, NULL, NULL); }

inline tt__SupportInformation * soap_new_req_tt__SupportInformation(struct soap *soap) { tt__SupportInformation *_p = soap_instantiate_tt__SupportInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SupportInformation * soap_new_set_tt__SupportInformation(struct soap *soap, tt__AttachmentData *Binary, std::string *String, char *__item1) { tt__SupportInformation *_p = soap_instantiate_tt__SupportInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SupportInformation::Binary = Binary; _p->tt__SupportInformation::String = String; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SupportInformation(struct soap *soap, tt__SupportInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SupportInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (358)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemLog(struct soap*, const char*, int, const tt__SystemLog *, const char*);
SOAP_FMAC3 tt__SystemLog * SOAP_FMAC4 soap_in_tt__SystemLog(struct soap*, const char*, tt__SystemLog *, const char*);

#ifndef soap_write_tt__SystemLog
#define soap_write_tt__SystemLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemLog", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemLog * SOAP_FMAC4 soap_get_tt__SystemLog(struct soap*, tt__SystemLog *, const char*, const char*);

#ifndef soap_read_tt__SystemLog
#define soap_read_tt__SystemLog(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemLog(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemLog * SOAP_FMAC2 soap_instantiate_tt__SystemLog(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemLog * soap_new_tt__SystemLog(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemLog(soap, n, NULL, NULL, NULL); }

inline tt__SystemLog * soap_new_req_tt__SystemLog(struct soap *soap) { tt__SystemLog *_p = soap_instantiate_tt__SystemLog(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SystemLog * soap_new_set_tt__SystemLog(struct soap *soap, tt__AttachmentData *Binary, std::string *String, char *__item1) { tt__SystemLog *_p = soap_instantiate_tt__SystemLog(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemLog::Binary = Binary; _p->tt__SystemLog::String = String; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemLog(struct soap *soap, tt__SystemLog *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemLog(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (357)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceExtension(struct soap*, const char*, int, const tt__AnalyticsDeviceExtension *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceExtension * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceExtension(struct soap*, const char*, tt__AnalyticsDeviceExtension *, const char*);

#ifndef soap_write_tt__AnalyticsDeviceExtension
#define soap_write_tt__AnalyticsDeviceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsDeviceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceExtension * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsDeviceExtension
#define soap_read_tt__AnalyticsDeviceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsDeviceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsDeviceExtension * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceExtension * soap_new_tt__AnalyticsDeviceExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsDeviceExtension(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsDeviceExtension * soap_new_req_tt__AnalyticsDeviceExtension(struct soap *soap) { tt__AnalyticsDeviceExtension *_p = soap_instantiate_tt__AnalyticsDeviceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnalyticsDeviceExtension * soap_new_set_tt__AnalyticsDeviceExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__AnalyticsDeviceExtension *_p = soap_instantiate_tt__AnalyticsDeviceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsDeviceExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsDeviceExtension(struct soap *soap, tt__AnalyticsDeviceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsDeviceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (356)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsDeviceCapabilities(struct soap*, const char*, int, const tt__AnalyticsDeviceCapabilities *, const char*);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_in_tt__AnalyticsDeviceCapabilities(struct soap*, const char*, tt__AnalyticsDeviceCapabilities *, const char*);

#ifndef soap_write_tt__AnalyticsDeviceCapabilities
#define soap_write_tt__AnalyticsDeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsDeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceCapabilities * SOAP_FMAC4 soap_get_tt__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsDeviceCapabilities
#define soap_read_tt__AnalyticsDeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsDeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsDeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsDeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsDeviceCapabilities * soap_new_tt__AnalyticsDeviceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsDeviceCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsDeviceCapabilities * soap_new_req_tt__AnalyticsDeviceCapabilities(struct soap *soap, std::string& XAddr) { tt__AnalyticsDeviceCapabilities *_p = soap_instantiate_tt__AnalyticsDeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsDeviceCapabilities::XAddr = XAddr; } return _p; }

inline tt__AnalyticsDeviceCapabilities * soap_new_set_tt__AnalyticsDeviceCapabilities(struct soap *soap, std::string& XAddr, bool *RuleSupport, tt__AnalyticsDeviceExtension *Extension, char *__anyAttribute, char *__item1) { tt__AnalyticsDeviceCapabilities *_p = soap_instantiate_tt__AnalyticsDeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsDeviceCapabilities::XAddr = XAddr; _p->tt__AnalyticsDeviceCapabilities::RuleSupport = RuleSupport; _p->tt__AnalyticsDeviceCapabilities::Extension = Extension; _p->tt__AnalyticsDeviceCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsDeviceCapabilities(struct soap *soap, tt__AnalyticsDeviceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsDeviceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (355)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReceiverCapabilities(struct soap*, const char*, int, const tt__ReceiverCapabilities *, const char*);
SOAP_FMAC3 tt__ReceiverCapabilities * SOAP_FMAC4 soap_in_tt__ReceiverCapabilities(struct soap*, const char*, tt__ReceiverCapabilities *, const char*);

#ifndef soap_write_tt__ReceiverCapabilities
#define soap_write_tt__ReceiverCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReceiverCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverCapabilities * SOAP_FMAC4 soap_get_tt__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *, const char*, const char*);

#ifndef soap_read_tt__ReceiverCapabilities
#define soap_read_tt__ReceiverCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReceiverCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReceiverCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReceiverCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReceiverCapabilities * soap_new_tt__ReceiverCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReceiverCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__ReceiverCapabilities * soap_new_req_tt__ReceiverCapabilities(struct soap *soap, std::string& XAddr, bool RTP_USCOREMulticast, bool RTP_USCORETCP, bool RTP_USCORERTSP_USCORETCP, int SupportedReceivers, int MaximumRTSPURILength) { tt__ReceiverCapabilities *_p = soap_instantiate_tt__ReceiverCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverCapabilities::XAddr = XAddr; _p->tt__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast; _p->tt__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->tt__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->tt__ReceiverCapabilities::SupportedReceivers = SupportedReceivers; _p->tt__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength; } return _p; }

inline tt__ReceiverCapabilities * soap_new_set_tt__ReceiverCapabilities(struct soap *soap, std::string& XAddr, bool RTP_USCOREMulticast, bool RTP_USCORETCP, bool RTP_USCORERTSP_USCORETCP, int SupportedReceivers, int MaximumRTSPURILength, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ReceiverCapabilities *_p = soap_instantiate_tt__ReceiverCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReceiverCapabilities::XAddr = XAddr; _p->tt__ReceiverCapabilities::RTP_USCOREMulticast = RTP_USCOREMulticast; _p->tt__ReceiverCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->tt__ReceiverCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->tt__ReceiverCapabilities::SupportedReceivers = SupportedReceivers; _p->tt__ReceiverCapabilities::MaximumRTSPURILength = MaximumRTSPURILength; _p->tt__ReceiverCapabilities::__any = __any; _p->tt__ReceiverCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReceiverCapabilities(struct soap *soap, tt__ReceiverCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReceiverCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (354)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ReplayCapabilities(struct soap*, const char*, int, const tt__ReplayCapabilities *, const char*);
SOAP_FMAC3 tt__ReplayCapabilities * SOAP_FMAC4 soap_in_tt__ReplayCapabilities(struct soap*, const char*, tt__ReplayCapabilities *, const char*);

#ifndef soap_write_tt__ReplayCapabilities
#define soap_write_tt__ReplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ReplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReplayCapabilities * SOAP_FMAC4 soap_get_tt__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *, const char*, const char*);

#ifndef soap_read_tt__ReplayCapabilities
#define soap_read_tt__ReplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ReplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ReplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__ReplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ReplayCapabilities * soap_new_tt__ReplayCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__ReplayCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__ReplayCapabilities * soap_new_req_tt__ReplayCapabilities(struct soap *soap, std::string& XAddr) { tt__ReplayCapabilities *_p = soap_instantiate_tt__ReplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReplayCapabilities::XAddr = XAddr; } return _p; }

inline tt__ReplayCapabilities * soap_new_set_tt__ReplayCapabilities(struct soap *soap, std::string& XAddr, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ReplayCapabilities *_p = soap_instantiate_tt__ReplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ReplayCapabilities::XAddr = XAddr; _p->tt__ReplayCapabilities::__any = __any; _p->tt__ReplayCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ReplayCapabilities(struct soap *soap, tt__ReplayCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ReplayCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (353)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SearchCapabilities(struct soap*, const char*, int, const tt__SearchCapabilities *, const char*);
SOAP_FMAC3 tt__SearchCapabilities * SOAP_FMAC4 soap_in_tt__SearchCapabilities(struct soap*, const char*, tt__SearchCapabilities *, const char*);

#ifndef soap_write_tt__SearchCapabilities
#define soap_write_tt__SearchCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SearchCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SearchCapabilities * SOAP_FMAC4 soap_get_tt__SearchCapabilities(struct soap*, tt__SearchCapabilities *, const char*, const char*);

#ifndef soap_read_tt__SearchCapabilities
#define soap_read_tt__SearchCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SearchCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SearchCapabilities * SOAP_FMAC2 soap_instantiate_tt__SearchCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SearchCapabilities * soap_new_tt__SearchCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__SearchCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__SearchCapabilities * soap_new_req_tt__SearchCapabilities(struct soap *soap, std::string& XAddr, bool MetadataSearch) { tt__SearchCapabilities *_p = soap_instantiate_tt__SearchCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SearchCapabilities::XAddr = XAddr; _p->tt__SearchCapabilities::MetadataSearch = MetadataSearch; } return _p; }

inline tt__SearchCapabilities * soap_new_set_tt__SearchCapabilities(struct soap *soap, std::string& XAddr, bool MetadataSearch, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__SearchCapabilities *_p = soap_instantiate_tt__SearchCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SearchCapabilities::XAddr = XAddr; _p->tt__SearchCapabilities::MetadataSearch = MetadataSearch; _p->tt__SearchCapabilities::__any = __any; _p->tt__SearchCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SearchCapabilities(struct soap *soap, tt__SearchCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SearchCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (352)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RecordingCapabilities(struct soap*, const char*, int, const tt__RecordingCapabilities *, const char*);
SOAP_FMAC3 tt__RecordingCapabilities * SOAP_FMAC4 soap_in_tt__RecordingCapabilities(struct soap*, const char*, tt__RecordingCapabilities *, const char*);

#ifndef soap_write_tt__RecordingCapabilities
#define soap_write_tt__RecordingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RecordingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingCapabilities * SOAP_FMAC4 soap_get_tt__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *, const char*, const char*);

#ifndef soap_read_tt__RecordingCapabilities
#define soap_read_tt__RecordingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RecordingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RecordingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RecordingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__RecordingCapabilities * soap_new_tt__RecordingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__RecordingCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__RecordingCapabilities * soap_new_req_tt__RecordingCapabilities(struct soap *soap, std::string& XAddr, bool ReceiverSource, bool MediaProfileSource, bool DynamicRecordings, bool DynamicTracks, int MaxStringLength) { tt__RecordingCapabilities *_p = soap_instantiate_tt__RecordingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingCapabilities::XAddr = XAddr; _p->tt__RecordingCapabilities::ReceiverSource = ReceiverSource; _p->tt__RecordingCapabilities::MediaProfileSource = MediaProfileSource; _p->tt__RecordingCapabilities::DynamicRecordings = DynamicRecordings; _p->tt__RecordingCapabilities::DynamicTracks = DynamicTracks; _p->tt__RecordingCapabilities::MaxStringLength = MaxStringLength; } return _p; }

inline tt__RecordingCapabilities * soap_new_set_tt__RecordingCapabilities(struct soap *soap, std::string& XAddr, bool ReceiverSource, bool MediaProfileSource, bool DynamicRecordings, bool DynamicTracks, int MaxStringLength, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__RecordingCapabilities *_p = soap_instantiate_tt__RecordingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RecordingCapabilities::XAddr = XAddr; _p->tt__RecordingCapabilities::ReceiverSource = ReceiverSource; _p->tt__RecordingCapabilities::MediaProfileSource = MediaProfileSource; _p->tt__RecordingCapabilities::DynamicRecordings = DynamicRecordings; _p->tt__RecordingCapabilities::DynamicTracks = DynamicTracks; _p->tt__RecordingCapabilities::MaxStringLength = MaxStringLength; _p->tt__RecordingCapabilities::__any = __any; _p->tt__RecordingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RecordingCapabilities(struct soap *soap, tt__RecordingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RecordingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (351)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DisplayCapabilities(struct soap*, const char*, int, const tt__DisplayCapabilities *, const char*);
SOAP_FMAC3 tt__DisplayCapabilities * SOAP_FMAC4 soap_in_tt__DisplayCapabilities(struct soap*, const char*, tt__DisplayCapabilities *, const char*);

#ifndef soap_write_tt__DisplayCapabilities
#define soap_write_tt__DisplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DisplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DisplayCapabilities * SOAP_FMAC4 soap_get_tt__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *, const char*, const char*);

#ifndef soap_read_tt__DisplayCapabilities
#define soap_read_tt__DisplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DisplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DisplayCapabilities * SOAP_FMAC2 soap_instantiate_tt__DisplayCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DisplayCapabilities * soap_new_tt__DisplayCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__DisplayCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__DisplayCapabilities * soap_new_req_tt__DisplayCapabilities(struct soap *soap, std::string& XAddr, bool FixedLayout) { tt__DisplayCapabilities *_p = soap_instantiate_tt__DisplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DisplayCapabilities::XAddr = XAddr; _p->tt__DisplayCapabilities::FixedLayout = FixedLayout; } return _p; }

inline tt__DisplayCapabilities * soap_new_set_tt__DisplayCapabilities(struct soap *soap, std::string& XAddr, bool FixedLayout, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__DisplayCapabilities *_p = soap_instantiate_tt__DisplayCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DisplayCapabilities::XAddr = XAddr; _p->tt__DisplayCapabilities::FixedLayout = FixedLayout; _p->tt__DisplayCapabilities::__any = __any; _p->tt__DisplayCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DisplayCapabilities(struct soap *soap, tt__DisplayCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DisplayCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (350)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceIOCapabilities(struct soap*, const char*, int, const tt__DeviceIOCapabilities *, const char*);
SOAP_FMAC3 tt__DeviceIOCapabilities * SOAP_FMAC4 soap_in_tt__DeviceIOCapabilities(struct soap*, const char*, tt__DeviceIOCapabilities *, const char*);

#ifndef soap_write_tt__DeviceIOCapabilities
#define soap_write_tt__DeviceIOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DeviceIOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceIOCapabilities * SOAP_FMAC4 soap_get_tt__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *, const char*, const char*);

#ifndef soap_read_tt__DeviceIOCapabilities
#define soap_read_tt__DeviceIOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DeviceIOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DeviceIOCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceIOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceIOCapabilities * soap_new_tt__DeviceIOCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__DeviceIOCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__DeviceIOCapabilities * soap_new_req_tt__DeviceIOCapabilities(struct soap *soap, std::string& XAddr, int VideoSources, int VideoOutputs, int AudioSources, int AudioOutputs, int RelayOutputs) { tt__DeviceIOCapabilities *_p = soap_instantiate_tt__DeviceIOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceIOCapabilities::XAddr = XAddr; _p->tt__DeviceIOCapabilities::VideoSources = VideoSources; _p->tt__DeviceIOCapabilities::VideoOutputs = VideoOutputs; _p->tt__DeviceIOCapabilities::AudioSources = AudioSources; _p->tt__DeviceIOCapabilities::AudioOutputs = AudioOutputs; _p->tt__DeviceIOCapabilities::RelayOutputs = RelayOutputs; } return _p; }

inline tt__DeviceIOCapabilities * soap_new_set_tt__DeviceIOCapabilities(struct soap *soap, std::string& XAddr, int VideoSources, int VideoOutputs, int AudioSources, int AudioOutputs, int RelayOutputs, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__DeviceIOCapabilities *_p = soap_instantiate_tt__DeviceIOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceIOCapabilities::XAddr = XAddr; _p->tt__DeviceIOCapabilities::VideoSources = VideoSources; _p->tt__DeviceIOCapabilities::VideoOutputs = VideoOutputs; _p->tt__DeviceIOCapabilities::AudioSources = AudioSources; _p->tt__DeviceIOCapabilities::AudioOutputs = AudioOutputs; _p->tt__DeviceIOCapabilities::RelayOutputs = RelayOutputs; _p->tt__DeviceIOCapabilities::__any = __any; _p->tt__DeviceIOCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DeviceIOCapabilities(struct soap *soap, tt__DeviceIOCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DeviceIOCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (349)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZCapabilities(struct soap*, const char*, int, const tt__PTZCapabilities *, const char*);
SOAP_FMAC3 tt__PTZCapabilities * SOAP_FMAC4 soap_in_tt__PTZCapabilities(struct soap*, const char*, tt__PTZCapabilities *, const char*);

#ifndef soap_write_tt__PTZCapabilities
#define soap_write_tt__PTZCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZCapabilities * SOAP_FMAC4 soap_get_tt__PTZCapabilities(struct soap*, tt__PTZCapabilities *, const char*, const char*);

#ifndef soap_read_tt__PTZCapabilities
#define soap_read_tt__PTZCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZCapabilities * SOAP_FMAC2 soap_instantiate_tt__PTZCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZCapabilities * soap_new_tt__PTZCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__PTZCapabilities * soap_new_req_tt__PTZCapabilities(struct soap *soap, std::string& XAddr) { tt__PTZCapabilities *_p = soap_instantiate_tt__PTZCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZCapabilities::XAddr = XAddr; } return _p; }

inline tt__PTZCapabilities * soap_new_set_tt__PTZCapabilities(struct soap *soap, std::string& XAddr, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__PTZCapabilities *_p = soap_instantiate_tt__PTZCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZCapabilities::XAddr = XAddr; _p->tt__PTZCapabilities::__any = __any; _p->tt__PTZCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZCapabilities(struct soap *soap, tt__PTZCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (348)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ImagingCapabilities(struct soap*, const char*, int, const tt__ImagingCapabilities *, const char*);
SOAP_FMAC3 tt__ImagingCapabilities * SOAP_FMAC4 soap_in_tt__ImagingCapabilities(struct soap*, const char*, tt__ImagingCapabilities *, const char*);

#ifndef soap_write_tt__ImagingCapabilities
#define soap_write_tt__ImagingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ImagingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingCapabilities * SOAP_FMAC4 soap_get_tt__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *, const char*, const char*);

#ifndef soap_read_tt__ImagingCapabilities
#define soap_read_tt__ImagingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ImagingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ImagingCapabilities * SOAP_FMAC2 soap_instantiate_tt__ImagingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ImagingCapabilities * soap_new_tt__ImagingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__ImagingCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__ImagingCapabilities * soap_new_req_tt__ImagingCapabilities(struct soap *soap, std::string& XAddr) { tt__ImagingCapabilities *_p = soap_instantiate_tt__ImagingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingCapabilities::XAddr = XAddr; } return _p; }

inline tt__ImagingCapabilities * soap_new_set_tt__ImagingCapabilities(struct soap *soap, std::string& XAddr, char *__anyAttribute, char *__item1) { tt__ImagingCapabilities *_p = soap_instantiate_tt__ImagingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ImagingCapabilities::XAddr = XAddr; _p->tt__ImagingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ImagingCapabilities(struct soap *soap, tt__ImagingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ImagingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (347)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__OnvifVersion(struct soap*, const char*, int, const tt__OnvifVersion *, const char*);
SOAP_FMAC3 tt__OnvifVersion * SOAP_FMAC4 soap_in_tt__OnvifVersion(struct soap*, const char*, tt__OnvifVersion *, const char*);

#ifndef soap_write_tt__OnvifVersion
#define soap_write_tt__OnvifVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:OnvifVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OnvifVersion * SOAP_FMAC4 soap_get_tt__OnvifVersion(struct soap*, tt__OnvifVersion *, const char*, const char*);

#ifndef soap_read_tt__OnvifVersion
#define soap_read_tt__OnvifVersion(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__OnvifVersion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__OnvifVersion * SOAP_FMAC2 soap_instantiate_tt__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline tt__OnvifVersion * soap_new_tt__OnvifVersion(struct soap *soap, int n = -1) { return soap_instantiate_tt__OnvifVersion(soap, n, NULL, NULL, NULL); }

inline tt__OnvifVersion * soap_new_req_tt__OnvifVersion(struct soap *soap, int Major, int Minor) { tt__OnvifVersion *_p = soap_instantiate_tt__OnvifVersion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OnvifVersion::Major = Major; _p->tt__OnvifVersion::Minor = Minor; } return _p; }

inline tt__OnvifVersion * soap_new_set_tt__OnvifVersion(struct soap *soap, int Major, int Minor, char *__item1) { tt__OnvifVersion *_p = soap_instantiate_tt__OnvifVersion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__OnvifVersion::Major = Major; _p->tt__OnvifVersion::Minor = Minor; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__OnvifVersion(struct soap *soap, tt__OnvifVersion *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__OnvifVersion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (346)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilitiesExtension2(struct soap*, const char*, int, const tt__SystemCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__SystemCapabilitiesExtension2(struct soap*, const char*, tt__SystemCapabilitiesExtension2 *, const char*);

#ifndef soap_write_tt__SystemCapabilitiesExtension2
#define soap_write_tt__SystemCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_tt__SystemCapabilitiesExtension2
#define soap_read_tt__SystemCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilitiesExtension2 * soap_new_tt__SystemCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline tt__SystemCapabilitiesExtension2 * soap_new_req_tt__SystemCapabilitiesExtension2(struct soap *soap) { tt__SystemCapabilitiesExtension2 *_p = soap_instantiate_tt__SystemCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SystemCapabilitiesExtension2 * soap_new_set_tt__SystemCapabilitiesExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__SystemCapabilitiesExtension2 *_p = soap_instantiate_tt__SystemCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemCapabilitiesExtension2(struct soap *soap, tt__SystemCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (345)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilitiesExtension(struct soap*, const char*, int, const tt__SystemCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__SystemCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__SystemCapabilitiesExtension(struct soap*, const char*, tt__SystemCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__SystemCapabilitiesExtension
#define soap_write_tt__SystemCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__SystemCapabilitiesExtension
#define soap_read_tt__SystemCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilitiesExtension * soap_new_tt__SystemCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__SystemCapabilitiesExtension * soap_new_req_tt__SystemCapabilitiesExtension(struct soap *soap) { tt__SystemCapabilitiesExtension *_p = soap_instantiate_tt__SystemCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__SystemCapabilitiesExtension * soap_new_set_tt__SystemCapabilitiesExtension(struct soap *soap, std::vector<char * >& __any, bool *HttpFirmwareUpgrade, bool *HttpSystemBackup, bool *HttpSystemLogging, bool *HttpSupportInformation, tt__SystemCapabilitiesExtension2 *Extension, char *__item1) { tt__SystemCapabilitiesExtension *_p = soap_instantiate_tt__SystemCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemCapabilitiesExtension::__any = __any; _p->tt__SystemCapabilitiesExtension::HttpFirmwareUpgrade = HttpFirmwareUpgrade; _p->tt__SystemCapabilitiesExtension::HttpSystemBackup = HttpSystemBackup; _p->tt__SystemCapabilitiesExtension::HttpSystemLogging = HttpSystemLogging; _p->tt__SystemCapabilitiesExtension::HttpSupportInformation = HttpSupportInformation; _p->tt__SystemCapabilitiesExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemCapabilitiesExtension(struct soap *soap, tt__SystemCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (344)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SystemCapabilities(struct soap*, const char*, int, const tt__SystemCapabilities *, const char*);
SOAP_FMAC3 tt__SystemCapabilities * SOAP_FMAC4 soap_in_tt__SystemCapabilities(struct soap*, const char*, tt__SystemCapabilities *, const char*);

#ifndef soap_write_tt__SystemCapabilities
#define soap_write_tt__SystemCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SystemCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemCapabilities * SOAP_FMAC4 soap_get_tt__SystemCapabilities(struct soap*, tt__SystemCapabilities *, const char*, const char*);

#ifndef soap_read_tt__SystemCapabilities
#define soap_read_tt__SystemCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SystemCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SystemCapabilities * SOAP_FMAC2 soap_instantiate_tt__SystemCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SystemCapabilities * soap_new_tt__SystemCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__SystemCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__SystemCapabilities * soap_new_req_tt__SystemCapabilities(struct soap *soap, bool DiscoveryResolve, bool DiscoveryBye, bool RemoteDiscovery, bool SystemBackup, bool SystemLogging, bool FirmwareUpgrade, std::vector<tt__OnvifVersion * >& SupportedVersions) { tt__SystemCapabilities *_p = soap_instantiate_tt__SystemCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemCapabilities::DiscoveryResolve = DiscoveryResolve; _p->tt__SystemCapabilities::DiscoveryBye = DiscoveryBye; _p->tt__SystemCapabilities::RemoteDiscovery = RemoteDiscovery; _p->tt__SystemCapabilities::SystemBackup = SystemBackup; _p->tt__SystemCapabilities::SystemLogging = SystemLogging; _p->tt__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade; _p->tt__SystemCapabilities::SupportedVersions = SupportedVersions; } return _p; }

inline tt__SystemCapabilities * soap_new_set_tt__SystemCapabilities(struct soap *soap, bool DiscoveryResolve, bool DiscoveryBye, bool RemoteDiscovery, bool SystemBackup, bool SystemLogging, bool FirmwareUpgrade, std::vector<tt__OnvifVersion * >& SupportedVersions, tt__SystemCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__SystemCapabilities *_p = soap_instantiate_tt__SystemCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SystemCapabilities::DiscoveryResolve = DiscoveryResolve; _p->tt__SystemCapabilities::DiscoveryBye = DiscoveryBye; _p->tt__SystemCapabilities::RemoteDiscovery = RemoteDiscovery; _p->tt__SystemCapabilities::SystemBackup = SystemBackup; _p->tt__SystemCapabilities::SystemLogging = SystemLogging; _p->tt__SystemCapabilities::FirmwareUpgrade = FirmwareUpgrade; _p->tt__SystemCapabilities::SupportedVersions = SupportedVersions; _p->tt__SystemCapabilities::Extension = Extension; _p->tt__SystemCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SystemCapabilities(struct soap *soap, tt__SystemCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SystemCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (343)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilitiesExtension2(struct soap*, const char*, int, const tt__SecurityCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__SecurityCapabilitiesExtension2(struct soap*, const char*, tt__SecurityCapabilitiesExtension2 *, const char*);

#ifndef soap_write_tt__SecurityCapabilitiesExtension2
#define soap_write_tt__SecurityCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SecurityCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_tt__SecurityCapabilitiesExtension2
#define soap_read_tt__SecurityCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SecurityCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SecurityCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilitiesExtension2 * soap_new_tt__SecurityCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__SecurityCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline tt__SecurityCapabilitiesExtension2 * soap_new_req_tt__SecurityCapabilitiesExtension2(struct soap *soap, bool Dot1X, bool RemoteUserHandling) { tt__SecurityCapabilitiesExtension2 *_p = soap_instantiate_tt__SecurityCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SecurityCapabilitiesExtension2::Dot1X = Dot1X; _p->tt__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling; } return _p; }

inline tt__SecurityCapabilitiesExtension2 * soap_new_set_tt__SecurityCapabilitiesExtension2(struct soap *soap, bool Dot1X, std::vector<int >& SupportedEAPMethod, bool RemoteUserHandling, std::vector<char * >& __any, char *__item1) { tt__SecurityCapabilitiesExtension2 *_p = soap_instantiate_tt__SecurityCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SecurityCapabilitiesExtension2::Dot1X = Dot1X; _p->tt__SecurityCapabilitiesExtension2::SupportedEAPMethod = SupportedEAPMethod; _p->tt__SecurityCapabilitiesExtension2::RemoteUserHandling = RemoteUserHandling; _p->tt__SecurityCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SecurityCapabilitiesExtension2(struct soap *soap, tt__SecurityCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SecurityCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (342)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilitiesExtension(struct soap*, const char*, int, const tt__SecurityCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__SecurityCapabilitiesExtension(struct soap*, const char*, tt__SecurityCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__SecurityCapabilitiesExtension
#define soap_write_tt__SecurityCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SecurityCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SecurityCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__SecurityCapabilitiesExtension
#define soap_read_tt__SecurityCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SecurityCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SecurityCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilitiesExtension * soap_new_tt__SecurityCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__SecurityCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__SecurityCapabilitiesExtension * soap_new_req_tt__SecurityCapabilitiesExtension(struct soap *soap, bool TLS1_x002e0) { tt__SecurityCapabilitiesExtension *_p = soap_instantiate_tt__SecurityCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0; } return _p; }

inline tt__SecurityCapabilitiesExtension * soap_new_set_tt__SecurityCapabilitiesExtension(struct soap *soap, bool TLS1_x002e0, tt__SecurityCapabilitiesExtension2 *Extension, char *__item1) { tt__SecurityCapabilitiesExtension *_p = soap_instantiate_tt__SecurityCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SecurityCapabilitiesExtension::TLS1_x002e0 = TLS1_x002e0; _p->tt__SecurityCapabilitiesExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SecurityCapabilitiesExtension(struct soap *soap, tt__SecurityCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SecurityCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (341)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SecurityCapabilities(struct soap*, const char*, int, const tt__SecurityCapabilities *, const char*);
SOAP_FMAC3 tt__SecurityCapabilities * SOAP_FMAC4 soap_in_tt__SecurityCapabilities(struct soap*, const char*, tt__SecurityCapabilities *, const char*);

#ifndef soap_write_tt__SecurityCapabilities
#define soap_write_tt__SecurityCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SecurityCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SecurityCapabilities * SOAP_FMAC4 soap_get_tt__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *, const char*, const char*);

#ifndef soap_read_tt__SecurityCapabilities
#define soap_read_tt__SecurityCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SecurityCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SecurityCapabilities * SOAP_FMAC2 soap_instantiate_tt__SecurityCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__SecurityCapabilities * soap_new_tt__SecurityCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__SecurityCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__SecurityCapabilities * soap_new_req_tt__SecurityCapabilities(struct soap *soap, bool TLS1_x002e1, bool TLS1_x002e2, bool OnboardKeyGeneration, bool AccessPolicyConfig, bool X_x002e509Token, bool SAMLToken, bool KerberosToken, bool RELToken) { tt__SecurityCapabilities *_p = soap_instantiate_tt__SecurityCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1; _p->tt__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2; _p->tt__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration; _p->tt__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig; _p->tt__SecurityCapabilities::X_x002e509Token = X_x002e509Token; _p->tt__SecurityCapabilities::SAMLToken = SAMLToken; _p->tt__SecurityCapabilities::KerberosToken = KerberosToken; _p->tt__SecurityCapabilities::RELToken = RELToken; } return _p; }

inline tt__SecurityCapabilities * soap_new_set_tt__SecurityCapabilities(struct soap *soap, bool TLS1_x002e1, bool TLS1_x002e2, bool OnboardKeyGeneration, bool AccessPolicyConfig, bool X_x002e509Token, bool SAMLToken, bool KerberosToken, bool RELToken, std::vector<char * >& __any, tt__SecurityCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__SecurityCapabilities *_p = soap_instantiate_tt__SecurityCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SecurityCapabilities::TLS1_x002e1 = TLS1_x002e1; _p->tt__SecurityCapabilities::TLS1_x002e2 = TLS1_x002e2; _p->tt__SecurityCapabilities::OnboardKeyGeneration = OnboardKeyGeneration; _p->tt__SecurityCapabilities::AccessPolicyConfig = AccessPolicyConfig; _p->tt__SecurityCapabilities::X_x002e509Token = X_x002e509Token; _p->tt__SecurityCapabilities::SAMLToken = SAMLToken; _p->tt__SecurityCapabilities::KerberosToken = KerberosToken; _p->tt__SecurityCapabilities::RELToken = RELToken; _p->tt__SecurityCapabilities::__any = __any; _p->tt__SecurityCapabilities::Extension = Extension; _p->tt__SecurityCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SecurityCapabilities(struct soap *soap, tt__SecurityCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SecurityCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (340)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilitiesExtension2(struct soap*, const char*, int, const tt__NetworkCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__NetworkCapabilitiesExtension2(struct soap*, const char*, tt__NetworkCapabilitiesExtension2 *, const char*);

#ifndef soap_write_tt__NetworkCapabilitiesExtension2
#define soap_write_tt__NetworkCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_tt__NetworkCapabilitiesExtension2
#define soap_read_tt__NetworkCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilitiesExtension2 * soap_new_tt__NetworkCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline tt__NetworkCapabilitiesExtension2 * soap_new_req_tt__NetworkCapabilitiesExtension2(struct soap *soap) { tt__NetworkCapabilitiesExtension2 *_p = soap_instantiate_tt__NetworkCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkCapabilitiesExtension2 * soap_new_set_tt__NetworkCapabilitiesExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NetworkCapabilitiesExtension2 *_p = soap_instantiate_tt__NetworkCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkCapabilitiesExtension2(struct soap *soap, tt__NetworkCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (339)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilitiesExtension(struct soap*, const char*, int, const tt__NetworkCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__NetworkCapabilitiesExtension(struct soap*, const char*, tt__NetworkCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__NetworkCapabilitiesExtension
#define soap_write_tt__NetworkCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__NetworkCapabilitiesExtension
#define soap_read_tt__NetworkCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilitiesExtension * soap_new_tt__NetworkCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__NetworkCapabilitiesExtension * soap_new_req_tt__NetworkCapabilitiesExtension(struct soap *soap) { tt__NetworkCapabilitiesExtension *_p = soap_instantiate_tt__NetworkCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkCapabilitiesExtension * soap_new_set_tt__NetworkCapabilitiesExtension(struct soap *soap, std::vector<char * >& __any, bool *Dot11Configuration, tt__NetworkCapabilitiesExtension2 *Extension, char *__item1) { tt__NetworkCapabilitiesExtension *_p = soap_instantiate_tt__NetworkCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkCapabilitiesExtension::__any = __any; _p->tt__NetworkCapabilitiesExtension::Dot11Configuration = Dot11Configuration; _p->tt__NetworkCapabilitiesExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkCapabilitiesExtension(struct soap *soap, tt__NetworkCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (338)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkCapabilities(struct soap*, const char*, int, const tt__NetworkCapabilities *, const char*);
SOAP_FMAC3 tt__NetworkCapabilities * SOAP_FMAC4 soap_in_tt__NetworkCapabilities(struct soap*, const char*, tt__NetworkCapabilities *, const char*);

#ifndef soap_write_tt__NetworkCapabilities
#define soap_write_tt__NetworkCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkCapabilities * SOAP_FMAC4 soap_get_tt__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *, const char*, const char*);

#ifndef soap_read_tt__NetworkCapabilities
#define soap_read_tt__NetworkCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkCapabilities * SOAP_FMAC2 soap_instantiate_tt__NetworkCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkCapabilities * soap_new_tt__NetworkCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__NetworkCapabilities * soap_new_req_tt__NetworkCapabilities(struct soap *soap) { tt__NetworkCapabilities *_p = soap_instantiate_tt__NetworkCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkCapabilities * soap_new_set_tt__NetworkCapabilities(struct soap *soap, bool *IPFilter, bool *ZeroConfiguration, bool *IPVersion6, bool *DynDNS, tt__NetworkCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__NetworkCapabilities *_p = soap_instantiate_tt__NetworkCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkCapabilities::IPFilter = IPFilter; _p->tt__NetworkCapabilities::ZeroConfiguration = ZeroConfiguration; _p->tt__NetworkCapabilities::IPVersion6 = IPVersion6; _p->tt__NetworkCapabilities::DynDNS = DynDNS; _p->tt__NetworkCapabilities::Extension = Extension; _p->tt__NetworkCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkCapabilities(struct soap *soap, tt__NetworkCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (337)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileCapabilities(struct soap*, const char*, int, const tt__ProfileCapabilities *, const char*);
SOAP_FMAC3 tt__ProfileCapabilities * SOAP_FMAC4 soap_in_tt__ProfileCapabilities(struct soap*, const char*, tt__ProfileCapabilities *, const char*);

#ifndef soap_write_tt__ProfileCapabilities
#define soap_write_tt__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileCapabilities * SOAP_FMAC4 soap_get_tt__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *, const char*, const char*);

#ifndef soap_read_tt__ProfileCapabilities
#define soap_read_tt__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ProfileCapabilities * SOAP_FMAC2 soap_instantiate_tt__ProfileCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileCapabilities * soap_new_tt__ProfileCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__ProfileCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__ProfileCapabilities * soap_new_req_tt__ProfileCapabilities(struct soap *soap, int MaximumNumberOfProfiles) { tt__ProfileCapabilities *_p = soap_instantiate_tt__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles; } return _p; }

inline tt__ProfileCapabilities * soap_new_set_tt__ProfileCapabilities(struct soap *soap, int MaximumNumberOfProfiles, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__ProfileCapabilities *_p = soap_instantiate_tt__ProfileCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ProfileCapabilities::MaximumNumberOfProfiles = MaximumNumberOfProfiles; _p->tt__ProfileCapabilities::__any = __any; _p->tt__ProfileCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ProfileCapabilities(struct soap *soap, tt__ProfileCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ProfileCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (336)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, int, const tt__RealTimeStreamingCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, tt__RealTimeStreamingCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__RealTimeStreamingCapabilitiesExtension
#define soap_write_tt__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RealTimeStreamingCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__RealTimeStreamingCapabilitiesExtension
#define soap_read_tt__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RealTimeStreamingCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RealTimeStreamingCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_req_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap) { tt__RealTimeStreamingCapabilitiesExtension *_p = soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RealTimeStreamingCapabilitiesExtension * soap_new_set_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RealTimeStreamingCapabilitiesExtension *_p = soap_instantiate_tt__RealTimeStreamingCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RealTimeStreamingCapabilitiesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RealTimeStreamingCapabilitiesExtension(struct soap *soap, tt__RealTimeStreamingCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RealTimeStreamingCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (335)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RealTimeStreamingCapabilities(struct soap*, const char*, int, const tt__RealTimeStreamingCapabilities *, const char*);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_in_tt__RealTimeStreamingCapabilities(struct soap*, const char*, tt__RealTimeStreamingCapabilities *, const char*);

#ifndef soap_write_tt__RealTimeStreamingCapabilities
#define soap_write_tt__RealTimeStreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RealTimeStreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RealTimeStreamingCapabilities * SOAP_FMAC4 soap_get_tt__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *, const char*, const char*);

#ifndef soap_read_tt__RealTimeStreamingCapabilities
#define soap_read_tt__RealTimeStreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RealTimeStreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RealTimeStreamingCapabilities * SOAP_FMAC2 soap_instantiate_tt__RealTimeStreamingCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__RealTimeStreamingCapabilities * soap_new_tt__RealTimeStreamingCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__RealTimeStreamingCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__RealTimeStreamingCapabilities * soap_new_req_tt__RealTimeStreamingCapabilities(struct soap *soap) { tt__RealTimeStreamingCapabilities *_p = soap_instantiate_tt__RealTimeStreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RealTimeStreamingCapabilities * soap_new_set_tt__RealTimeStreamingCapabilities(struct soap *soap, bool *RTPMulticast, bool *RTP_USCORETCP, bool *RTP_USCORERTSP_USCORETCP, tt__RealTimeStreamingCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__RealTimeStreamingCapabilities *_p = soap_instantiate_tt__RealTimeStreamingCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RealTimeStreamingCapabilities::RTPMulticast = RTPMulticast; _p->tt__RealTimeStreamingCapabilities::RTP_USCORETCP = RTP_USCORETCP; _p->tt__RealTimeStreamingCapabilities::RTP_USCORERTSP_USCORETCP = RTP_USCORERTSP_USCORETCP; _p->tt__RealTimeStreamingCapabilities::Extension = Extension; _p->tt__RealTimeStreamingCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RealTimeStreamingCapabilities(struct soap *soap, tt__RealTimeStreamingCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RealTimeStreamingCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (334)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaCapabilitiesExtension(struct soap*, const char*, int, const tt__MediaCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__MediaCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__MediaCapabilitiesExtension(struct soap*, const char*, tt__MediaCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__MediaCapabilitiesExtension
#define soap_write_tt__MediaCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MediaCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MediaCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__MediaCapabilitiesExtension
#define soap_read_tt__MediaCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MediaCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MediaCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaCapabilitiesExtension * soap_new_tt__MediaCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__MediaCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__MediaCapabilitiesExtension * soap_new_req_tt__MediaCapabilitiesExtension(struct soap *soap, tt__ProfileCapabilities *ProfileCapabilities) { tt__MediaCapabilitiesExtension *_p = soap_instantiate_tt__MediaCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities; } return _p; }

inline tt__MediaCapabilitiesExtension * soap_new_set_tt__MediaCapabilitiesExtension(struct soap *soap, tt__ProfileCapabilities *ProfileCapabilities, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__MediaCapabilitiesExtension *_p = soap_instantiate_tt__MediaCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaCapabilitiesExtension::ProfileCapabilities = ProfileCapabilities; _p->tt__MediaCapabilitiesExtension::__any = __any; _p->tt__MediaCapabilitiesExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MediaCapabilitiesExtension(struct soap *soap, tt__MediaCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MediaCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (333)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaCapabilities(struct soap*, const char*, int, const tt__MediaCapabilities *, const char*);
SOAP_FMAC3 tt__MediaCapabilities * SOAP_FMAC4 soap_in_tt__MediaCapabilities(struct soap*, const char*, tt__MediaCapabilities *, const char*);

#ifndef soap_write_tt__MediaCapabilities
#define soap_write_tt__MediaCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MediaCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MediaCapabilities * SOAP_FMAC4 soap_get_tt__MediaCapabilities(struct soap*, tt__MediaCapabilities *, const char*, const char*);

#ifndef soap_read_tt__MediaCapabilities
#define soap_read_tt__MediaCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MediaCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MediaCapabilities * SOAP_FMAC2 soap_instantiate_tt__MediaCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaCapabilities * soap_new_tt__MediaCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__MediaCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__MediaCapabilities * soap_new_req_tt__MediaCapabilities(struct soap *soap, std::string& XAddr, tt__RealTimeStreamingCapabilities *StreamingCapabilities) { tt__MediaCapabilities *_p = soap_instantiate_tt__MediaCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaCapabilities::XAddr = XAddr; _p->tt__MediaCapabilities::StreamingCapabilities = StreamingCapabilities; } return _p; }

inline tt__MediaCapabilities * soap_new_set_tt__MediaCapabilities(struct soap *soap, std::string& XAddr, tt__RealTimeStreamingCapabilities *StreamingCapabilities, std::vector<char * >& __any, tt__MediaCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__MediaCapabilities *_p = soap_instantiate_tt__MediaCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaCapabilities::XAddr = XAddr; _p->tt__MediaCapabilities::StreamingCapabilities = StreamingCapabilities; _p->tt__MediaCapabilities::__any = __any; _p->tt__MediaCapabilities::Extension = Extension; _p->tt__MediaCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MediaCapabilities(struct soap *soap, tt__MediaCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MediaCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (332)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilitiesExtension2(struct soap*, const char*, int, const tt__IOCapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__IOCapabilitiesExtension2(struct soap*, const char*, tt__IOCapabilitiesExtension2 *, const char*);

#ifndef soap_write_tt__IOCapabilitiesExtension2
#define soap_write_tt__IOCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IOCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IOCapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_tt__IOCapabilitiesExtension2
#define soap_read_tt__IOCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IOCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IOCapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilitiesExtension2 * soap_new_tt__IOCapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__IOCapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline tt__IOCapabilitiesExtension2 * soap_new_req_tt__IOCapabilitiesExtension2(struct soap *soap) { tt__IOCapabilitiesExtension2 *_p = soap_instantiate_tt__IOCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IOCapabilitiesExtension2 * soap_new_set_tt__IOCapabilitiesExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__IOCapabilitiesExtension2 *_p = soap_instantiate_tt__IOCapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IOCapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IOCapabilitiesExtension2(struct soap *soap, tt__IOCapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IOCapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (331)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilitiesExtension(struct soap*, const char*, int, const tt__IOCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__IOCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__IOCapabilitiesExtension(struct soap*, const char*, tt__IOCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__IOCapabilitiesExtension
#define soap_write_tt__IOCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IOCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IOCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__IOCapabilitiesExtension
#define soap_read_tt__IOCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IOCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IOCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__IOCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilitiesExtension * soap_new_tt__IOCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__IOCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__IOCapabilitiesExtension * soap_new_req_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension2 *Extension) { tt__IOCapabilitiesExtension *_p = soap_instantiate_tt__IOCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IOCapabilitiesExtension::Extension = Extension; } return _p; }

inline tt__IOCapabilitiesExtension * soap_new_set_tt__IOCapabilitiesExtension(struct soap *soap, std::vector<char * >& __any, bool *Auxiliary, std::vector<std::string >& AuxiliaryCommands, tt__IOCapabilitiesExtension2 *Extension, char *__anyAttribute, char *__item1) { tt__IOCapabilitiesExtension *_p = soap_instantiate_tt__IOCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IOCapabilitiesExtension::__any = __any; _p->tt__IOCapabilitiesExtension::Auxiliary = Auxiliary; _p->tt__IOCapabilitiesExtension::AuxiliaryCommands = AuxiliaryCommands; _p->tt__IOCapabilitiesExtension::Extension = Extension; _p->tt__IOCapabilitiesExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IOCapabilitiesExtension(struct soap *soap, tt__IOCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IOCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (330)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IOCapabilities(struct soap*, const char*, int, const tt__IOCapabilities *, const char*);
SOAP_FMAC3 tt__IOCapabilities * SOAP_FMAC4 soap_in_tt__IOCapabilities(struct soap*, const char*, tt__IOCapabilities *, const char*);

#ifndef soap_write_tt__IOCapabilities
#define soap_write_tt__IOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IOCapabilities * SOAP_FMAC4 soap_get_tt__IOCapabilities(struct soap*, tt__IOCapabilities *, const char*, const char*);

#ifndef soap_read_tt__IOCapabilities
#define soap_read_tt__IOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IOCapabilities * SOAP_FMAC2 soap_instantiate_tt__IOCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__IOCapabilities * soap_new_tt__IOCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__IOCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__IOCapabilities * soap_new_req_tt__IOCapabilities(struct soap *soap) { tt__IOCapabilities *_p = soap_instantiate_tt__IOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IOCapabilities * soap_new_set_tt__IOCapabilities(struct soap *soap, int *InputConnectors, int *RelayOutputs, tt__IOCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__IOCapabilities *_p = soap_instantiate_tt__IOCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IOCapabilities::InputConnectors = InputConnectors; _p->tt__IOCapabilities::RelayOutputs = RelayOutputs; _p->tt__IOCapabilities::Extension = Extension; _p->tt__IOCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IOCapabilities(struct soap *soap, tt__IOCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IOCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (329)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventCapabilities(struct soap*, const char*, int, const tt__EventCapabilities *, const char*);
SOAP_FMAC3 tt__EventCapabilities * SOAP_FMAC4 soap_in_tt__EventCapabilities(struct soap*, const char*, tt__EventCapabilities *, const char*);

#ifndef soap_write_tt__EventCapabilities
#define soap_write_tt__EventCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EventCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EventCapabilities * SOAP_FMAC4 soap_get_tt__EventCapabilities(struct soap*, tt__EventCapabilities *, const char*, const char*);

#ifndef soap_read_tt__EventCapabilities
#define soap_read_tt__EventCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EventCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EventCapabilities * SOAP_FMAC2 soap_instantiate_tt__EventCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventCapabilities * soap_new_tt__EventCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__EventCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__EventCapabilities * soap_new_req_tt__EventCapabilities(struct soap *soap, std::string& XAddr, bool WSSubscriptionPolicySupport, bool WSPullPointSupport, bool WSPausableSubscriptionManagerInterfaceSupport) { tt__EventCapabilities *_p = soap_instantiate_tt__EventCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EventCapabilities::XAddr = XAddr; _p->tt__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport; _p->tt__EventCapabilities::WSPullPointSupport = WSPullPointSupport; _p->tt__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport; } return _p; }

inline tt__EventCapabilities * soap_new_set_tt__EventCapabilities(struct soap *soap, std::string& XAddr, bool WSSubscriptionPolicySupport, bool WSPullPointSupport, bool WSPausableSubscriptionManagerInterfaceSupport, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__EventCapabilities *_p = soap_instantiate_tt__EventCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EventCapabilities::XAddr = XAddr; _p->tt__EventCapabilities::WSSubscriptionPolicySupport = WSSubscriptionPolicySupport; _p->tt__EventCapabilities::WSPullPointSupport = WSPullPointSupport; _p->tt__EventCapabilities::WSPausableSubscriptionManagerInterfaceSupport = WSPausableSubscriptionManagerInterfaceSupport; _p->tt__EventCapabilities::__any = __any; _p->tt__EventCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EventCapabilities(struct soap *soap, tt__EventCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EventCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (328)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceCapabilitiesExtension(struct soap*, const char*, int, const tt__DeviceCapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_in_tt__DeviceCapabilitiesExtension(struct soap*, const char*, tt__DeviceCapabilitiesExtension *, const char*);

#ifndef soap_write_tt__DeviceCapabilitiesExtension
#define soap_write_tt__DeviceCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DeviceCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceCapabilitiesExtension * SOAP_FMAC4 soap_get_tt__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__DeviceCapabilitiesExtension
#define soap_read_tt__DeviceCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DeviceCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DeviceCapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceCapabilitiesExtension * soap_new_tt__DeviceCapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__DeviceCapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__DeviceCapabilitiesExtension * soap_new_req_tt__DeviceCapabilitiesExtension(struct soap *soap) { tt__DeviceCapabilitiesExtension *_p = soap_instantiate_tt__DeviceCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__DeviceCapabilitiesExtension * soap_new_set_tt__DeviceCapabilitiesExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__DeviceCapabilitiesExtension *_p = soap_instantiate_tt__DeviceCapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceCapabilitiesExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DeviceCapabilitiesExtension(struct soap *soap, tt__DeviceCapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DeviceCapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (327)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceCapabilities(struct soap*, const char*, int, const tt__DeviceCapabilities *, const char*);
SOAP_FMAC3 tt__DeviceCapabilities * SOAP_FMAC4 soap_in_tt__DeviceCapabilities(struct soap*, const char*, tt__DeviceCapabilities *, const char*);

#ifndef soap_write_tt__DeviceCapabilities
#define soap_write_tt__DeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceCapabilities * SOAP_FMAC4 soap_get_tt__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *, const char*, const char*);

#ifndef soap_read_tt__DeviceCapabilities
#define soap_read_tt__DeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DeviceCapabilities * SOAP_FMAC2 soap_instantiate_tt__DeviceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceCapabilities * soap_new_tt__DeviceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__DeviceCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__DeviceCapabilities * soap_new_req_tt__DeviceCapabilities(struct soap *soap, std::string& XAddr) { tt__DeviceCapabilities *_p = soap_instantiate_tt__DeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceCapabilities::XAddr = XAddr; } return _p; }

inline tt__DeviceCapabilities * soap_new_set_tt__DeviceCapabilities(struct soap *soap, std::string& XAddr, tt__NetworkCapabilities *Network, tt__SystemCapabilities *System, tt__IOCapabilities *IO, tt__SecurityCapabilities *Security, tt__DeviceCapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__DeviceCapabilities *_p = soap_instantiate_tt__DeviceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceCapabilities::XAddr = XAddr; _p->tt__DeviceCapabilities::Network = Network; _p->tt__DeviceCapabilities::System = System; _p->tt__DeviceCapabilities::IO = IO; _p->tt__DeviceCapabilities::Security = Security; _p->tt__DeviceCapabilities::Extension = Extension; _p->tt__DeviceCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DeviceCapabilities(struct soap *soap, tt__DeviceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DeviceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (326)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnalyticsCapabilities(struct soap*, const char*, int, const tt__AnalyticsCapabilities *, const char*);
SOAP_FMAC3 tt__AnalyticsCapabilities * SOAP_FMAC4 soap_in_tt__AnalyticsCapabilities(struct soap*, const char*, tt__AnalyticsCapabilities *, const char*);

#ifndef soap_write_tt__AnalyticsCapabilities
#define soap_write_tt__AnalyticsCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnalyticsCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsCapabilities * SOAP_FMAC4 soap_get_tt__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *, const char*, const char*);

#ifndef soap_read_tt__AnalyticsCapabilities
#define soap_read_tt__AnalyticsCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnalyticsCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnalyticsCapabilities * SOAP_FMAC2 soap_instantiate_tt__AnalyticsCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnalyticsCapabilities * soap_new_tt__AnalyticsCapabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnalyticsCapabilities(soap, n, NULL, NULL, NULL); }

inline tt__AnalyticsCapabilities * soap_new_req_tt__AnalyticsCapabilities(struct soap *soap, std::string& XAddr, bool RuleSupport, bool AnalyticsModuleSupport) { tt__AnalyticsCapabilities *_p = soap_instantiate_tt__AnalyticsCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsCapabilities::XAddr = XAddr; _p->tt__AnalyticsCapabilities::RuleSupport = RuleSupport; _p->tt__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport; } return _p; }

inline tt__AnalyticsCapabilities * soap_new_set_tt__AnalyticsCapabilities(struct soap *soap, std::string& XAddr, bool RuleSupport, bool AnalyticsModuleSupport, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AnalyticsCapabilities *_p = soap_instantiate_tt__AnalyticsCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnalyticsCapabilities::XAddr = XAddr; _p->tt__AnalyticsCapabilities::RuleSupport = RuleSupport; _p->tt__AnalyticsCapabilities::AnalyticsModuleSupport = AnalyticsModuleSupport; _p->tt__AnalyticsCapabilities::__any = __any; _p->tt__AnalyticsCapabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnalyticsCapabilities(struct soap *soap, tt__AnalyticsCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnalyticsCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (325)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilitiesExtension2(struct soap*, const char*, int, const tt__CapabilitiesExtension2 *, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension2 * SOAP_FMAC4 soap_in_tt__CapabilitiesExtension2(struct soap*, const char*, tt__CapabilitiesExtension2 *, const char*);

#ifndef soap_write_tt__CapabilitiesExtension2
#define soap_write_tt__CapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CapabilitiesExtension2 * SOAP_FMAC4 soap_get_tt__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *, const char*, const char*);

#ifndef soap_read_tt__CapabilitiesExtension2
#define soap_read_tt__CapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CapabilitiesExtension2 * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilitiesExtension2 * soap_new_tt__CapabilitiesExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__CapabilitiesExtension2(soap, n, NULL, NULL, NULL); }

inline tt__CapabilitiesExtension2 * soap_new_req_tt__CapabilitiesExtension2(struct soap *soap) { tt__CapabilitiesExtension2 *_p = soap_instantiate_tt__CapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__CapabilitiesExtension2 * soap_new_set_tt__CapabilitiesExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__CapabilitiesExtension2 *_p = soap_instantiate_tt__CapabilitiesExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CapabilitiesExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CapabilitiesExtension2(struct soap *soap, tt__CapabilitiesExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CapabilitiesExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (324)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__CapabilitiesExtension(struct soap*, const char*, int, const tt__CapabilitiesExtension *, const char*);
SOAP_FMAC3 tt__CapabilitiesExtension * SOAP_FMAC4 soap_in_tt__CapabilitiesExtension(struct soap*, const char*, tt__CapabilitiesExtension *, const char*);

#ifndef soap_write_tt__CapabilitiesExtension
#define soap_write_tt__CapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:CapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CapabilitiesExtension * SOAP_FMAC4 soap_get_tt__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *, const char*, const char*);

#ifndef soap_read_tt__CapabilitiesExtension
#define soap_read_tt__CapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__CapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__CapabilitiesExtension * SOAP_FMAC2 soap_instantiate_tt__CapabilitiesExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__CapabilitiesExtension * soap_new_tt__CapabilitiesExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__CapabilitiesExtension(soap, n, NULL, NULL, NULL); }

inline tt__CapabilitiesExtension * soap_new_req_tt__CapabilitiesExtension(struct soap *soap) { tt__CapabilitiesExtension *_p = soap_instantiate_tt__CapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__CapabilitiesExtension * soap_new_set_tt__CapabilitiesExtension(struct soap *soap, std::vector<char * >& __any, tt__DeviceIOCapabilities *DeviceIO, tt__DisplayCapabilities *Display, tt__RecordingCapabilities *Recording, tt__SearchCapabilities *Search, tt__ReplayCapabilities *Replay, tt__ReceiverCapabilities *Receiver, tt__AnalyticsDeviceCapabilities *AnalyticsDevice, tt__CapabilitiesExtension2 *Extensions, char *__item1) { tt__CapabilitiesExtension *_p = soap_instantiate_tt__CapabilitiesExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__CapabilitiesExtension::__any = __any; _p->tt__CapabilitiesExtension::DeviceIO = DeviceIO; _p->tt__CapabilitiesExtension::Display = Display; _p->tt__CapabilitiesExtension::Recording = Recording; _p->tt__CapabilitiesExtension::Search = Search; _p->tt__CapabilitiesExtension::Replay = Replay; _p->tt__CapabilitiesExtension::Receiver = Receiver; _p->tt__CapabilitiesExtension::AnalyticsDevice = AnalyticsDevice; _p->tt__CapabilitiesExtension::Extensions = Extensions; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__CapabilitiesExtension(struct soap *soap, tt__CapabilitiesExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__CapabilitiesExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (323)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Capabilities(struct soap*, const char*, int, const tt__Capabilities *, const char*);
SOAP_FMAC3 tt__Capabilities * SOAP_FMAC4 soap_in_tt__Capabilities(struct soap*, const char*, tt__Capabilities *, const char*);

#ifndef soap_write_tt__Capabilities
#define soap_write_tt__Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Capabilities * SOAP_FMAC4 soap_get_tt__Capabilities(struct soap*, tt__Capabilities *, const char*, const char*);

#ifndef soap_read_tt__Capabilities
#define soap_read_tt__Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Capabilities * SOAP_FMAC2 soap_instantiate_tt__Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__Capabilities * soap_new_tt__Capabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__Capabilities(soap, n, NULL, NULL, NULL); }

inline tt__Capabilities * soap_new_req_tt__Capabilities(struct soap *soap) { tt__Capabilities *_p = soap_instantiate_tt__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Capabilities * soap_new_set_tt__Capabilities(struct soap *soap, tt__AnalyticsCapabilities *Analytics, tt__DeviceCapabilities *Device, tt__EventCapabilities *Events, tt__ImagingCapabilities *Imaging, tt__MediaCapabilities *Media, tt__PTZCapabilities *PTZ, tt__CapabilitiesExtension *Extension, char *__anyAttribute, char *__item1) { tt__Capabilities *_p = soap_instantiate_tt__Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Capabilities::Analytics = Analytics; _p->tt__Capabilities::Device = Device; _p->tt__Capabilities::Events = Events; _p->tt__Capabilities::Imaging = Imaging; _p->tt__Capabilities::Media = Media; _p->tt__Capabilities::PTZ = PTZ; _p->tt__Capabilities::Extension = Extension; _p->tt__Capabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Capabilities(struct soap *soap, tt__Capabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Capabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (322)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AvailableNetworksExtension(struct soap*, const char*, int, const tt__Dot11AvailableNetworksExtension *, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_in_tt__Dot11AvailableNetworksExtension(struct soap*, const char*, tt__Dot11AvailableNetworksExtension *, const char*);

#ifndef soap_write_tt__Dot11AvailableNetworksExtension
#define soap_write_tt__Dot11AvailableNetworksExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11AvailableNetworksExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11AvailableNetworksExtension * SOAP_FMAC4 soap_get_tt__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *, const char*, const char*);

#ifndef soap_read_tt__Dot11AvailableNetworksExtension
#define soap_read_tt__Dot11AvailableNetworksExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11AvailableNetworksExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11AvailableNetworksExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworksExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AvailableNetworksExtension * soap_new_tt__Dot11AvailableNetworksExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11AvailableNetworksExtension(soap, n, NULL, NULL, NULL); }

inline tt__Dot11AvailableNetworksExtension * soap_new_req_tt__Dot11AvailableNetworksExtension(struct soap *soap) { tt__Dot11AvailableNetworksExtension *_p = soap_instantiate_tt__Dot11AvailableNetworksExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Dot11AvailableNetworksExtension * soap_new_set_tt__Dot11AvailableNetworksExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__Dot11AvailableNetworksExtension *_p = soap_instantiate_tt__Dot11AvailableNetworksExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11AvailableNetworksExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11AvailableNetworksExtension(struct soap *soap, tt__Dot11AvailableNetworksExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11AvailableNetworksExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (321)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11AvailableNetworks(struct soap*, const char*, int, const tt__Dot11AvailableNetworks *, const char*);
SOAP_FMAC3 tt__Dot11AvailableNetworks * SOAP_FMAC4 soap_in_tt__Dot11AvailableNetworks(struct soap*, const char*, tt__Dot11AvailableNetworks *, const char*);

#ifndef soap_write_tt__Dot11AvailableNetworks
#define soap_write_tt__Dot11AvailableNetworks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11AvailableNetworks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11AvailableNetworks * SOAP_FMAC4 soap_get_tt__Dot11AvailableNetworks(struct soap*, tt__Dot11AvailableNetworks *, const char*, const char*);

#ifndef soap_read_tt__Dot11AvailableNetworks
#define soap_read_tt__Dot11AvailableNetworks(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11AvailableNetworks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11AvailableNetworks * SOAP_FMAC2 soap_instantiate_tt__Dot11AvailableNetworks(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11AvailableNetworks * soap_new_tt__Dot11AvailableNetworks(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11AvailableNetworks(soap, n, NULL, NULL, NULL); }

inline tt__Dot11AvailableNetworks * soap_new_req_tt__Dot11AvailableNetworks(struct soap *soap, xsd__hexBinary& SSID) { tt__Dot11AvailableNetworks *_p = soap_instantiate_tt__Dot11AvailableNetworks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11AvailableNetworks::SSID = SSID; } return _p; }

inline tt__Dot11AvailableNetworks * soap_new_set_tt__Dot11AvailableNetworks(struct soap *soap, xsd__hexBinary& SSID, std::string *BSSID, std::vector<enum tt__Dot11AuthAndMangementSuite >& AuthAndMangementSuite, std::vector<enum tt__Dot11Cipher >& PairCipher, std::vector<enum tt__Dot11Cipher >& GroupCipher, enum tt__Dot11SignalStrength *SignalStrength, tt__Dot11AvailableNetworksExtension *Extension, char *__anyAttribute, char *__item1) { tt__Dot11AvailableNetworks *_p = soap_instantiate_tt__Dot11AvailableNetworks(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11AvailableNetworks::SSID = SSID; _p->tt__Dot11AvailableNetworks::BSSID = BSSID; _p->tt__Dot11AvailableNetworks::AuthAndMangementSuite = AuthAndMangementSuite; _p->tt__Dot11AvailableNetworks::PairCipher = PairCipher; _p->tt__Dot11AvailableNetworks::GroupCipher = GroupCipher; _p->tt__Dot11AvailableNetworks::SignalStrength = SignalStrength; _p->tt__Dot11AvailableNetworks::Extension = Extension; _p->tt__Dot11AvailableNetworks::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11AvailableNetworks(struct soap *soap, tt__Dot11AvailableNetworks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11AvailableNetworks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (320)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Status(struct soap*, const char*, int, const tt__Dot11Status *, const char*);
SOAP_FMAC3 tt__Dot11Status * SOAP_FMAC4 soap_in_tt__Dot11Status(struct soap*, const char*, tt__Dot11Status *, const char*);

#ifndef soap_write_tt__Dot11Status
#define soap_write_tt__Dot11Status(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11Status", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11Status * SOAP_FMAC4 soap_get_tt__Dot11Status(struct soap*, tt__Dot11Status *, const char*, const char*);

#ifndef soap_read_tt__Dot11Status
#define soap_read_tt__Dot11Status(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11Status(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11Status * SOAP_FMAC2 soap_instantiate_tt__Dot11Status(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Status * soap_new_tt__Dot11Status(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11Status(soap, n, NULL, NULL, NULL); }

inline tt__Dot11Status * soap_new_req_tt__Dot11Status(struct soap *soap, xsd__hexBinary& SSID, std::string& ActiveConfigAlias) { tt__Dot11Status *_p = soap_instantiate_tt__Dot11Status(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Status::SSID = SSID; _p->tt__Dot11Status::ActiveConfigAlias = ActiveConfigAlias; } return _p; }

inline tt__Dot11Status * soap_new_set_tt__Dot11Status(struct soap *soap, xsd__hexBinary& SSID, std::string *BSSID, enum tt__Dot11Cipher *PairCipher, enum tt__Dot11Cipher *GroupCipher, enum tt__Dot11SignalStrength *SignalStrength, std::string& ActiveConfigAlias, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Dot11Status *_p = soap_instantiate_tt__Dot11Status(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Status::SSID = SSID; _p->tt__Dot11Status::BSSID = BSSID; _p->tt__Dot11Status::PairCipher = PairCipher; _p->tt__Dot11Status::GroupCipher = GroupCipher; _p->tt__Dot11Status::SignalStrength = SignalStrength; _p->tt__Dot11Status::ActiveConfigAlias = ActiveConfigAlias; _p->tt__Dot11Status::__any = __any; _p->tt__Dot11Status::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11Status(struct soap *soap, tt__Dot11Status *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11Status(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (319)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Capabilities(struct soap*, const char*, int, const tt__Dot11Capabilities *, const char*);
SOAP_FMAC3 tt__Dot11Capabilities * SOAP_FMAC4 soap_in_tt__Dot11Capabilities(struct soap*, const char*, tt__Dot11Capabilities *, const char*);

#ifndef soap_write_tt__Dot11Capabilities
#define soap_write_tt__Dot11Capabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11Capabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11Capabilities * SOAP_FMAC4 soap_get_tt__Dot11Capabilities(struct soap*, tt__Dot11Capabilities *, const char*, const char*);

#ifndef soap_read_tt__Dot11Capabilities
#define soap_read_tt__Dot11Capabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11Capabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11Capabilities * SOAP_FMAC2 soap_instantiate_tt__Dot11Capabilities(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Capabilities * soap_new_tt__Dot11Capabilities(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11Capabilities(soap, n, NULL, NULL, NULL); }

inline tt__Dot11Capabilities * soap_new_req_tt__Dot11Capabilities(struct soap *soap, bool TKIP, bool ScanAvailableNetworks, bool MultipleConfiguration, bool AdHocStationMode, bool WEP) { tt__Dot11Capabilities *_p = soap_instantiate_tt__Dot11Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Capabilities::TKIP = TKIP; _p->tt__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks; _p->tt__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration; _p->tt__Dot11Capabilities::AdHocStationMode = AdHocStationMode; _p->tt__Dot11Capabilities::WEP = WEP; } return _p; }

inline tt__Dot11Capabilities * soap_new_set_tt__Dot11Capabilities(struct soap *soap, bool TKIP, bool ScanAvailableNetworks, bool MultipleConfiguration, bool AdHocStationMode, bool WEP, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Dot11Capabilities *_p = soap_instantiate_tt__Dot11Capabilities(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Capabilities::TKIP = TKIP; _p->tt__Dot11Capabilities::ScanAvailableNetworks = ScanAvailableNetworks; _p->tt__Dot11Capabilities::MultipleConfiguration = MultipleConfiguration; _p->tt__Dot11Capabilities::AdHocStationMode = AdHocStationMode; _p->tt__Dot11Capabilities::WEP = WEP; _p->tt__Dot11Capabilities::__any = __any; _p->tt__Dot11Capabilities::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11Capabilities(struct soap *soap, tt__Dot11Capabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11Capabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (318)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension2 *, const char*);

#ifndef soap_write_tt__NetworkInterfaceSetConfigurationExtension2
#define soap_write_tt__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceSetConfigurationExtension2
#define soap_read_tt__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceSetConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_req_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap) { tt__NetworkInterfaceSetConfigurationExtension2 *_p = soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkInterfaceSetConfigurationExtension2 * soap_new_set_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NetworkInterfaceSetConfigurationExtension2 *_p = soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceSetConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceSetConfigurationExtension2(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceSetConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (317)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKSetExtension(struct soap*, const char*, int, const tt__Dot11PSKSetExtension *, const char*);
SOAP_FMAC3 tt__Dot11PSKSetExtension * SOAP_FMAC4 soap_in_tt__Dot11PSKSetExtension(struct soap*, const char*, tt__Dot11PSKSetExtension *, const char*);

#ifndef soap_write_tt__Dot11PSKSetExtension
#define soap_write_tt__Dot11PSKSetExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11PSKSetExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11PSKSetExtension * SOAP_FMAC4 soap_get_tt__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *, const char*, const char*);

#ifndef soap_read_tt__Dot11PSKSetExtension
#define soap_read_tt__Dot11PSKSetExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11PSKSetExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11PSKSetExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSetExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKSetExtension * soap_new_tt__Dot11PSKSetExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11PSKSetExtension(soap, n, NULL, NULL, NULL); }

inline tt__Dot11PSKSetExtension * soap_new_req_tt__Dot11PSKSetExtension(struct soap *soap) { tt__Dot11PSKSetExtension *_p = soap_instantiate_tt__Dot11PSKSetExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Dot11PSKSetExtension * soap_new_set_tt__Dot11PSKSetExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__Dot11PSKSetExtension *_p = soap_instantiate_tt__Dot11PSKSetExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11PSKSetExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11PSKSetExtension(struct soap *soap, tt__Dot11PSKSetExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11PSKSetExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (316)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11PSKSet(struct soap*, const char*, int, const tt__Dot11PSKSet *, const char*);
SOAP_FMAC3 tt__Dot11PSKSet * SOAP_FMAC4 soap_in_tt__Dot11PSKSet(struct soap*, const char*, tt__Dot11PSKSet *, const char*);

#ifndef soap_write_tt__Dot11PSKSet
#define soap_write_tt__Dot11PSKSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11PSKSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11PSKSet * SOAP_FMAC4 soap_get_tt__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *, const char*, const char*);

#ifndef soap_read_tt__Dot11PSKSet
#define soap_read_tt__Dot11PSKSet(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11PSKSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11PSKSet * SOAP_FMAC2 soap_instantiate_tt__Dot11PSKSet(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11PSKSet * soap_new_tt__Dot11PSKSet(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11PSKSet(soap, n, NULL, NULL, NULL); }

inline tt__Dot11PSKSet * soap_new_req_tt__Dot11PSKSet(struct soap *soap) { tt__Dot11PSKSet *_p = soap_instantiate_tt__Dot11PSKSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Dot11PSKSet * soap_new_set_tt__Dot11PSKSet(struct soap *soap, xsd__hexBinary *Key, std::string *Passphrase, tt__Dot11PSKSetExtension *Extension, char *__anyAttribute, char *__item1) { tt__Dot11PSKSet *_p = soap_instantiate_tt__Dot11PSKSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11PSKSet::Key = Key; _p->tt__Dot11PSKSet::Passphrase = Passphrase; _p->tt__Dot11PSKSet::Extension = Extension; _p->tt__Dot11PSKSet::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11PSKSet(struct soap *soap, tt__Dot11PSKSet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11PSKSet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (315)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityConfigurationExtension(struct soap*, const char*, int, const tt__Dot11SecurityConfigurationExtension *, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_in_tt__Dot11SecurityConfigurationExtension(struct soap*, const char*, tt__Dot11SecurityConfigurationExtension *, const char*);

#ifndef soap_write_tt__Dot11SecurityConfigurationExtension
#define soap_write_tt__Dot11SecurityConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11SecurityConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC4 soap_get_tt__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__Dot11SecurityConfigurationExtension
#define soap_read_tt__Dot11SecurityConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SecurityConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11SecurityConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityConfigurationExtension * soap_new_tt__Dot11SecurityConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11SecurityConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__Dot11SecurityConfigurationExtension * soap_new_req_tt__Dot11SecurityConfigurationExtension(struct soap *soap) { tt__Dot11SecurityConfigurationExtension *_p = soap_instantiate_tt__Dot11SecurityConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Dot11SecurityConfigurationExtension * soap_new_set_tt__Dot11SecurityConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Dot11SecurityConfigurationExtension *_p = soap_instantiate_tt__Dot11SecurityConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SecurityConfigurationExtension::__any = __any; _p->tt__Dot11SecurityConfigurationExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11SecurityConfigurationExtension(struct soap *soap, tt__Dot11SecurityConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11SecurityConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (314)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11SecurityConfiguration(struct soap*, const char*, int, const tt__Dot11SecurityConfiguration *, const char*);
SOAP_FMAC3 tt__Dot11SecurityConfiguration * SOAP_FMAC4 soap_in_tt__Dot11SecurityConfiguration(struct soap*, const char*, tt__Dot11SecurityConfiguration *, const char*);

#ifndef soap_write_tt__Dot11SecurityConfiguration
#define soap_write_tt__Dot11SecurityConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11SecurityConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SecurityConfiguration * SOAP_FMAC4 soap_get_tt__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *, const char*, const char*);

#ifndef soap_read_tt__Dot11SecurityConfiguration
#define soap_read_tt__Dot11SecurityConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11SecurityConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11SecurityConfiguration * SOAP_FMAC2 soap_instantiate_tt__Dot11SecurityConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11SecurityConfiguration * soap_new_tt__Dot11SecurityConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11SecurityConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__Dot11SecurityConfiguration * soap_new_req_tt__Dot11SecurityConfiguration(struct soap *soap, enum tt__Dot11SecurityMode Mode) { tt__Dot11SecurityConfiguration *_p = soap_instantiate_tt__Dot11SecurityConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SecurityConfiguration::Mode = Mode; } return _p; }

inline tt__Dot11SecurityConfiguration * soap_new_set_tt__Dot11SecurityConfiguration(struct soap *soap, enum tt__Dot11SecurityMode Mode, enum tt__Dot11Cipher *Algorithm, tt__Dot11PSKSet *PSK, std::string *Dot1X, tt__Dot11SecurityConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__Dot11SecurityConfiguration *_p = soap_instantiate_tt__Dot11SecurityConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11SecurityConfiguration::Mode = Mode; _p->tt__Dot11SecurityConfiguration::Algorithm = Algorithm; _p->tt__Dot11SecurityConfiguration::PSK = PSK; _p->tt__Dot11SecurityConfiguration::Dot1X = Dot1X; _p->tt__Dot11SecurityConfiguration::Extension = Extension; _p->tt__Dot11SecurityConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11SecurityConfiguration(struct soap *soap, tt__Dot11SecurityConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11SecurityConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (313)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot11Configuration(struct soap*, const char*, int, const tt__Dot11Configuration *, const char*);
SOAP_FMAC3 tt__Dot11Configuration * SOAP_FMAC4 soap_in_tt__Dot11Configuration(struct soap*, const char*, tt__Dot11Configuration *, const char*);

#ifndef soap_write_tt__Dot11Configuration
#define soap_write_tt__Dot11Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot11Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11Configuration * SOAP_FMAC4 soap_get_tt__Dot11Configuration(struct soap*, tt__Dot11Configuration *, const char*, const char*);

#ifndef soap_read_tt__Dot11Configuration
#define soap_read_tt__Dot11Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot11Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot11Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot11Configuration * soap_new_tt__Dot11Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot11Configuration(soap, n, NULL, NULL, NULL); }

inline tt__Dot11Configuration * soap_new_req_tt__Dot11Configuration(struct soap *soap, xsd__hexBinary& SSID, enum tt__Dot11StationMode Mode, std::string& Alias, std::string& Priority, tt__Dot11SecurityConfiguration *Security) { tt__Dot11Configuration *_p = soap_instantiate_tt__Dot11Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Configuration::SSID = SSID; _p->tt__Dot11Configuration::Mode = Mode; _p->tt__Dot11Configuration::Alias = Alias; _p->tt__Dot11Configuration::Priority = Priority; _p->tt__Dot11Configuration::Security = Security; } return _p; }

inline tt__Dot11Configuration * soap_new_set_tt__Dot11Configuration(struct soap *soap, xsd__hexBinary& SSID, enum tt__Dot11StationMode Mode, std::string& Alias, std::string& Priority, tt__Dot11SecurityConfiguration *Security, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Dot11Configuration *_p = soap_instantiate_tt__Dot11Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot11Configuration::SSID = SSID; _p->tt__Dot11Configuration::Mode = Mode; _p->tt__Dot11Configuration::Alias = Alias; _p->tt__Dot11Configuration::Priority = Priority; _p->tt__Dot11Configuration::Security = Security; _p->tt__Dot11Configuration::__any = __any; _p->tt__Dot11Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot11Configuration(struct soap *soap, tt__Dot11Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot11Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (312)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilterExtension(struct soap*, const char*, int, const tt__IPAddressFilterExtension *, const char*);
SOAP_FMAC3 tt__IPAddressFilterExtension * SOAP_FMAC4 soap_in_tt__IPAddressFilterExtension(struct soap*, const char*, tt__IPAddressFilterExtension *, const char*);

#ifndef soap_write_tt__IPAddressFilterExtension
#define soap_write_tt__IPAddressFilterExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPAddressFilterExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPAddressFilterExtension * SOAP_FMAC4 soap_get_tt__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *, const char*, const char*);

#ifndef soap_read_tt__IPAddressFilterExtension
#define soap_read_tt__IPAddressFilterExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPAddressFilterExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPAddressFilterExtension * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilterExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilterExtension * soap_new_tt__IPAddressFilterExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPAddressFilterExtension(soap, n, NULL, NULL, NULL); }

inline tt__IPAddressFilterExtension * soap_new_req_tt__IPAddressFilterExtension(struct soap *soap) { tt__IPAddressFilterExtension *_p = soap_instantiate_tt__IPAddressFilterExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IPAddressFilterExtension * soap_new_set_tt__IPAddressFilterExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__IPAddressFilterExtension *_p = soap_instantiate_tt__IPAddressFilterExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddressFilterExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPAddressFilterExtension(struct soap *soap, tt__IPAddressFilterExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPAddressFilterExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (311)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddressFilter(struct soap*, const char*, int, const tt__IPAddressFilter *, const char*);
SOAP_FMAC3 tt__IPAddressFilter * SOAP_FMAC4 soap_in_tt__IPAddressFilter(struct soap*, const char*, tt__IPAddressFilter *, const char*);

#ifndef soap_write_tt__IPAddressFilter
#define soap_write_tt__IPAddressFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPAddressFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPAddressFilter * SOAP_FMAC4 soap_get_tt__IPAddressFilter(struct soap*, tt__IPAddressFilter *, const char*, const char*);

#ifndef soap_read_tt__IPAddressFilter
#define soap_read_tt__IPAddressFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPAddressFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPAddressFilter * SOAP_FMAC2 soap_instantiate_tt__IPAddressFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddressFilter * soap_new_tt__IPAddressFilter(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPAddressFilter(soap, n, NULL, NULL, NULL); }

inline tt__IPAddressFilter * soap_new_req_tt__IPAddressFilter(struct soap *soap, enum tt__IPAddressFilterType Type) { tt__IPAddressFilter *_p = soap_instantiate_tt__IPAddressFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddressFilter::Type = Type; } return _p; }

inline tt__IPAddressFilter * soap_new_set_tt__IPAddressFilter(struct soap *soap, enum tt__IPAddressFilterType Type, std::vector<tt__PrefixedIPv4Address * >& IPv4Address, std::vector<tt__PrefixedIPv6Address * >& IPv6Address, tt__IPAddressFilterExtension *Extension, char *__anyAttribute, char *__item1) { tt__IPAddressFilter *_p = soap_instantiate_tt__IPAddressFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddressFilter::Type = Type; _p->tt__IPAddressFilter::IPv4Address = IPv4Address; _p->tt__IPAddressFilter::IPv6Address = IPv6Address; _p->tt__IPAddressFilter::Extension = Extension; _p->tt__IPAddressFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPAddressFilter(struct soap *soap, tt__IPAddressFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPAddressFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (310)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfigurationExtension2(struct soap*, const char*, int, const tt__NetworkZeroConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__NetworkZeroConfigurationExtension2(struct soap*, const char*, tt__NetworkZeroConfigurationExtension2 *, const char*);

#ifndef soap_write_tt__NetworkZeroConfigurationExtension2
#define soap_write_tt__NetworkZeroConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkZeroConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_tt__NetworkZeroConfigurationExtension2
#define soap_read_tt__NetworkZeroConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkZeroConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkZeroConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfigurationExtension2 * soap_new_tt__NetworkZeroConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkZeroConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline tt__NetworkZeroConfigurationExtension2 * soap_new_req_tt__NetworkZeroConfigurationExtension2(struct soap *soap) { tt__NetworkZeroConfigurationExtension2 *_p = soap_instantiate_tt__NetworkZeroConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkZeroConfigurationExtension2 * soap_new_set_tt__NetworkZeroConfigurationExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NetworkZeroConfigurationExtension2 *_p = soap_instantiate_tt__NetworkZeroConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkZeroConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkZeroConfigurationExtension2(struct soap *soap, tt__NetworkZeroConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkZeroConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (309)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfigurationExtension(struct soap*, const char*, int, const tt__NetworkZeroConfigurationExtension *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_in_tt__NetworkZeroConfigurationExtension(struct soap*, const char*, tt__NetworkZeroConfigurationExtension *, const char*);

#ifndef soap_write_tt__NetworkZeroConfigurationExtension
#define soap_write_tt__NetworkZeroConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkZeroConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkZeroConfigurationExtension * SOAP_FMAC4 soap_get_tt__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__NetworkZeroConfigurationExtension
#define soap_read_tt__NetworkZeroConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkZeroConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkZeroConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfigurationExtension * soap_new_tt__NetworkZeroConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkZeroConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__NetworkZeroConfigurationExtension * soap_new_req_tt__NetworkZeroConfigurationExtension(struct soap *soap) { tt__NetworkZeroConfigurationExtension *_p = soap_instantiate_tt__NetworkZeroConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkZeroConfigurationExtension * soap_new_set_tt__NetworkZeroConfigurationExtension(struct soap *soap, std::vector<char * >& __any, std::vector<tt__NetworkZeroConfiguration * >& Additional, tt__NetworkZeroConfigurationExtension2 *Extension, char *__item1) { tt__NetworkZeroConfigurationExtension *_p = soap_instantiate_tt__NetworkZeroConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkZeroConfigurationExtension::__any = __any; _p->tt__NetworkZeroConfigurationExtension::Additional = Additional; _p->tt__NetworkZeroConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkZeroConfigurationExtension(struct soap *soap, tt__NetworkZeroConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkZeroConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (308)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkZeroConfiguration(struct soap*, const char*, int, const tt__NetworkZeroConfiguration *, const char*);
SOAP_FMAC3 tt__NetworkZeroConfiguration * SOAP_FMAC4 soap_in_tt__NetworkZeroConfiguration(struct soap*, const char*, tt__NetworkZeroConfiguration *, const char*);

#ifndef soap_write_tt__NetworkZeroConfiguration
#define soap_write_tt__NetworkZeroConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkZeroConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkZeroConfiguration * SOAP_FMAC4 soap_get_tt__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *, const char*, const char*);

#ifndef soap_read_tt__NetworkZeroConfiguration
#define soap_read_tt__NetworkZeroConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkZeroConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkZeroConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkZeroConfiguration * soap_new_tt__NetworkZeroConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__NetworkZeroConfiguration * soap_new_req_tt__NetworkZeroConfiguration(struct soap *soap, std::string& InterfaceToken, bool Enabled) { tt__NetworkZeroConfiguration *_p = soap_instantiate_tt__NetworkZeroConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkZeroConfiguration::InterfaceToken = InterfaceToken; _p->tt__NetworkZeroConfiguration::Enabled = Enabled; } return _p; }

inline tt__NetworkZeroConfiguration * soap_new_set_tt__NetworkZeroConfiguration(struct soap *soap, std::string& InterfaceToken, bool Enabled, std::vector<std::string >& Addresses, tt__NetworkZeroConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__NetworkZeroConfiguration *_p = soap_instantiate_tt__NetworkZeroConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkZeroConfiguration::InterfaceToken = InterfaceToken; _p->tt__NetworkZeroConfiguration::Enabled = Enabled; _p->tt__NetworkZeroConfiguration::Addresses = Addresses; _p->tt__NetworkZeroConfiguration::Extension = Extension; _p->tt__NetworkZeroConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkZeroConfiguration(struct soap *soap, tt__NetworkZeroConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkZeroConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (307)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkGateway(struct soap*, const char*, int, const tt__NetworkGateway *, const char*);
SOAP_FMAC3 tt__NetworkGateway * SOAP_FMAC4 soap_in_tt__NetworkGateway(struct soap*, const char*, tt__NetworkGateway *, const char*);

#ifndef soap_write_tt__NetworkGateway
#define soap_write_tt__NetworkGateway(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkGateway", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkGateway * SOAP_FMAC4 soap_get_tt__NetworkGateway(struct soap*, tt__NetworkGateway *, const char*, const char*);

#ifndef soap_read_tt__NetworkGateway
#define soap_read_tt__NetworkGateway(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkGateway(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkGateway * SOAP_FMAC2 soap_instantiate_tt__NetworkGateway(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkGateway * soap_new_tt__NetworkGateway(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkGateway(soap, n, NULL, NULL, NULL); }

inline tt__NetworkGateway * soap_new_req_tt__NetworkGateway(struct soap *soap) { tt__NetworkGateway *_p = soap_instantiate_tt__NetworkGateway(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkGateway * soap_new_set_tt__NetworkGateway(struct soap *soap, std::vector<std::string >& IPv4Address, std::vector<std::string >& IPv6Address, char *__item1) { tt__NetworkGateway *_p = soap_instantiate_tt__NetworkGateway(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkGateway::IPv4Address = IPv4Address; _p->tt__NetworkGateway::IPv6Address = IPv6Address; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkGateway(struct soap *soap, tt__NetworkGateway *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkGateway(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (306)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__IPv4NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv4NetworkInterfaceSetConfiguration *, const char*);

#ifndef soap_write_tt__IPv4NetworkInterfaceSetConfiguration
#define soap_write_tt__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv4NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *, const char*, const char*);

#ifndef soap_read_tt__IPv4NetworkInterfaceSetConfiguration
#define soap_read_tt__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv4NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv4NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_req_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap) { tt__IPv4NetworkInterfaceSetConfiguration *_p = soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IPv4NetworkInterfaceSetConfiguration * soap_new_set_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, bool *Enabled, std::vector<tt__PrefixedIPv4Address * >& Manual, bool *DHCP, char *__item1) { tt__IPv4NetworkInterfaceSetConfiguration *_p = soap_instantiate_tt__IPv4NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4NetworkInterfaceSetConfiguration::Enabled = Enabled; _p->tt__IPv4NetworkInterfaceSetConfiguration::Manual = Manual; _p->tt__IPv4NetworkInterfaceSetConfiguration::DHCP = DHCP; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv4NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv4NetworkInterfaceSetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv4NetworkInterfaceSetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (305)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__IPv6NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv6NetworkInterfaceSetConfiguration *, const char*);

#ifndef soap_write_tt__IPv6NetworkInterfaceSetConfiguration
#define soap_write_tt__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv6NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *, const char*, const char*);

#ifndef soap_read_tt__IPv6NetworkInterfaceSetConfiguration
#define soap_read_tt__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv6NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_req_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap) { tt__IPv6NetworkInterfaceSetConfiguration *_p = soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IPv6NetworkInterfaceSetConfiguration * soap_new_set_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, bool *Enabled, bool *AcceptRouterAdvert, std::vector<tt__PrefixedIPv6Address * >& Manual, enum tt__IPv6DHCPConfiguration *DHCP, char *__item1) { tt__IPv6NetworkInterfaceSetConfiguration *_p = soap_instantiate_tt__IPv6NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6NetworkInterfaceSetConfiguration::Enabled = Enabled; _p->tt__IPv6NetworkInterfaceSetConfiguration::AcceptRouterAdvert = AcceptRouterAdvert; _p->tt__IPv6NetworkInterfaceSetConfiguration::Manual = Manual; _p->tt__IPv6NetworkInterfaceSetConfiguration::DHCP = DHCP; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv6NetworkInterfaceSetConfiguration(struct soap *soap, tt__IPv6NetworkInterfaceSetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv6NetworkInterfaceSetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (304)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfigurationExtension *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension *, const char*);

#ifndef soap_write_tt__NetworkInterfaceSetConfigurationExtension
#define soap_write_tt__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceSetConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceSetConfigurationExtension
#define soap_read_tt__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceSetConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceSetConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_req_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap) { tt__NetworkInterfaceSetConfigurationExtension *_p = soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkInterfaceSetConfigurationExtension * soap_new_set_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, std::vector<char * >& __any, std::vector<tt__Dot3Configuration * >& Dot3, std::vector<tt__Dot11Configuration * >& Dot11, tt__NetworkInterfaceSetConfigurationExtension2 *Extension, char *__item1) { tt__NetworkInterfaceSetConfigurationExtension *_p = soap_instantiate_tt__NetworkInterfaceSetConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceSetConfigurationExtension::__any = __any; _p->tt__NetworkInterfaceSetConfigurationExtension::Dot3 = Dot3; _p->tt__NetworkInterfaceSetConfigurationExtension::Dot11 = Dot11; _p->tt__NetworkInterfaceSetConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceSetConfigurationExtension(struct soap *soap, tt__NetworkInterfaceSetConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceSetConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (303)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceSetConfiguration(struct soap*, const char*, int, const tt__NetworkInterfaceSetConfiguration *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_in_tt__NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__NetworkInterfaceSetConfiguration *, const char*);

#ifndef soap_write_tt__NetworkInterfaceSetConfiguration
#define soap_write_tt__NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC4 soap_get_tt__NetworkInterfaceSetConfiguration(struct soap*, tt__NetworkInterfaceSetConfiguration *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceSetConfiguration
#define soap_read_tt__NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceSetConfiguration * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceSetConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceSetConfiguration * soap_new_tt__NetworkInterfaceSetConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceSetConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceSetConfiguration * soap_new_req_tt__NetworkInterfaceSetConfiguration(struct soap *soap) { tt__NetworkInterfaceSetConfiguration *_p = soap_instantiate_tt__NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkInterfaceSetConfiguration * soap_new_set_tt__NetworkInterfaceSetConfiguration(struct soap *soap, bool *Enabled, tt__NetworkInterfaceConnectionSetting *Link, int *MTU, tt__IPv4NetworkInterfaceSetConfiguration *IPv4, tt__IPv6NetworkInterfaceSetConfiguration *IPv6, tt__NetworkInterfaceSetConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__NetworkInterfaceSetConfiguration *_p = soap_instantiate_tt__NetworkInterfaceSetConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceSetConfiguration::Enabled = Enabled; _p->tt__NetworkInterfaceSetConfiguration::Link = Link; _p->tt__NetworkInterfaceSetConfiguration::MTU = MTU; _p->tt__NetworkInterfaceSetConfiguration::IPv4 = IPv4; _p->tt__NetworkInterfaceSetConfiguration::IPv6 = IPv6; _p->tt__NetworkInterfaceSetConfiguration::Extension = Extension; _p->tt__NetworkInterfaceSetConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceSetConfiguration(struct soap *soap, tt__NetworkInterfaceSetConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceSetConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (302)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSInformationExtension(struct soap*, const char*, int, const tt__DynamicDNSInformationExtension *, const char*);
SOAP_FMAC3 tt__DynamicDNSInformationExtension * SOAP_FMAC4 soap_in_tt__DynamicDNSInformationExtension(struct soap*, const char*, tt__DynamicDNSInformationExtension *, const char*);

#ifndef soap_write_tt__DynamicDNSInformationExtension
#define soap_write_tt__DynamicDNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DynamicDNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DynamicDNSInformationExtension * SOAP_FMAC4 soap_get_tt__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *, const char*, const char*);

#ifndef soap_read_tt__DynamicDNSInformationExtension
#define soap_read_tt__DynamicDNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DynamicDNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DynamicDNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSInformationExtension * soap_new_tt__DynamicDNSInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__DynamicDNSInformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__DynamicDNSInformationExtension * soap_new_req_tt__DynamicDNSInformationExtension(struct soap *soap) { tt__DynamicDNSInformationExtension *_p = soap_instantiate_tt__DynamicDNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__DynamicDNSInformationExtension * soap_new_set_tt__DynamicDNSInformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__DynamicDNSInformationExtension *_p = soap_instantiate_tt__DynamicDNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DynamicDNSInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DynamicDNSInformationExtension(struct soap *soap, tt__DynamicDNSInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DynamicDNSInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (301)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DynamicDNSInformation(struct soap*, const char*, int, const tt__DynamicDNSInformation *, const char*);
SOAP_FMAC3 tt__DynamicDNSInformation * SOAP_FMAC4 soap_in_tt__DynamicDNSInformation(struct soap*, const char*, tt__DynamicDNSInformation *, const char*);

#ifndef soap_write_tt__DynamicDNSInformation
#define soap_write_tt__DynamicDNSInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DynamicDNSInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DynamicDNSInformation * SOAP_FMAC4 soap_get_tt__DynamicDNSInformation(struct soap*, tt__DynamicDNSInformation *, const char*, const char*);

#ifndef soap_read_tt__DynamicDNSInformation
#define soap_read_tt__DynamicDNSInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DynamicDNSInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DynamicDNSInformation * SOAP_FMAC2 soap_instantiate_tt__DynamicDNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__DynamicDNSInformation * soap_new_tt__DynamicDNSInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__DynamicDNSInformation(soap, n, NULL, NULL, NULL); }

inline tt__DynamicDNSInformation * soap_new_req_tt__DynamicDNSInformation(struct soap *soap, enum tt__DynamicDNSType Type) { tt__DynamicDNSInformation *_p = soap_instantiate_tt__DynamicDNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DynamicDNSInformation::Type = Type; } return _p; }

inline tt__DynamicDNSInformation * soap_new_set_tt__DynamicDNSInformation(struct soap *soap, enum tt__DynamicDNSType Type, std::string *Name, LONG64 *TTL, tt__DynamicDNSInformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__DynamicDNSInformation *_p = soap_instantiate_tt__DynamicDNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DynamicDNSInformation::Type = Type; _p->tt__DynamicDNSInformation::Name = Name; _p->tt__DynamicDNSInformation::TTL = TTL; _p->tt__DynamicDNSInformation::Extension = Extension; _p->tt__DynamicDNSInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DynamicDNSInformation(struct soap *soap, tt__DynamicDNSInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DynamicDNSInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (300)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NTPInformationExtension(struct soap*, const char*, int, const tt__NTPInformationExtension *, const char*);
SOAP_FMAC3 tt__NTPInformationExtension * SOAP_FMAC4 soap_in_tt__NTPInformationExtension(struct soap*, const char*, tt__NTPInformationExtension *, const char*);

#ifndef soap_write_tt__NTPInformationExtension
#define soap_write_tt__NTPInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NTPInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NTPInformationExtension * SOAP_FMAC4 soap_get_tt__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *, const char*, const char*);

#ifndef soap_read_tt__NTPInformationExtension
#define soap_read_tt__NTPInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NTPInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NTPInformationExtension * SOAP_FMAC2 soap_instantiate_tt__NTPInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NTPInformationExtension * soap_new_tt__NTPInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NTPInformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__NTPInformationExtension * soap_new_req_tt__NTPInformationExtension(struct soap *soap) { tt__NTPInformationExtension *_p = soap_instantiate_tt__NTPInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NTPInformationExtension * soap_new_set_tt__NTPInformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NTPInformationExtension *_p = soap_instantiate_tt__NTPInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NTPInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NTPInformationExtension(struct soap *soap, tt__NTPInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NTPInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (299)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NTPInformation(struct soap*, const char*, int, const tt__NTPInformation *, const char*);
SOAP_FMAC3 tt__NTPInformation * SOAP_FMAC4 soap_in_tt__NTPInformation(struct soap*, const char*, tt__NTPInformation *, const char*);

#ifndef soap_write_tt__NTPInformation
#define soap_write_tt__NTPInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NTPInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NTPInformation * SOAP_FMAC4 soap_get_tt__NTPInformation(struct soap*, tt__NTPInformation *, const char*, const char*);

#ifndef soap_read_tt__NTPInformation
#define soap_read_tt__NTPInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NTPInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NTPInformation * SOAP_FMAC2 soap_instantiate_tt__NTPInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__NTPInformation * soap_new_tt__NTPInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__NTPInformation(soap, n, NULL, NULL, NULL); }

inline tt__NTPInformation * soap_new_req_tt__NTPInformation(struct soap *soap, bool FromDHCP) { tt__NTPInformation *_p = soap_instantiate_tt__NTPInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NTPInformation::FromDHCP = FromDHCP; } return _p; }

inline tt__NTPInformation * soap_new_set_tt__NTPInformation(struct soap *soap, bool FromDHCP, std::vector<tt__NetworkHost * >& NTPFromDHCP, std::vector<tt__NetworkHost * >& NTPManual, tt__NTPInformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__NTPInformation *_p = soap_instantiate_tt__NTPInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NTPInformation::FromDHCP = FromDHCP; _p->tt__NTPInformation::NTPFromDHCP = NTPFromDHCP; _p->tt__NTPInformation::NTPManual = NTPManual; _p->tt__NTPInformation::Extension = Extension; _p->tt__NTPInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NTPInformation(struct soap *soap, tt__NTPInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NTPInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (298)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSInformationExtension(struct soap*, const char*, int, const tt__DNSInformationExtension *, const char*);
SOAP_FMAC3 tt__DNSInformationExtension * SOAP_FMAC4 soap_in_tt__DNSInformationExtension(struct soap*, const char*, tt__DNSInformationExtension *, const char*);

#ifndef soap_write_tt__DNSInformationExtension
#define soap_write_tt__DNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DNSInformationExtension * SOAP_FMAC4 soap_get_tt__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *, const char*, const char*);

#ifndef soap_read_tt__DNSInformationExtension
#define soap_read_tt__DNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DNSInformationExtension * SOAP_FMAC2 soap_instantiate_tt__DNSInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSInformationExtension * soap_new_tt__DNSInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__DNSInformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__DNSInformationExtension * soap_new_req_tt__DNSInformationExtension(struct soap *soap) { tt__DNSInformationExtension *_p = soap_instantiate_tt__DNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__DNSInformationExtension * soap_new_set_tt__DNSInformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__DNSInformationExtension *_p = soap_instantiate_tt__DNSInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DNSInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DNSInformationExtension(struct soap *soap, tt__DNSInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DNSInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (297)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DNSInformation(struct soap*, const char*, int, const tt__DNSInformation *, const char*);
SOAP_FMAC3 tt__DNSInformation * SOAP_FMAC4 soap_in_tt__DNSInformation(struct soap*, const char*, tt__DNSInformation *, const char*);

#ifndef soap_write_tt__DNSInformation
#define soap_write_tt__DNSInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DNSInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DNSInformation * SOAP_FMAC4 soap_get_tt__DNSInformation(struct soap*, tt__DNSInformation *, const char*, const char*);

#ifndef soap_read_tt__DNSInformation
#define soap_read_tt__DNSInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DNSInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DNSInformation * SOAP_FMAC2 soap_instantiate_tt__DNSInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__DNSInformation * soap_new_tt__DNSInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__DNSInformation(soap, n, NULL, NULL, NULL); }

inline tt__DNSInformation * soap_new_req_tt__DNSInformation(struct soap *soap, bool FromDHCP) { tt__DNSInformation *_p = soap_instantiate_tt__DNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DNSInformation::FromDHCP = FromDHCP; } return _p; }

inline tt__DNSInformation * soap_new_set_tt__DNSInformation(struct soap *soap, bool FromDHCP, std::vector<std::string >& SearchDomain, std::vector<tt__IPAddress * >& DNSFromDHCP, std::vector<tt__IPAddress * >& DNSManual, tt__DNSInformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__DNSInformation *_p = soap_instantiate_tt__DNSInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DNSInformation::FromDHCP = FromDHCP; _p->tt__DNSInformation::SearchDomain = SearchDomain; _p->tt__DNSInformation::DNSFromDHCP = DNSFromDHCP; _p->tt__DNSInformation::DNSManual = DNSManual; _p->tt__DNSInformation::Extension = Extension; _p->tt__DNSInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DNSInformation(struct soap *soap, tt__DNSInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DNSInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (296)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HostnameInformationExtension(struct soap*, const char*, int, const tt__HostnameInformationExtension *, const char*);
SOAP_FMAC3 tt__HostnameInformationExtension * SOAP_FMAC4 soap_in_tt__HostnameInformationExtension(struct soap*, const char*, tt__HostnameInformationExtension *, const char*);

#ifndef soap_write_tt__HostnameInformationExtension
#define soap_write_tt__HostnameInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:HostnameInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__HostnameInformationExtension * SOAP_FMAC4 soap_get_tt__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *, const char*, const char*);

#ifndef soap_read_tt__HostnameInformationExtension
#define soap_read_tt__HostnameInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__HostnameInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__HostnameInformationExtension * SOAP_FMAC2 soap_instantiate_tt__HostnameInformationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__HostnameInformationExtension * soap_new_tt__HostnameInformationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__HostnameInformationExtension(soap, n, NULL, NULL, NULL); }

inline tt__HostnameInformationExtension * soap_new_req_tt__HostnameInformationExtension(struct soap *soap) { tt__HostnameInformationExtension *_p = soap_instantiate_tt__HostnameInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__HostnameInformationExtension * soap_new_set_tt__HostnameInformationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__HostnameInformationExtension *_p = soap_instantiate_tt__HostnameInformationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__HostnameInformationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__HostnameInformationExtension(struct soap *soap, tt__HostnameInformationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__HostnameInformationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (295)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__HostnameInformation(struct soap*, const char*, int, const tt__HostnameInformation *, const char*);
SOAP_FMAC3 tt__HostnameInformation * SOAP_FMAC4 soap_in_tt__HostnameInformation(struct soap*, const char*, tt__HostnameInformation *, const char*);

#ifndef soap_write_tt__HostnameInformation
#define soap_write_tt__HostnameInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:HostnameInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__HostnameInformation * SOAP_FMAC4 soap_get_tt__HostnameInformation(struct soap*, tt__HostnameInformation *, const char*, const char*);

#ifndef soap_read_tt__HostnameInformation
#define soap_read_tt__HostnameInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__HostnameInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__HostnameInformation * SOAP_FMAC2 soap_instantiate_tt__HostnameInformation(struct soap*, int, const char*, const char*, size_t*);

inline tt__HostnameInformation * soap_new_tt__HostnameInformation(struct soap *soap, int n = -1) { return soap_instantiate_tt__HostnameInformation(soap, n, NULL, NULL, NULL); }

inline tt__HostnameInformation * soap_new_req_tt__HostnameInformation(struct soap *soap, bool FromDHCP) { tt__HostnameInformation *_p = soap_instantiate_tt__HostnameInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__HostnameInformation::FromDHCP = FromDHCP; } return _p; }

inline tt__HostnameInformation * soap_new_set_tt__HostnameInformation(struct soap *soap, bool FromDHCP, std::string *Name, tt__HostnameInformationExtension *Extension, char *__anyAttribute, char *__item1) { tt__HostnameInformation *_p = soap_instantiate_tt__HostnameInformation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__HostnameInformation::FromDHCP = FromDHCP; _p->tt__HostnameInformation::Name = Name; _p->tt__HostnameInformation::Extension = Extension; _p->tt__HostnameInformation::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__HostnameInformation(struct soap *soap, tt__HostnameInformation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__HostnameInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (294)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PrefixedIPv6Address(struct soap*, const char*, int, const tt__PrefixedIPv6Address *, const char*);
SOAP_FMAC3 tt__PrefixedIPv6Address * SOAP_FMAC4 soap_in_tt__PrefixedIPv6Address(struct soap*, const char*, tt__PrefixedIPv6Address *, const char*);

#ifndef soap_write_tt__PrefixedIPv6Address
#define soap_write_tt__PrefixedIPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PrefixedIPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PrefixedIPv6Address * SOAP_FMAC4 soap_get_tt__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *, const char*, const char*);

#ifndef soap_read_tt__PrefixedIPv6Address
#define soap_read_tt__PrefixedIPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PrefixedIPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PrefixedIPv6Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline tt__PrefixedIPv6Address * soap_new_tt__PrefixedIPv6Address(struct soap *soap, int n = -1) { return soap_instantiate_tt__PrefixedIPv6Address(soap, n, NULL, NULL, NULL); }

inline tt__PrefixedIPv6Address * soap_new_req_tt__PrefixedIPv6Address(struct soap *soap, std::string& Address, int PrefixLength) { tt__PrefixedIPv6Address *_p = soap_instantiate_tt__PrefixedIPv6Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PrefixedIPv6Address::Address = Address; _p->tt__PrefixedIPv6Address::PrefixLength = PrefixLength; } return _p; }

inline tt__PrefixedIPv6Address * soap_new_set_tt__PrefixedIPv6Address(struct soap *soap, std::string& Address, int PrefixLength, char *__item1) { tt__PrefixedIPv6Address *_p = soap_instantiate_tt__PrefixedIPv6Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PrefixedIPv6Address::Address = Address; _p->tt__PrefixedIPv6Address::PrefixLength = PrefixLength; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PrefixedIPv6Address(struct soap *soap, tt__PrefixedIPv6Address *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PrefixedIPv6Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (293)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PrefixedIPv4Address(struct soap*, const char*, int, const tt__PrefixedIPv4Address *, const char*);
SOAP_FMAC3 tt__PrefixedIPv4Address * SOAP_FMAC4 soap_in_tt__PrefixedIPv4Address(struct soap*, const char*, tt__PrefixedIPv4Address *, const char*);

#ifndef soap_write_tt__PrefixedIPv4Address
#define soap_write_tt__PrefixedIPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PrefixedIPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PrefixedIPv4Address * SOAP_FMAC4 soap_get_tt__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *, const char*, const char*);

#ifndef soap_read_tt__PrefixedIPv4Address
#define soap_read_tt__PrefixedIPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PrefixedIPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PrefixedIPv4Address * SOAP_FMAC2 soap_instantiate_tt__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline tt__PrefixedIPv4Address * soap_new_tt__PrefixedIPv4Address(struct soap *soap, int n = -1) { return soap_instantiate_tt__PrefixedIPv4Address(soap, n, NULL, NULL, NULL); }

inline tt__PrefixedIPv4Address * soap_new_req_tt__PrefixedIPv4Address(struct soap *soap, std::string& Address, int PrefixLength) { tt__PrefixedIPv4Address *_p = soap_instantiate_tt__PrefixedIPv4Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PrefixedIPv4Address::Address = Address; _p->tt__PrefixedIPv4Address::PrefixLength = PrefixLength; } return _p; }

inline tt__PrefixedIPv4Address * soap_new_set_tt__PrefixedIPv4Address(struct soap *soap, std::string& Address, int PrefixLength, char *__item1) { tt__PrefixedIPv4Address *_p = soap_instantiate_tt__PrefixedIPv4Address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PrefixedIPv4Address::Address = Address; _p->tt__PrefixedIPv4Address::PrefixLength = PrefixLength; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PrefixedIPv4Address(struct soap *soap, tt__PrefixedIPv4Address *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PrefixedIPv4Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (292)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPAddress(struct soap*, const char*, int, const tt__IPAddress *, const char*);
SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_in_tt__IPAddress(struct soap*, const char*, tt__IPAddress *, const char*);

#ifndef soap_write_tt__IPAddress
#define soap_write_tt__IPAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPAddress * SOAP_FMAC4 soap_get_tt__IPAddress(struct soap*, tt__IPAddress *, const char*, const char*);

#ifndef soap_read_tt__IPAddress
#define soap_read_tt__IPAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPAddress * SOAP_FMAC2 soap_instantiate_tt__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPAddress * soap_new_tt__IPAddress(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPAddress(soap, n, NULL, NULL, NULL); }

inline tt__IPAddress * soap_new_req_tt__IPAddress(struct soap *soap, enum tt__IPType Type) { tt__IPAddress *_p = soap_instantiate_tt__IPAddress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddress::Type = Type; } return _p; }

inline tt__IPAddress * soap_new_set_tt__IPAddress(struct soap *soap, enum tt__IPType Type, std::string *IPv4Address, std::string *IPv6Address, char *__item1) { tt__IPAddress *_p = soap_instantiate_tt__IPAddress(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPAddress::Type = Type; _p->tt__IPAddress::IPv4Address = IPv4Address; _p->tt__IPAddress::IPv6Address = IPv6Address; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPAddress(struct soap *soap, tt__IPAddress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPAddress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (291)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHostExtension(struct soap*, const char*, int, const tt__NetworkHostExtension *, const char*);
SOAP_FMAC3 tt__NetworkHostExtension * SOAP_FMAC4 soap_in_tt__NetworkHostExtension(struct soap*, const char*, tt__NetworkHostExtension *, const char*);

#ifndef soap_write_tt__NetworkHostExtension
#define soap_write_tt__NetworkHostExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkHostExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkHostExtension * SOAP_FMAC4 soap_get_tt__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *, const char*, const char*);

#ifndef soap_read_tt__NetworkHostExtension
#define soap_read_tt__NetworkHostExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkHostExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkHostExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkHostExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHostExtension * soap_new_tt__NetworkHostExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkHostExtension(soap, n, NULL, NULL, NULL); }

inline tt__NetworkHostExtension * soap_new_req_tt__NetworkHostExtension(struct soap *soap) { tt__NetworkHostExtension *_p = soap_instantiate_tt__NetworkHostExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkHostExtension * soap_new_set_tt__NetworkHostExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NetworkHostExtension *_p = soap_instantiate_tt__NetworkHostExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkHostExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkHostExtension(struct soap *soap, tt__NetworkHostExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkHostExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (290)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkHost(struct soap*, const char*, int, const tt__NetworkHost *, const char*);
SOAP_FMAC3 tt__NetworkHost * SOAP_FMAC4 soap_in_tt__NetworkHost(struct soap*, const char*, tt__NetworkHost *, const char*);

#ifndef soap_write_tt__NetworkHost
#define soap_write_tt__NetworkHost(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkHost", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkHost * SOAP_FMAC4 soap_get_tt__NetworkHost(struct soap*, tt__NetworkHost *, const char*, const char*);

#ifndef soap_read_tt__NetworkHost
#define soap_read_tt__NetworkHost(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkHost(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkHost * SOAP_FMAC2 soap_instantiate_tt__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkHost * soap_new_tt__NetworkHost(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkHost(soap, n, NULL, NULL, NULL); }

inline tt__NetworkHost * soap_new_req_tt__NetworkHost(struct soap *soap, enum tt__NetworkHostType Type) { tt__NetworkHost *_p = soap_instantiate_tt__NetworkHost(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkHost::Type = Type; } return _p; }

inline tt__NetworkHost * soap_new_set_tt__NetworkHost(struct soap *soap, enum tt__NetworkHostType Type, std::string *IPv4Address, std::string *IPv6Address, std::string *DNSname, tt__NetworkHostExtension *Extension, char *__anyAttribute, char *__item1) { tt__NetworkHost *_p = soap_instantiate_tt__NetworkHost(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkHost::Type = Type; _p->tt__NetworkHost::IPv4Address = IPv4Address; _p->tt__NetworkHost::IPv6Address = IPv6Address; _p->tt__NetworkHost::DNSname = DNSname; _p->tt__NetworkHost::Extension = Extension; _p->tt__NetworkHost::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkHost(struct soap *soap, tt__NetworkHost *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkHost(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (289)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocolExtension(struct soap*, const char*, int, const tt__NetworkProtocolExtension *, const char*);
SOAP_FMAC3 tt__NetworkProtocolExtension * SOAP_FMAC4 soap_in_tt__NetworkProtocolExtension(struct soap*, const char*, tt__NetworkProtocolExtension *, const char*);

#ifndef soap_write_tt__NetworkProtocolExtension
#define soap_write_tt__NetworkProtocolExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkProtocolExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkProtocolExtension * SOAP_FMAC4 soap_get_tt__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *, const char*, const char*);

#ifndef soap_read_tt__NetworkProtocolExtension
#define soap_read_tt__NetworkProtocolExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkProtocolExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkProtocolExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocolExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocolExtension * soap_new_tt__NetworkProtocolExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkProtocolExtension(soap, n, NULL, NULL, NULL); }

inline tt__NetworkProtocolExtension * soap_new_req_tt__NetworkProtocolExtension(struct soap *soap) { tt__NetworkProtocolExtension *_p = soap_instantiate_tt__NetworkProtocolExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkProtocolExtension * soap_new_set_tt__NetworkProtocolExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NetworkProtocolExtension *_p = soap_instantiate_tt__NetworkProtocolExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkProtocolExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkProtocolExtension(struct soap *soap, tt__NetworkProtocolExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkProtocolExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (288)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkProtocol(struct soap*, const char*, int, const tt__NetworkProtocol *, const char*);
SOAP_FMAC3 tt__NetworkProtocol * SOAP_FMAC4 soap_in_tt__NetworkProtocol(struct soap*, const char*, tt__NetworkProtocol *, const char*);

#ifndef soap_write_tt__NetworkProtocol
#define soap_write_tt__NetworkProtocol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkProtocol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkProtocol * SOAP_FMAC4 soap_get_tt__NetworkProtocol(struct soap*, tt__NetworkProtocol *, const char*, const char*);

#ifndef soap_read_tt__NetworkProtocol
#define soap_read_tt__NetworkProtocol(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkProtocol(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkProtocol * SOAP_FMAC2 soap_instantiate_tt__NetworkProtocol(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkProtocol * soap_new_tt__NetworkProtocol(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkProtocol(soap, n, NULL, NULL, NULL); }

inline tt__NetworkProtocol * soap_new_req_tt__NetworkProtocol(struct soap *soap, enum tt__NetworkProtocolType Name, bool Enabled, std::vector<int >& Port) { tt__NetworkProtocol *_p = soap_instantiate_tt__NetworkProtocol(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkProtocol::Name = Name; _p->tt__NetworkProtocol::Enabled = Enabled; _p->tt__NetworkProtocol::Port = Port; } return _p; }

inline tt__NetworkProtocol * soap_new_set_tt__NetworkProtocol(struct soap *soap, enum tt__NetworkProtocolType Name, bool Enabled, std::vector<int >& Port, tt__NetworkProtocolExtension *Extension, char *__anyAttribute, char *__item1) { tt__NetworkProtocol *_p = soap_instantiate_tt__NetworkProtocol(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkProtocol::Name = Name; _p->tt__NetworkProtocol::Enabled = Enabled; _p->tt__NetworkProtocol::Port = Port; _p->tt__NetworkProtocol::Extension = Extension; _p->tt__NetworkProtocol::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkProtocol(struct soap *soap, tt__NetworkProtocol *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkProtocol(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (287)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6ConfigurationExtension(struct soap*, const char*, int, const tt__IPv6ConfigurationExtension *, const char*);
SOAP_FMAC3 tt__IPv6ConfigurationExtension * SOAP_FMAC4 soap_in_tt__IPv6ConfigurationExtension(struct soap*, const char*, tt__IPv6ConfigurationExtension *, const char*);

#ifndef soap_write_tt__IPv6ConfigurationExtension
#define soap_write_tt__IPv6ConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv6ConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6ConfigurationExtension * SOAP_FMAC4 soap_get_tt__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__IPv6ConfigurationExtension
#define soap_read_tt__IPv6ConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6ConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv6ConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__IPv6ConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6ConfigurationExtension * soap_new_tt__IPv6ConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv6ConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__IPv6ConfigurationExtension * soap_new_req_tt__IPv6ConfigurationExtension(struct soap *soap) { tt__IPv6ConfigurationExtension *_p = soap_instantiate_tt__IPv6ConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IPv6ConfigurationExtension * soap_new_set_tt__IPv6ConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__IPv6ConfigurationExtension *_p = soap_instantiate_tt__IPv6ConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6ConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv6ConfigurationExtension(struct soap *soap, tt__IPv6ConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv6ConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (286)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6Configuration(struct soap*, const char*, int, const tt__IPv6Configuration *, const char*);
SOAP_FMAC3 tt__IPv6Configuration * SOAP_FMAC4 soap_in_tt__IPv6Configuration(struct soap*, const char*, tt__IPv6Configuration *, const char*);

#ifndef soap_write_tt__IPv6Configuration
#define soap_write_tt__IPv6Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv6Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6Configuration * SOAP_FMAC4 soap_get_tt__IPv6Configuration(struct soap*, tt__IPv6Configuration *, const char*, const char*);

#ifndef soap_read_tt__IPv6Configuration
#define soap_read_tt__IPv6Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv6Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv6Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6Configuration * soap_new_tt__IPv6Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv6Configuration(soap, n, NULL, NULL, NULL); }

inline tt__IPv6Configuration * soap_new_req_tt__IPv6Configuration(struct soap *soap, enum tt__IPv6DHCPConfiguration DHCP) { tt__IPv6Configuration *_p = soap_instantiate_tt__IPv6Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6Configuration::DHCP = DHCP; } return _p; }

inline tt__IPv6Configuration * soap_new_set_tt__IPv6Configuration(struct soap *soap, bool *AcceptRouterAdvert, enum tt__IPv6DHCPConfiguration DHCP, std::vector<tt__PrefixedIPv6Address * >& Manual, std::vector<tt__PrefixedIPv6Address * >& LinkLocal, std::vector<tt__PrefixedIPv6Address * >& FromDHCP, std::vector<tt__PrefixedIPv6Address * >& FromRA, tt__IPv6ConfigurationExtension *Extension, char *__anyAttribute, char *__item1) { tt__IPv6Configuration *_p = soap_instantiate_tt__IPv6Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6Configuration::AcceptRouterAdvert = AcceptRouterAdvert; _p->tt__IPv6Configuration::DHCP = DHCP; _p->tt__IPv6Configuration::Manual = Manual; _p->tt__IPv6Configuration::LinkLocal = LinkLocal; _p->tt__IPv6Configuration::FromDHCP = FromDHCP; _p->tt__IPv6Configuration::FromRA = FromRA; _p->tt__IPv6Configuration::Extension = Extension; _p->tt__IPv6Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv6Configuration(struct soap *soap, tt__IPv6Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv6Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (285)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4Configuration(struct soap*, const char*, int, const tt__IPv4Configuration *, const char*);
SOAP_FMAC3 tt__IPv4Configuration * SOAP_FMAC4 soap_in_tt__IPv4Configuration(struct soap*, const char*, tt__IPv4Configuration *, const char*);

#ifndef soap_write_tt__IPv4Configuration
#define soap_write_tt__IPv4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4Configuration * SOAP_FMAC4 soap_get_tt__IPv4Configuration(struct soap*, tt__IPv4Configuration *, const char*, const char*);

#ifndef soap_read_tt__IPv4Configuration
#define soap_read_tt__IPv4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv4Configuration * SOAP_FMAC2 soap_instantiate_tt__IPv4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4Configuration * soap_new_tt__IPv4Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv4Configuration(soap, n, NULL, NULL, NULL); }

inline tt__IPv4Configuration * soap_new_req_tt__IPv4Configuration(struct soap *soap, bool DHCP) { tt__IPv4Configuration *_p = soap_instantiate_tt__IPv4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4Configuration::DHCP = DHCP; } return _p; }

inline tt__IPv4Configuration * soap_new_set_tt__IPv4Configuration(struct soap *soap, std::vector<tt__PrefixedIPv4Address * >& Manual, tt__PrefixedIPv4Address *LinkLocal, tt__PrefixedIPv4Address *FromDHCP, bool DHCP, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__IPv4Configuration *_p = soap_instantiate_tt__IPv4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4Configuration::Manual = Manual; _p->tt__IPv4Configuration::LinkLocal = LinkLocal; _p->tt__IPv4Configuration::FromDHCP = FromDHCP; _p->tt__IPv4Configuration::DHCP = DHCP; _p->tt__IPv4Configuration::__any = __any; _p->tt__IPv4Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv4Configuration(struct soap *soap, tt__IPv4Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv4Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (284)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv4NetworkInterface(struct soap*, const char*, int, const tt__IPv4NetworkInterface *, const char*);
SOAP_FMAC3 tt__IPv4NetworkInterface * SOAP_FMAC4 soap_in_tt__IPv4NetworkInterface(struct soap*, const char*, tt__IPv4NetworkInterface *, const char*);

#ifndef soap_write_tt__IPv4NetworkInterface
#define soap_write_tt__IPv4NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv4NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4NetworkInterface * SOAP_FMAC4 soap_get_tt__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *, const char*, const char*);

#ifndef soap_read_tt__IPv4NetworkInterface
#define soap_read_tt__IPv4NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv4NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv4NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv4NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv4NetworkInterface * soap_new_tt__IPv4NetworkInterface(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv4NetworkInterface(soap, n, NULL, NULL, NULL); }

inline tt__IPv4NetworkInterface * soap_new_req_tt__IPv4NetworkInterface(struct soap *soap, bool Enabled, tt__IPv4Configuration *Config) { tt__IPv4NetworkInterface *_p = soap_instantiate_tt__IPv4NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4NetworkInterface::Enabled = Enabled; _p->tt__IPv4NetworkInterface::Config = Config; } return _p; }

inline tt__IPv4NetworkInterface * soap_new_set_tt__IPv4NetworkInterface(struct soap *soap, bool Enabled, tt__IPv4Configuration *Config, char *__item1) { tt__IPv4NetworkInterface *_p = soap_instantiate_tt__IPv4NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv4NetworkInterface::Enabled = Enabled; _p->tt__IPv4NetworkInterface::Config = Config; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv4NetworkInterface(struct soap *soap, tt__IPv4NetworkInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv4NetworkInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (283)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IPv6NetworkInterface(struct soap*, const char*, int, const tt__IPv6NetworkInterface *, const char*);
SOAP_FMAC3 tt__IPv6NetworkInterface * SOAP_FMAC4 soap_in_tt__IPv6NetworkInterface(struct soap*, const char*, tt__IPv6NetworkInterface *, const char*);

#ifndef soap_write_tt__IPv6NetworkInterface
#define soap_write_tt__IPv6NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IPv6NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6NetworkInterface * SOAP_FMAC4 soap_get_tt__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *, const char*, const char*);

#ifndef soap_read_tt__IPv6NetworkInterface
#define soap_read_tt__IPv6NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IPv6NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IPv6NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__IPv6NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__IPv6NetworkInterface * soap_new_tt__IPv6NetworkInterface(struct soap *soap, int n = -1) { return soap_instantiate_tt__IPv6NetworkInterface(soap, n, NULL, NULL, NULL); }

inline tt__IPv6NetworkInterface * soap_new_req_tt__IPv6NetworkInterface(struct soap *soap, bool Enabled) { tt__IPv6NetworkInterface *_p = soap_instantiate_tt__IPv6NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6NetworkInterface::Enabled = Enabled; } return _p; }

inline tt__IPv6NetworkInterface * soap_new_set_tt__IPv6NetworkInterface(struct soap *soap, bool Enabled, tt__IPv6Configuration *Config, char *__item1) { tt__IPv6NetworkInterface *_p = soap_instantiate_tt__IPv6NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IPv6NetworkInterface::Enabled = Enabled; _p->tt__IPv6NetworkInterface::Config = Config; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IPv6NetworkInterface(struct soap *soap, tt__IPv6NetworkInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IPv6NetworkInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (282)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceInfo(struct soap*, const char*, int, const tt__NetworkInterfaceInfo *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceInfo * SOAP_FMAC4 soap_in_tt__NetworkInterfaceInfo(struct soap*, const char*, tt__NetworkInterfaceInfo *, const char*);

#ifndef soap_write_tt__NetworkInterfaceInfo
#define soap_write_tt__NetworkInterfaceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceInfo * SOAP_FMAC4 soap_get_tt__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceInfo
#define soap_read_tt__NetworkInterfaceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceInfo * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceInfo(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceInfo * soap_new_tt__NetworkInterfaceInfo(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceInfo(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceInfo * soap_new_req_tt__NetworkInterfaceInfo(struct soap *soap, std::string& HwAddress) { tt__NetworkInterfaceInfo *_p = soap_instantiate_tt__NetworkInterfaceInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceInfo::HwAddress = HwAddress; } return _p; }

inline tt__NetworkInterfaceInfo * soap_new_set_tt__NetworkInterfaceInfo(struct soap *soap, std::string *Name, std::string& HwAddress, int *MTU, char *__item1) { tt__NetworkInterfaceInfo *_p = soap_instantiate_tt__NetworkInterfaceInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceInfo::Name = Name; _p->tt__NetworkInterfaceInfo::HwAddress = HwAddress; _p->tt__NetworkInterfaceInfo::MTU = MTU; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceInfo(struct soap *soap, tt__NetworkInterfaceInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (281)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceConnectionSetting(struct soap*, const char*, int, const tt__NetworkInterfaceConnectionSetting *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_in_tt__NetworkInterfaceConnectionSetting(struct soap*, const char*, tt__NetworkInterfaceConnectionSetting *, const char*);

#ifndef soap_write_tt__NetworkInterfaceConnectionSetting
#define soap_write_tt__NetworkInterfaceConnectionSetting(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceConnectionSetting", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC4 soap_get_tt__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceConnectionSetting
#define soap_read_tt__NetworkInterfaceConnectionSetting(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceConnectionSetting(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceConnectionSetting * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceConnectionSetting(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceConnectionSetting * soap_new_tt__NetworkInterfaceConnectionSetting(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceConnectionSetting(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceConnectionSetting * soap_new_req_tt__NetworkInterfaceConnectionSetting(struct soap *soap, bool AutoNegotiation, int Speed, enum tt__Duplex Duplex) { tt__NetworkInterfaceConnectionSetting *_p = soap_instantiate_tt__NetworkInterfaceConnectionSetting(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation; _p->tt__NetworkInterfaceConnectionSetting::Speed = Speed; _p->tt__NetworkInterfaceConnectionSetting::Duplex = Duplex; } return _p; }

inline tt__NetworkInterfaceConnectionSetting * soap_new_set_tt__NetworkInterfaceConnectionSetting(struct soap *soap, bool AutoNegotiation, int Speed, enum tt__Duplex Duplex, char *__item1) { tt__NetworkInterfaceConnectionSetting *_p = soap_instantiate_tt__NetworkInterfaceConnectionSetting(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceConnectionSetting::AutoNegotiation = AutoNegotiation; _p->tt__NetworkInterfaceConnectionSetting::Speed = Speed; _p->tt__NetworkInterfaceConnectionSetting::Duplex = Duplex; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceConnectionSetting(struct soap *soap, tt__NetworkInterfaceConnectionSetting *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceConnectionSetting(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (280)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceLink(struct soap*, const char*, int, const tt__NetworkInterfaceLink *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceLink * SOAP_FMAC4 soap_in_tt__NetworkInterfaceLink(struct soap*, const char*, tt__NetworkInterfaceLink *, const char*);

#ifndef soap_write_tt__NetworkInterfaceLink
#define soap_write_tt__NetworkInterfaceLink(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceLink", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceLink * SOAP_FMAC4 soap_get_tt__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceLink
#define soap_read_tt__NetworkInterfaceLink(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceLink(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceLink * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceLink(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceLink * soap_new_tt__NetworkInterfaceLink(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceLink(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceLink * soap_new_req_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceConnectionSetting *AdminSettings, tt__NetworkInterfaceConnectionSetting *OperSettings, int InterfaceType) { tt__NetworkInterfaceLink *_p = soap_instantiate_tt__NetworkInterfaceLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceLink::AdminSettings = AdminSettings; _p->tt__NetworkInterfaceLink::OperSettings = OperSettings; _p->tt__NetworkInterfaceLink::InterfaceType = InterfaceType; } return _p; }

inline tt__NetworkInterfaceLink * soap_new_set_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceConnectionSetting *AdminSettings, tt__NetworkInterfaceConnectionSetting *OperSettings, int InterfaceType, char *__item1) { tt__NetworkInterfaceLink *_p = soap_instantiate_tt__NetworkInterfaceLink(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceLink::AdminSettings = AdminSettings; _p->tt__NetworkInterfaceLink::OperSettings = OperSettings; _p->tt__NetworkInterfaceLink::InterfaceType = InterfaceType; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceLink(struct soap *soap, tt__NetworkInterfaceLink *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceLink(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (279)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceExtension2(struct soap*, const char*, int, const tt__NetworkInterfaceExtension2 *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_in_tt__NetworkInterfaceExtension2(struct soap*, const char*, tt__NetworkInterfaceExtension2 *, const char*);

#ifndef soap_write_tt__NetworkInterfaceExtension2
#define soap_write_tt__NetworkInterfaceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceExtension2 * SOAP_FMAC4 soap_get_tt__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceExtension2
#define soap_read_tt__NetworkInterfaceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceExtension2 * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceExtension2 * soap_new_tt__NetworkInterfaceExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceExtension2(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceExtension2 * soap_new_req_tt__NetworkInterfaceExtension2(struct soap *soap) { tt__NetworkInterfaceExtension2 *_p = soap_instantiate_tt__NetworkInterfaceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__NetworkInterfaceExtension2 * soap_new_set_tt__NetworkInterfaceExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__NetworkInterfaceExtension2 *_p = soap_instantiate_tt__NetworkInterfaceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceExtension2(struct soap *soap, tt__NetworkInterfaceExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (278)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Dot3Configuration(struct soap*, const char*, int, const tt__Dot3Configuration *, const char*);
SOAP_FMAC3 tt__Dot3Configuration * SOAP_FMAC4 soap_in_tt__Dot3Configuration(struct soap*, const char*, tt__Dot3Configuration *, const char*);

#ifndef soap_write_tt__Dot3Configuration
#define soap_write_tt__Dot3Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Dot3Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot3Configuration * SOAP_FMAC4 soap_get_tt__Dot3Configuration(struct soap*, tt__Dot3Configuration *, const char*, const char*);

#ifndef soap_read_tt__Dot3Configuration
#define soap_read_tt__Dot3Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Dot3Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Dot3Configuration * SOAP_FMAC2 soap_instantiate_tt__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Dot3Configuration * soap_new_tt__Dot3Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__Dot3Configuration(soap, n, NULL, NULL, NULL); }

inline tt__Dot3Configuration * soap_new_req_tt__Dot3Configuration(struct soap *soap) { tt__Dot3Configuration *_p = soap_instantiate_tt__Dot3Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__Dot3Configuration * soap_new_set_tt__Dot3Configuration(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Dot3Configuration *_p = soap_instantiate_tt__Dot3Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Dot3Configuration::__any = __any; _p->tt__Dot3Configuration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Dot3Configuration(struct soap *soap, tt__Dot3Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Dot3Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (277)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterfaceExtension(struct soap*, const char*, int, const tt__NetworkInterfaceExtension *, const char*);
SOAP_FMAC3 tt__NetworkInterfaceExtension * SOAP_FMAC4 soap_in_tt__NetworkInterfaceExtension(struct soap*, const char*, tt__NetworkInterfaceExtension *, const char*);

#ifndef soap_write_tt__NetworkInterfaceExtension
#define soap_write_tt__NetworkInterfaceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterfaceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceExtension * SOAP_FMAC4 soap_get_tt__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterfaceExtension
#define soap_read_tt__NetworkInterfaceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterfaceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterfaceExtension * SOAP_FMAC2 soap_instantiate_tt__NetworkInterfaceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterfaceExtension * soap_new_tt__NetworkInterfaceExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterfaceExtension(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterfaceExtension * soap_new_req_tt__NetworkInterfaceExtension(struct soap *soap, int InterfaceType) { tt__NetworkInterfaceExtension *_p = soap_instantiate_tt__NetworkInterfaceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceExtension::InterfaceType = InterfaceType; } return _p; }

inline tt__NetworkInterfaceExtension * soap_new_set_tt__NetworkInterfaceExtension(struct soap *soap, std::vector<char * >& __any, int InterfaceType, std::vector<tt__Dot3Configuration * >& Dot3, std::vector<tt__Dot11Configuration * >& Dot11, tt__NetworkInterfaceExtension2 *Extension, char *__item1) { tt__NetworkInterfaceExtension *_p = soap_instantiate_tt__NetworkInterfaceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterfaceExtension::__any = __any; _p->tt__NetworkInterfaceExtension::InterfaceType = InterfaceType; _p->tt__NetworkInterfaceExtension::Dot3 = Dot3; _p->tt__NetworkInterfaceExtension::Dot11 = Dot11; _p->tt__NetworkInterfaceExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__NetworkInterfaceExtension(struct soap *soap, tt__NetworkInterfaceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterfaceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (276)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__NetworkInterface(struct soap*, const char*, int, const tt__NetworkInterface *, const char*);
SOAP_FMAC3 tt__NetworkInterface * SOAP_FMAC4 soap_in_tt__NetworkInterface(struct soap*, const char*, tt__NetworkInterface *, const char*);

#ifndef soap_write_tt__NetworkInterface
#define soap_write_tt__NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterface * SOAP_FMAC4 soap_get_tt__NetworkInterface(struct soap*, tt__NetworkInterface *, const char*, const char*);

#ifndef soap_read_tt__NetworkInterface
#define soap_read_tt__NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__NetworkInterface * SOAP_FMAC2 soap_instantiate_tt__NetworkInterface(struct soap*, int, const char*, const char*, size_t*);

inline tt__NetworkInterface * soap_new_tt__NetworkInterface(struct soap *soap, int n = -1) { return soap_instantiate_tt__NetworkInterface(soap, n, NULL, NULL, NULL); }

inline tt__NetworkInterface * soap_new_req_tt__NetworkInterface(struct soap *soap, bool Enabled, std::string& token1) { tt__NetworkInterface *_p = soap_instantiate_tt__NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterface::Enabled = Enabled; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__NetworkInterface * soap_new_set_tt__NetworkInterface(struct soap *soap, bool Enabled, tt__NetworkInterfaceInfo *Info, tt__NetworkInterfaceLink *Link, tt__IPv4NetworkInterface *IPv4, tt__IPv6NetworkInterface *IPv6, tt__NetworkInterfaceExtension *Extension, char *__anyAttribute, std::string& token1, char *__item2) { tt__NetworkInterface *_p = soap_instantiate_tt__NetworkInterface(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__NetworkInterface::Enabled = Enabled; _p->tt__NetworkInterface::Info = Info; _p->tt__NetworkInterface::Link = Link; _p->tt__NetworkInterface::IPv4 = IPv4; _p->tt__NetworkInterface::IPv6 = IPv6; _p->tt__NetworkInterface::Extension = Extension; _p->tt__NetworkInterface::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__NetworkInterface(struct soap *soap, tt__NetworkInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__NetworkInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (275)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Scope(struct soap*, const char*, int, const tt__Scope *, const char*);
SOAP_FMAC3 tt__Scope * SOAP_FMAC4 soap_in_tt__Scope(struct soap*, const char*, tt__Scope *, const char*);

#ifndef soap_write_tt__Scope
#define soap_write_tt__Scope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Scope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Scope * SOAP_FMAC4 soap_get_tt__Scope(struct soap*, tt__Scope *, const char*, const char*);

#ifndef soap_read_tt__Scope
#define soap_read_tt__Scope(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Scope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Scope * SOAP_FMAC2 soap_instantiate_tt__Scope(struct soap*, int, const char*, const char*, size_t*);

inline tt__Scope * soap_new_tt__Scope(struct soap *soap, int n = -1) { return soap_instantiate_tt__Scope(soap, n, NULL, NULL, NULL); }

inline tt__Scope * soap_new_req_tt__Scope(struct soap *soap, enum tt__ScopeDefinition ScopeDef, std::string& ScopeItem) { tt__Scope *_p = soap_instantiate_tt__Scope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Scope::ScopeDef = ScopeDef; _p->tt__Scope::ScopeItem = ScopeItem; } return _p; }

inline tt__Scope * soap_new_set_tt__Scope(struct soap *soap, enum tt__ScopeDefinition ScopeDef, std::string& ScopeItem, char *__item1) { tt__Scope *_p = soap_instantiate_tt__Scope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Scope::ScopeDef = ScopeDef; _p->tt__Scope::ScopeItem = ScopeItem; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Scope(struct soap *soap, tt__Scope *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Scope(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (274)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MediaUri(struct soap*, const char*, int, const tt__MediaUri *, const char*);
SOAP_FMAC3 tt__MediaUri * SOAP_FMAC4 soap_in_tt__MediaUri(struct soap*, const char*, tt__MediaUri *, const char*);

#ifndef soap_write_tt__MediaUri
#define soap_write_tt__MediaUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MediaUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MediaUri * SOAP_FMAC4 soap_get_tt__MediaUri(struct soap*, tt__MediaUri *, const char*, const char*);

#ifndef soap_read_tt__MediaUri
#define soap_read_tt__MediaUri(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MediaUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MediaUri * SOAP_FMAC2 soap_instantiate_tt__MediaUri(struct soap*, int, const char*, const char*, size_t*);

inline tt__MediaUri * soap_new_tt__MediaUri(struct soap *soap, int n = -1) { return soap_instantiate_tt__MediaUri(soap, n, NULL, NULL, NULL); }

inline tt__MediaUri * soap_new_req_tt__MediaUri(struct soap *soap, std::string& Uri, bool InvalidAfterConnect, bool InvalidAfterReboot, LONG64 Timeout) { tt__MediaUri *_p = soap_instantiate_tt__MediaUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaUri::Uri = Uri; _p->tt__MediaUri::InvalidAfterConnect = InvalidAfterConnect; _p->tt__MediaUri::InvalidAfterReboot = InvalidAfterReboot; _p->tt__MediaUri::Timeout = Timeout; } return _p; }

inline tt__MediaUri * soap_new_set_tt__MediaUri(struct soap *soap, std::string& Uri, bool InvalidAfterConnect, bool InvalidAfterReboot, LONG64 Timeout, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__MediaUri *_p = soap_instantiate_tt__MediaUri(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MediaUri::Uri = Uri; _p->tt__MediaUri::InvalidAfterConnect = InvalidAfterConnect; _p->tt__MediaUri::InvalidAfterReboot = InvalidAfterReboot; _p->tt__MediaUri::Timeout = Timeout; _p->tt__MediaUri::__any = __any; _p->tt__MediaUri::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MediaUri(struct soap *soap, tt__MediaUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MediaUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (273)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Transport(struct soap*, const char*, int, const tt__Transport *, const char*);
SOAP_FMAC3 tt__Transport * SOAP_FMAC4 soap_in_tt__Transport(struct soap*, const char*, tt__Transport *, const char*);

#ifndef soap_write_tt__Transport
#define soap_write_tt__Transport(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Transport", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Transport * SOAP_FMAC4 soap_get_tt__Transport(struct soap*, tt__Transport *, const char*, const char*);

#ifndef soap_read_tt__Transport
#define soap_read_tt__Transport(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Transport(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Transport * SOAP_FMAC2 soap_instantiate_tt__Transport(struct soap*, int, const char*, const char*, size_t*);

inline tt__Transport * soap_new_tt__Transport(struct soap *soap, int n = -1) { return soap_instantiate_tt__Transport(soap, n, NULL, NULL, NULL); }

inline tt__Transport * soap_new_req_tt__Transport(struct soap *soap, enum tt__TransportProtocol Protocol) { tt__Transport *_p = soap_instantiate_tt__Transport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Transport::Protocol = Protocol; } return _p; }

inline tt__Transport * soap_new_set_tt__Transport(struct soap *soap, enum tt__TransportProtocol Protocol, tt__Transport *Tunnel, char *__item1) { tt__Transport *_p = soap_instantiate_tt__Transport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Transport::Protocol = Protocol; _p->tt__Transport::Tunnel = Tunnel; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Transport(struct soap *soap, tt__Transport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Transport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (272)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__StreamSetup(struct soap*, const char*, int, const tt__StreamSetup *, const char*);
SOAP_FMAC3 tt__StreamSetup * SOAP_FMAC4 soap_in_tt__StreamSetup(struct soap*, const char*, tt__StreamSetup *, const char*);

#ifndef soap_write_tt__StreamSetup
#define soap_write_tt__StreamSetup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:StreamSetup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__StreamSetup * SOAP_FMAC4 soap_get_tt__StreamSetup(struct soap*, tt__StreamSetup *, const char*, const char*);

#ifndef soap_read_tt__StreamSetup
#define soap_read_tt__StreamSetup(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__StreamSetup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__StreamSetup * SOAP_FMAC2 soap_instantiate_tt__StreamSetup(struct soap*, int, const char*, const char*, size_t*);

inline tt__StreamSetup * soap_new_tt__StreamSetup(struct soap *soap, int n = -1) { return soap_instantiate_tt__StreamSetup(soap, n, NULL, NULL, NULL); }

inline tt__StreamSetup * soap_new_req_tt__StreamSetup(struct soap *soap, enum tt__StreamType Stream, tt__Transport *Transport) { tt__StreamSetup *_p = soap_instantiate_tt__StreamSetup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StreamSetup::Stream = Stream; _p->tt__StreamSetup::Transport = Transport; } return _p; }

inline tt__StreamSetup * soap_new_set_tt__StreamSetup(struct soap *soap, enum tt__StreamType Stream, tt__Transport *Transport, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__StreamSetup *_p = soap_instantiate_tt__StreamSetup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__StreamSetup::Stream = Stream; _p->tt__StreamSetup::Transport = Transport; _p->tt__StreamSetup::__any = __any; _p->tt__StreamSetup::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__StreamSetup(struct soap *soap, tt__StreamSetup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__StreamSetup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (271)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MulticastConfiguration(struct soap*, const char*, int, const tt__MulticastConfiguration *, const char*);
SOAP_FMAC3 tt__MulticastConfiguration * SOAP_FMAC4 soap_in_tt__MulticastConfiguration(struct soap*, const char*, tt__MulticastConfiguration *, const char*);

#ifndef soap_write_tt__MulticastConfiguration
#define soap_write_tt__MulticastConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MulticastConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MulticastConfiguration * SOAP_FMAC4 soap_get_tt__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *, const char*, const char*);

#ifndef soap_read_tt__MulticastConfiguration
#define soap_read_tt__MulticastConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MulticastConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MulticastConfiguration * SOAP_FMAC2 soap_instantiate_tt__MulticastConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MulticastConfiguration * soap_new_tt__MulticastConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__MulticastConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__MulticastConfiguration * soap_new_req_tt__MulticastConfiguration(struct soap *soap, tt__IPAddress *Address, int Port, int TTL, bool AutoStart) { tt__MulticastConfiguration *_p = soap_instantiate_tt__MulticastConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MulticastConfiguration::Address = Address; _p->tt__MulticastConfiguration::Port = Port; _p->tt__MulticastConfiguration::TTL = TTL; _p->tt__MulticastConfiguration::AutoStart = AutoStart; } return _p; }

inline tt__MulticastConfiguration * soap_new_set_tt__MulticastConfiguration(struct soap *soap, tt__IPAddress *Address, int Port, int TTL, bool AutoStart, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__MulticastConfiguration *_p = soap_instantiate_tt__MulticastConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MulticastConfiguration::Address = Address; _p->tt__MulticastConfiguration::Port = Port; _p->tt__MulticastConfiguration::TTL = TTL; _p->tt__MulticastConfiguration::AutoStart = AutoStart; _p->tt__MulticastConfiguration::__any = __any; _p->tt__MulticastConfiguration::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MulticastConfiguration(struct soap *soap, tt__MulticastConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MulticastConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (270)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const tt__AudioDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__AudioDecoderConfigurationOptionsExtension *, const char*);

#ifndef soap_write_tt__AudioDecoderConfigurationOptionsExtension
#define soap_write_tt__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__AudioDecoderConfigurationOptionsExtension
#define soap_read_tt__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_req_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap) { tt__AudioDecoderConfigurationOptionsExtension *_p = soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AudioDecoderConfigurationOptionsExtension * soap_new_set_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__AudioDecoderConfigurationOptionsExtension *_p = soap_instantiate_tt__AudioDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioDecoderConfigurationOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioDecoderConfigurationOptionsExtension(struct soap *soap, tt__AudioDecoderConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioDecoderConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (269)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__G726DecOptions(struct soap*, const char*, int, const tt__G726DecOptions *, const char*);
SOAP_FMAC3 tt__G726DecOptions * SOAP_FMAC4 soap_in_tt__G726DecOptions(struct soap*, const char*, tt__G726DecOptions *, const char*);

#ifndef soap_write_tt__G726DecOptions
#define soap_write_tt__G726DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:G726DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__G726DecOptions * SOAP_FMAC4 soap_get_tt__G726DecOptions(struct soap*, tt__G726DecOptions *, const char*, const char*);

#ifndef soap_read_tt__G726DecOptions
#define soap_read_tt__G726DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__G726DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__G726DecOptions * SOAP_FMAC2 soap_instantiate_tt__G726DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__G726DecOptions * soap_new_tt__G726DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__G726DecOptions(soap, n, NULL, NULL, NULL); }

inline tt__G726DecOptions * soap_new_req_tt__G726DecOptions(struct soap *soap, tt__IntItems *Bitrate, tt__IntItems *SampleRateRange) { tt__G726DecOptions *_p = soap_instantiate_tt__G726DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__G726DecOptions::Bitrate = Bitrate; _p->tt__G726DecOptions::SampleRateRange = SampleRateRange; } return _p; }

inline tt__G726DecOptions * soap_new_set_tt__G726DecOptions(struct soap *soap, tt__IntItems *Bitrate, tt__IntItems *SampleRateRange, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__G726DecOptions *_p = soap_instantiate_tt__G726DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__G726DecOptions::Bitrate = Bitrate; _p->tt__G726DecOptions::SampleRateRange = SampleRateRange; _p->tt__G726DecOptions::__any = __any; _p->tt__G726DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__G726DecOptions(struct soap *soap, tt__G726DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__G726DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (268)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AACDecOptions(struct soap*, const char*, int, const tt__AACDecOptions *, const char*);
SOAP_FMAC3 tt__AACDecOptions * SOAP_FMAC4 soap_in_tt__AACDecOptions(struct soap*, const char*, tt__AACDecOptions *, const char*);

#ifndef soap_write_tt__AACDecOptions
#define soap_write_tt__AACDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AACDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AACDecOptions * SOAP_FMAC4 soap_get_tt__AACDecOptions(struct soap*, tt__AACDecOptions *, const char*, const char*);

#ifndef soap_read_tt__AACDecOptions
#define soap_read_tt__AACDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AACDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AACDecOptions * SOAP_FMAC2 soap_instantiate_tt__AACDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AACDecOptions * soap_new_tt__AACDecOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AACDecOptions(soap, n, NULL, NULL, NULL); }

inline tt__AACDecOptions * soap_new_req_tt__AACDecOptions(struct soap *soap, tt__IntItems *Bitrate, tt__IntItems *SampleRateRange) { tt__AACDecOptions *_p = soap_instantiate_tt__AACDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AACDecOptions::Bitrate = Bitrate; _p->tt__AACDecOptions::SampleRateRange = SampleRateRange; } return _p; }

inline tt__AACDecOptions * soap_new_set_tt__AACDecOptions(struct soap *soap, tt__IntItems *Bitrate, tt__IntItems *SampleRateRange, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AACDecOptions *_p = soap_instantiate_tt__AACDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AACDecOptions::Bitrate = Bitrate; _p->tt__AACDecOptions::SampleRateRange = SampleRateRange; _p->tt__AACDecOptions::__any = __any; _p->tt__AACDecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AACDecOptions(struct soap *soap, tt__AACDecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AACDecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (267)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__G711DecOptions(struct soap*, const char*, int, const tt__G711DecOptions *, const char*);
SOAP_FMAC3 tt__G711DecOptions * SOAP_FMAC4 soap_in_tt__G711DecOptions(struct soap*, const char*, tt__G711DecOptions *, const char*);

#ifndef soap_write_tt__G711DecOptions
#define soap_write_tt__G711DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:G711DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__G711DecOptions * SOAP_FMAC4 soap_get_tt__G711DecOptions(struct soap*, tt__G711DecOptions *, const char*, const char*);

#ifndef soap_read_tt__G711DecOptions
#define soap_read_tt__G711DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__G711DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__G711DecOptions * SOAP_FMAC2 soap_instantiate_tt__G711DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__G711DecOptions * soap_new_tt__G711DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__G711DecOptions(soap, n, NULL, NULL, NULL); }

inline tt__G711DecOptions * soap_new_req_tt__G711DecOptions(struct soap *soap, tt__IntItems *Bitrate, tt__IntItems *SampleRateRange) { tt__G711DecOptions *_p = soap_instantiate_tt__G711DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__G711DecOptions::Bitrate = Bitrate; _p->tt__G711DecOptions::SampleRateRange = SampleRateRange; } return _p; }

inline tt__G711DecOptions * soap_new_set_tt__G711DecOptions(struct soap *soap, tt__IntItems *Bitrate, tt__IntItems *SampleRateRange, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__G711DecOptions *_p = soap_instantiate_tt__G711DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__G711DecOptions::Bitrate = Bitrate; _p->tt__G711DecOptions::SampleRateRange = SampleRateRange; _p->tt__G711DecOptions::__any = __any; _p->tt__G711DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__G711DecOptions(struct soap *soap, tt__G711DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__G711DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (266)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfigurationOptions(struct soap*, const char*, int, const tt__AudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioDecoderConfigurationOptions(struct soap*, const char*, tt__AudioDecoderConfigurationOptions *, const char*);

#ifndef soap_write_tt__AudioDecoderConfigurationOptions
#define soap_write_tt__AudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__AudioDecoderConfigurationOptions
#define soap_read_tt__AudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfigurationOptions * soap_new_tt__AudioDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__AudioDecoderConfigurationOptions * soap_new_req_tt__AudioDecoderConfigurationOptions(struct soap *soap) { tt__AudioDecoderConfigurationOptions *_p = soap_instantiate_tt__AudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AudioDecoderConfigurationOptions * soap_new_set_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AACDecOptions *AACDecOptions, tt__G711DecOptions *G711DecOptions, tt__G726DecOptions *G726DecOptions, tt__AudioDecoderConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__AudioDecoderConfigurationOptions *_p = soap_instantiate_tt__AudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioDecoderConfigurationOptions::AACDecOptions = AACDecOptions; _p->tt__AudioDecoderConfigurationOptions::G711DecOptions = G711DecOptions; _p->tt__AudioDecoderConfigurationOptions::G726DecOptions = G726DecOptions; _p->tt__AudioDecoderConfigurationOptions::Extension = Extension; _p->tt__AudioDecoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioDecoderConfigurationOptions(struct soap *soap, tt__AudioDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (265)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioDecoderConfiguration(struct soap*, const char*, int, const tt__AudioDecoderConfiguration *, const char*);
SOAP_FMAC3 tt__AudioDecoderConfiguration * SOAP_FMAC4 soap_in_tt__AudioDecoderConfiguration(struct soap*, const char*, tt__AudioDecoderConfiguration *, const char*);

#ifndef soap_write_tt__AudioDecoderConfiguration
#define soap_write_tt__AudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioDecoderConfiguration * SOAP_FMAC4 soap_get_tt__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read_tt__AudioDecoderConfiguration
#define soap_read_tt__AudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioDecoderConfiguration * soap_new_tt__AudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__AudioDecoderConfiguration * soap_new_req_tt__AudioDecoderConfiguration(struct soap *soap, std::string& Name1, int UseCount1, std::string& token1) { tt__AudioDecoderConfiguration *_p = soap_instantiate_tt__AudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AudioDecoderConfiguration * soap_new_set_tt__AudioDecoderConfiguration(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AudioDecoderConfiguration *_p = soap_instantiate_tt__AudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioDecoderConfiguration::__any = __any; _p->tt__AudioDecoderConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioDecoderConfiguration(struct soap *soap, tt__AudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (264)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutputConfigurationOptions(struct soap*, const char*, int, const tt__AudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioOutputConfigurationOptions(struct soap*, const char*, tt__AudioOutputConfigurationOptions *, const char*);

#ifndef soap_write_tt__AudioOutputConfigurationOptions
#define soap_write_tt__AudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioOutputConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__AudioOutputConfigurationOptions
#define soap_read_tt__AudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutputConfigurationOptions * soap_new_tt__AudioOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__AudioOutputConfigurationOptions * soap_new_req_tt__AudioOutputConfigurationOptions(struct soap *soap, std::vector<std::string >& OutputTokensAvailable, tt__IntRange *OutputLevelRange) { tt__AudioOutputConfigurationOptions *_p = soap_instantiate_tt__AudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable; _p->tt__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange; } return _p; }

inline tt__AudioOutputConfigurationOptions * soap_new_set_tt__AudioOutputConfigurationOptions(struct soap *soap, std::vector<std::string >& OutputTokensAvailable, std::vector<std::string >& SendPrimacyOptions, tt__IntRange *OutputLevelRange, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AudioOutputConfigurationOptions *_p = soap_instantiate_tt__AudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioOutputConfigurationOptions::OutputTokensAvailable = OutputTokensAvailable; _p->tt__AudioOutputConfigurationOptions::SendPrimacyOptions = SendPrimacyOptions; _p->tt__AudioOutputConfigurationOptions::OutputLevelRange = OutputLevelRange; _p->tt__AudioOutputConfigurationOptions::__any = __any; _p->tt__AudioOutputConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioOutputConfigurationOptions(struct soap *soap, tt__AudioOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (263)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutputConfiguration(struct soap*, const char*, int, const tt__AudioOutputConfiguration *, const char*);
SOAP_FMAC3 tt__AudioOutputConfiguration * SOAP_FMAC4 soap_in_tt__AudioOutputConfiguration(struct soap*, const char*, tt__AudioOutputConfiguration *, const char*);

#ifndef soap_write_tt__AudioOutputConfiguration
#define soap_write_tt__AudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioOutputConfiguration * SOAP_FMAC4 soap_get_tt__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read_tt__AudioOutputConfiguration
#define soap_read_tt__AudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutputConfiguration * soap_new_tt__AudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__AudioOutputConfiguration * soap_new_req_tt__AudioOutputConfiguration(struct soap *soap, std::string& OutputToken, int OutputLevel, std::string& Name1, int UseCount1, std::string& token1) { tt__AudioOutputConfiguration *_p = soap_instantiate_tt__AudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioOutputConfiguration::OutputToken = OutputToken; _p->tt__AudioOutputConfiguration::OutputLevel = OutputLevel; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AudioOutputConfiguration * soap_new_set_tt__AudioOutputConfiguration(struct soap *soap, std::string& OutputToken, std::string *SendPrimacy, int OutputLevel, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AudioOutputConfiguration *_p = soap_instantiate_tt__AudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioOutputConfiguration::OutputToken = OutputToken; _p->tt__AudioOutputConfiguration::SendPrimacy = SendPrimacy; _p->tt__AudioOutputConfiguration::OutputLevel = OutputLevel; _p->tt__AudioOutputConfiguration::__any = __any; _p->tt__AudioOutputConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioOutputConfiguration(struct soap *soap, tt__AudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (262)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioOutput(struct soap*, const char*, int, const tt__AudioOutput *, const char*);
SOAP_FMAC3 tt__AudioOutput * SOAP_FMAC4 soap_in_tt__AudioOutput(struct soap*, const char*, tt__AudioOutput *, const char*);

#ifndef soap_write_tt__AudioOutput
#define soap_write_tt__AudioOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioOutput * SOAP_FMAC4 soap_get_tt__AudioOutput(struct soap*, tt__AudioOutput *, const char*, const char*);

#ifndef soap_read_tt__AudioOutput
#define soap_read_tt__AudioOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioOutput * SOAP_FMAC2 soap_instantiate_tt__AudioOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioOutput * soap_new_tt__AudioOutput(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioOutput(soap, n, NULL, NULL, NULL); }

inline tt__AudioOutput * soap_new_req_tt__AudioOutput(struct soap *soap, std::string& token1) { tt__AudioOutput *_p = soap_instantiate_tt__AudioOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__AudioOutput * soap_new_set_tt__AudioOutput(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, std::string& token1, char *__item2) { tt__AudioOutput *_p = soap_instantiate_tt__AudioOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioOutput::__any = __any; _p->tt__AudioOutput::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioOutput(struct soap *soap, tt__AudioOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (261)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, int, const tt__VideoDecoderConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__VideoDecoderConfigurationOptionsExtension *, const char*);

#ifndef soap_write_tt__VideoDecoderConfigurationOptionsExtension
#define soap_write_tt__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__VideoDecoderConfigurationOptionsExtension
#define soap_read_tt__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoDecoderConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoDecoderConfigurationOptionsExtension * soap_new_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__VideoDecoderConfigurationOptionsExtension * soap_new_req_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap) { tt__VideoDecoderConfigurationOptionsExtension *_p = soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoDecoderConfigurationOptionsExtension * soap_new_set_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__VideoDecoderConfigurationOptionsExtension *_p = soap_instantiate_tt__VideoDecoderConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoDecoderConfigurationOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoDecoderConfigurationOptionsExtension(struct soap *soap, tt__VideoDecoderConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoDecoderConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (260)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4DecOptions(struct soap*, const char*, int, const tt__Mpeg4DecOptions *, const char*);
SOAP_FMAC3 tt__Mpeg4DecOptions * SOAP_FMAC4 soap_in_tt__Mpeg4DecOptions(struct soap*, const char*, tt__Mpeg4DecOptions *, const char*);

#ifndef soap_write_tt__Mpeg4DecOptions
#define soap_write_tt__Mpeg4DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Mpeg4DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4DecOptions * SOAP_FMAC4 soap_get_tt__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions *, const char*, const char*);

#ifndef soap_read_tt__Mpeg4DecOptions
#define soap_read_tt__Mpeg4DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Mpeg4DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Mpeg4DecOptions * SOAP_FMAC2 soap_instantiate_tt__Mpeg4DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4DecOptions * soap_new_tt__Mpeg4DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__Mpeg4DecOptions(soap, n, NULL, NULL, NULL); }

inline tt__Mpeg4DecOptions * soap_new_req_tt__Mpeg4DecOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, std::vector<enum tt__Mpeg4Profile >& SupportedMpeg4Profiles, tt__IntRange *SupportedInputBitrate, tt__IntRange *SupportedFrameRate) { tt__Mpeg4DecOptions *_p = soap_instantiate_tt__Mpeg4DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__Mpeg4DecOptions::SupportedMpeg4Profiles = SupportedMpeg4Profiles; _p->tt__Mpeg4DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->tt__Mpeg4DecOptions::SupportedFrameRate = SupportedFrameRate; } return _p; }

inline tt__Mpeg4DecOptions * soap_new_set_tt__Mpeg4DecOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, std::vector<enum tt__Mpeg4Profile >& SupportedMpeg4Profiles, tt__IntRange *SupportedInputBitrate, tt__IntRange *SupportedFrameRate, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__Mpeg4DecOptions *_p = soap_instantiate_tt__Mpeg4DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__Mpeg4DecOptions::SupportedMpeg4Profiles = SupportedMpeg4Profiles; _p->tt__Mpeg4DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->tt__Mpeg4DecOptions::SupportedFrameRate = SupportedFrameRate; _p->tt__Mpeg4DecOptions::__any = __any; _p->tt__Mpeg4DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Mpeg4DecOptions(struct soap *soap, tt__Mpeg4DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Mpeg4DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (259)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegDecOptions(struct soap*, const char*, int, const tt__JpegDecOptions *, const char*);
SOAP_FMAC3 tt__JpegDecOptions * SOAP_FMAC4 soap_in_tt__JpegDecOptions(struct soap*, const char*, tt__JpegDecOptions *, const char*);

#ifndef soap_write_tt__JpegDecOptions
#define soap_write_tt__JpegDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:JpegDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JpegDecOptions * SOAP_FMAC4 soap_get_tt__JpegDecOptions(struct soap*, tt__JpegDecOptions *, const char*, const char*);

#ifndef soap_read_tt__JpegDecOptions
#define soap_read_tt__JpegDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__JpegDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__JpegDecOptions * SOAP_FMAC2 soap_instantiate_tt__JpegDecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegDecOptions * soap_new_tt__JpegDecOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__JpegDecOptions(soap, n, NULL, NULL, NULL); }

inline tt__JpegDecOptions * soap_new_req_tt__JpegDecOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *SupportedInputBitrate, tt__IntRange *SupportedFrameRate) { tt__JpegDecOptions *_p = soap_instantiate_tt__JpegDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JpegDecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__JpegDecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->tt__JpegDecOptions::SupportedFrameRate = SupportedFrameRate; } return _p; }

inline tt__JpegDecOptions * soap_new_set_tt__JpegDecOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *SupportedInputBitrate, tt__IntRange *SupportedFrameRate, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__JpegDecOptions *_p = soap_instantiate_tt__JpegDecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JpegDecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__JpegDecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->tt__JpegDecOptions::SupportedFrameRate = SupportedFrameRate; _p->tt__JpegDecOptions::__any = __any; _p->tt__JpegDecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__JpegDecOptions(struct soap *soap, tt__JpegDecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__JpegDecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (258)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264DecOptions(struct soap*, const char*, int, const tt__H264DecOptions *, const char*);
SOAP_FMAC3 tt__H264DecOptions * SOAP_FMAC4 soap_in_tt__H264DecOptions(struct soap*, const char*, tt__H264DecOptions *, const char*);

#ifndef soap_write_tt__H264DecOptions
#define soap_write_tt__H264DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:H264DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264DecOptions * SOAP_FMAC4 soap_get_tt__H264DecOptions(struct soap*, tt__H264DecOptions *, const char*, const char*);

#ifndef soap_read_tt__H264DecOptions
#define soap_read_tt__H264DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__H264DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__H264DecOptions * SOAP_FMAC2 soap_instantiate_tt__H264DecOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264DecOptions * soap_new_tt__H264DecOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__H264DecOptions(soap, n, NULL, NULL, NULL); }

inline tt__H264DecOptions * soap_new_req_tt__H264DecOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, std::vector<enum tt__H264Profile >& SupportedH264Profiles, tt__IntRange *SupportedInputBitrate, tt__IntRange *SupportedFrameRate) { tt__H264DecOptions *_p = soap_instantiate_tt__H264DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__H264DecOptions::SupportedH264Profiles = SupportedH264Profiles; _p->tt__H264DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->tt__H264DecOptions::SupportedFrameRate = SupportedFrameRate; } return _p; }

inline tt__H264DecOptions * soap_new_set_tt__H264DecOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, std::vector<enum tt__H264Profile >& SupportedH264Profiles, tt__IntRange *SupportedInputBitrate, tt__IntRange *SupportedFrameRate, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__H264DecOptions *_p = soap_instantiate_tt__H264DecOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264DecOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__H264DecOptions::SupportedH264Profiles = SupportedH264Profiles; _p->tt__H264DecOptions::SupportedInputBitrate = SupportedInputBitrate; _p->tt__H264DecOptions::SupportedFrameRate = SupportedFrameRate; _p->tt__H264DecOptions::__any = __any; _p->tt__H264DecOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__H264DecOptions(struct soap *soap, tt__H264DecOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__H264DecOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (257)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoDecoderConfigurationOptions(struct soap*, const char*, int, const tt__VideoDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoDecoderConfigurationOptions(struct soap*, const char*, tt__VideoDecoderConfigurationOptions *, const char*);

#ifndef soap_write_tt__VideoDecoderConfigurationOptions
#define soap_write_tt__VideoDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoDecoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__VideoDecoderConfigurationOptions
#define soap_read_tt__VideoDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoDecoderConfigurationOptions * soap_new_tt__VideoDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__VideoDecoderConfigurationOptions * soap_new_req_tt__VideoDecoderConfigurationOptions(struct soap *soap) { tt__VideoDecoderConfigurationOptions *_p = soap_instantiate_tt__VideoDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoDecoderConfigurationOptions * soap_new_set_tt__VideoDecoderConfigurationOptions(struct soap *soap, tt__JpegDecOptions *JpegDecOptions, tt__H264DecOptions *H264DecOptions, tt__Mpeg4DecOptions *Mpeg4DecOptions, tt__VideoDecoderConfigurationOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__VideoDecoderConfigurationOptions *_p = soap_instantiate_tt__VideoDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoDecoderConfigurationOptions::JpegDecOptions = JpegDecOptions; _p->tt__VideoDecoderConfigurationOptions::H264DecOptions = H264DecOptions; _p->tt__VideoDecoderConfigurationOptions::Mpeg4DecOptions = Mpeg4DecOptions; _p->tt__VideoDecoderConfigurationOptions::Extension = Extension; _p->tt__VideoDecoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoDecoderConfigurationOptions(struct soap *soap, tt__VideoDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (256)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutputConfigurationOptions(struct soap*, const char*, int, const tt__VideoOutputConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoOutputConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoOutputConfigurationOptions(struct soap*, const char*, tt__VideoOutputConfigurationOptions *, const char*);

#ifndef soap_write_tt__VideoOutputConfigurationOptions
#define soap_write_tt__VideoOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoOutputConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoOutputConfigurationOptions(struct soap*, tt__VideoOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__VideoOutputConfigurationOptions
#define soap_read_tt__VideoOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutputConfigurationOptions * soap_new_tt__VideoOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__VideoOutputConfigurationOptions * soap_new_req_tt__VideoOutputConfigurationOptions(struct soap *soap) { tt__VideoOutputConfigurationOptions *_p = soap_instantiate_tt__VideoOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoOutputConfigurationOptions * soap_new_set_tt__VideoOutputConfigurationOptions(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__VideoOutputConfigurationOptions *_p = soap_instantiate_tt__VideoOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoOutputConfigurationOptions::__any = __any; _p->tt__VideoOutputConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoOutputConfigurationOptions(struct soap *soap, tt__VideoOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (255)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutputConfiguration(struct soap*, const char*, int, const tt__VideoOutputConfiguration *, const char*);
SOAP_FMAC3 tt__VideoOutputConfiguration * SOAP_FMAC4 soap_in_tt__VideoOutputConfiguration(struct soap*, const char*, tt__VideoOutputConfiguration *, const char*);

#ifndef soap_write_tt__VideoOutputConfiguration
#define soap_write_tt__VideoOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoOutputConfiguration * SOAP_FMAC4 soap_get_tt__VideoOutputConfiguration(struct soap*, tt__VideoOutputConfiguration *, const char*, const char*);

#ifndef soap_read_tt__VideoOutputConfiguration
#define soap_read_tt__VideoOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoOutputConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutputConfiguration * soap_new_tt__VideoOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__VideoOutputConfiguration * soap_new_req_tt__VideoOutputConfiguration(struct soap *soap, std::string& OutputToken, std::string& Name1, int UseCount1, std::string& token1) { tt__VideoOutputConfiguration *_p = soap_instantiate_tt__VideoOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoOutputConfiguration::OutputToken = OutputToken; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__VideoOutputConfiguration * soap_new_set_tt__VideoOutputConfiguration(struct soap *soap, std::string& OutputToken, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__VideoOutputConfiguration *_p = soap_instantiate_tt__VideoOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoOutputConfiguration::OutputToken = OutputToken; _p->tt__VideoOutputConfiguration::__any = __any; _p->tt__VideoOutputConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoOutputConfiguration(struct soap *soap, tt__VideoOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (254)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutputExtension(struct soap*, const char*, int, const tt__VideoOutputExtension *, const char*);
SOAP_FMAC3 tt__VideoOutputExtension * SOAP_FMAC4 soap_in_tt__VideoOutputExtension(struct soap*, const char*, tt__VideoOutputExtension *, const char*);

#ifndef soap_write_tt__VideoOutputExtension
#define soap_write_tt__VideoOutputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoOutputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoOutputExtension * SOAP_FMAC4 soap_get_tt__VideoOutputExtension(struct soap*, tt__VideoOutputExtension *, const char*, const char*);

#ifndef soap_read_tt__VideoOutputExtension
#define soap_read_tt__VideoOutputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoOutputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoOutputExtension * SOAP_FMAC2 soap_instantiate_tt__VideoOutputExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutputExtension * soap_new_tt__VideoOutputExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoOutputExtension(soap, n, NULL, NULL, NULL); }

inline tt__VideoOutputExtension * soap_new_req_tt__VideoOutputExtension(struct soap *soap) { tt__VideoOutputExtension *_p = soap_instantiate_tt__VideoOutputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoOutputExtension * soap_new_set_tt__VideoOutputExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__VideoOutputExtension *_p = soap_instantiate_tt__VideoOutputExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoOutputExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoOutputExtension(struct soap *soap, tt__VideoOutputExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoOutputExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (253)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoOutput(struct soap*, const char*, int, const tt__VideoOutput *, const char*);
SOAP_FMAC3 tt__VideoOutput * SOAP_FMAC4 soap_in_tt__VideoOutput(struct soap*, const char*, tt__VideoOutput *, const char*);

#ifndef soap_write_tt__VideoOutput
#define soap_write_tt__VideoOutput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoOutput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoOutput * SOAP_FMAC4 soap_get_tt__VideoOutput(struct soap*, tt__VideoOutput *, const char*, const char*);

#ifndef soap_read_tt__VideoOutput
#define soap_read_tt__VideoOutput(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoOutput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoOutput * SOAP_FMAC2 soap_instantiate_tt__VideoOutput(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoOutput * soap_new_tt__VideoOutput(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoOutput(soap, n, NULL, NULL, NULL); }

inline tt__VideoOutput * soap_new_req_tt__VideoOutput(struct soap *soap, tt__Layout *Layout, std::string& token1) { tt__VideoOutput *_p = soap_instantiate_tt__VideoOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoOutput::Layout = Layout; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__VideoOutput * soap_new_set_tt__VideoOutput(struct soap *soap, tt__Layout *Layout, tt__VideoResolution *Resolution, float *RefreshRate, float *AspectRatio, tt__VideoOutputExtension *Extension, char *__anyAttribute, std::string& token1, char *__item2) { tt__VideoOutput *_p = soap_instantiate_tt__VideoOutput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoOutput::Layout = Layout; _p->tt__VideoOutput::Resolution = Resolution; _p->tt__VideoOutput::RefreshRate = RefreshRate; _p->tt__VideoOutput::AspectRatio = AspectRatio; _p->tt__VideoOutput::Extension = Extension; _p->tt__VideoOutput::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoOutput(struct soap *soap, tt__VideoOutput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoOutput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (252)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatusFilterOptionsExtension(struct soap*, const char*, int, const tt__PTZStatusFilterOptionsExtension *, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_in_tt__PTZStatusFilterOptionsExtension(struct soap*, const char*, tt__PTZStatusFilterOptionsExtension *, const char*);

#ifndef soap_write_tt__PTZStatusFilterOptionsExtension
#define soap_write_tt__PTZStatusFilterOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZStatusFilterOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC4 soap_get_tt__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__PTZStatusFilterOptionsExtension
#define soap_read_tt__PTZStatusFilterOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZStatusFilterOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZStatusFilterOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatusFilterOptionsExtension * soap_new_tt__PTZStatusFilterOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZStatusFilterOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__PTZStatusFilterOptionsExtension * soap_new_req_tt__PTZStatusFilterOptionsExtension(struct soap *soap) { tt__PTZStatusFilterOptionsExtension *_p = soap_instantiate_tt__PTZStatusFilterOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__PTZStatusFilterOptionsExtension * soap_new_set_tt__PTZStatusFilterOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__PTZStatusFilterOptionsExtension *_p = soap_instantiate_tt__PTZStatusFilterOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZStatusFilterOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZStatusFilterOptionsExtension(struct soap *soap, tt__PTZStatusFilterOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZStatusFilterOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (251)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZStatusFilterOptions(struct soap*, const char*, int, const tt__PTZStatusFilterOptions *, const char*);
SOAP_FMAC3 tt__PTZStatusFilterOptions * SOAP_FMAC4 soap_in_tt__PTZStatusFilterOptions(struct soap*, const char*, tt__PTZStatusFilterOptions *, const char*);

#ifndef soap_write_tt__PTZStatusFilterOptions
#define soap_write_tt__PTZStatusFilterOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZStatusFilterOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZStatusFilterOptions * SOAP_FMAC4 soap_get_tt__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *, const char*, const char*);

#ifndef soap_read_tt__PTZStatusFilterOptions
#define soap_read_tt__PTZStatusFilterOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZStatusFilterOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZStatusFilterOptions * SOAP_FMAC2 soap_instantiate_tt__PTZStatusFilterOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZStatusFilterOptions * soap_new_tt__PTZStatusFilterOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZStatusFilterOptions(soap, n, NULL, NULL, NULL); }

inline tt__PTZStatusFilterOptions * soap_new_req_tt__PTZStatusFilterOptions(struct soap *soap, bool PanTiltStatusSupported, bool ZoomStatusSupported) { tt__PTZStatusFilterOptions *_p = soap_instantiate_tt__PTZStatusFilterOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported; _p->tt__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported; } return _p; }

inline tt__PTZStatusFilterOptions * soap_new_set_tt__PTZStatusFilterOptions(struct soap *soap, bool PanTiltStatusSupported, bool ZoomStatusSupported, std::vector<char * >& __any, bool *PanTiltPositionSupported, bool *ZoomPositionSupported, tt__PTZStatusFilterOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__PTZStatusFilterOptions *_p = soap_instantiate_tt__PTZStatusFilterOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZStatusFilterOptions::PanTiltStatusSupported = PanTiltStatusSupported; _p->tt__PTZStatusFilterOptions::ZoomStatusSupported = ZoomStatusSupported; _p->tt__PTZStatusFilterOptions::__any = __any; _p->tt__PTZStatusFilterOptions::PanTiltPositionSupported = PanTiltPositionSupported; _p->tt__PTZStatusFilterOptions::ZoomPositionSupported = ZoomPositionSupported; _p->tt__PTZStatusFilterOptions::Extension = Extension; _p->tt__PTZStatusFilterOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZStatusFilterOptions(struct soap *soap, tt__PTZStatusFilterOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZStatusFilterOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (250)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptionsExtension2(struct soap*, const char*, int, const tt__MetadataConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptionsExtension2(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension2 *, const char*);

#ifndef soap_write_tt__MetadataConfigurationOptionsExtension2
#define soap_write_tt__MetadataConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *, const char*, const char*);

#ifndef soap_read_tt__MetadataConfigurationOptionsExtension2
#define soap_read_tt__MetadataConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL); }

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_req_tt__MetadataConfigurationOptionsExtension2(struct soap *soap) { tt__MetadataConfigurationOptionsExtension2 *_p = soap_instantiate_tt__MetadataConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MetadataConfigurationOptionsExtension2 * soap_new_set_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__MetadataConfigurationOptionsExtension2 *_p = soap_instantiate_tt__MetadataConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfigurationOptionsExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataConfigurationOptionsExtension2(struct soap *soap, tt__MetadataConfigurationOptionsExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataConfigurationOptionsExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (249)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptionsExtension(struct soap*, const char*, int, const tt__MetadataConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptionsExtension(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension *, const char*);

#ifndef soap_write_tt__MetadataConfigurationOptionsExtension
#define soap_write_tt__MetadataConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__MetadataConfigurationOptionsExtension
#define soap_read_tt__MetadataConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptionsExtension * soap_new_tt__MetadataConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__MetadataConfigurationOptionsExtension * soap_new_req_tt__MetadataConfigurationOptionsExtension(struct soap *soap) { tt__MetadataConfigurationOptionsExtension *_p = soap_instantiate_tt__MetadataConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MetadataConfigurationOptionsExtension * soap_new_set_tt__MetadataConfigurationOptionsExtension(struct soap *soap, std::vector<std::string >& CompressionType, tt__MetadataConfigurationOptionsExtension2 *Extension, char *__item1) { tt__MetadataConfigurationOptionsExtension *_p = soap_instantiate_tt__MetadataConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfigurationOptionsExtension::CompressionType = CompressionType; _p->tt__MetadataConfigurationOptionsExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataConfigurationOptionsExtension(struct soap *soap, tt__MetadataConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (248)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationOptions(struct soap*, const char*, int, const tt__MetadataConfigurationOptions *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationOptions * SOAP_FMAC4 soap_in_tt__MetadataConfigurationOptions(struct soap*, const char*, tt__MetadataConfigurationOptions *, const char*);

#ifndef soap_write_tt__MetadataConfigurationOptions
#define soap_write_tt__MetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationOptions * SOAP_FMAC4 soap_get_tt__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__MetadataConfigurationOptions
#define soap_read_tt__MetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationOptions * soap_new_tt__MetadataConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__MetadataConfigurationOptions * soap_new_req_tt__MetadataConfigurationOptions(struct soap *soap, tt__PTZStatusFilterOptions *PTZStatusFilterOptions) { tt__MetadataConfigurationOptions *_p = soap_instantiate_tt__MetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions; } return _p; }

inline tt__MetadataConfigurationOptions * soap_new_set_tt__MetadataConfigurationOptions(struct soap *soap, tt__PTZStatusFilterOptions *PTZStatusFilterOptions, std::vector<char * >& __any, tt__MetadataConfigurationOptionsExtension *Extension, bool *GeoLocation, char *__anyAttribute, char *__item1) { tt__MetadataConfigurationOptions *_p = soap_instantiate_tt__MetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfigurationOptions::PTZStatusFilterOptions = PTZStatusFilterOptions; _p->tt__MetadataConfigurationOptions::__any = __any; _p->tt__MetadataConfigurationOptions::Extension = Extension; _p->tt__MetadataConfigurationOptions::GeoLocation = GeoLocation; _p->tt__MetadataConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataConfigurationOptions(struct soap *soap, tt__MetadataConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (247)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__EventSubscription(struct soap*, const char*, int, const tt__EventSubscription *, const char*);
SOAP_FMAC3 tt__EventSubscription * SOAP_FMAC4 soap_in_tt__EventSubscription(struct soap*, const char*, tt__EventSubscription *, const char*);

#ifndef soap_write_tt__EventSubscription
#define soap_write_tt__EventSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:EventSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EventSubscription * SOAP_FMAC4 soap_get_tt__EventSubscription(struct soap*, tt__EventSubscription *, const char*, const char*);

#ifndef soap_read_tt__EventSubscription
#define soap_read_tt__EventSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__EventSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__EventSubscription * SOAP_FMAC2 soap_instantiate_tt__EventSubscription(struct soap*, int, const char*, const char*, size_t*);

inline tt__EventSubscription * soap_new_tt__EventSubscription(struct soap *soap, int n = -1) { return soap_instantiate_tt__EventSubscription(soap, n, NULL, NULL, NULL); }

inline tt__EventSubscription * soap_new_req_tt__EventSubscription(struct soap *soap) { tt__EventSubscription *_p = soap_instantiate_tt__EventSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__EventSubscription * soap_new_set_tt__EventSubscription(struct soap *soap, wsnt__FilterType *Filter, _tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__EventSubscription *_p = soap_instantiate_tt__EventSubscription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__EventSubscription::Filter = Filter; _p->tt__EventSubscription::SubscriptionPolicy = SubscriptionPolicy; _p->tt__EventSubscription::__any = __any; _p->tt__EventSubscription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__EventSubscription(struct soap *soap, tt__EventSubscription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__EventSubscription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (246)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__PTZFilter(struct soap*, const char*, int, const tt__PTZFilter *, const char*);
SOAP_FMAC3 tt__PTZFilter * SOAP_FMAC4 soap_in_tt__PTZFilter(struct soap*, const char*, tt__PTZFilter *, const char*);

#ifndef soap_write_tt__PTZFilter
#define soap_write_tt__PTZFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:PTZFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZFilter * SOAP_FMAC4 soap_get_tt__PTZFilter(struct soap*, tt__PTZFilter *, const char*, const char*);

#ifndef soap_read_tt__PTZFilter
#define soap_read_tt__PTZFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__PTZFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__PTZFilter * SOAP_FMAC2 soap_instantiate_tt__PTZFilter(struct soap*, int, const char*, const char*, size_t*);

inline tt__PTZFilter * soap_new_tt__PTZFilter(struct soap *soap, int n = -1) { return soap_instantiate_tt__PTZFilter(soap, n, NULL, NULL, NULL); }

inline tt__PTZFilter * soap_new_req_tt__PTZFilter(struct soap *soap, bool Status, bool Position) { tt__PTZFilter *_p = soap_instantiate_tt__PTZFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZFilter::Status = Status; _p->tt__PTZFilter::Position = Position; } return _p; }

inline tt__PTZFilter * soap_new_set_tt__PTZFilter(struct soap *soap, bool Status, bool Position, char *__anyAttribute, char *__item1) { tt__PTZFilter *_p = soap_instantiate_tt__PTZFilter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__PTZFilter::Status = Status; _p->tt__PTZFilter::Position = Position; _p->tt__PTZFilter::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__PTZFilter(struct soap *soap, tt__PTZFilter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__PTZFilter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (245)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfigurationExtension(struct soap*, const char*, int, const tt__MetadataConfigurationExtension *, const char*);
SOAP_FMAC3 tt__MetadataConfigurationExtension * SOAP_FMAC4 soap_in_tt__MetadataConfigurationExtension(struct soap*, const char*, tt__MetadataConfigurationExtension *, const char*);

#ifndef soap_write_tt__MetadataConfigurationExtension
#define soap_write_tt__MetadataConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationExtension * SOAP_FMAC4 soap_get_tt__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__MetadataConfigurationExtension
#define soap_read_tt__MetadataConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__MetadataConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfigurationExtension * soap_new_tt__MetadataConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__MetadataConfigurationExtension * soap_new_req_tt__MetadataConfigurationExtension(struct soap *soap) { tt__MetadataConfigurationExtension *_p = soap_instantiate_tt__MetadataConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__MetadataConfigurationExtension * soap_new_set_tt__MetadataConfigurationExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__MetadataConfigurationExtension *_p = soap_instantiate_tt__MetadataConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfigurationExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__MetadataConfigurationExtension(struct soap *soap, tt__MetadataConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (244)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__MetadataConfiguration(struct soap*, const char*, int, const tt__MetadataConfiguration *, const char*);
SOAP_FMAC3 tt__MetadataConfiguration * SOAP_FMAC4 soap_in_tt__MetadataConfiguration(struct soap*, const char*, tt__MetadataConfiguration *, const char*);

#ifndef soap_write_tt__MetadataConfiguration
#define soap_write_tt__MetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:MetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfiguration * SOAP_FMAC4 soap_get_tt__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *, const char*, const char*);

#ifndef soap_read_tt__MetadataConfiguration
#define soap_read_tt__MetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__MetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__MetadataConfiguration * SOAP_FMAC2 soap_instantiate_tt__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__MetadataConfiguration * soap_new_tt__MetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__MetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__MetadataConfiguration * soap_new_req_tt__MetadataConfiguration(struct soap *soap, tt__MulticastConfiguration *Multicast, LONG64 SessionTimeout, std::string& Name1, int UseCount1, std::string& token1) { tt__MetadataConfiguration *_p = soap_instantiate_tt__MetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfiguration::Multicast = Multicast; _p->tt__MetadataConfiguration::SessionTimeout = SessionTimeout; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__MetadataConfiguration * soap_new_set_tt__MetadataConfiguration(struct soap *soap, tt__PTZFilter *PTZStatus, tt__EventSubscription *Events, bool *Analytics, tt__MulticastConfiguration *Multicast, LONG64 SessionTimeout, std::vector<char * >& __any, tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration, tt__MetadataConfigurationExtension *Extension, std::string *CompressionType, bool *GeoLocation, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__MetadataConfiguration *_p = soap_instantiate_tt__MetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__MetadataConfiguration::PTZStatus = PTZStatus; _p->tt__MetadataConfiguration::Events = Events; _p->tt__MetadataConfiguration::Analytics = Analytics; _p->tt__MetadataConfiguration::Multicast = Multicast; _p->tt__MetadataConfiguration::SessionTimeout = SessionTimeout; _p->tt__MetadataConfiguration::__any = __any; _p->tt__MetadataConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->tt__MetadataConfiguration::Extension = Extension; _p->tt__MetadataConfiguration::CompressionType = CompressionType; _p->tt__MetadataConfiguration::GeoLocation = GeoLocation; _p->tt__MetadataConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__MetadataConfiguration(struct soap *soap, tt__MetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__MetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (243)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoAnalyticsConfiguration(struct soap*, const char*, int, const tt__VideoAnalyticsConfiguration *, const char*);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_in_tt__VideoAnalyticsConfiguration(struct soap*, const char*, tt__VideoAnalyticsConfiguration *, const char*);

#ifndef soap_write_tt__VideoAnalyticsConfiguration
#define soap_write_tt__VideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoAnalyticsConfiguration * SOAP_FMAC4 soap_get_tt__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *, const char*, const char*);

#ifndef soap_read_tt__VideoAnalyticsConfiguration
#define soap_read_tt__VideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoAnalyticsConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoAnalyticsConfiguration * soap_new_tt__VideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__VideoAnalyticsConfiguration * soap_new_req_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration, tt__RuleEngineConfiguration *RuleEngineConfiguration, std::string& Name1, int UseCount1, std::string& token1) { tt__VideoAnalyticsConfiguration *_p = soap_instantiate_tt__VideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->tt__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__VideoAnalyticsConfiguration * soap_new_set_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration, tt__RuleEngineConfiguration *RuleEngineConfiguration, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__VideoAnalyticsConfiguration *_p = soap_instantiate_tt__VideoAnalyticsConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoAnalyticsConfiguration::AnalyticsEngineConfiguration = AnalyticsEngineConfiguration; _p->tt__VideoAnalyticsConfiguration::RuleEngineConfiguration = RuleEngineConfiguration; _p->tt__VideoAnalyticsConfiguration::__any = __any; _p->tt__VideoAnalyticsConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoAnalyticsConfiguration(struct soap *soap, tt__VideoAnalyticsConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (242)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoder2ConfigurationOptions(struct soap*, const char*, int, const tt__AudioEncoder2ConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioEncoder2ConfigurationOptions(struct soap*, const char*, tt__AudioEncoder2ConfigurationOptions *, const char*);

#ifndef soap_write_tt__AudioEncoder2ConfigurationOptions
#define soap_write_tt__AudioEncoder2ConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncoder2ConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioEncoder2ConfigurationOptions(struct soap*, tt__AudioEncoder2ConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoder2ConfigurationOptions
#define soap_read_tt__AudioEncoder2ConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoder2ConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoder2ConfigurationOptions * soap_new_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncoder2ConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncoder2ConfigurationOptions * soap_new_req_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, std::string& Encoding, tt__IntItems *BitrateList, tt__IntItems *SampleRateList) { tt__AudioEncoder2ConfigurationOptions *_p = soap_instantiate_tt__AudioEncoder2ConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoder2ConfigurationOptions::Encoding = Encoding; _p->tt__AudioEncoder2ConfigurationOptions::BitrateList = BitrateList; _p->tt__AudioEncoder2ConfigurationOptions::SampleRateList = SampleRateList; } return _p; }

inline tt__AudioEncoder2ConfigurationOptions * soap_new_set_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, std::string& Encoding, tt__IntItems *BitrateList, tt__IntItems *SampleRateList, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AudioEncoder2ConfigurationOptions *_p = soap_instantiate_tt__AudioEncoder2ConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoder2ConfigurationOptions::Encoding = Encoding; _p->tt__AudioEncoder2ConfigurationOptions::BitrateList = BitrateList; _p->tt__AudioEncoder2ConfigurationOptions::SampleRateList = SampleRateList; _p->tt__AudioEncoder2ConfigurationOptions::__any = __any; _p->tt__AudioEncoder2ConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioEncoder2ConfigurationOptions(struct soap *soap, tt__AudioEncoder2ConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncoder2ConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (241)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoder2Configuration(struct soap*, const char*, int, const tt__AudioEncoder2Configuration *, const char*);
SOAP_FMAC3 tt__AudioEncoder2Configuration * SOAP_FMAC4 soap_in_tt__AudioEncoder2Configuration(struct soap*, const char*, tt__AudioEncoder2Configuration *, const char*);

#ifndef soap_write_tt__AudioEncoder2Configuration
#define soap_write_tt__AudioEncoder2Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncoder2Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoder2Configuration * SOAP_FMAC4 soap_get_tt__AudioEncoder2Configuration(struct soap*, tt__AudioEncoder2Configuration *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoder2Configuration
#define soap_read_tt__AudioEncoder2Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoder2Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoder2Configuration * soap_new_tt__AudioEncoder2Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncoder2Configuration(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncoder2Configuration * soap_new_req_tt__AudioEncoder2Configuration(struct soap *soap, std::string& Encoding, int Bitrate, int SampleRate, std::string& Name1, int UseCount1, std::string& token1) { tt__AudioEncoder2Configuration *_p = soap_instantiate_tt__AudioEncoder2Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoder2Configuration::Encoding = Encoding; _p->tt__AudioEncoder2Configuration::Bitrate = Bitrate; _p->tt__AudioEncoder2Configuration::SampleRate = SampleRate; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AudioEncoder2Configuration * soap_new_set_tt__AudioEncoder2Configuration(struct soap *soap, std::string& Encoding, tt__MulticastConfiguration *Multicast, int Bitrate, int SampleRate, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AudioEncoder2Configuration *_p = soap_instantiate_tt__AudioEncoder2Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoder2Configuration::Encoding = Encoding; _p->tt__AudioEncoder2Configuration::Multicast = Multicast; _p->tt__AudioEncoder2Configuration::Bitrate = Bitrate; _p->tt__AudioEncoder2Configuration::SampleRate = SampleRate; _p->tt__AudioEncoder2Configuration::__any = __any; _p->tt__AudioEncoder2Configuration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioEncoder2Configuration(struct soap *soap, tt__AudioEncoder2Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncoder2Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (240)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfigurationOption(struct soap*, const char*, int, const tt__AudioEncoderConfigurationOption *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_in_tt__AudioEncoderConfigurationOption(struct soap*, const char*, tt__AudioEncoderConfigurationOption *, const char*);

#ifndef soap_write_tt__AudioEncoderConfigurationOption
#define soap_write_tt__AudioEncoderConfigurationOption(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncoderConfigurationOption", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoderConfigurationOption * SOAP_FMAC4 soap_get_tt__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoderConfigurationOption
#define soap_read_tt__AudioEncoderConfigurationOption(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoderConfigurationOption(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncoderConfigurationOption * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfigurationOption * soap_new_tt__AudioEncoderConfigurationOption(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncoderConfigurationOption * soap_new_req_tt__AudioEncoderConfigurationOption(struct soap *soap, enum tt__AudioEncoding Encoding, tt__IntItems *BitrateList, tt__IntItems *SampleRateList) { tt__AudioEncoderConfigurationOption *_p = soap_instantiate_tt__AudioEncoderConfigurationOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoderConfigurationOption::Encoding = Encoding; _p->tt__AudioEncoderConfigurationOption::BitrateList = BitrateList; _p->tt__AudioEncoderConfigurationOption::SampleRateList = SampleRateList; } return _p; }

inline tt__AudioEncoderConfigurationOption * soap_new_set_tt__AudioEncoderConfigurationOption(struct soap *soap, enum tt__AudioEncoding Encoding, tt__IntItems *BitrateList, tt__IntItems *SampleRateList, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AudioEncoderConfigurationOption *_p = soap_instantiate_tt__AudioEncoderConfigurationOption(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoderConfigurationOption::Encoding = Encoding; _p->tt__AudioEncoderConfigurationOption::BitrateList = BitrateList; _p->tt__AudioEncoderConfigurationOption::SampleRateList = SampleRateList; _p->tt__AudioEncoderConfigurationOption::__any = __any; _p->tt__AudioEncoderConfigurationOption::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioEncoderConfigurationOption(struct soap *soap, tt__AudioEncoderConfigurationOption *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncoderConfigurationOption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (239)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfigurationOptions(struct soap*, const char*, int, const tt__AudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioEncoderConfigurationOptions(struct soap*, const char*, tt__AudioEncoderConfigurationOptions *, const char*);

#ifndef soap_write_tt__AudioEncoderConfigurationOptions
#define soap_write_tt__AudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoderConfigurationOptions
#define soap_read_tt__AudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfigurationOptions * soap_new_tt__AudioEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncoderConfigurationOptions * soap_new_req_tt__AudioEncoderConfigurationOptions(struct soap *soap) { tt__AudioEncoderConfigurationOptions *_p = soap_instantiate_tt__AudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AudioEncoderConfigurationOptions * soap_new_set_tt__AudioEncoderConfigurationOptions(struct soap *soap, std::vector<tt__AudioEncoderConfigurationOption * >& Options, char *__anyAttribute, char *__item1) { tt__AudioEncoderConfigurationOptions *_p = soap_instantiate_tt__AudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoderConfigurationOptions::Options = Options; _p->tt__AudioEncoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioEncoderConfigurationOptions(struct soap *soap, tt__AudioEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (238)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioEncoderConfiguration(struct soap*, const char*, int, const tt__AudioEncoderConfiguration *, const char*);
SOAP_FMAC3 tt__AudioEncoderConfiguration * SOAP_FMAC4 soap_in_tt__AudioEncoderConfiguration(struct soap*, const char*, tt__AudioEncoderConfiguration *, const char*);

#ifndef soap_write_tt__AudioEncoderConfiguration
#define soap_write_tt__AudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoderConfiguration * SOAP_FMAC4 soap_get_tt__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read_tt__AudioEncoderConfiguration
#define soap_read_tt__AudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioEncoderConfiguration * soap_new_tt__AudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__AudioEncoderConfiguration * soap_new_req_tt__AudioEncoderConfiguration(struct soap *soap, enum tt__AudioEncoding Encoding, int Bitrate, int SampleRate, tt__MulticastConfiguration *Multicast, LONG64 SessionTimeout, std::string& Name1, int UseCount1, std::string& token1) { tt__AudioEncoderConfiguration *_p = soap_instantiate_tt__AudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoderConfiguration::Encoding = Encoding; _p->tt__AudioEncoderConfiguration::Bitrate = Bitrate; _p->tt__AudioEncoderConfiguration::SampleRate = SampleRate; _p->tt__AudioEncoderConfiguration::Multicast = Multicast; _p->tt__AudioEncoderConfiguration::SessionTimeout = SessionTimeout; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AudioEncoderConfiguration * soap_new_set_tt__AudioEncoderConfiguration(struct soap *soap, enum tt__AudioEncoding Encoding, int Bitrate, int SampleRate, tt__MulticastConfiguration *Multicast, LONG64 SessionTimeout, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AudioEncoderConfiguration *_p = soap_instantiate_tt__AudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioEncoderConfiguration::Encoding = Encoding; _p->tt__AudioEncoderConfiguration::Bitrate = Bitrate; _p->tt__AudioEncoderConfiguration::SampleRate = SampleRate; _p->tt__AudioEncoderConfiguration::Multicast = Multicast; _p->tt__AudioEncoderConfiguration::SessionTimeout = SessionTimeout; _p->tt__AudioEncoderConfiguration::__any = __any; _p->tt__AudioEncoderConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioEncoderConfiguration(struct soap *soap, tt__AudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (237)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceOptionsExtension(struct soap*, const char*, int, const tt__AudioSourceOptionsExtension *, const char*);
SOAP_FMAC3 tt__AudioSourceOptionsExtension * SOAP_FMAC4 soap_in_tt__AudioSourceOptionsExtension(struct soap*, const char*, tt__AudioSourceOptionsExtension *, const char*);

#ifndef soap_write_tt__AudioSourceOptionsExtension
#define soap_write_tt__AudioSourceOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioSourceOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSourceOptionsExtension * SOAP_FMAC4 soap_get_tt__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__AudioSourceOptionsExtension
#define soap_read_tt__AudioSourceOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioSourceOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioSourceOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__AudioSourceOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceOptionsExtension * soap_new_tt__AudioSourceOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioSourceOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__AudioSourceOptionsExtension * soap_new_req_tt__AudioSourceOptionsExtension(struct soap *soap) { tt__AudioSourceOptionsExtension *_p = soap_instantiate_tt__AudioSourceOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AudioSourceOptionsExtension * soap_new_set_tt__AudioSourceOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__AudioSourceOptionsExtension *_p = soap_instantiate_tt__AudioSourceOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSourceOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioSourceOptionsExtension(struct soap *soap, tt__AudioSourceOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioSourceOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (236)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceConfigurationOptions(struct soap*, const char*, int, const tt__AudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_in_tt__AudioSourceConfigurationOptions(struct soap*, const char*, tt__AudioSourceConfigurationOptions *, const char*);

#ifndef soap_write_tt__AudioSourceConfigurationOptions
#define soap_write_tt__AudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSourceConfigurationOptions * SOAP_FMAC4 soap_get_tt__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__AudioSourceConfigurationOptions
#define soap_read_tt__AudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceConfigurationOptions * soap_new_tt__AudioSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__AudioSourceConfigurationOptions * soap_new_req_tt__AudioSourceConfigurationOptions(struct soap *soap, std::vector<std::string >& InputTokensAvailable) { tt__AudioSourceConfigurationOptions *_p = soap_instantiate_tt__AudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable; } return _p; }

inline tt__AudioSourceConfigurationOptions * soap_new_set_tt__AudioSourceConfigurationOptions(struct soap *soap, std::vector<std::string >& InputTokensAvailable, tt__AudioSourceOptionsExtension *Extension, char *__anyAttribute, char *__item1) { tt__AudioSourceConfigurationOptions *_p = soap_instantiate_tt__AudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSourceConfigurationOptions::InputTokensAvailable = InputTokensAvailable; _p->tt__AudioSourceConfigurationOptions::Extension = Extension; _p->tt__AudioSourceConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AudioSourceConfigurationOptions(struct soap *soap, tt__AudioSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (235)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSourceConfiguration(struct soap*, const char*, int, const tt__AudioSourceConfiguration *, const char*);
SOAP_FMAC3 tt__AudioSourceConfiguration * SOAP_FMAC4 soap_in_tt__AudioSourceConfiguration(struct soap*, const char*, tt__AudioSourceConfiguration *, const char*);

#ifndef soap_write_tt__AudioSourceConfiguration
#define soap_write_tt__AudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSourceConfiguration * SOAP_FMAC4 soap_get_tt__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read_tt__AudioSourceConfiguration
#define soap_read_tt__AudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSourceConfiguration * soap_new_tt__AudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__AudioSourceConfiguration * soap_new_req_tt__AudioSourceConfiguration(struct soap *soap, std::string& SourceToken, std::string& Name1, int UseCount1, std::string& token1) { tt__AudioSourceConfiguration *_p = soap_instantiate_tt__AudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSourceConfiguration::SourceToken = SourceToken; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__AudioSourceConfiguration * soap_new_set_tt__AudioSourceConfiguration(struct soap *soap, std::string& SourceToken, std::vector<char * >& __any, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__AudioSourceConfiguration *_p = soap_instantiate_tt__AudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSourceConfiguration::SourceToken = SourceToken; _p->tt__AudioSourceConfiguration::__any = __any; _p->tt__AudioSourceConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioSourceConfiguration(struct soap *soap, tt__AudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (234)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoder2ConfigurationOptions(struct soap*, const char*, int, const tt__VideoEncoder2ConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoEncoder2ConfigurationOptions(struct soap*, const char*, tt__VideoEncoder2ConfigurationOptions *, const char*);

#ifndef soap_write_tt__VideoEncoder2ConfigurationOptions
#define soap_write_tt__VideoEncoder2ConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoder2ConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoEncoder2ConfigurationOptions(struct soap*, tt__VideoEncoder2ConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoder2ConfigurationOptions
#define soap_read_tt__VideoEncoder2ConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoder2ConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoder2ConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoder2ConfigurationOptions * soap_new_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoder2ConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoder2ConfigurationOptions * soap_new_req_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, std::string& Encoding, tt__FloatRange *QualityRange, std::vector<tt__VideoResolution2 * >& ResolutionsAvailable, tt__IntRange *BitrateRange) { tt__VideoEncoder2ConfigurationOptions *_p = soap_instantiate_tt__VideoEncoder2ConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoder2ConfigurationOptions::Encoding = Encoding; _p->tt__VideoEncoder2ConfigurationOptions::QualityRange = QualityRange; _p->tt__VideoEncoder2ConfigurationOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__VideoEncoder2ConfigurationOptions::BitrateRange = BitrateRange; } return _p; }

inline tt__VideoEncoder2ConfigurationOptions * soap_new_set_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, std::string& Encoding, tt__FloatRange *QualityRange, std::vector<tt__VideoResolution2 * >& ResolutionsAvailable, tt__IntRange *BitrateRange, std::vector<char * >& __any, std::string *GovLengthRange, std::string *FrameRatesSupported, std::string *ProfilesSupported, bool *ConstantBitRateSupported, bool *GuaranteedFrameRateSupported, char *__anyAttribute, char *__item1) { tt__VideoEncoder2ConfigurationOptions *_p = soap_instantiate_tt__VideoEncoder2ConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoder2ConfigurationOptions::Encoding = Encoding; _p->tt__VideoEncoder2ConfigurationOptions::QualityRange = QualityRange; _p->tt__VideoEncoder2ConfigurationOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__VideoEncoder2ConfigurationOptions::BitrateRange = BitrateRange; _p->tt__VideoEncoder2ConfigurationOptions::__any = __any; _p->tt__VideoEncoder2ConfigurationOptions::GovLengthRange = GovLengthRange; _p->tt__VideoEncoder2ConfigurationOptions::FrameRatesSupported = FrameRatesSupported; _p->tt__VideoEncoder2ConfigurationOptions::ProfilesSupported = ProfilesSupported; _p->tt__VideoEncoder2ConfigurationOptions::ConstantBitRateSupported = ConstantBitRateSupported; _p->tt__VideoEncoder2ConfigurationOptions::GuaranteedFrameRateSupported = GuaranteedFrameRateSupported; _p->tt__VideoEncoder2ConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncoder2ConfigurationOptions(struct soap *soap, tt__VideoEncoder2ConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoder2ConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (233)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoRateControl2(struct soap*, const char*, int, const tt__VideoRateControl2 *, const char*);
SOAP_FMAC3 tt__VideoRateControl2 * SOAP_FMAC4 soap_in_tt__VideoRateControl2(struct soap*, const char*, tt__VideoRateControl2 *, const char*);

#ifndef soap_write_tt__VideoRateControl2
#define soap_write_tt__VideoRateControl2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoRateControl2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoRateControl2 * SOAP_FMAC4 soap_get_tt__VideoRateControl2(struct soap*, tt__VideoRateControl2 *, const char*, const char*);

#ifndef soap_read_tt__VideoRateControl2
#define soap_read_tt__VideoRateControl2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoRateControl2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoRateControl2 * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoRateControl2 * soap_new_tt__VideoRateControl2(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoRateControl2(soap, n, NULL, NULL, NULL); }

inline tt__VideoRateControl2 * soap_new_req_tt__VideoRateControl2(struct soap *soap, float FrameRateLimit, int BitrateLimit) { tt__VideoRateControl2 *_p = soap_instantiate_tt__VideoRateControl2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoRateControl2::FrameRateLimit = FrameRateLimit; _p->tt__VideoRateControl2::BitrateLimit = BitrateLimit; } return _p; }

inline tt__VideoRateControl2 * soap_new_set_tt__VideoRateControl2(struct soap *soap, float FrameRateLimit, int BitrateLimit, std::vector<char * >& __any, bool *ConstantBitRate, char *__anyAttribute, char *__item1) { tt__VideoRateControl2 *_p = soap_instantiate_tt__VideoRateControl2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoRateControl2::FrameRateLimit = FrameRateLimit; _p->tt__VideoRateControl2::BitrateLimit = BitrateLimit; _p->tt__VideoRateControl2::__any = __any; _p->tt__VideoRateControl2::ConstantBitRate = ConstantBitRate; _p->tt__VideoRateControl2::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoRateControl2(struct soap *soap, tt__VideoRateControl2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoRateControl2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (232)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoResolution2(struct soap*, const char*, int, const tt__VideoResolution2 *, const char*);
SOAP_FMAC3 tt__VideoResolution2 * SOAP_FMAC4 soap_in_tt__VideoResolution2(struct soap*, const char*, tt__VideoResolution2 *, const char*);

#ifndef soap_write_tt__VideoResolution2
#define soap_write_tt__VideoResolution2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoResolution2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoResolution2 * SOAP_FMAC4 soap_get_tt__VideoResolution2(struct soap*, tt__VideoResolution2 *, const char*, const char*);

#ifndef soap_read_tt__VideoResolution2
#define soap_read_tt__VideoResolution2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoResolution2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoResolution2 * SOAP_FMAC2 soap_instantiate_tt__VideoResolution2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoResolution2 * soap_new_tt__VideoResolution2(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoResolution2(soap, n, NULL, NULL, NULL); }

inline tt__VideoResolution2 * soap_new_req_tt__VideoResolution2(struct soap *soap, int Width, int Height) { tt__VideoResolution2 *_p = soap_instantiate_tt__VideoResolution2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoResolution2::Width = Width; _p->tt__VideoResolution2::Height = Height; } return _p; }

inline tt__VideoResolution2 * soap_new_set_tt__VideoResolution2(struct soap *soap, int Width, int Height, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__VideoResolution2 *_p = soap_instantiate_tt__VideoResolution2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoResolution2::Width = Width; _p->tt__VideoResolution2::Height = Height; _p->tt__VideoResolution2::__any = __any; _p->tt__VideoResolution2::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoResolution2(struct soap *soap, tt__VideoResolution2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoResolution2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (231)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoder2Configuration(struct soap*, const char*, int, const tt__VideoEncoder2Configuration *, const char*);
SOAP_FMAC3 tt__VideoEncoder2Configuration * SOAP_FMAC4 soap_in_tt__VideoEncoder2Configuration(struct soap*, const char*, tt__VideoEncoder2Configuration *, const char*);

#ifndef soap_write_tt__VideoEncoder2Configuration
#define soap_write_tt__VideoEncoder2Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoder2Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoder2Configuration * SOAP_FMAC4 soap_get_tt__VideoEncoder2Configuration(struct soap*, tt__VideoEncoder2Configuration *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoder2Configuration
#define soap_read_tt__VideoEncoder2Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoder2Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoder2Configuration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoder2Configuration * soap_new_tt__VideoEncoder2Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoder2Configuration(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoder2Configuration * soap_new_req_tt__VideoEncoder2Configuration(struct soap *soap, std::string& Encoding, tt__VideoResolution2 *Resolution, float Quality, std::string& Name1, int UseCount1, std::string& token1) { tt__VideoEncoder2Configuration *_p = soap_instantiate_tt__VideoEncoder2Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoder2Configuration::Encoding = Encoding; _p->tt__VideoEncoder2Configuration::Resolution = Resolution; _p->tt__VideoEncoder2Configuration::Quality = Quality; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__VideoEncoder2Configuration * soap_new_set_tt__VideoEncoder2Configuration(struct soap *soap, std::string& Encoding, tt__VideoResolution2 *Resolution, tt__VideoRateControl2 *RateControl, tt__MulticastConfiguration *Multicast, float Quality, std::vector<char * >& __any, int *GovLength, std::string *Profile, bool *GuaranteedFrameRate, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__VideoEncoder2Configuration *_p = soap_instantiate_tt__VideoEncoder2Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoder2Configuration::Encoding = Encoding; _p->tt__VideoEncoder2Configuration::Resolution = Resolution; _p->tt__VideoEncoder2Configuration::RateControl = RateControl; _p->tt__VideoEncoder2Configuration::Multicast = Multicast; _p->tt__VideoEncoder2Configuration::Quality = Quality; _p->tt__VideoEncoder2Configuration::__any = __any; _p->tt__VideoEncoder2Configuration::GovLength = GovLength; _p->tt__VideoEncoder2Configuration::Profile = Profile; _p->tt__VideoEncoder2Configuration::GuaranteedFrameRate = GuaranteedFrameRate; _p->tt__VideoEncoder2Configuration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoEncoder2Configuration(struct soap *soap, tt__VideoEncoder2Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoder2Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (230)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Options2(struct soap*, const char*, int, const tt__H264Options2 *, const char*);
SOAP_FMAC3 tt__H264Options2 * SOAP_FMAC4 soap_in_tt__H264Options2(struct soap*, const char*, tt__H264Options2 *, const char*);

#ifndef soap_write_tt__H264Options2
#define soap_write_tt__H264Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:H264Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Options2 * SOAP_FMAC4 soap_get_tt__H264Options2(struct soap*, tt__H264Options2 *, const char*, const char*);

#ifndef soap_read_tt__H264Options2
#define soap_read_tt__H264Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__H264Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__H264Options2 * SOAP_FMAC2 soap_instantiate_tt__H264Options2(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Options2 * soap_new_tt__H264Options2(struct soap *soap, int n = -1) { return soap_instantiate_tt__H264Options2(soap, n, NULL, NULL, NULL); }

inline tt__H264Options2 * soap_new_req_tt__H264Options2(struct soap *soap, tt__IntRange *BitrateRange, std::vector<tt__VideoResolution * >& ResolutionsAvailable1, tt__IntRange *GovLengthRange1, tt__IntRange *FrameRateRange1, tt__IntRange *EncodingIntervalRange1, std::vector<enum tt__H264Profile >& H264ProfilesSupported1) { tt__H264Options2 *_p = soap_instantiate_tt__H264Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Options2::BitrateRange = BitrateRange; _p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable1; _p->tt__H264Options::GovLengthRange = GovLengthRange1; _p->tt__H264Options::FrameRateRange = FrameRateRange1; _p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange1; _p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported1; } return _p; }

inline tt__H264Options2 * soap_new_set_tt__H264Options2(struct soap *soap, tt__IntRange *BitrateRange, std::vector<char * >& __any, char *__anyAttribute, std::vector<tt__VideoResolution * >& ResolutionsAvailable1, tt__IntRange *GovLengthRange1, tt__IntRange *FrameRateRange1, tt__IntRange *EncodingIntervalRange1, std::vector<enum tt__H264Profile >& H264ProfilesSupported1, char *__item2) { tt__H264Options2 *_p = soap_instantiate_tt__H264Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Options2::BitrateRange = BitrateRange; _p->tt__H264Options2::__any = __any; _p->tt__H264Options2::__anyAttribute = __anyAttribute; _p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable1; _p->tt__H264Options::GovLengthRange = GovLengthRange1; _p->tt__H264Options::FrameRateRange = FrameRateRange1; _p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange1; _p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__H264Options2(struct soap *soap, tt__H264Options2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__H264Options2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (229)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Options(struct soap*, const char*, int, const tt__H264Options *, const char*);
SOAP_FMAC3 tt__H264Options * SOAP_FMAC4 soap_in_tt__H264Options(struct soap*, const char*, tt__H264Options *, const char*);

#ifndef soap_write_tt__H264Options
#define soap_write_tt__H264Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:H264Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Options * SOAP_FMAC4 soap_get_tt__H264Options(struct soap*, tt__H264Options *, const char*, const char*);

#ifndef soap_read_tt__H264Options
#define soap_read_tt__H264Options(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__H264Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__H264Options * SOAP_FMAC2 soap_instantiate_tt__H264Options(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Options * soap_new_tt__H264Options(struct soap *soap, int n = -1) { return soap_instantiate_tt__H264Options(soap, n, NULL, NULL, NULL); }

inline tt__H264Options * soap_new_req_tt__H264Options(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *GovLengthRange, tt__IntRange *FrameRateRange, tt__IntRange *EncodingIntervalRange, std::vector<enum tt__H264Profile >& H264ProfilesSupported) { tt__H264Options *_p = soap_instantiate_tt__H264Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable; _p->tt__H264Options::GovLengthRange = GovLengthRange; _p->tt__H264Options::FrameRateRange = FrameRateRange; _p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange; _p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported; } return _p; }

inline tt__H264Options * soap_new_set_tt__H264Options(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *GovLengthRange, tt__IntRange *FrameRateRange, tt__IntRange *EncodingIntervalRange, std::vector<enum tt__H264Profile >& H264ProfilesSupported, char *__item1) { tt__H264Options *_p = soap_instantiate_tt__H264Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Options::ResolutionsAvailable = ResolutionsAvailable; _p->tt__H264Options::GovLengthRange = GovLengthRange; _p->tt__H264Options::FrameRateRange = FrameRateRange; _p->tt__H264Options::EncodingIntervalRange = EncodingIntervalRange; _p->tt__H264Options::H264ProfilesSupported = H264ProfilesSupported; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__H264Options(struct soap *soap, tt__H264Options *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__H264Options(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (228)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Options2(struct soap*, const char*, int, const tt__Mpeg4Options2 *, const char*);
SOAP_FMAC3 tt__Mpeg4Options2 * SOAP_FMAC4 soap_in_tt__Mpeg4Options2(struct soap*, const char*, tt__Mpeg4Options2 *, const char*);

#ifndef soap_write_tt__Mpeg4Options2
#define soap_write_tt__Mpeg4Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Mpeg4Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Options2 * SOAP_FMAC4 soap_get_tt__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *, const char*, const char*);

#ifndef soap_read_tt__Mpeg4Options2
#define soap_read_tt__Mpeg4Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Mpeg4Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Mpeg4Options2 * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options2(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Options2 * soap_new_tt__Mpeg4Options2(struct soap *soap, int n = -1) { return soap_instantiate_tt__Mpeg4Options2(soap, n, NULL, NULL, NULL); }

inline tt__Mpeg4Options2 * soap_new_req_tt__Mpeg4Options2(struct soap *soap, tt__IntRange *BitrateRange, std::vector<tt__VideoResolution * >& ResolutionsAvailable1, tt__IntRange *GovLengthRange1, tt__IntRange *FrameRateRange1, tt__IntRange *EncodingIntervalRange1, std::vector<enum tt__Mpeg4Profile >& Mpeg4ProfilesSupported1) { tt__Mpeg4Options2 *_p = soap_instantiate_tt__Mpeg4Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Options2::BitrateRange = BitrateRange; _p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable1; _p->tt__Mpeg4Options::GovLengthRange = GovLengthRange1; _p->tt__Mpeg4Options::FrameRateRange = FrameRateRange1; _p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange1; _p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported1; } return _p; }

inline tt__Mpeg4Options2 * soap_new_set_tt__Mpeg4Options2(struct soap *soap, tt__IntRange *BitrateRange, std::vector<char * >& __any, char *__anyAttribute, std::vector<tt__VideoResolution * >& ResolutionsAvailable1, tt__IntRange *GovLengthRange1, tt__IntRange *FrameRateRange1, tt__IntRange *EncodingIntervalRange1, std::vector<enum tt__Mpeg4Profile >& Mpeg4ProfilesSupported1, char *__item2) { tt__Mpeg4Options2 *_p = soap_instantiate_tt__Mpeg4Options2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Options2::BitrateRange = BitrateRange; _p->tt__Mpeg4Options2::__any = __any; _p->tt__Mpeg4Options2::__anyAttribute = __anyAttribute; _p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable1; _p->tt__Mpeg4Options::GovLengthRange = GovLengthRange1; _p->tt__Mpeg4Options::FrameRateRange = FrameRateRange1; _p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange1; _p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__Mpeg4Options2(struct soap *soap, tt__Mpeg4Options2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Mpeg4Options2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (227)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Options(struct soap*, const char*, int, const tt__Mpeg4Options *, const char*);
SOAP_FMAC3 tt__Mpeg4Options * SOAP_FMAC4 soap_in_tt__Mpeg4Options(struct soap*, const char*, tt__Mpeg4Options *, const char*);

#ifndef soap_write_tt__Mpeg4Options
#define soap_write_tt__Mpeg4Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Mpeg4Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Options * SOAP_FMAC4 soap_get_tt__Mpeg4Options(struct soap*, tt__Mpeg4Options *, const char*, const char*);

#ifndef soap_read_tt__Mpeg4Options
#define soap_read_tt__Mpeg4Options(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Mpeg4Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Mpeg4Options * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Options(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Options * soap_new_tt__Mpeg4Options(struct soap *soap, int n = -1) { return soap_instantiate_tt__Mpeg4Options(soap, n, NULL, NULL, NULL); }

inline tt__Mpeg4Options * soap_new_req_tt__Mpeg4Options(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *GovLengthRange, tt__IntRange *FrameRateRange, tt__IntRange *EncodingIntervalRange, std::vector<enum tt__Mpeg4Profile >& Mpeg4ProfilesSupported) { tt__Mpeg4Options *_p = soap_instantiate_tt__Mpeg4Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable; _p->tt__Mpeg4Options::GovLengthRange = GovLengthRange; _p->tt__Mpeg4Options::FrameRateRange = FrameRateRange; _p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange; _p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported; } return _p; }

inline tt__Mpeg4Options * soap_new_set_tt__Mpeg4Options(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *GovLengthRange, tt__IntRange *FrameRateRange, tt__IntRange *EncodingIntervalRange, std::vector<enum tt__Mpeg4Profile >& Mpeg4ProfilesSupported, char *__item1) { tt__Mpeg4Options *_p = soap_instantiate_tt__Mpeg4Options(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Options::ResolutionsAvailable = ResolutionsAvailable; _p->tt__Mpeg4Options::GovLengthRange = GovLengthRange; _p->tt__Mpeg4Options::FrameRateRange = FrameRateRange; _p->tt__Mpeg4Options::EncodingIntervalRange = EncodingIntervalRange; _p->tt__Mpeg4Options::Mpeg4ProfilesSupported = Mpeg4ProfilesSupported; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Mpeg4Options(struct soap *soap, tt__Mpeg4Options *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Mpeg4Options(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (226)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegOptions2(struct soap*, const char*, int, const tt__JpegOptions2 *, const char*);
SOAP_FMAC3 tt__JpegOptions2 * SOAP_FMAC4 soap_in_tt__JpegOptions2(struct soap*, const char*, tt__JpegOptions2 *, const char*);

#ifndef soap_write_tt__JpegOptions2
#define soap_write_tt__JpegOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:JpegOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JpegOptions2 * SOAP_FMAC4 soap_get_tt__JpegOptions2(struct soap*, tt__JpegOptions2 *, const char*, const char*);

#ifndef soap_read_tt__JpegOptions2
#define soap_read_tt__JpegOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__JpegOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__JpegOptions2 * SOAP_FMAC2 soap_instantiate_tt__JpegOptions2(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegOptions2 * soap_new_tt__JpegOptions2(struct soap *soap, int n = -1) { return soap_instantiate_tt__JpegOptions2(soap, n, NULL, NULL, NULL); }

inline tt__JpegOptions2 * soap_new_req_tt__JpegOptions2(struct soap *soap, tt__IntRange *BitrateRange, std::vector<tt__VideoResolution * >& ResolutionsAvailable1, tt__IntRange *FrameRateRange1, tt__IntRange *EncodingIntervalRange1) { tt__JpegOptions2 *_p = soap_instantiate_tt__JpegOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JpegOptions2::BitrateRange = BitrateRange; _p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable1; _p->tt__JpegOptions::FrameRateRange = FrameRateRange1; _p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange1; } return _p; }

inline tt__JpegOptions2 * soap_new_set_tt__JpegOptions2(struct soap *soap, tt__IntRange *BitrateRange, std::vector<char * >& __any, char *__anyAttribute, std::vector<tt__VideoResolution * >& ResolutionsAvailable1, tt__IntRange *FrameRateRange1, tt__IntRange *EncodingIntervalRange1, char *__item2) { tt__JpegOptions2 *_p = soap_instantiate_tt__JpegOptions2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JpegOptions2::BitrateRange = BitrateRange; _p->tt__JpegOptions2::__any = __any; _p->tt__JpegOptions2::__anyAttribute = __anyAttribute; _p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable1; _p->tt__JpegOptions::FrameRateRange = FrameRateRange1; _p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__JpegOptions2(struct soap *soap, tt__JpegOptions2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__JpegOptions2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (225)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__JpegOptions(struct soap*, const char*, int, const tt__JpegOptions *, const char*);
SOAP_FMAC3 tt__JpegOptions * SOAP_FMAC4 soap_in_tt__JpegOptions(struct soap*, const char*, tt__JpegOptions *, const char*);

#ifndef soap_write_tt__JpegOptions
#define soap_write_tt__JpegOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:JpegOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JpegOptions * SOAP_FMAC4 soap_get_tt__JpegOptions(struct soap*, tt__JpegOptions *, const char*, const char*);

#ifndef soap_read_tt__JpegOptions
#define soap_read_tt__JpegOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__JpegOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__JpegOptions * SOAP_FMAC2 soap_instantiate_tt__JpegOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__JpegOptions * soap_new_tt__JpegOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__JpegOptions(soap, n, NULL, NULL, NULL); }

inline tt__JpegOptions * soap_new_req_tt__JpegOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *FrameRateRange, tt__IntRange *EncodingIntervalRange) { tt__JpegOptions *_p = soap_instantiate_tt__JpegOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__JpegOptions::FrameRateRange = FrameRateRange; _p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange; } return _p; }

inline tt__JpegOptions * soap_new_set_tt__JpegOptions(struct soap *soap, std::vector<tt__VideoResolution * >& ResolutionsAvailable, tt__IntRange *FrameRateRange, tt__IntRange *EncodingIntervalRange, char *__item1) { tt__JpegOptions *_p = soap_instantiate_tt__JpegOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__JpegOptions::ResolutionsAvailable = ResolutionsAvailable; _p->tt__JpegOptions::FrameRateRange = FrameRateRange; _p->tt__JpegOptions::EncodingIntervalRange = EncodingIntervalRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__JpegOptions(struct soap *soap, tt__JpegOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__JpegOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (224)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderOptionsExtension2(struct soap*, const char*, int, const tt__VideoEncoderOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_in_tt__VideoEncoderOptionsExtension2(struct soap*, const char*, tt__VideoEncoderOptionsExtension2 *, const char*);

#ifndef soap_write_tt__VideoEncoderOptionsExtension2
#define soap_write_tt__VideoEncoderOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoderOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC4 soap_get_tt__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoderOptionsExtension2
#define soap_read_tt__VideoEncoderOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoderOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoderOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderOptionsExtension2 * soap_new_tt__VideoEncoderOptionsExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoderOptionsExtension2(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoderOptionsExtension2 * soap_new_req_tt__VideoEncoderOptionsExtension2(struct soap *soap) { tt__VideoEncoderOptionsExtension2 *_p = soap_instantiate_tt__VideoEncoderOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoEncoderOptionsExtension2 * soap_new_set_tt__VideoEncoderOptionsExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__VideoEncoderOptionsExtension2 *_p = soap_instantiate_tt__VideoEncoderOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoderOptionsExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncoderOptionsExtension2(struct soap *soap, tt__VideoEncoderOptionsExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoderOptionsExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (223)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderOptionsExtension(struct soap*, const char*, int, const tt__VideoEncoderOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoEncoderOptionsExtension(struct soap*, const char*, tt__VideoEncoderOptionsExtension *, const char*);

#ifndef soap_write_tt__VideoEncoderOptionsExtension
#define soap_write_tt__VideoEncoderOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoderOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoderOptionsExtension
#define soap_read_tt__VideoEncoderOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoderOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoderOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderOptionsExtension * soap_new_tt__VideoEncoderOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoderOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoderOptionsExtension * soap_new_req_tt__VideoEncoderOptionsExtension(struct soap *soap) { tt__VideoEncoderOptionsExtension *_p = soap_instantiate_tt__VideoEncoderOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoEncoderOptionsExtension * soap_new_set_tt__VideoEncoderOptionsExtension(struct soap *soap, std::vector<char * >& __any, tt__JpegOptions2 *JPEG, tt__Mpeg4Options2 *MPEG4, tt__H264Options2 *H264, tt__VideoEncoderOptionsExtension2 *Extension, char *__item1) { tt__VideoEncoderOptionsExtension *_p = soap_instantiate_tt__VideoEncoderOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoderOptionsExtension::__any = __any; _p->tt__VideoEncoderOptionsExtension::JPEG = JPEG; _p->tt__VideoEncoderOptionsExtension::MPEG4 = MPEG4; _p->tt__VideoEncoderOptionsExtension::H264 = H264; _p->tt__VideoEncoderOptionsExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncoderOptionsExtension(struct soap *soap, tt__VideoEncoderOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoderOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (222)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderConfigurationOptions(struct soap*, const char*, int, const tt__VideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoEncoderConfigurationOptions(struct soap*, const char*, tt__VideoEncoderConfigurationOptions *, const char*);

#ifndef soap_write_tt__VideoEncoderConfigurationOptions
#define soap_write_tt__VideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoEncoderConfigurationOptions(struct soap*, tt__VideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoderConfigurationOptions
#define soap_read_tt__VideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderConfigurationOptions * soap_new_tt__VideoEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoderConfigurationOptions * soap_new_req_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__IntRange *QualityRange) { tt__VideoEncoderConfigurationOptions *_p = soap_instantiate_tt__VideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoderConfigurationOptions::QualityRange = QualityRange; } return _p; }

inline tt__VideoEncoderConfigurationOptions * soap_new_set_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__IntRange *QualityRange, tt__JpegOptions *JPEG, tt__Mpeg4Options *MPEG4, tt__H264Options *H264, tt__VideoEncoderOptionsExtension *Extension, bool *GuaranteedFrameRateSupported, char *__anyAttribute, char *__item1) { tt__VideoEncoderConfigurationOptions *_p = soap_instantiate_tt__VideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoderConfigurationOptions::QualityRange = QualityRange; _p->tt__VideoEncoderConfigurationOptions::JPEG = JPEG; _p->tt__VideoEncoderConfigurationOptions::MPEG4 = MPEG4; _p->tt__VideoEncoderConfigurationOptions::H264 = H264; _p->tt__VideoEncoderConfigurationOptions::Extension = Extension; _p->tt__VideoEncoderConfigurationOptions::GuaranteedFrameRateSupported = GuaranteedFrameRateSupported; _p->tt__VideoEncoderConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoEncoderConfigurationOptions(struct soap *soap, tt__VideoEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (221)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__H264Configuration(struct soap*, const char*, int, const tt__H264Configuration *, const char*);
SOAP_FMAC3 tt__H264Configuration * SOAP_FMAC4 soap_in_tt__H264Configuration(struct soap*, const char*, tt__H264Configuration *, const char*);

#ifndef soap_write_tt__H264Configuration
#define soap_write_tt__H264Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:H264Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Configuration * SOAP_FMAC4 soap_get_tt__H264Configuration(struct soap*, tt__H264Configuration *, const char*, const char*);

#ifndef soap_read_tt__H264Configuration
#define soap_read_tt__H264Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__H264Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__H264Configuration * SOAP_FMAC2 soap_instantiate_tt__H264Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__H264Configuration * soap_new_tt__H264Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__H264Configuration(soap, n, NULL, NULL, NULL); }

inline tt__H264Configuration * soap_new_req_tt__H264Configuration(struct soap *soap, int GovLength, enum tt__H264Profile H264Profile) { tt__H264Configuration *_p = soap_instantiate_tt__H264Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Configuration::GovLength = GovLength; _p->tt__H264Configuration::H264Profile = H264Profile; } return _p; }

inline tt__H264Configuration * soap_new_set_tt__H264Configuration(struct soap *soap, int GovLength, enum tt__H264Profile H264Profile, char *__item1) { tt__H264Configuration *_p = soap_instantiate_tt__H264Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__H264Configuration::GovLength = GovLength; _p->tt__H264Configuration::H264Profile = H264Profile; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__H264Configuration(struct soap *soap, tt__H264Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__H264Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (220)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Mpeg4Configuration(struct soap*, const char*, int, const tt__Mpeg4Configuration *, const char*);
SOAP_FMAC3 tt__Mpeg4Configuration * SOAP_FMAC4 soap_in_tt__Mpeg4Configuration(struct soap*, const char*, tt__Mpeg4Configuration *, const char*);

#ifndef soap_write_tt__Mpeg4Configuration
#define soap_write_tt__Mpeg4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Mpeg4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Configuration * SOAP_FMAC4 soap_get_tt__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *, const char*, const char*);

#ifndef soap_read_tt__Mpeg4Configuration
#define soap_read_tt__Mpeg4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Mpeg4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Mpeg4Configuration * SOAP_FMAC2 soap_instantiate_tt__Mpeg4Configuration(struct soap*, int, const char*, const char*, size_t*);

inline tt__Mpeg4Configuration * soap_new_tt__Mpeg4Configuration(struct soap *soap, int n = -1) { return soap_instantiate_tt__Mpeg4Configuration(soap, n, NULL, NULL, NULL); }

inline tt__Mpeg4Configuration * soap_new_req_tt__Mpeg4Configuration(struct soap *soap, int GovLength, enum tt__Mpeg4Profile Mpeg4Profile) { tt__Mpeg4Configuration *_p = soap_instantiate_tt__Mpeg4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Configuration::GovLength = GovLength; _p->tt__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile; } return _p; }

inline tt__Mpeg4Configuration * soap_new_set_tt__Mpeg4Configuration(struct soap *soap, int GovLength, enum tt__Mpeg4Profile Mpeg4Profile, char *__item1) { tt__Mpeg4Configuration *_p = soap_instantiate_tt__Mpeg4Configuration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Mpeg4Configuration::GovLength = GovLength; _p->tt__Mpeg4Configuration::Mpeg4Profile = Mpeg4Profile; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Mpeg4Configuration(struct soap *soap, tt__Mpeg4Configuration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Mpeg4Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (219)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoRateControl(struct soap*, const char*, int, const tt__VideoRateControl *, const char*);
SOAP_FMAC3 tt__VideoRateControl * SOAP_FMAC4 soap_in_tt__VideoRateControl(struct soap*, const char*, tt__VideoRateControl *, const char*);

#ifndef soap_write_tt__VideoRateControl
#define soap_write_tt__VideoRateControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoRateControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoRateControl * SOAP_FMAC4 soap_get_tt__VideoRateControl(struct soap*, tt__VideoRateControl *, const char*, const char*);

#ifndef soap_read_tt__VideoRateControl
#define soap_read_tt__VideoRateControl(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoRateControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoRateControl * SOAP_FMAC2 soap_instantiate_tt__VideoRateControl(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoRateControl * soap_new_tt__VideoRateControl(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoRateControl(soap, n, NULL, NULL, NULL); }

inline tt__VideoRateControl * soap_new_req_tt__VideoRateControl(struct soap *soap, int FrameRateLimit, int EncodingInterval, int BitrateLimit) { tt__VideoRateControl *_p = soap_instantiate_tt__VideoRateControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoRateControl::FrameRateLimit = FrameRateLimit; _p->tt__VideoRateControl::EncodingInterval = EncodingInterval; _p->tt__VideoRateControl::BitrateLimit = BitrateLimit; } return _p; }

inline tt__VideoRateControl * soap_new_set_tt__VideoRateControl(struct soap *soap, int FrameRateLimit, int EncodingInterval, int BitrateLimit, char *__item1) { tt__VideoRateControl *_p = soap_instantiate_tt__VideoRateControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoRateControl::FrameRateLimit = FrameRateLimit; _p->tt__VideoRateControl::EncodingInterval = EncodingInterval; _p->tt__VideoRateControl::BitrateLimit = BitrateLimit; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoRateControl(struct soap *soap, tt__VideoRateControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoRateControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (218)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoResolution(struct soap*, const char*, int, const tt__VideoResolution *, const char*);
SOAP_FMAC3 tt__VideoResolution * SOAP_FMAC4 soap_in_tt__VideoResolution(struct soap*, const char*, tt__VideoResolution *, const char*);

#ifndef soap_write_tt__VideoResolution
#define soap_write_tt__VideoResolution(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoResolution", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoResolution * SOAP_FMAC4 soap_get_tt__VideoResolution(struct soap*, tt__VideoResolution *, const char*, const char*);

#ifndef soap_read_tt__VideoResolution
#define soap_read_tt__VideoResolution(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoResolution(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoResolution * SOAP_FMAC2 soap_instantiate_tt__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoResolution * soap_new_tt__VideoResolution(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoResolution(soap, n, NULL, NULL, NULL); }

inline tt__VideoResolution * soap_new_req_tt__VideoResolution(struct soap *soap, int Width, int Height) { tt__VideoResolution *_p = soap_instantiate_tt__VideoResolution(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoResolution::Width = Width; _p->tt__VideoResolution::Height = Height; } return _p; }

inline tt__VideoResolution * soap_new_set_tt__VideoResolution(struct soap *soap, int Width, int Height, char *__item1) { tt__VideoResolution *_p = soap_instantiate_tt__VideoResolution(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoResolution::Width = Width; _p->tt__VideoResolution::Height = Height; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoResolution(struct soap *soap, tt__VideoResolution *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoResolution(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (217)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoEncoderConfiguration(struct soap*, const char*, int, const tt__VideoEncoderConfiguration *, const char*);
SOAP_FMAC3 tt__VideoEncoderConfiguration * SOAP_FMAC4 soap_in_tt__VideoEncoderConfiguration(struct soap*, const char*, tt__VideoEncoderConfiguration *, const char*);

#ifndef soap_write_tt__VideoEncoderConfiguration
#define soap_write_tt__VideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderConfiguration * SOAP_FMAC4 soap_get_tt__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read_tt__VideoEncoderConfiguration
#define soap_read_tt__VideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoEncoderConfiguration * soap_new_tt__VideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__VideoEncoderConfiguration * soap_new_req_tt__VideoEncoderConfiguration(struct soap *soap, enum tt__VideoEncoding Encoding, tt__VideoResolution *Resolution, float Quality, tt__MulticastConfiguration *Multicast, LONG64 SessionTimeout, std::string& Name1, int UseCount1, std::string& token1) { tt__VideoEncoderConfiguration *_p = soap_instantiate_tt__VideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoderConfiguration::Encoding = Encoding; _p->tt__VideoEncoderConfiguration::Resolution = Resolution; _p->tt__VideoEncoderConfiguration::Quality = Quality; _p->tt__VideoEncoderConfiguration::Multicast = Multicast; _p->tt__VideoEncoderConfiguration::SessionTimeout = SessionTimeout; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__VideoEncoderConfiguration * soap_new_set_tt__VideoEncoderConfiguration(struct soap *soap, enum tt__VideoEncoding Encoding, tt__VideoResolution *Resolution, float Quality, tt__VideoRateControl *RateControl, tt__Mpeg4Configuration *MPEG4, tt__H264Configuration *H264, tt__MulticastConfiguration *Multicast, LONG64 SessionTimeout, std::vector<char * >& __any, bool *GuaranteedFrameRate, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__VideoEncoderConfiguration *_p = soap_instantiate_tt__VideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoEncoderConfiguration::Encoding = Encoding; _p->tt__VideoEncoderConfiguration::Resolution = Resolution; _p->tt__VideoEncoderConfiguration::Quality = Quality; _p->tt__VideoEncoderConfiguration::RateControl = RateControl; _p->tt__VideoEncoderConfiguration::MPEG4 = MPEG4; _p->tt__VideoEncoderConfiguration::H264 = H264; _p->tt__VideoEncoderConfiguration::Multicast = Multicast; _p->tt__VideoEncoderConfiguration::SessionTimeout = SessionTimeout; _p->tt__VideoEncoderConfiguration::__any = __any; _p->tt__VideoEncoderConfiguration::GuaranteedFrameRate = GuaranteedFrameRate; _p->tt__VideoEncoderConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoEncoderConfiguration(struct soap *soap, tt__VideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (216)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__SceneOrientation(struct soap*, const char*, int, const tt__SceneOrientation *, const char*);
SOAP_FMAC3 tt__SceneOrientation * SOAP_FMAC4 soap_in_tt__SceneOrientation(struct soap*, const char*, tt__SceneOrientation *, const char*);

#ifndef soap_write_tt__SceneOrientation
#define soap_write_tt__SceneOrientation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:SceneOrientation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SceneOrientation * SOAP_FMAC4 soap_get_tt__SceneOrientation(struct soap*, tt__SceneOrientation *, const char*, const char*);

#ifndef soap_read_tt__SceneOrientation
#define soap_read_tt__SceneOrientation(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__SceneOrientation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__SceneOrientation * SOAP_FMAC2 soap_instantiate_tt__SceneOrientation(struct soap*, int, const char*, const char*, size_t*);

inline tt__SceneOrientation * soap_new_tt__SceneOrientation(struct soap *soap, int n = -1) { return soap_instantiate_tt__SceneOrientation(soap, n, NULL, NULL, NULL); }

inline tt__SceneOrientation * soap_new_req_tt__SceneOrientation(struct soap *soap, enum tt__SceneOrientationMode Mode) { tt__SceneOrientation *_p = soap_instantiate_tt__SceneOrientation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SceneOrientation::Mode = Mode; } return _p; }

inline tt__SceneOrientation * soap_new_set_tt__SceneOrientation(struct soap *soap, enum tt__SceneOrientationMode Mode, std::string *Orientation, char *__item1) { tt__SceneOrientation *_p = soap_instantiate_tt__SceneOrientation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__SceneOrientation::Mode = Mode; _p->tt__SceneOrientation::Orientation = Orientation; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__SceneOrientation(struct soap *soap, tt__SceneOrientation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__SceneOrientation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (215)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateOptionsExtension(struct soap*, const char*, int, const tt__RotateOptionsExtension *, const char*);
SOAP_FMAC3 tt__RotateOptionsExtension * SOAP_FMAC4 soap_in_tt__RotateOptionsExtension(struct soap*, const char*, tt__RotateOptionsExtension *, const char*);

#ifndef soap_write_tt__RotateOptionsExtension
#define soap_write_tt__RotateOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RotateOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateOptionsExtension * SOAP_FMAC4 soap_get_tt__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__RotateOptionsExtension
#define soap_read_tt__RotateOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RotateOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RotateOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__RotateOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateOptionsExtension * soap_new_tt__RotateOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RotateOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__RotateOptionsExtension * soap_new_req_tt__RotateOptionsExtension(struct soap *soap) { tt__RotateOptionsExtension *_p = soap_instantiate_tt__RotateOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RotateOptionsExtension * soap_new_set_tt__RotateOptionsExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RotateOptionsExtension *_p = soap_instantiate_tt__RotateOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RotateOptionsExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RotateOptionsExtension(struct soap *soap, tt__RotateOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RotateOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (214)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateOptions(struct soap*, const char*, int, const tt__RotateOptions *, const char*);
SOAP_FMAC3 tt__RotateOptions * SOAP_FMAC4 soap_in_tt__RotateOptions(struct soap*, const char*, tt__RotateOptions *, const char*);

#ifndef soap_write_tt__RotateOptions
#define soap_write_tt__RotateOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RotateOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateOptions * SOAP_FMAC4 soap_get_tt__RotateOptions(struct soap*, tt__RotateOptions *, const char*, const char*);

#ifndef soap_read_tt__RotateOptions
#define soap_read_tt__RotateOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RotateOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RotateOptions * SOAP_FMAC2 soap_instantiate_tt__RotateOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateOptions * soap_new_tt__RotateOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__RotateOptions(soap, n, NULL, NULL, NULL); }

inline tt__RotateOptions * soap_new_req_tt__RotateOptions(struct soap *soap, std::vector<enum tt__RotateMode >& Mode) { tt__RotateOptions *_p = soap_instantiate_tt__RotateOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RotateOptions::Mode = Mode; } return _p; }

inline tt__RotateOptions * soap_new_set_tt__RotateOptions(struct soap *soap, std::vector<enum tt__RotateMode >& Mode, tt__IntItems *DegreeList, tt__RotateOptionsExtension *Extension, bool *Reboot, char *__anyAttribute, char *__item1) { tt__RotateOptions *_p = soap_instantiate_tt__RotateOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RotateOptions::Mode = Mode; _p->tt__RotateOptions::DegreeList = DegreeList; _p->tt__RotateOptions::Extension = Extension; _p->tt__RotateOptions::Reboot = Reboot; _p->tt__RotateOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RotateOptions(struct soap *soap, tt__RotateOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RotateOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (213)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptionsExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension2 *, const char*);

#ifndef soap_write_tt__VideoSourceConfigurationOptionsExtension2
#define soap_write_tt__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceConfigurationOptionsExtension2
#define soap_read_tt__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_req_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap) { tt__VideoSourceConfigurationOptionsExtension2 *_p = soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoSourceConfigurationOptionsExtension2 * soap_new_set_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, std::vector<enum tt__SceneOrientationMode >& SceneOrientationMode, std::vector<char * >& __any, char *__item1) { tt__VideoSourceConfigurationOptionsExtension2 *_p = soap_instantiate_tt__VideoSourceConfigurationOptionsExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfigurationOptionsExtension2::SceneOrientationMode = SceneOrientationMode; _p->tt__VideoSourceConfigurationOptionsExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceConfigurationOptionsExtension2(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceConfigurationOptionsExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (212)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptionsExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension *, const char*);

#ifndef soap_write_tt__VideoSourceConfigurationOptionsExtension
#define soap_write_tt__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceConfigurationOptionsExtension
#define soap_read_tt__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceConfigurationOptionsExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_req_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap) { tt__VideoSourceConfigurationOptionsExtension *_p = soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoSourceConfigurationOptionsExtension * soap_new_set_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, std::vector<char * >& __any, tt__RotateOptions *Rotate, tt__VideoSourceConfigurationOptionsExtension2 *Extension, char *__item1) { tt__VideoSourceConfigurationOptionsExtension *_p = soap_instantiate_tt__VideoSourceConfigurationOptionsExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfigurationOptionsExtension::__any = __any; _p->tt__VideoSourceConfigurationOptionsExtension::Rotate = Rotate; _p->tt__VideoSourceConfigurationOptionsExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceConfigurationOptionsExtension(struct soap *soap, tt__VideoSourceConfigurationOptionsExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceConfigurationOptionsExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (211)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationOptions(struct soap*, const char*, int, const tt__VideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationOptions(struct soap*, const char*, tt__VideoSourceConfigurationOptions *, const char*);

#ifndef soap_write_tt__VideoSourceConfigurationOptions
#define soap_write_tt__VideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationOptions * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceConfigurationOptions
#define soap_read_tt__VideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationOptions * soap_new_tt__VideoSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceConfigurationOptions * soap_new_req_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__IntRectangleRange *BoundsRange, std::vector<std::string >& VideoSourceTokensAvailable) { tt__VideoSourceConfigurationOptions *_p = soap_instantiate_tt__VideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfigurationOptions::BoundsRange = BoundsRange; _p->tt__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable; } return _p; }

inline tt__VideoSourceConfigurationOptions * soap_new_set_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__IntRectangleRange *BoundsRange, std::vector<std::string >& VideoSourceTokensAvailable, tt__VideoSourceConfigurationOptionsExtension *Extension, int *MaximumNumberOfProfiles, char *__anyAttribute, char *__item1) { tt__VideoSourceConfigurationOptions *_p = soap_instantiate_tt__VideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfigurationOptions::BoundsRange = BoundsRange; _p->tt__VideoSourceConfigurationOptions::VideoSourceTokensAvailable = VideoSourceTokensAvailable; _p->tt__VideoSourceConfigurationOptions::Extension = Extension; _p->tt__VideoSourceConfigurationOptions::MaximumNumberOfProfiles = MaximumNumberOfProfiles; _p->tt__VideoSourceConfigurationOptions::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceConfigurationOptions(struct soap *soap, tt__VideoSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (210)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensDescription(struct soap*, const char*, int, const tt__LensDescription *, const char*);
SOAP_FMAC3 tt__LensDescription * SOAP_FMAC4 soap_in_tt__LensDescription(struct soap*, const char*, tt__LensDescription *, const char*);

#ifndef soap_write_tt__LensDescription
#define soap_write_tt__LensDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LensDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LensDescription * SOAP_FMAC4 soap_get_tt__LensDescription(struct soap*, tt__LensDescription *, const char*, const char*);

#ifndef soap_read_tt__LensDescription
#define soap_read_tt__LensDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LensDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LensDescription * SOAP_FMAC2 soap_instantiate_tt__LensDescription(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensDescription * soap_new_tt__LensDescription(struct soap *soap, int n = -1) { return soap_instantiate_tt__LensDescription(soap, n, NULL, NULL, NULL); }

inline tt__LensDescription * soap_new_req_tt__LensDescription(struct soap *soap, tt__LensOffset *Offset, std::vector<tt__LensProjection * >& Projection, float XFactor) { tt__LensDescription *_p = soap_instantiate_tt__LensDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LensDescription::Offset = Offset; _p->tt__LensDescription::Projection = Projection; _p->tt__LensDescription::XFactor = XFactor; } return _p; }

inline tt__LensDescription * soap_new_set_tt__LensDescription(struct soap *soap, tt__LensOffset *Offset, std::vector<tt__LensProjection * >& Projection, float XFactor, std::vector<char * >& __any, float *FocalLength, char *__anyAttribute, char *__item1) { tt__LensDescription *_p = soap_instantiate_tt__LensDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LensDescription::Offset = Offset; _p->tt__LensDescription::Projection = Projection; _p->tt__LensDescription::XFactor = XFactor; _p->tt__LensDescription::__any = __any; _p->tt__LensDescription::FocalLength = FocalLength; _p->tt__LensDescription::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LensDescription(struct soap *soap, tt__LensDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LensDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (209)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensOffset(struct soap*, const char*, int, const tt__LensOffset *, const char*);
SOAP_FMAC3 tt__LensOffset * SOAP_FMAC4 soap_in_tt__LensOffset(struct soap*, const char*, tt__LensOffset *, const char*);

#ifndef soap_write_tt__LensOffset
#define soap_write_tt__LensOffset(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LensOffset", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LensOffset * SOAP_FMAC4 soap_get_tt__LensOffset(struct soap*, tt__LensOffset *, const char*, const char*);

#ifndef soap_read_tt__LensOffset
#define soap_read_tt__LensOffset(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LensOffset(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LensOffset * SOAP_FMAC2 soap_instantiate_tt__LensOffset(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensOffset * soap_new_tt__LensOffset(struct soap *soap, int n = -1) { return soap_instantiate_tt__LensOffset(soap, n, NULL, NULL, NULL); }

inline tt__LensOffset * soap_new_req_tt__LensOffset(struct soap *soap) { tt__LensOffset *_p = soap_instantiate_tt__LensOffset(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__LensOffset * soap_new_set_tt__LensOffset(struct soap *soap, float *x, float *y, char *__anyAttribute, char *__item1) { tt__LensOffset *_p = soap_instantiate_tt__LensOffset(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LensOffset::x = x; _p->tt__LensOffset::y = y; _p->tt__LensOffset::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LensOffset(struct soap *soap, tt__LensOffset *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LensOffset(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (208)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__LensProjection(struct soap*, const char*, int, const tt__LensProjection *, const char*);
SOAP_FMAC3 tt__LensProjection * SOAP_FMAC4 soap_in_tt__LensProjection(struct soap*, const char*, tt__LensProjection *, const char*);

#ifndef soap_write_tt__LensProjection
#define soap_write_tt__LensProjection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:LensProjection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LensProjection * SOAP_FMAC4 soap_get_tt__LensProjection(struct soap*, tt__LensProjection *, const char*, const char*);

#ifndef soap_read_tt__LensProjection
#define soap_read_tt__LensProjection(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__LensProjection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__LensProjection * SOAP_FMAC2 soap_instantiate_tt__LensProjection(struct soap*, int, const char*, const char*, size_t*);

inline tt__LensProjection * soap_new_tt__LensProjection(struct soap *soap, int n = -1) { return soap_instantiate_tt__LensProjection(soap, n, NULL, NULL, NULL); }

inline tt__LensProjection * soap_new_req_tt__LensProjection(struct soap *soap, float Angle, float Radius) { tt__LensProjection *_p = soap_instantiate_tt__LensProjection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LensProjection::Angle = Angle; _p->tt__LensProjection::Radius = Radius; } return _p; }

inline tt__LensProjection * soap_new_set_tt__LensProjection(struct soap *soap, float Angle, float Radius, float *Transmittance, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__LensProjection *_p = soap_instantiate_tt__LensProjection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__LensProjection::Angle = Angle; _p->tt__LensProjection::Radius = Radius; _p->tt__LensProjection::Transmittance = Transmittance; _p->tt__LensProjection::__any = __any; _p->tt__LensProjection::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__LensProjection(struct soap *soap, tt__LensProjection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__LensProjection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (207)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__RotateExtension(struct soap*, const char*, int, const tt__RotateExtension *, const char*);
SOAP_FMAC3 tt__RotateExtension * SOAP_FMAC4 soap_in_tt__RotateExtension(struct soap*, const char*, tt__RotateExtension *, const char*);

#ifndef soap_write_tt__RotateExtension
#define soap_write_tt__RotateExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:RotateExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateExtension * SOAP_FMAC4 soap_get_tt__RotateExtension(struct soap*, tt__RotateExtension *, const char*, const char*);

#ifndef soap_read_tt__RotateExtension
#define soap_read_tt__RotateExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__RotateExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__RotateExtension * SOAP_FMAC2 soap_instantiate_tt__RotateExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__RotateExtension * soap_new_tt__RotateExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__RotateExtension(soap, n, NULL, NULL, NULL); }

inline tt__RotateExtension * soap_new_req_tt__RotateExtension(struct soap *soap) { tt__RotateExtension *_p = soap_instantiate_tt__RotateExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__RotateExtension * soap_new_set_tt__RotateExtension(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__RotateExtension *_p = soap_instantiate_tt__RotateExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__RotateExtension::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__RotateExtension(struct soap *soap, tt__RotateExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__RotateExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (206)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Rotate(struct soap*, const char*, int, const tt__Rotate *, const char*);
SOAP_FMAC3 tt__Rotate * SOAP_FMAC4 soap_in_tt__Rotate(struct soap*, const char*, tt__Rotate *, const char*);

#ifndef soap_write_tt__Rotate
#define soap_write_tt__Rotate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Rotate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Rotate * SOAP_FMAC4 soap_get_tt__Rotate(struct soap*, tt__Rotate *, const char*, const char*);

#ifndef soap_read_tt__Rotate
#define soap_read_tt__Rotate(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Rotate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Rotate * SOAP_FMAC2 soap_instantiate_tt__Rotate(struct soap*, int, const char*, const char*, size_t*);

inline tt__Rotate * soap_new_tt__Rotate(struct soap *soap, int n = -1) { return soap_instantiate_tt__Rotate(soap, n, NULL, NULL, NULL); }

inline tt__Rotate * soap_new_req_tt__Rotate(struct soap *soap, enum tt__RotateMode Mode) { tt__Rotate *_p = soap_instantiate_tt__Rotate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Rotate::Mode = Mode; } return _p; }

inline tt__Rotate * soap_new_set_tt__Rotate(struct soap *soap, enum tt__RotateMode Mode, int *Degree, tt__RotateExtension *Extension, char *__anyAttribute, char *__item1) { tt__Rotate *_p = soap_instantiate_tt__Rotate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Rotate::Mode = Mode; _p->tt__Rotate::Degree = Degree; _p->tt__Rotate::Extension = Extension; _p->tt__Rotate::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Rotate(struct soap *soap, tt__Rotate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Rotate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (205)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationExtension2(struct soap*, const char*, int, const tt__VideoSourceConfigurationExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationExtension2(struct soap*, const char*, tt__VideoSourceConfigurationExtension2 *, const char*);

#ifndef soap_write_tt__VideoSourceConfigurationExtension2
#define soap_write_tt__VideoSourceConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceConfigurationExtension2
#define soap_read_tt__VideoSourceConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceConfigurationExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationExtension2 * soap_new_tt__VideoSourceConfigurationExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceConfigurationExtension2(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceConfigurationExtension2 * soap_new_req_tt__VideoSourceConfigurationExtension2(struct soap *soap) { tt__VideoSourceConfigurationExtension2 *_p = soap_instantiate_tt__VideoSourceConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoSourceConfigurationExtension2 * soap_new_set_tt__VideoSourceConfigurationExtension2(struct soap *soap, std::vector<tt__LensDescription * >& LensDescription, tt__SceneOrientation *SceneOrientation, std::vector<char * >& __any, char *__item1) { tt__VideoSourceConfigurationExtension2 *_p = soap_instantiate_tt__VideoSourceConfigurationExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfigurationExtension2::LensDescription = LensDescription; _p->tt__VideoSourceConfigurationExtension2::SceneOrientation = SceneOrientation; _p->tt__VideoSourceConfigurationExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceConfigurationExtension2(struct soap *soap, tt__VideoSourceConfigurationExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceConfigurationExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (204)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfigurationExtension(struct soap*, const char*, int, const tt__VideoSourceConfigurationExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_in_tt__VideoSourceConfigurationExtension(struct soap*, const char*, tt__VideoSourceConfigurationExtension *, const char*);

#ifndef soap_write_tt__VideoSourceConfigurationExtension
#define soap_write_tt__VideoSourceConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationExtension * SOAP_FMAC4 soap_get_tt__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceConfigurationExtension
#define soap_read_tt__VideoSourceConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceConfigurationExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfigurationExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfigurationExtension * soap_new_tt__VideoSourceConfigurationExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceConfigurationExtension(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceConfigurationExtension * soap_new_req_tt__VideoSourceConfigurationExtension(struct soap *soap) { tt__VideoSourceConfigurationExtension *_p = soap_instantiate_tt__VideoSourceConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoSourceConfigurationExtension * soap_new_set_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__Rotate *Rotate, tt__VideoSourceConfigurationExtension2 *Extension, char *__item1) { tt__VideoSourceConfigurationExtension *_p = soap_instantiate_tt__VideoSourceConfigurationExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfigurationExtension::Rotate = Rotate; _p->tt__VideoSourceConfigurationExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceConfigurationExtension(struct soap *soap, tt__VideoSourceConfigurationExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceConfigurationExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (203)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceConfiguration(struct soap*, const char*, int, const tt__VideoSourceConfiguration *, const char*);
SOAP_FMAC3 tt__VideoSourceConfiguration * SOAP_FMAC4 soap_in_tt__VideoSourceConfiguration(struct soap*, const char*, tt__VideoSourceConfiguration *, const char*);

#ifndef soap_write_tt__VideoSourceConfiguration
#define soap_write_tt__VideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfiguration * SOAP_FMAC4 soap_get_tt__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceConfiguration
#define soap_read_tt__VideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceConfiguration * SOAP_FMAC2 soap_instantiate_tt__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceConfiguration * soap_new_tt__VideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceConfiguration * soap_new_req_tt__VideoSourceConfiguration(struct soap *soap, std::string& SourceToken, tt__IntRectangle *Bounds, std::string& Name1, int UseCount1, std::string& token1) { tt__VideoSourceConfiguration *_p = soap_instantiate_tt__VideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfiguration::SourceToken = SourceToken; _p->tt__VideoSourceConfiguration::Bounds = Bounds; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; } return _p; }

inline tt__VideoSourceConfiguration * soap_new_set_tt__VideoSourceConfiguration(struct soap *soap, std::string& SourceToken, tt__IntRectangle *Bounds, std::vector<char * >& __any, tt__VideoSourceConfigurationExtension *Extension, std::string *ViewMode, char *__anyAttribute, std::string& Name1, int UseCount1, std::string& token1, char *__item2) { tt__VideoSourceConfiguration *_p = soap_instantiate_tt__VideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceConfiguration::SourceToken = SourceToken; _p->tt__VideoSourceConfiguration::Bounds = Bounds; _p->tt__VideoSourceConfiguration::__any = __any; _p->tt__VideoSourceConfiguration::Extension = Extension; _p->tt__VideoSourceConfiguration::ViewMode = ViewMode; _p->tt__VideoSourceConfiguration::__anyAttribute = __anyAttribute; _p->tt__ConfigurationEntity::Name = Name1; _p->tt__ConfigurationEntity::UseCount = UseCount1; _p->tt__ConfigurationEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoSourceConfiguration(struct soap *soap, tt__VideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (202)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ConfigurationEntity(struct soap*, const char*, int, const tt__ConfigurationEntity *, const char*);
SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_in_tt__ConfigurationEntity(struct soap*, const char*, tt__ConfigurationEntity *, const char*);

#ifndef soap_write_tt__ConfigurationEntity
#define soap_write_tt__ConfigurationEntity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ConfigurationEntity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ConfigurationEntity * SOAP_FMAC4 soap_get_tt__ConfigurationEntity(struct soap*, tt__ConfigurationEntity *, const char*, const char*);

#ifndef soap_read_tt__ConfigurationEntity
#define soap_read_tt__ConfigurationEntity(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ConfigurationEntity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ConfigurationEntity * SOAP_FMAC2 soap_instantiate_tt__ConfigurationEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__ConfigurationEntity * soap_new_tt__ConfigurationEntity(struct soap *soap, int n = -1) { return soap_instantiate_tt__ConfigurationEntity(soap, n, NULL, NULL, NULL); }

inline tt__ConfigurationEntity * soap_new_req_tt__ConfigurationEntity(struct soap *soap, std::string& Name, int UseCount, std::string& token) { tt__ConfigurationEntity *_p = soap_instantiate_tt__ConfigurationEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ConfigurationEntity::Name = Name; _p->tt__ConfigurationEntity::UseCount = UseCount; _p->tt__ConfigurationEntity::token = token; } return _p; }

inline tt__ConfigurationEntity * soap_new_set_tt__ConfigurationEntity(struct soap *soap, std::string& Name, int UseCount, std::string& token, char *__item1) { tt__ConfigurationEntity *_p = soap_instantiate_tt__ConfigurationEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ConfigurationEntity::Name = Name; _p->tt__ConfigurationEntity::UseCount = UseCount; _p->tt__ConfigurationEntity::token = token; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ConfigurationEntity(struct soap *soap, tt__ConfigurationEntity *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ConfigurationEntity(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (201)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileExtension2(struct soap*, const char*, int, const tt__ProfileExtension2 *, const char*);
SOAP_FMAC3 tt__ProfileExtension2 * SOAP_FMAC4 soap_in_tt__ProfileExtension2(struct soap*, const char*, tt__ProfileExtension2 *, const char*);

#ifndef soap_write_tt__ProfileExtension2
#define soap_write_tt__ProfileExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ProfileExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileExtension2 * SOAP_FMAC4 soap_get_tt__ProfileExtension2(struct soap*, tt__ProfileExtension2 *, const char*, const char*);

#ifndef soap_read_tt__ProfileExtension2
#define soap_read_tt__ProfileExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ProfileExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ProfileExtension2 * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileExtension2 * soap_new_tt__ProfileExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__ProfileExtension2(soap, n, NULL, NULL, NULL); }

inline tt__ProfileExtension2 * soap_new_req_tt__ProfileExtension2(struct soap *soap) { tt__ProfileExtension2 *_p = soap_instantiate_tt__ProfileExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ProfileExtension2 * soap_new_set_tt__ProfileExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__ProfileExtension2 *_p = soap_instantiate_tt__ProfileExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ProfileExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ProfileExtension2(struct soap *soap, tt__ProfileExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ProfileExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (200)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__ProfileExtension(struct soap*, const char*, int, const tt__ProfileExtension *, const char*);
SOAP_FMAC3 tt__ProfileExtension * SOAP_FMAC4 soap_in_tt__ProfileExtension(struct soap*, const char*, tt__ProfileExtension *, const char*);

#ifndef soap_write_tt__ProfileExtension
#define soap_write_tt__ProfileExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:ProfileExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileExtension * SOAP_FMAC4 soap_get_tt__ProfileExtension(struct soap*, tt__ProfileExtension *, const char*, const char*);

#ifndef soap_read_tt__ProfileExtension
#define soap_read_tt__ProfileExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__ProfileExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__ProfileExtension * SOAP_FMAC2 soap_instantiate_tt__ProfileExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__ProfileExtension * soap_new_tt__ProfileExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__ProfileExtension(soap, n, NULL, NULL, NULL); }

inline tt__ProfileExtension * soap_new_req_tt__ProfileExtension(struct soap *soap) { tt__ProfileExtension *_p = soap_instantiate_tt__ProfileExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__ProfileExtension * soap_new_set_tt__ProfileExtension(struct soap *soap, std::vector<char * >& __any, tt__AudioOutputConfiguration *AudioOutputConfiguration, tt__AudioDecoderConfiguration *AudioDecoderConfiguration, tt__ProfileExtension2 *Extension, char *__anyAttribute, char *__item1) { tt__ProfileExtension *_p = soap_instantiate_tt__ProfileExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__ProfileExtension::__any = __any; _p->tt__ProfileExtension::AudioOutputConfiguration = AudioOutputConfiguration; _p->tt__ProfileExtension::AudioDecoderConfiguration = AudioDecoderConfiguration; _p->tt__ProfileExtension::Extension = Extension; _p->tt__ProfileExtension::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__ProfileExtension(struct soap *soap, tt__ProfileExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__ProfileExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (199)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__Profile(struct soap*, const char*, int, const tt__Profile *, const char*);
SOAP_FMAC3 tt__Profile * SOAP_FMAC4 soap_in_tt__Profile(struct soap*, const char*, tt__Profile *, const char*);

#ifndef soap_write_tt__Profile
#define soap_write_tt__Profile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:Profile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Profile * SOAP_FMAC4 soap_get_tt__Profile(struct soap*, tt__Profile *, const char*, const char*);

#ifndef soap_read_tt__Profile
#define soap_read_tt__Profile(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__Profile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__Profile * SOAP_FMAC2 soap_instantiate_tt__Profile(struct soap*, int, const char*, const char*, size_t*);

inline tt__Profile * soap_new_tt__Profile(struct soap *soap, int n = -1) { return soap_instantiate_tt__Profile(soap, n, NULL, NULL, NULL); }

inline tt__Profile * soap_new_req_tt__Profile(struct soap *soap, std::string& Name, std::string& token) { tt__Profile *_p = soap_instantiate_tt__Profile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Profile::Name = Name; _p->tt__Profile::token = token; } return _p; }

inline tt__Profile * soap_new_set_tt__Profile(struct soap *soap, std::string& Name, tt__VideoSourceConfiguration *VideoSourceConfiguration, tt__AudioSourceConfiguration *AudioSourceConfiguration, tt__VideoEncoderConfiguration *VideoEncoderConfiguration, tt__AudioEncoderConfiguration *AudioEncoderConfiguration, tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration, tt__PTZConfiguration *PTZConfiguration, tt__MetadataConfiguration *MetadataConfiguration, tt__ProfileExtension *Extension, std::string& token, bool *fixed, char *__anyAttribute, char *__item1) { tt__Profile *_p = soap_instantiate_tt__Profile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__Profile::Name = Name; _p->tt__Profile::VideoSourceConfiguration = VideoSourceConfiguration; _p->tt__Profile::AudioSourceConfiguration = AudioSourceConfiguration; _p->tt__Profile::VideoEncoderConfiguration = VideoEncoderConfiguration; _p->tt__Profile::AudioEncoderConfiguration = AudioEncoderConfiguration; _p->tt__Profile::VideoAnalyticsConfiguration = VideoAnalyticsConfiguration; _p->tt__Profile::PTZConfiguration = PTZConfiguration; _p->tt__Profile::MetadataConfiguration = MetadataConfiguration; _p->tt__Profile::Extension = Extension; _p->tt__Profile::token = token; _p->tt__Profile::fixed = fixed; _p->tt__Profile::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__Profile(struct soap *soap, tt__Profile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (198)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AudioSource(struct soap*, const char*, int, const tt__AudioSource *, const char*);
SOAP_FMAC3 tt__AudioSource * SOAP_FMAC4 soap_in_tt__AudioSource(struct soap*, const char*, tt__AudioSource *, const char*);

#ifndef soap_write_tt__AudioSource
#define soap_write_tt__AudioSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AudioSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSource * SOAP_FMAC4 soap_get_tt__AudioSource(struct soap*, tt__AudioSource *, const char*, const char*);

#ifndef soap_read_tt__AudioSource
#define soap_read_tt__AudioSource(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AudioSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AudioSource * SOAP_FMAC2 soap_instantiate_tt__AudioSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__AudioSource * soap_new_tt__AudioSource(struct soap *soap, int n = -1) { return soap_instantiate_tt__AudioSource(soap, n, NULL, NULL, NULL); }

inline tt__AudioSource * soap_new_req_tt__AudioSource(struct soap *soap, int Channels, std::string& token1) { tt__AudioSource *_p = soap_instantiate_tt__AudioSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSource::Channels = Channels; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__AudioSource * soap_new_set_tt__AudioSource(struct soap *soap, int Channels, std::vector<char * >& __any, char *__anyAttribute, std::string& token1, char *__item2) { tt__AudioSource *_p = soap_instantiate_tt__AudioSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AudioSource::Channels = Channels; _p->tt__AudioSource::__any = __any; _p->tt__AudioSource::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__AudioSource(struct soap *soap, tt__AudioSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AudioSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (197)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceExtension2(struct soap*, const char*, int, const tt__VideoSourceExtension2 *, const char*);
SOAP_FMAC3 tt__VideoSourceExtension2 * SOAP_FMAC4 soap_in_tt__VideoSourceExtension2(struct soap*, const char*, tt__VideoSourceExtension2 *, const char*);

#ifndef soap_write_tt__VideoSourceExtension2
#define soap_write_tt__VideoSourceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceExtension2 * SOAP_FMAC4 soap_get_tt__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceExtension2
#define soap_read_tt__VideoSourceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceExtension2 * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension2(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceExtension2 * soap_new_tt__VideoSourceExtension2(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceExtension2(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceExtension2 * soap_new_req_tt__VideoSourceExtension2(struct soap *soap) { tt__VideoSourceExtension2 *_p = soap_instantiate_tt__VideoSourceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoSourceExtension2 * soap_new_set_tt__VideoSourceExtension2(struct soap *soap, std::vector<char * >& __any, char *__item1) { tt__VideoSourceExtension2 *_p = soap_instantiate_tt__VideoSourceExtension2(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceExtension2::__any = __any; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceExtension2(struct soap *soap, tt__VideoSourceExtension2 *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceExtension2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (196)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSourceExtension(struct soap*, const char*, int, const tt__VideoSourceExtension *, const char*);
SOAP_FMAC3 tt__VideoSourceExtension * SOAP_FMAC4 soap_in_tt__VideoSourceExtension(struct soap*, const char*, tt__VideoSourceExtension *, const char*);

#ifndef soap_write_tt__VideoSourceExtension
#define soap_write_tt__VideoSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceExtension * SOAP_FMAC4 soap_get_tt__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *, const char*, const char*);

#ifndef soap_read_tt__VideoSourceExtension
#define soap_read_tt__VideoSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSourceExtension * SOAP_FMAC2 soap_instantiate_tt__VideoSourceExtension(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSourceExtension * soap_new_tt__VideoSourceExtension(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSourceExtension(soap, n, NULL, NULL, NULL); }

inline tt__VideoSourceExtension * soap_new_req_tt__VideoSourceExtension(struct soap *soap) { tt__VideoSourceExtension *_p = soap_instantiate_tt__VideoSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__VideoSourceExtension * soap_new_set_tt__VideoSourceExtension(struct soap *soap, std::vector<char * >& __any, tt__ImagingSettings20 *Imaging, tt__VideoSourceExtension2 *Extension, char *__item1) { tt__VideoSourceExtension *_p = soap_instantiate_tt__VideoSourceExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSourceExtension::__any = __any; _p->tt__VideoSourceExtension::Imaging = Imaging; _p->tt__VideoSourceExtension::Extension = Extension; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__VideoSourceExtension(struct soap *soap, tt__VideoSourceExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSourceExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (195)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__VideoSource(struct soap*, const char*, int, const tt__VideoSource *, const char*);
SOAP_FMAC3 tt__VideoSource * SOAP_FMAC4 soap_in_tt__VideoSource(struct soap*, const char*, tt__VideoSource *, const char*);

#ifndef soap_write_tt__VideoSource
#define soap_write_tt__VideoSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:VideoSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSource * SOAP_FMAC4 soap_get_tt__VideoSource(struct soap*, tt__VideoSource *, const char*, const char*);

#ifndef soap_read_tt__VideoSource
#define soap_read_tt__VideoSource(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__VideoSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__VideoSource * SOAP_FMAC2 soap_instantiate_tt__VideoSource(struct soap*, int, const char*, const char*, size_t*);

inline tt__VideoSource * soap_new_tt__VideoSource(struct soap *soap, int n = -1) { return soap_instantiate_tt__VideoSource(soap, n, NULL, NULL, NULL); }

inline tt__VideoSource * soap_new_req_tt__VideoSource(struct soap *soap, float Framerate, tt__VideoResolution *Resolution, std::string& token1) { tt__VideoSource *_p = soap_instantiate_tt__VideoSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSource::Framerate = Framerate; _p->tt__VideoSource::Resolution = Resolution; _p->tt__DeviceEntity::token = token1; } return _p; }

inline tt__VideoSource * soap_new_set_tt__VideoSource(struct soap *soap, float Framerate, tt__VideoResolution *Resolution, tt__ImagingSettings *Imaging, tt__VideoSourceExtension *Extension, char *__anyAttribute, std::string& token1, char *__item2) { tt__VideoSource *_p = soap_instantiate_tt__VideoSource(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__VideoSource::Framerate = Framerate; _p->tt__VideoSource::Resolution = Resolution; _p->tt__VideoSource::Imaging = Imaging; _p->tt__VideoSource::Extension = Extension; _p->tt__VideoSource::__anyAttribute = __anyAttribute; _p->tt__DeviceEntity::token = token1; _p->xsd__anyType::__item = __item2; } return _p; }

inline void soap_delete_tt__VideoSource(struct soap *soap, tt__VideoSource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__VideoSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (194)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__AnyHolder(struct soap*, const char*, int, const tt__AnyHolder *, const char*);
SOAP_FMAC3 tt__AnyHolder * SOAP_FMAC4 soap_in_tt__AnyHolder(struct soap*, const char*, tt__AnyHolder *, const char*);

#ifndef soap_write_tt__AnyHolder
#define soap_write_tt__AnyHolder(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:AnyHolder", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnyHolder * SOAP_FMAC4 soap_get_tt__AnyHolder(struct soap*, tt__AnyHolder *, const char*, const char*);

#ifndef soap_read_tt__AnyHolder
#define soap_read_tt__AnyHolder(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__AnyHolder(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__AnyHolder * SOAP_FMAC2 soap_instantiate_tt__AnyHolder(struct soap*, int, const char*, const char*, size_t*);

inline tt__AnyHolder * soap_new_tt__AnyHolder(struct soap *soap, int n = -1) { return soap_instantiate_tt__AnyHolder(soap, n, NULL, NULL, NULL); }

inline tt__AnyHolder * soap_new_req_tt__AnyHolder(struct soap *soap) { tt__AnyHolder *_p = soap_instantiate_tt__AnyHolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__AnyHolder * soap_new_set_tt__AnyHolder(struct soap *soap, std::vector<char * >& __any, char *__anyAttribute, char *__item1) { tt__AnyHolder *_p = soap_instantiate_tt__AnyHolder(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__AnyHolder::__any = __any; _p->tt__AnyHolder::__anyAttribute = __anyAttribute; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__AnyHolder(struct soap *soap, tt__AnyHolder *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__AnyHolder(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FloatItems
#define SOAP_TYPE_tt__FloatItems (193)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatItems(struct soap*, const char*, int, const tt__FloatItems *, const char*);
SOAP_FMAC3 tt__FloatItems * SOAP_FMAC4 soap_in_tt__FloatItems(struct soap*, const char*, tt__FloatItems *, const char*);

#ifndef soap_write_tt__FloatItems
#define soap_write_tt__FloatItems(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FloatItems", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FloatItems * SOAP_FMAC4 soap_get_tt__FloatItems(struct soap*, tt__FloatItems *, const char*, const char*);

#ifndef soap_read_tt__FloatItems
#define soap_read_tt__FloatItems(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FloatItems(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FloatItems * SOAP_FMAC2 soap_instantiate_tt__FloatItems(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatItems * soap_new_tt__FloatItems(struct soap *soap, int n = -1) { return soap_instantiate_tt__FloatItems(soap, n, NULL, NULL, NULL); }

inline tt__FloatItems * soap_new_req_tt__FloatItems(struct soap *soap) { tt__FloatItems *_p = soap_instantiate_tt__FloatItems(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__FloatItems * soap_new_set_tt__FloatItems(struct soap *soap, std::vector<float >& Items, char *__item1) { tt__FloatItems *_p = soap_instantiate_tt__FloatItems(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FloatItems::Items = Items; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FloatItems(struct soap *soap, tt__FloatItems *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FloatItems(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IntItems
#define SOAP_TYPE_tt__IntItems (192)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntItems(struct soap*, const char*, int, const tt__IntItems *, const char*);
SOAP_FMAC3 tt__IntItems * SOAP_FMAC4 soap_in_tt__IntItems(struct soap*, const char*, tt__IntItems *, const char*);

#ifndef soap_write_tt__IntItems
#define soap_write_tt__IntItems(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IntItems", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntItems * SOAP_FMAC4 soap_get_tt__IntItems(struct soap*, tt__IntItems *, const char*, const char*);

#ifndef soap_read_tt__IntItems
#define soap_read_tt__IntItems(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IntItems(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IntItems * SOAP_FMAC2 soap_instantiate_tt__IntItems(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntItems * soap_new_tt__IntItems(struct soap *soap, int n = -1) { return soap_instantiate_tt__IntItems(soap, n, NULL, NULL, NULL); }

inline tt__IntItems * soap_new_req_tt__IntItems(struct soap *soap) { tt__IntItems *_p = soap_instantiate_tt__IntItems(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline tt__IntItems * soap_new_set_tt__IntItems(struct soap *soap, std::vector<int >& Items, char *__item1) { tt__IntItems *_p = soap_instantiate_tt__IntItems(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntItems::Items = Items; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IntItems(struct soap *soap, tt__IntItems *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IntItems(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (191)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DurationRange(struct soap*, const char*, int, const tt__DurationRange *, const char*);
SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_in_tt__DurationRange(struct soap*, const char*, tt__DurationRange *, const char*);

#ifndef soap_write_tt__DurationRange
#define soap_write_tt__DurationRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DurationRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DurationRange * SOAP_FMAC4 soap_get_tt__DurationRange(struct soap*, tt__DurationRange *, const char*, const char*);

#ifndef soap_read_tt__DurationRange
#define soap_read_tt__DurationRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DurationRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DurationRange * SOAP_FMAC2 soap_instantiate_tt__DurationRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__DurationRange * soap_new_tt__DurationRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__DurationRange(soap, n, NULL, NULL, NULL); }

inline tt__DurationRange * soap_new_req_tt__DurationRange(struct soap *soap, LONG64 Min, LONG64 Max) { tt__DurationRange *_p = soap_instantiate_tt__DurationRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DurationRange::Min = Min; _p->tt__DurationRange::Max = Max; } return _p; }

inline tt__DurationRange * soap_new_set_tt__DurationRange(struct soap *soap, LONG64 Min, LONG64 Max, char *__item1) { tt__DurationRange *_p = soap_instantiate_tt__DurationRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DurationRange::Min = Min; _p->tt__DurationRange::Max = Max; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DurationRange(struct soap *soap, tt__DurationRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DurationRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (190)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__FloatRange(struct soap*, const char*, int, const tt__FloatRange *, const char*);
SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_in_tt__FloatRange(struct soap*, const char*, tt__FloatRange *, const char*);

#ifndef soap_write_tt__FloatRange
#define soap_write_tt__FloatRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:FloatRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FloatRange * SOAP_FMAC4 soap_get_tt__FloatRange(struct soap*, tt__FloatRange *, const char*, const char*);

#ifndef soap_read_tt__FloatRange
#define soap_read_tt__FloatRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__FloatRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__FloatRange * SOAP_FMAC2 soap_instantiate_tt__FloatRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__FloatRange * soap_new_tt__FloatRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__FloatRange(soap, n, NULL, NULL, NULL); }

inline tt__FloatRange * soap_new_req_tt__FloatRange(struct soap *soap, float Min, float Max) { tt__FloatRange *_p = soap_instantiate_tt__FloatRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FloatRange::Min = Min; _p->tt__FloatRange::Max = Max; } return _p; }

inline tt__FloatRange * soap_new_set_tt__FloatRange(struct soap *soap, float Min, float Max, char *__item1) { tt__FloatRange *_p = soap_instantiate_tt__FloatRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__FloatRange::Min = Min; _p->tt__FloatRange::Max = Max; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__FloatRange(struct soap *soap, tt__FloatRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__FloatRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (189)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRectangleRange(struct soap*, const char*, int, const tt__IntRectangleRange *, const char*);
SOAP_FMAC3 tt__IntRectangleRange * SOAP_FMAC4 soap_in_tt__IntRectangleRange(struct soap*, const char*, tt__IntRectangleRange *, const char*);

#ifndef soap_write_tt__IntRectangleRange
#define soap_write_tt__IntRectangleRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IntRectangleRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntRectangleRange * SOAP_FMAC4 soap_get_tt__IntRectangleRange(struct soap*, tt__IntRectangleRange *, const char*, const char*);

#ifndef soap_read_tt__IntRectangleRange
#define soap_read_tt__IntRectangleRange(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IntRectangleRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IntRectangleRange * SOAP_FMAC2 soap_instantiate_tt__IntRectangleRange(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRectangleRange * soap_new_tt__IntRectangleRange(struct soap *soap, int n = -1) { return soap_instantiate_tt__IntRectangleRange(soap, n, NULL, NULL, NULL); }

inline tt__IntRectangleRange * soap_new_req_tt__IntRectangleRange(struct soap *soap, tt__IntRange *XRange, tt__IntRange *YRange, tt__IntRange *WidthRange, tt__IntRange *HeightRange) { tt__IntRectangleRange *_p = soap_instantiate_tt__IntRectangleRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntRectangleRange::XRange = XRange; _p->tt__IntRectangleRange::YRange = YRange; _p->tt__IntRectangleRange::WidthRange = WidthRange; _p->tt__IntRectangleRange::HeightRange = HeightRange; } return _p; }

inline tt__IntRectangleRange * soap_new_set_tt__IntRectangleRange(struct soap *soap, tt__IntRange *XRange, tt__IntRange *YRange, tt__IntRange *WidthRange, tt__IntRange *HeightRange, char *__item1) { tt__IntRectangleRange *_p = soap_instantiate_tt__IntRectangleRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntRectangleRange::XRange = XRange; _p->tt__IntRectangleRange::YRange = YRange; _p->tt__IntRectangleRange::WidthRange = WidthRange; _p->tt__IntRectangleRange::HeightRange = HeightRange; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IntRectangleRange(struct soap *soap, tt__IntRectangleRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IntRectangleRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (188)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__IntRectangle(struct soap*, const char*, int, const tt__IntRectangle *, const char*);
SOAP_FMAC3 tt__IntRectangle * SOAP_FMAC4 soap_in_tt__IntRectangle(struct soap*, const char*, tt__IntRectangle *, const char*);

#ifndef soap_write_tt__IntRectangle
#define soap_write_tt__IntRectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:IntRectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntRectangle * SOAP_FMAC4 soap_get_tt__IntRectangle(struct soap*, tt__IntRectangle *, const char*, const char*);

#ifndef soap_read_tt__IntRectangle
#define soap_read_tt__IntRectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__IntRectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__IntRectangle * SOAP_FMAC2 soap_instantiate_tt__IntRectangle(struct soap*, int, const char*, const char*, size_t*);

inline tt__IntRectangle * soap_new_tt__IntRectangle(struct soap *soap, int n = -1) { return soap_instantiate_tt__IntRectangle(soap, n, NULL, NULL, NULL); }

inline tt__IntRectangle * soap_new_req_tt__IntRectangle(struct soap *soap, int x, int y, int width, int height) { tt__IntRectangle *_p = soap_instantiate_tt__IntRectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntRectangle::x = x; _p->tt__IntRectangle::y = y; _p->tt__IntRectangle::width = width; _p->tt__IntRectangle::height = height; } return _p; }

inline tt__IntRectangle * soap_new_set_tt__IntRectangle(struct soap *soap, int x, int y, int width, int height, char *__item1) { tt__IntRectangle *_p = soap_instantiate_tt__IntRectangle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__IntRectangle::x = x; _p->tt__IntRectangle::y = y; _p->tt__IntRectangle::width = width; _p->tt__IntRectangle::height = height; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__IntRectangle(struct soap *soap, tt__IntRectangle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__IntRectangle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (187)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_tt__DeviceEntity(struct soap*, const char*, int, const tt__DeviceEntity *, const char*);
SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_in_tt__DeviceEntity(struct soap*, const char*, tt__DeviceEntity *, const char*);

#ifndef soap_write_tt__DeviceEntity
#define soap_write_tt__DeviceEntity(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "tt:DeviceEntity", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceEntity * SOAP_FMAC4 soap_get_tt__DeviceEntity(struct soap*, tt__DeviceEntity *, const char*, const char*);

#ifndef soap_read_tt__DeviceEntity
#define soap_read_tt__DeviceEntity(soap, data) ( soap_begin_recv(soap) || !soap_get_tt__DeviceEntity(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 tt__DeviceEntity * SOAP_FMAC2 soap_instantiate_tt__DeviceEntity(struct soap*, int, const char*, const char*, size_t*);

inline tt__DeviceEntity * soap_new_tt__DeviceEntity(struct soap *soap, int n = -1) { return soap_instantiate_tt__DeviceEntity(soap, n, NULL, NULL, NULL); }

inline tt__DeviceEntity * soap_new_req_tt__DeviceEntity(struct soap *soap, std::string& token) { tt__DeviceEntity *_p = soap_instantiate_tt__DeviceEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceEntity::token = token; } return _p; }

inline tt__DeviceEntity * soap_new_set_tt__DeviceEntity(struct soap *soap, std::string& token, char *__item1) { tt__DeviceEntity *_p = soap_instantiate_tt__DeviceEntity(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->tt__DeviceEntity::token = token; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_tt__DeviceEntity(struct soap *soap, tt__DeviceEntity *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_tt__DeviceEntity(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _xml__lang is a typedef element/attribute synonym for std__string */

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (186)
#endif

#define soap_default__xml__lang(soap, a) soap_default_std__string(soap, a)


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap_out__xml__lang soap_out_std__string


#define soap_in__xml__lang soap_in_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_copy__xml__lang soap_copy_std__string

#ifndef SOAP_TYPE_xsd__token_
#define SOAP_TYPE_xsd__token_ (185)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token_(struct soap*, const char*, int, const xsd__token_ *, const char*);
SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_in_xsd__token_(struct soap*, const char*, xsd__token_ *, const char*);

#ifndef soap_write_xsd__token_
#define soap_write_xsd__token_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__token_ * SOAP_FMAC4 soap_get_xsd__token_(struct soap*, xsd__token_ *, const char*, const char*);

#ifndef soap_read_xsd__token_
#define soap_read_xsd__token_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__token_ * SOAP_FMAC2 soap_instantiate_xsd__token_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__token_ * soap_new_xsd__token_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__token_(soap, n, NULL, NULL, NULL); }

inline xsd__token_ * soap_new_req_xsd__token_(struct soap *soap, std::string& __item) { xsd__token_ *_p = soap_instantiate_xsd__token_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__token_::__item = __item; } return _p; }

inline xsd__token_ * soap_new_set_xsd__token_(struct soap *soap, std::string& __item, char *__item1) { xsd__token_ *_p = soap_instantiate_xsd__token_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__token_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__token_(struct soap *soap, xsd__token_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__token_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (184)
#endif

#define soap_default_xsd__token(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__token
#define soap_write_xsd__token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__token(soap, data), 0) || soap_put_xsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__token
#define soap_read_xsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_copy_xsd__token soap_copy_std__string

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (183)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap, std::string& __item) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, std::string& __item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__nonNegativeInteger_
#define SOAP_TYPE_xsd__nonNegativeInteger_ (182)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger_(struct soap*, const char*, int, const xsd__nonNegativeInteger_ *, const char*);
SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger_(struct soap*, const char*, xsd__nonNegativeInteger_ *, const char*);

#ifndef soap_write_xsd__nonNegativeInteger_
#define soap_write_xsd__nonNegativeInteger_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__nonNegativeInteger_ * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger_(struct soap*, xsd__nonNegativeInteger_ *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger_
#define soap_read_xsd__nonNegativeInteger_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__nonNegativeInteger_ * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__nonNegativeInteger_ * soap_new_xsd__nonNegativeInteger_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__nonNegativeInteger_(soap, n, NULL, NULL, NULL); }

inline xsd__nonNegativeInteger_ * soap_new_req_xsd__nonNegativeInteger_(struct soap *soap, std::string& __item) { xsd__nonNegativeInteger_ *_p = soap_instantiate_xsd__nonNegativeInteger_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__nonNegativeInteger_::__item = __item; } return _p; }

inline xsd__nonNegativeInteger_ * soap_new_set_xsd__nonNegativeInteger_(struct soap *soap, std::string& __item, char *__item1) { xsd__nonNegativeInteger_ *_p = soap_instantiate_xsd__nonNegativeInteger_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__nonNegativeInteger_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__nonNegativeInteger_(struct soap *soap, xsd__nonNegativeInteger_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__nonNegativeInteger_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (181)
#endif

#define soap_default_xsd__nonNegativeInteger(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__nonNegativeInteger
#define soap_write_xsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__nonNegativeInteger(soap, data), 0) || soap_put_xsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger
#define soap_read_xsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__string


#define soap_copy_xsd__nonNegativeInteger soap_copy_std__string

#ifndef SOAP_TYPE_xsd__integer_
#define SOAP_TYPE_xsd__integer_ (180)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer_(struct soap*, const char*, int, const xsd__integer_ *, const char*);
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_in_xsd__integer_(struct soap*, const char*, xsd__integer_ *, const char*);

#ifndef soap_write_xsd__integer_
#define soap_write_xsd__integer_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_get_xsd__integer_(struct soap*, xsd__integer_ *, const char*, const char*);

#ifndef soap_read_xsd__integer_
#define soap_read_xsd__integer_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__integer_ * SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__integer_ * soap_new_xsd__integer_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__integer_(soap, n, NULL, NULL, NULL); }

inline xsd__integer_ * soap_new_req_xsd__integer_(struct soap *soap, std::string& __item) { xsd__integer_ *_p = soap_instantiate_xsd__integer_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__integer_::__item = __item; } return _p; }

inline xsd__integer_ * soap_new_set_xsd__integer_(struct soap *soap, std::string& __item, char *__item1) { xsd__integer_ *_p = soap_instantiate_xsd__integer_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__integer_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__integer_(struct soap *soap, xsd__integer_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__integer_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (179)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data), 0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_copy_xsd__integer soap_copy_std__string

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (178)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__hexBinary_
#define SOAP_TYPE_xsd__hexBinary_ (177)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary_(struct soap*, const char*, int, const xsd__hexBinary_ *, const char*);
SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_in_xsd__hexBinary_(struct soap*, const char*, xsd__hexBinary_ *, const char*);

#ifndef soap_write_xsd__hexBinary_
#define soap_write_xsd__hexBinary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:hexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_get_xsd__hexBinary_(struct soap*, xsd__hexBinary_ *, const char*, const char*);

#ifndef soap_read_xsd__hexBinary_
#define soap_read_xsd__hexBinary_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__hexBinary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__hexBinary_ * SOAP_FMAC2 soap_instantiate_xsd__hexBinary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary_ * soap_new_xsd__hexBinary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__hexBinary_(soap, n, NULL, NULL, NULL); }

inline xsd__hexBinary_ * soap_new_req_xsd__hexBinary_(struct soap *soap, xsd__hexBinary& __item) { xsd__hexBinary_ *_p = soap_instantiate_xsd__hexBinary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary_::__item = __item; } return _p; }

inline xsd__hexBinary_ * soap_new_set_xsd__hexBinary_(struct soap *soap, xsd__hexBinary& __item, char *__item1) { xsd__hexBinary_ *_p = soap_instantiate_xsd__hexBinary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (175)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);

#ifndef soap_write_xsd__float
#define soap_write_xsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

#ifndef soap_read_xsd__float
#define soap_read_xsd__float(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1) { return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL); }

inline xsd__float * soap_new_req_xsd__float(struct soap *soap, float __item) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; } return _p; }

inline xsd__float * soap_new_set_xsd__float(struct soap *soap, float __item, char *__item1) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__float(struct soap *soap, xsd__float *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (174)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);

#ifndef soap_write_xsd__duration_
#define soap_write_xsd__duration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

#ifndef soap_read_xsd__duration_
#define soap_read_xsd__duration_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL); }

inline xsd__duration_ * soap_new_req_xsd__duration_(struct soap *soap, LONG64 __item) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; } return _p; }

inline xsd__duration_ * soap_new_set_xsd__duration_(struct soap *soap, LONG64 __item, char *__item1) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__duration_(struct soap *soap, xsd__duration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (172)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1) { return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL); }

inline xsd__double * soap_new_req_xsd__double(struct soap *soap, double __item) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; } return _p; }

inline xsd__double * soap_new_set_xsd__double(struct soap *soap, double __item, char *__item1) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__double(struct soap *soap, xsd__double *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (170)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (168)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (167)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);

#ifndef soap_write_xsd__base64Binary_
#define soap_write_xsd__base64Binary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary_
#define soap_read_xsd__base64Binary_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; } return _p; }

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item, char *__item1) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (166)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);

#ifndef soap_write_xsd__anyURI_
#define soap_write_xsd__anyURI_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

#ifndef soap_read_xsd__anyURI_
#define soap_read_xsd__anyURI_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL); }

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(struct soap *soap, std::string& __item) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; } return _p; }

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(struct soap *soap, std::string& __item, char *__item1) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (165)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data), 0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_xsd__anySimpleType_
#define SOAP_TYPE_xsd__anySimpleType_ (164)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType_(struct soap*, const char*, int, const xsd__anySimpleType_ *, const char*);
SOAP_FMAC3 xsd__anySimpleType_ * SOAP_FMAC4 soap_in_xsd__anySimpleType_(struct soap*, const char*, xsd__anySimpleType_ *, const char*);

#ifndef soap_write_xsd__anySimpleType_
#define soap_write_xsd__anySimpleType_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anySimpleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anySimpleType_ * SOAP_FMAC4 soap_get_xsd__anySimpleType_(struct soap*, xsd__anySimpleType_ *, const char*, const char*);

#ifndef soap_read_xsd__anySimpleType_
#define soap_read_xsd__anySimpleType_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anySimpleType_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anySimpleType_ * SOAP_FMAC2 soap_instantiate_xsd__anySimpleType_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anySimpleType_ * soap_new_xsd__anySimpleType_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anySimpleType_(soap, n, NULL, NULL, NULL); }

inline xsd__anySimpleType_ * soap_new_req_xsd__anySimpleType_(struct soap *soap, std::string& __item) { xsd__anySimpleType_ *_p = soap_instantiate_xsd__anySimpleType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anySimpleType_::__item = __item; } return _p; }

inline xsd__anySimpleType_ * soap_new_set_xsd__anySimpleType_(struct soap *soap, std::string& __item, char *__item1) { xsd__anySimpleType_ *_p = soap_instantiate_xsd__anySimpleType_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anySimpleType_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anySimpleType_(struct soap *soap, xsd__anySimpleType_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anySimpleType_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (163)
#endif

#define soap_default_xsd__anySimpleType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anySimpleType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anySimpleType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anySimpleType
#define soap_write_xsd__anySimpleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anySimpleType(soap, data), 0) || soap_put_xsd__anySimpleType(soap, data, "xsd:anySimpleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anySimpleType
#define soap_read_xsd__anySimpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anySimpleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anySimpleType soap_instantiate_std__string


#define soap_copy_xsd__anySimpleType soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (162)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap*, const char*, int, const xsd__QName_ *, const char*);
SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap*, const char*, xsd__QName_ *, const char*);

#ifndef soap_write_xsd__QName_
#define soap_write_xsd__QName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap*, xsd__QName_ *, const char*, const char*);

#ifndef soap_read_xsd__QName_
#define soap_read_xsd__QName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName_ * soap_new_xsd__QName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName_(soap, n, NULL, NULL, NULL); }

inline xsd__QName_ * soap_new_req_xsd__QName_(struct soap *soap, std::string& __item) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; } return _p; }

inline xsd__QName_ * soap_new_set_xsd__QName_(struct soap *soap, std::string& __item, char *__item1) { xsd__QName_ *_p = soap_instantiate_xsd__QName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__QName_(struct soap *soap, xsd__QName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__NCName_
#define SOAP_TYPE_xsd__NCName_ (161)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName_(struct soap*, const char*, int, const xsd__NCName_ *, const char*);
SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_in_xsd__NCName_(struct soap*, const char*, xsd__NCName_ *, const char*);

#ifndef soap_write_xsd__NCName_
#define soap_write_xsd__NCName_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__NCName_ * SOAP_FMAC4 soap_get_xsd__NCName_(struct soap*, xsd__NCName_ *, const char*, const char*);

#ifndef soap_read_xsd__NCName_
#define soap_read_xsd__NCName_(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__NCName_ * SOAP_FMAC2 soap_instantiate_xsd__NCName_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__NCName_ * soap_new_xsd__NCName_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__NCName_(soap, n, NULL, NULL, NULL); }

inline xsd__NCName_ * soap_new_req_xsd__NCName_(struct soap *soap, std::string& __item) { xsd__NCName_ *_p = soap_instantiate_xsd__NCName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__NCName_::__item = __item; } return _p; }

inline xsd__NCName_ * soap_new_set_xsd__NCName_(struct soap *soap, std::string& __item, char *__item1) { xsd__NCName_ *_p = soap_instantiate_xsd__NCName_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__NCName_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__NCName_(struct soap *soap, xsd__NCName_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__NCName_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (160)
#endif

#define soap_default_xsd__NCName(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__NCName
#define soap_write_xsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NCName(soap, data), 0) || soap_put_xsd__NCName(soap, data, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__NCName
#define soap_read_xsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__NCName soap_instantiate_std__string


#define soap_copy_xsd__NCName soap_copy_std__string

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (159)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);

#ifndef soap_write_xsd__hexBinary
#define soap_write_xsd__hexBinary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:hexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_xsd__hexBinary
#define soap_read_xsd__hexBinary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__hexBinary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL); }

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(struct soap *soap) { xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(struct soap *soap, unsigned char *__ptr, int __size) { xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary::__ptr = __ptr; _p->xsd__hexBinary::__size = __size; } return _p; }

inline void soap_delete_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (154)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data), 0) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (148)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__DeleteMask
#define SOAP_TYPE___ns1__DeleteMask (1709)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteMask(struct soap*, struct __ns1__DeleteMask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteMask(struct soap*, const struct __ns1__DeleteMask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteMask(struct soap*, const char*, int, const struct __ns1__DeleteMask *, const char*);
SOAP_FMAC3 struct __ns1__DeleteMask * SOAP_FMAC4 soap_in___ns1__DeleteMask(struct soap*, const char*, struct __ns1__DeleteMask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteMask(struct soap*, const struct __ns1__DeleteMask *, const char*, const char*);

#ifndef soap_write___ns1__DeleteMask
#define soap_write___ns1__DeleteMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteMask(soap, data), 0) || soap_put___ns1__DeleteMask(soap, data, "-ns1:DeleteMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteMask * SOAP_FMAC4 soap_get___ns1__DeleteMask(struct soap*, struct __ns1__DeleteMask *, const char*, const char*);

#ifndef soap_read___ns1__DeleteMask
#define soap_read___ns1__DeleteMask(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteMask * SOAP_FMAC2 soap_instantiate___ns1__DeleteMask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteMask * soap_new___ns1__DeleteMask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteMask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteMask * soap_new_req___ns1__DeleteMask(struct soap *soap) { struct __ns1__DeleteMask *_p = soap_instantiate___ns1__DeleteMask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteMask(soap, _p); } return _p; }

inline struct __ns1__DeleteMask * soap_new_set___ns1__DeleteMask(struct soap *soap, _ns1__DeleteMask *ns1__DeleteMask) { struct __ns1__DeleteMask *_p = soap_instantiate___ns1__DeleteMask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteMask(soap, _p); _p->ns1__DeleteMask = ns1__DeleteMask; } return _p; }

inline void soap_delete___ns1__DeleteMask(struct soap *soap, struct __ns1__DeleteMask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteMask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__DeleteMaskResponse
#define SOAP_TYPE___ns1__DeleteMaskResponse (1708)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteMaskResponse(struct soap*, struct __ns1__DeleteMaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteMaskResponse(struct soap*, const struct __ns1__DeleteMaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteMaskResponse(struct soap*, const char*, int, const struct __ns1__DeleteMaskResponse *, const char*);
SOAP_FMAC3 struct __ns1__DeleteMaskResponse * SOAP_FMAC4 soap_in___ns1__DeleteMaskResponse(struct soap*, const char*, struct __ns1__DeleteMaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteMaskResponse(struct soap*, const struct __ns1__DeleteMaskResponse *, const char*, const char*);

#ifndef soap_write___ns1__DeleteMaskResponse
#define soap_write___ns1__DeleteMaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteMaskResponse(soap, data), 0) || soap_put___ns1__DeleteMaskResponse(soap, data, "-ns1:DeleteMaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteMaskResponse * SOAP_FMAC4 soap_get___ns1__DeleteMaskResponse(struct soap*, struct __ns1__DeleteMaskResponse *, const char*, const char*);

#ifndef soap_read___ns1__DeleteMaskResponse
#define soap_read___ns1__DeleteMaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteMaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteMaskResponse * SOAP_FMAC2 soap_instantiate___ns1__DeleteMaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteMaskResponse * soap_new___ns1__DeleteMaskResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteMaskResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteMaskResponse * soap_new_req___ns1__DeleteMaskResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__DeleteMaskResponse) { struct __ns1__DeleteMaskResponse *_p = soap_instantiate___ns1__DeleteMaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteMaskResponse(soap, _p); _p->ns1__DeleteMaskResponse = ns1__DeleteMaskResponse; } return _p; }

inline struct __ns1__DeleteMaskResponse * soap_new_set___ns1__DeleteMaskResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__DeleteMaskResponse) { struct __ns1__DeleteMaskResponse *_p = soap_instantiate___ns1__DeleteMaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteMaskResponse(soap, _p); _p->ns1__DeleteMaskResponse = ns1__DeleteMaskResponse; } return _p; }

inline void soap_delete___ns1__DeleteMaskResponse(struct soap *soap, struct __ns1__DeleteMaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteMaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__CreateMask
#define SOAP_TYPE___ns1__CreateMask (1705)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateMask(struct soap*, struct __ns1__CreateMask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateMask(struct soap*, const struct __ns1__CreateMask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateMask(struct soap*, const char*, int, const struct __ns1__CreateMask *, const char*);
SOAP_FMAC3 struct __ns1__CreateMask * SOAP_FMAC4 soap_in___ns1__CreateMask(struct soap*, const char*, struct __ns1__CreateMask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateMask(struct soap*, const struct __ns1__CreateMask *, const char*, const char*);

#ifndef soap_write___ns1__CreateMask
#define soap_write___ns1__CreateMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__CreateMask(soap, data), 0) || soap_put___ns1__CreateMask(soap, data, "-ns1:CreateMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CreateMask * SOAP_FMAC4 soap_get___ns1__CreateMask(struct soap*, struct __ns1__CreateMask *, const char*, const char*);

#ifndef soap_read___ns1__CreateMask
#define soap_read___ns1__CreateMask(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__CreateMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__CreateMask * SOAP_FMAC2 soap_instantiate___ns1__CreateMask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateMask * soap_new___ns1__CreateMask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CreateMask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CreateMask * soap_new_req___ns1__CreateMask(struct soap *soap) { struct __ns1__CreateMask *_p = soap_instantiate___ns1__CreateMask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateMask(soap, _p); } return _p; }

inline struct __ns1__CreateMask * soap_new_set___ns1__CreateMask(struct soap *soap, _ns1__CreateMask *ns1__CreateMask) { struct __ns1__CreateMask *_p = soap_instantiate___ns1__CreateMask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateMask(soap, _p); _p->ns1__CreateMask = ns1__CreateMask; } return _p; }

inline void soap_delete___ns1__CreateMask(struct soap *soap, struct __ns1__CreateMask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateMask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetMask
#define SOAP_TYPE___ns1__SetMask (1701)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMask(struct soap*, struct __ns1__SetMask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMask(struct soap*, const struct __ns1__SetMask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMask(struct soap*, const char*, int, const struct __ns1__SetMask *, const char*);
SOAP_FMAC3 struct __ns1__SetMask * SOAP_FMAC4 soap_in___ns1__SetMask(struct soap*, const char*, struct __ns1__SetMask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMask(struct soap*, const struct __ns1__SetMask *, const char*, const char*);

#ifndef soap_write___ns1__SetMask
#define soap_write___ns1__SetMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetMask(soap, data), 0) || soap_put___ns1__SetMask(soap, data, "-ns1:SetMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetMask * SOAP_FMAC4 soap_get___ns1__SetMask(struct soap*, struct __ns1__SetMask *, const char*, const char*);

#ifndef soap_read___ns1__SetMask
#define soap_read___ns1__SetMask(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetMask * SOAP_FMAC2 soap_instantiate___ns1__SetMask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMask * soap_new___ns1__SetMask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetMask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetMask * soap_new_req___ns1__SetMask(struct soap *soap) { struct __ns1__SetMask *_p = soap_instantiate___ns1__SetMask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMask(soap, _p); } return _p; }

inline struct __ns1__SetMask * soap_new_set___ns1__SetMask(struct soap *soap, _ns1__SetMask *ns1__SetMask) { struct __ns1__SetMask *_p = soap_instantiate___ns1__SetMask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMask(soap, _p); _p->ns1__SetMask = ns1__SetMask; } return _p; }

inline void soap_delete___ns1__SetMask(struct soap *soap, struct __ns1__SetMask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetMaskResponse
#define SOAP_TYPE___ns1__SetMaskResponse (1700)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMaskResponse(struct soap*, struct __ns1__SetMaskResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMaskResponse(struct soap*, const struct __ns1__SetMaskResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMaskResponse(struct soap*, const char*, int, const struct __ns1__SetMaskResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetMaskResponse * SOAP_FMAC4 soap_in___ns1__SetMaskResponse(struct soap*, const char*, struct __ns1__SetMaskResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMaskResponse(struct soap*, const struct __ns1__SetMaskResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetMaskResponse
#define soap_write___ns1__SetMaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetMaskResponse(soap, data), 0) || soap_put___ns1__SetMaskResponse(soap, data, "-ns1:SetMaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetMaskResponse * SOAP_FMAC4 soap_get___ns1__SetMaskResponse(struct soap*, struct __ns1__SetMaskResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetMaskResponse
#define soap_read___ns1__SetMaskResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetMaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetMaskResponse * SOAP_FMAC2 soap_instantiate___ns1__SetMaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMaskResponse * soap_new___ns1__SetMaskResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetMaskResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetMaskResponse * soap_new_req___ns1__SetMaskResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetMaskResponse) { struct __ns1__SetMaskResponse *_p = soap_instantiate___ns1__SetMaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMaskResponse(soap, _p); _p->ns1__SetMaskResponse = ns1__SetMaskResponse; } return _p; }

inline struct __ns1__SetMaskResponse * soap_new_set___ns1__SetMaskResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetMaskResponse) { struct __ns1__SetMaskResponse *_p = soap_instantiate___ns1__SetMaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMaskResponse(soap, _p); _p->ns1__SetMaskResponse = ns1__SetMaskResponse; } return _p; }

inline void soap_delete___ns1__SetMaskResponse(struct soap *soap, struct __ns1__SetMaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMaskOptions
#define SOAP_TYPE___ns1__GetMaskOptions (1697)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMaskOptions(struct soap*, struct __ns1__GetMaskOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMaskOptions(struct soap*, const struct __ns1__GetMaskOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMaskOptions(struct soap*, const char*, int, const struct __ns1__GetMaskOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetMaskOptions * SOAP_FMAC4 soap_in___ns1__GetMaskOptions(struct soap*, const char*, struct __ns1__GetMaskOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMaskOptions(struct soap*, const struct __ns1__GetMaskOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetMaskOptions
#define soap_write___ns1__GetMaskOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMaskOptions(soap, data), 0) || soap_put___ns1__GetMaskOptions(soap, data, "-ns1:GetMaskOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMaskOptions * SOAP_FMAC4 soap_get___ns1__GetMaskOptions(struct soap*, struct __ns1__GetMaskOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetMaskOptions
#define soap_read___ns1__GetMaskOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMaskOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMaskOptions * SOAP_FMAC2 soap_instantiate___ns1__GetMaskOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMaskOptions * soap_new___ns1__GetMaskOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMaskOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMaskOptions * soap_new_req___ns1__GetMaskOptions(struct soap *soap) { struct __ns1__GetMaskOptions *_p = soap_instantiate___ns1__GetMaskOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMaskOptions(soap, _p); } return _p; }

inline struct __ns1__GetMaskOptions * soap_new_set___ns1__GetMaskOptions(struct soap *soap, _ns1__GetMaskOptions *ns1__GetMaskOptions) { struct __ns1__GetMaskOptions *_p = soap_instantiate___ns1__GetMaskOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMaskOptions(soap, _p); _p->ns1__GetMaskOptions = ns1__GetMaskOptions; } return _p; }

inline void soap_delete___ns1__GetMaskOptions(struct soap *soap, struct __ns1__GetMaskOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMaskOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMasks
#define SOAP_TYPE___ns1__GetMasks (1693)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMasks(struct soap*, struct __ns1__GetMasks *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMasks(struct soap*, const struct __ns1__GetMasks *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMasks(struct soap*, const char*, int, const struct __ns1__GetMasks *, const char*);
SOAP_FMAC3 struct __ns1__GetMasks * SOAP_FMAC4 soap_in___ns1__GetMasks(struct soap*, const char*, struct __ns1__GetMasks *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMasks(struct soap*, const struct __ns1__GetMasks *, const char*, const char*);

#ifndef soap_write___ns1__GetMasks
#define soap_write___ns1__GetMasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMasks(soap, data), 0) || soap_put___ns1__GetMasks(soap, data, "-ns1:GetMasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMasks * SOAP_FMAC4 soap_get___ns1__GetMasks(struct soap*, struct __ns1__GetMasks *, const char*, const char*);

#ifndef soap_read___ns1__GetMasks
#define soap_read___ns1__GetMasks(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMasks * SOAP_FMAC2 soap_instantiate___ns1__GetMasks(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMasks * soap_new___ns1__GetMasks(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMasks(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMasks * soap_new_req___ns1__GetMasks(struct soap *soap) { struct __ns1__GetMasks *_p = soap_instantiate___ns1__GetMasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMasks(soap, _p); } return _p; }

inline struct __ns1__GetMasks * soap_new_set___ns1__GetMasks(struct soap *soap, _ns1__GetMasks *ns1__GetMasks) { struct __ns1__GetMasks *_p = soap_instantiate___ns1__GetMasks(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMasks(soap, _p); _p->ns1__GetMasks = ns1__GetMasks; } return _p; }

inline void soap_delete___ns1__GetMasks(struct soap *soap, struct __ns1__GetMasks *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMasks(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__DeleteOSD
#define SOAP_TYPE___ns1__DeleteOSD (1689)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteOSD(struct soap*, struct __ns1__DeleteOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteOSD(struct soap*, const struct __ns1__DeleteOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteOSD(struct soap*, const char*, int, const struct __ns1__DeleteOSD *, const char*);
SOAP_FMAC3 struct __ns1__DeleteOSD * SOAP_FMAC4 soap_in___ns1__DeleteOSD(struct soap*, const char*, struct __ns1__DeleteOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteOSD(struct soap*, const struct __ns1__DeleteOSD *, const char*, const char*);

#ifndef soap_write___ns1__DeleteOSD
#define soap_write___ns1__DeleteOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteOSD(soap, data), 0) || soap_put___ns1__DeleteOSD(soap, data, "-ns1:DeleteOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteOSD * SOAP_FMAC4 soap_get___ns1__DeleteOSD(struct soap*, struct __ns1__DeleteOSD *, const char*, const char*);

#ifndef soap_read___ns1__DeleteOSD
#define soap_read___ns1__DeleteOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteOSD * SOAP_FMAC2 soap_instantiate___ns1__DeleteOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteOSD * soap_new___ns1__DeleteOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteOSD * soap_new_req___ns1__DeleteOSD(struct soap *soap) { struct __ns1__DeleteOSD *_p = soap_instantiate___ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteOSD(soap, _p); } return _p; }

inline struct __ns1__DeleteOSD * soap_new_set___ns1__DeleteOSD(struct soap *soap, _ns1__DeleteOSD *ns1__DeleteOSD) { struct __ns1__DeleteOSD *_p = soap_instantiate___ns1__DeleteOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteOSD(soap, _p); _p->ns1__DeleteOSD = ns1__DeleteOSD; } return _p; }

inline void soap_delete___ns1__DeleteOSD(struct soap *soap, struct __ns1__DeleteOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__DeleteOSDResponse
#define SOAP_TYPE___ns1__DeleteOSDResponse (1688)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteOSDResponse(struct soap*, struct __ns1__DeleteOSDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteOSDResponse(struct soap*, const struct __ns1__DeleteOSDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteOSDResponse(struct soap*, const char*, int, const struct __ns1__DeleteOSDResponse *, const char*);
SOAP_FMAC3 struct __ns1__DeleteOSDResponse * SOAP_FMAC4 soap_in___ns1__DeleteOSDResponse(struct soap*, const char*, struct __ns1__DeleteOSDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteOSDResponse(struct soap*, const struct __ns1__DeleteOSDResponse *, const char*, const char*);

#ifndef soap_write___ns1__DeleteOSDResponse
#define soap_write___ns1__DeleteOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteOSDResponse(soap, data), 0) || soap_put___ns1__DeleteOSDResponse(soap, data, "-ns1:DeleteOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteOSDResponse * SOAP_FMAC4 soap_get___ns1__DeleteOSDResponse(struct soap*, struct __ns1__DeleteOSDResponse *, const char*, const char*);

#ifndef soap_read___ns1__DeleteOSDResponse
#define soap_read___ns1__DeleteOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteOSDResponse * SOAP_FMAC2 soap_instantiate___ns1__DeleteOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteOSDResponse * soap_new___ns1__DeleteOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteOSDResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteOSDResponse * soap_new_req___ns1__DeleteOSDResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__DeleteOSDResponse) { struct __ns1__DeleteOSDResponse *_p = soap_instantiate___ns1__DeleteOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteOSDResponse(soap, _p); _p->ns1__DeleteOSDResponse = ns1__DeleteOSDResponse; } return _p; }

inline struct __ns1__DeleteOSDResponse * soap_new_set___ns1__DeleteOSDResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__DeleteOSDResponse) { struct __ns1__DeleteOSDResponse *_p = soap_instantiate___ns1__DeleteOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteOSDResponse(soap, _p); _p->ns1__DeleteOSDResponse = ns1__DeleteOSDResponse; } return _p; }

inline void soap_delete___ns1__DeleteOSDResponse(struct soap *soap, struct __ns1__DeleteOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__CreateOSD
#define SOAP_TYPE___ns1__CreateOSD (1685)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateOSD(struct soap*, struct __ns1__CreateOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateOSD(struct soap*, const struct __ns1__CreateOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateOSD(struct soap*, const char*, int, const struct __ns1__CreateOSD *, const char*);
SOAP_FMAC3 struct __ns1__CreateOSD * SOAP_FMAC4 soap_in___ns1__CreateOSD(struct soap*, const char*, struct __ns1__CreateOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateOSD(struct soap*, const struct __ns1__CreateOSD *, const char*, const char*);

#ifndef soap_write___ns1__CreateOSD
#define soap_write___ns1__CreateOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__CreateOSD(soap, data), 0) || soap_put___ns1__CreateOSD(soap, data, "-ns1:CreateOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CreateOSD * SOAP_FMAC4 soap_get___ns1__CreateOSD(struct soap*, struct __ns1__CreateOSD *, const char*, const char*);

#ifndef soap_read___ns1__CreateOSD
#define soap_read___ns1__CreateOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__CreateOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__CreateOSD * SOAP_FMAC2 soap_instantiate___ns1__CreateOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateOSD * soap_new___ns1__CreateOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CreateOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CreateOSD * soap_new_req___ns1__CreateOSD(struct soap *soap) { struct __ns1__CreateOSD *_p = soap_instantiate___ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateOSD(soap, _p); } return _p; }

inline struct __ns1__CreateOSD * soap_new_set___ns1__CreateOSD(struct soap *soap, _ns1__CreateOSD *ns1__CreateOSD) { struct __ns1__CreateOSD *_p = soap_instantiate___ns1__CreateOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateOSD(soap, _p); _p->ns1__CreateOSD = ns1__CreateOSD; } return _p; }

inline void soap_delete___ns1__CreateOSD(struct soap *soap, struct __ns1__CreateOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetOSD
#define SOAP_TYPE___ns1__SetOSD (1681)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetOSD(struct soap*, struct __ns1__SetOSD *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetOSD(struct soap*, const struct __ns1__SetOSD *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetOSD(struct soap*, const char*, int, const struct __ns1__SetOSD *, const char*);
SOAP_FMAC3 struct __ns1__SetOSD * SOAP_FMAC4 soap_in___ns1__SetOSD(struct soap*, const char*, struct __ns1__SetOSD *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetOSD(struct soap*, const struct __ns1__SetOSD *, const char*, const char*);

#ifndef soap_write___ns1__SetOSD
#define soap_write___ns1__SetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetOSD(soap, data), 0) || soap_put___ns1__SetOSD(soap, data, "-ns1:SetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetOSD * SOAP_FMAC4 soap_get___ns1__SetOSD(struct soap*, struct __ns1__SetOSD *, const char*, const char*);

#ifndef soap_read___ns1__SetOSD
#define soap_read___ns1__SetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetOSD * SOAP_FMAC2 soap_instantiate___ns1__SetOSD(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetOSD * soap_new___ns1__SetOSD(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetOSD(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetOSD * soap_new_req___ns1__SetOSD(struct soap *soap) { struct __ns1__SetOSD *_p = soap_instantiate___ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetOSD(soap, _p); } return _p; }

inline struct __ns1__SetOSD * soap_new_set___ns1__SetOSD(struct soap *soap, _ns1__SetOSD *ns1__SetOSD) { struct __ns1__SetOSD *_p = soap_instantiate___ns1__SetOSD(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetOSD(soap, _p); _p->ns1__SetOSD = ns1__SetOSD; } return _p; }

inline void soap_delete___ns1__SetOSD(struct soap *soap, struct __ns1__SetOSD *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetOSD(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetOSDResponse
#define SOAP_TYPE___ns1__SetOSDResponse (1680)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetOSDResponse(struct soap*, struct __ns1__SetOSDResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetOSDResponse(struct soap*, const struct __ns1__SetOSDResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetOSDResponse(struct soap*, const char*, int, const struct __ns1__SetOSDResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetOSDResponse * SOAP_FMAC4 soap_in___ns1__SetOSDResponse(struct soap*, const char*, struct __ns1__SetOSDResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetOSDResponse(struct soap*, const struct __ns1__SetOSDResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetOSDResponse
#define soap_write___ns1__SetOSDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetOSDResponse(soap, data), 0) || soap_put___ns1__SetOSDResponse(soap, data, "-ns1:SetOSDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetOSDResponse * SOAP_FMAC4 soap_get___ns1__SetOSDResponse(struct soap*, struct __ns1__SetOSDResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetOSDResponse
#define soap_read___ns1__SetOSDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetOSDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetOSDResponse * SOAP_FMAC2 soap_instantiate___ns1__SetOSDResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetOSDResponse * soap_new___ns1__SetOSDResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetOSDResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetOSDResponse * soap_new_req___ns1__SetOSDResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetOSDResponse) { struct __ns1__SetOSDResponse *_p = soap_instantiate___ns1__SetOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetOSDResponse(soap, _p); _p->ns1__SetOSDResponse = ns1__SetOSDResponse; } return _p; }

inline struct __ns1__SetOSDResponse * soap_new_set___ns1__SetOSDResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetOSDResponse) { struct __ns1__SetOSDResponse *_p = soap_instantiate___ns1__SetOSDResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetOSDResponse(soap, _p); _p->ns1__SetOSDResponse = ns1__SetOSDResponse; } return _p; }

inline void soap_delete___ns1__SetOSDResponse(struct soap *soap, struct __ns1__SetOSDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetOSDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOSDOptions
#define SOAP_TYPE___ns1__GetOSDOptions (1677)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOSDOptions(struct soap*, struct __ns1__GetOSDOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOSDOptions(struct soap*, const struct __ns1__GetOSDOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOSDOptions(struct soap*, const char*, int, const struct __ns1__GetOSDOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetOSDOptions * SOAP_FMAC4 soap_in___ns1__GetOSDOptions(struct soap*, const char*, struct __ns1__GetOSDOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOSDOptions(struct soap*, const struct __ns1__GetOSDOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetOSDOptions
#define soap_write___ns1__GetOSDOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOSDOptions(soap, data), 0) || soap_put___ns1__GetOSDOptions(soap, data, "-ns1:GetOSDOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOSDOptions * SOAP_FMAC4 soap_get___ns1__GetOSDOptions(struct soap*, struct __ns1__GetOSDOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetOSDOptions
#define soap_read___ns1__GetOSDOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOSDOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOSDOptions * SOAP_FMAC2 soap_instantiate___ns1__GetOSDOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOSDOptions * soap_new___ns1__GetOSDOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOSDOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOSDOptions * soap_new_req___ns1__GetOSDOptions(struct soap *soap) { struct __ns1__GetOSDOptions *_p = soap_instantiate___ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDOptions(soap, _p); } return _p; }

inline struct __ns1__GetOSDOptions * soap_new_set___ns1__GetOSDOptions(struct soap *soap, _ns1__GetOSDOptions *ns1__GetOSDOptions) { struct __ns1__GetOSDOptions *_p = soap_instantiate___ns1__GetOSDOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDOptions(soap, _p); _p->ns1__GetOSDOptions = ns1__GetOSDOptions; } return _p; }

inline void soap_delete___ns1__GetOSDOptions(struct soap *soap, struct __ns1__GetOSDOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOSDOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOSDs
#define SOAP_TYPE___ns1__GetOSDs (1673)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOSDs(struct soap*, struct __ns1__GetOSDs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOSDs(struct soap*, const struct __ns1__GetOSDs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOSDs(struct soap*, const char*, int, const struct __ns1__GetOSDs *, const char*);
SOAP_FMAC3 struct __ns1__GetOSDs * SOAP_FMAC4 soap_in___ns1__GetOSDs(struct soap*, const char*, struct __ns1__GetOSDs *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOSDs(struct soap*, const struct __ns1__GetOSDs *, const char*, const char*);

#ifndef soap_write___ns1__GetOSDs
#define soap_write___ns1__GetOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOSDs(soap, data), 0) || soap_put___ns1__GetOSDs(soap, data, "-ns1:GetOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOSDs * SOAP_FMAC4 soap_get___ns1__GetOSDs(struct soap*, struct __ns1__GetOSDs *, const char*, const char*);

#ifndef soap_read___ns1__GetOSDs
#define soap_read___ns1__GetOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOSDs * SOAP_FMAC2 soap_instantiate___ns1__GetOSDs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOSDs * soap_new___ns1__GetOSDs(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOSDs(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOSDs * soap_new_req___ns1__GetOSDs(struct soap *soap) { struct __ns1__GetOSDs *_p = soap_instantiate___ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDs(soap, _p); } return _p; }

inline struct __ns1__GetOSDs * soap_new_set___ns1__GetOSDs(struct soap *soap, _ns1__GetOSDs *ns1__GetOSDs) { struct __ns1__GetOSDs *_p = soap_instantiate___ns1__GetOSDs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOSDs(soap, _p); _p->ns1__GetOSDs = ns1__GetOSDs; } return _p; }

inline void soap_delete___ns1__GetOSDs(struct soap *soap, struct __ns1__GetOSDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOSDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoSourceMode
#define SOAP_TYPE___ns1__SetVideoSourceMode (1669)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoSourceMode(struct soap*, struct __ns1__SetVideoSourceMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoSourceMode(struct soap*, const struct __ns1__SetVideoSourceMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoSourceMode(struct soap*, const char*, int, const struct __ns1__SetVideoSourceMode *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoSourceMode * SOAP_FMAC4 soap_in___ns1__SetVideoSourceMode(struct soap*, const char*, struct __ns1__SetVideoSourceMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoSourceMode(struct soap*, const struct __ns1__SetVideoSourceMode *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoSourceMode
#define soap_write___ns1__SetVideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoSourceMode(soap, data), 0) || soap_put___ns1__SetVideoSourceMode(soap, data, "-ns1:SetVideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoSourceMode * SOAP_FMAC4 soap_get___ns1__SetVideoSourceMode(struct soap*, struct __ns1__SetVideoSourceMode *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoSourceMode
#define soap_read___ns1__SetVideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoSourceMode * SOAP_FMAC2 soap_instantiate___ns1__SetVideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoSourceMode * soap_new___ns1__SetVideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoSourceMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoSourceMode * soap_new_req___ns1__SetVideoSourceMode(struct soap *soap) { struct __ns1__SetVideoSourceMode *_p = soap_instantiate___ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceMode(soap, _p); } return _p; }

inline struct __ns1__SetVideoSourceMode * soap_new_set___ns1__SetVideoSourceMode(struct soap *soap, _ns1__SetVideoSourceMode *ns1__SetVideoSourceMode) { struct __ns1__SetVideoSourceMode *_p = soap_instantiate___ns1__SetVideoSourceMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceMode(soap, _p); _p->ns1__SetVideoSourceMode = ns1__SetVideoSourceMode; } return _p; }

inline void soap_delete___ns1__SetVideoSourceMode(struct soap *soap, struct __ns1__SetVideoSourceMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceModes
#define SOAP_TYPE___ns1__GetVideoSourceModes (1665)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceModes(struct soap*, struct __ns1__GetVideoSourceModes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceModes(struct soap*, const struct __ns1__GetVideoSourceModes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceModes(struct soap*, const char*, int, const struct __ns1__GetVideoSourceModes *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceModes * SOAP_FMAC4 soap_in___ns1__GetVideoSourceModes(struct soap*, const char*, struct __ns1__GetVideoSourceModes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceModes(struct soap*, const struct __ns1__GetVideoSourceModes *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceModes
#define soap_write___ns1__GetVideoSourceModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceModes(soap, data), 0) || soap_put___ns1__GetVideoSourceModes(soap, data, "-ns1:GetVideoSourceModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceModes * SOAP_FMAC4 soap_get___ns1__GetVideoSourceModes(struct soap*, struct __ns1__GetVideoSourceModes *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceModes
#define soap_read___ns1__GetVideoSourceModes(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceModes * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceModes(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceModes * soap_new___ns1__GetVideoSourceModes(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceModes(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceModes * soap_new_req___ns1__GetVideoSourceModes(struct soap *soap) { struct __ns1__GetVideoSourceModes *_p = soap_instantiate___ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceModes(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceModes * soap_new_set___ns1__GetVideoSourceModes(struct soap *soap, _ns1__GetVideoSourceModes *ns1__GetVideoSourceModes) { struct __ns1__GetVideoSourceModes *_p = soap_instantiate___ns1__GetVideoSourceModes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceModes(soap, _p); _p->ns1__GetVideoSourceModes = ns1__GetVideoSourceModes; } return _p; }

inline void soap_delete___ns1__GetVideoSourceModes(struct soap *soap, struct __ns1__GetVideoSourceModes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceModes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetSnapshotUri
#define SOAP_TYPE___ns1__GetSnapshotUri (1661)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSnapshotUri(struct soap*, struct __ns1__GetSnapshotUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSnapshotUri(struct soap*, const struct __ns1__GetSnapshotUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSnapshotUri(struct soap*, const char*, int, const struct __ns1__GetSnapshotUri *, const char*);
SOAP_FMAC3 struct __ns1__GetSnapshotUri * SOAP_FMAC4 soap_in___ns1__GetSnapshotUri(struct soap*, const char*, struct __ns1__GetSnapshotUri *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSnapshotUri(struct soap*, const struct __ns1__GetSnapshotUri *, const char*, const char*);

#ifndef soap_write___ns1__GetSnapshotUri
#define soap_write___ns1__GetSnapshotUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetSnapshotUri(soap, data), 0) || soap_put___ns1__GetSnapshotUri(soap, data, "-ns1:GetSnapshotUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetSnapshotUri * SOAP_FMAC4 soap_get___ns1__GetSnapshotUri(struct soap*, struct __ns1__GetSnapshotUri *, const char*, const char*);

#ifndef soap_read___ns1__GetSnapshotUri
#define soap_read___ns1__GetSnapshotUri(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetSnapshotUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetSnapshotUri * SOAP_FMAC2 soap_instantiate___ns1__GetSnapshotUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSnapshotUri * soap_new___ns1__GetSnapshotUri(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetSnapshotUri(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetSnapshotUri * soap_new_req___ns1__GetSnapshotUri(struct soap *soap) { struct __ns1__GetSnapshotUri *_p = soap_instantiate___ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSnapshotUri(soap, _p); } return _p; }

inline struct __ns1__GetSnapshotUri * soap_new_set___ns1__GetSnapshotUri(struct soap *soap, _ns1__GetSnapshotUri *ns1__GetSnapshotUri) { struct __ns1__GetSnapshotUri *_p = soap_instantiate___ns1__GetSnapshotUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetSnapshotUri(soap, _p); _p->ns1__GetSnapshotUri = ns1__GetSnapshotUri; } return _p; }

inline void soap_delete___ns1__GetSnapshotUri(struct soap *soap, struct __ns1__GetSnapshotUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetSnapshotUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetSynchronizationPoint
#define SOAP_TYPE___ns1__SetSynchronizationPoint (1657)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSynchronizationPoint(struct soap*, struct __ns1__SetSynchronizationPoint *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSynchronizationPoint(struct soap*, const struct __ns1__SetSynchronizationPoint *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSynchronizationPoint(struct soap*, const char*, int, const struct __ns1__SetSynchronizationPoint *, const char*);
SOAP_FMAC3 struct __ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_in___ns1__SetSynchronizationPoint(struct soap*, const char*, struct __ns1__SetSynchronizationPoint *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSynchronizationPoint(struct soap*, const struct __ns1__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_write___ns1__SetSynchronizationPoint
#define soap_write___ns1__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetSynchronizationPoint(soap, data), 0) || soap_put___ns1__SetSynchronizationPoint(soap, data, "-ns1:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetSynchronizationPoint * SOAP_FMAC4 soap_get___ns1__SetSynchronizationPoint(struct soap*, struct __ns1__SetSynchronizationPoint *, const char*, const char*);

#ifndef soap_read___ns1__SetSynchronizationPoint
#define soap_read___ns1__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetSynchronizationPoint * SOAP_FMAC2 soap_instantiate___ns1__SetSynchronizationPoint(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetSynchronizationPoint * soap_new___ns1__SetSynchronizationPoint(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetSynchronizationPoint(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetSynchronizationPoint * soap_new_req___ns1__SetSynchronizationPoint(struct soap *soap) { struct __ns1__SetSynchronizationPoint *_p = soap_instantiate___ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetSynchronizationPoint(soap, _p); } return _p; }

inline struct __ns1__SetSynchronizationPoint * soap_new_set___ns1__SetSynchronizationPoint(struct soap *soap, _ns1__SetSynchronizationPoint *ns1__SetSynchronizationPoint) { struct __ns1__SetSynchronizationPoint *_p = soap_instantiate___ns1__SetSynchronizationPoint(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetSynchronizationPoint(soap, _p); _p->ns1__SetSynchronizationPoint = ns1__SetSynchronizationPoint; } return _p; }

inline void soap_delete___ns1__SetSynchronizationPoint(struct soap *soap, struct __ns1__SetSynchronizationPoint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSynchronizationPoint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StopMulticastStreaming
#define SOAP_TYPE___ns1__StopMulticastStreaming (1653)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StopMulticastStreaming(struct soap*, struct __ns1__StopMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StopMulticastStreaming(struct soap*, const struct __ns1__StopMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StopMulticastStreaming(struct soap*, const char*, int, const struct __ns1__StopMulticastStreaming *, const char*);
SOAP_FMAC3 struct __ns1__StopMulticastStreaming * SOAP_FMAC4 soap_in___ns1__StopMulticastStreaming(struct soap*, const char*, struct __ns1__StopMulticastStreaming *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StopMulticastStreaming(struct soap*, const struct __ns1__StopMulticastStreaming *, const char*, const char*);

#ifndef soap_write___ns1__StopMulticastStreaming
#define soap_write___ns1__StopMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StopMulticastStreaming(soap, data), 0) || soap_put___ns1__StopMulticastStreaming(soap, data, "-ns1:StopMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StopMulticastStreaming * SOAP_FMAC4 soap_get___ns1__StopMulticastStreaming(struct soap*, struct __ns1__StopMulticastStreaming *, const char*, const char*);

#ifndef soap_read___ns1__StopMulticastStreaming
#define soap_read___ns1__StopMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StopMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StopMulticastStreaming * SOAP_FMAC2 soap_instantiate___ns1__StopMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StopMulticastStreaming * soap_new___ns1__StopMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StopMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StopMulticastStreaming * soap_new_req___ns1__StopMulticastStreaming(struct soap *soap) { struct __ns1__StopMulticastStreaming *_p = soap_instantiate___ns1__StopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopMulticastStreaming(soap, _p); } return _p; }

inline struct __ns1__StopMulticastStreaming * soap_new_set___ns1__StopMulticastStreaming(struct soap *soap, ns1__StartStopMulticastStreaming *ns1__StopMulticastStreaming) { struct __ns1__StopMulticastStreaming *_p = soap_instantiate___ns1__StopMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopMulticastStreaming(soap, _p); _p->ns1__StopMulticastStreaming = ns1__StopMulticastStreaming; } return _p; }

inline void soap_delete___ns1__StopMulticastStreaming(struct soap *soap, struct __ns1__StopMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StopMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StopMulticastStreamingResponse
#define SOAP_TYPE___ns1__StopMulticastStreamingResponse (1652)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StopMulticastStreamingResponse(struct soap*, struct __ns1__StopMulticastStreamingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StopMulticastStreamingResponse(struct soap*, const struct __ns1__StopMulticastStreamingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StopMulticastStreamingResponse(struct soap*, const char*, int, const struct __ns1__StopMulticastStreamingResponse *, const char*);
SOAP_FMAC3 struct __ns1__StopMulticastStreamingResponse * SOAP_FMAC4 soap_in___ns1__StopMulticastStreamingResponse(struct soap*, const char*, struct __ns1__StopMulticastStreamingResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StopMulticastStreamingResponse(struct soap*, const struct __ns1__StopMulticastStreamingResponse *, const char*, const char*);

#ifndef soap_write___ns1__StopMulticastStreamingResponse
#define soap_write___ns1__StopMulticastStreamingResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StopMulticastStreamingResponse(soap, data), 0) || soap_put___ns1__StopMulticastStreamingResponse(soap, data, "-ns1:StopMulticastStreamingResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StopMulticastStreamingResponse * SOAP_FMAC4 soap_get___ns1__StopMulticastStreamingResponse(struct soap*, struct __ns1__StopMulticastStreamingResponse *, const char*, const char*);

#ifndef soap_read___ns1__StopMulticastStreamingResponse
#define soap_read___ns1__StopMulticastStreamingResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StopMulticastStreamingResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StopMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate___ns1__StopMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StopMulticastStreamingResponse * soap_new___ns1__StopMulticastStreamingResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StopMulticastStreamingResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StopMulticastStreamingResponse * soap_new_req___ns1__StopMulticastStreamingResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__StopMulticastStreamingResponse) { struct __ns1__StopMulticastStreamingResponse *_p = soap_instantiate___ns1__StopMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopMulticastStreamingResponse(soap, _p); _p->ns1__StopMulticastStreamingResponse = ns1__StopMulticastStreamingResponse; } return _p; }

inline struct __ns1__StopMulticastStreamingResponse * soap_new_set___ns1__StopMulticastStreamingResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__StopMulticastStreamingResponse) { struct __ns1__StopMulticastStreamingResponse *_p = soap_instantiate___ns1__StopMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopMulticastStreamingResponse(soap, _p); _p->ns1__StopMulticastStreamingResponse = ns1__StopMulticastStreamingResponse; } return _p; }

inline void soap_delete___ns1__StopMulticastStreamingResponse(struct soap *soap, struct __ns1__StopMulticastStreamingResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StopMulticastStreamingResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StartMulticastStreaming
#define SOAP_TYPE___ns1__StartMulticastStreaming (1650)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StartMulticastStreaming(struct soap*, struct __ns1__StartMulticastStreaming *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StartMulticastStreaming(struct soap*, const struct __ns1__StartMulticastStreaming *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StartMulticastStreaming(struct soap*, const char*, int, const struct __ns1__StartMulticastStreaming *, const char*);
SOAP_FMAC3 struct __ns1__StartMulticastStreaming * SOAP_FMAC4 soap_in___ns1__StartMulticastStreaming(struct soap*, const char*, struct __ns1__StartMulticastStreaming *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StartMulticastStreaming(struct soap*, const struct __ns1__StartMulticastStreaming *, const char*, const char*);

#ifndef soap_write___ns1__StartMulticastStreaming
#define soap_write___ns1__StartMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StartMulticastStreaming(soap, data), 0) || soap_put___ns1__StartMulticastStreaming(soap, data, "-ns1:StartMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StartMulticastStreaming * SOAP_FMAC4 soap_get___ns1__StartMulticastStreaming(struct soap*, struct __ns1__StartMulticastStreaming *, const char*, const char*);

#ifndef soap_read___ns1__StartMulticastStreaming
#define soap_read___ns1__StartMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StartMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StartMulticastStreaming * SOAP_FMAC2 soap_instantiate___ns1__StartMulticastStreaming(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StartMulticastStreaming * soap_new___ns1__StartMulticastStreaming(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StartMulticastStreaming(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StartMulticastStreaming * soap_new_req___ns1__StartMulticastStreaming(struct soap *soap) { struct __ns1__StartMulticastStreaming *_p = soap_instantiate___ns1__StartMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartMulticastStreaming(soap, _p); } return _p; }

inline struct __ns1__StartMulticastStreaming * soap_new_set___ns1__StartMulticastStreaming(struct soap *soap, ns1__StartStopMulticastStreaming *ns1__StartMulticastStreaming) { struct __ns1__StartMulticastStreaming *_p = soap_instantiate___ns1__StartMulticastStreaming(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartMulticastStreaming(soap, _p); _p->ns1__StartMulticastStreaming = ns1__StartMulticastStreaming; } return _p; }

inline void soap_delete___ns1__StartMulticastStreaming(struct soap *soap, struct __ns1__StartMulticastStreaming *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StartMulticastStreaming(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StartMulticastStreamingResponse
#define SOAP_TYPE___ns1__StartMulticastStreamingResponse (1649)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StartMulticastStreamingResponse(struct soap*, struct __ns1__StartMulticastStreamingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StartMulticastStreamingResponse(struct soap*, const struct __ns1__StartMulticastStreamingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StartMulticastStreamingResponse(struct soap*, const char*, int, const struct __ns1__StartMulticastStreamingResponse *, const char*);
SOAP_FMAC3 struct __ns1__StartMulticastStreamingResponse * SOAP_FMAC4 soap_in___ns1__StartMulticastStreamingResponse(struct soap*, const char*, struct __ns1__StartMulticastStreamingResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StartMulticastStreamingResponse(struct soap*, const struct __ns1__StartMulticastStreamingResponse *, const char*, const char*);

#ifndef soap_write___ns1__StartMulticastStreamingResponse
#define soap_write___ns1__StartMulticastStreamingResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StartMulticastStreamingResponse(soap, data), 0) || soap_put___ns1__StartMulticastStreamingResponse(soap, data, "-ns1:StartMulticastStreamingResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StartMulticastStreamingResponse * SOAP_FMAC4 soap_get___ns1__StartMulticastStreamingResponse(struct soap*, struct __ns1__StartMulticastStreamingResponse *, const char*, const char*);

#ifndef soap_read___ns1__StartMulticastStreamingResponse
#define soap_read___ns1__StartMulticastStreamingResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StartMulticastStreamingResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StartMulticastStreamingResponse * SOAP_FMAC2 soap_instantiate___ns1__StartMulticastStreamingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StartMulticastStreamingResponse * soap_new___ns1__StartMulticastStreamingResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StartMulticastStreamingResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StartMulticastStreamingResponse * soap_new_req___ns1__StartMulticastStreamingResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__StartMulticastStreamingResponse) { struct __ns1__StartMulticastStreamingResponse *_p = soap_instantiate___ns1__StartMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartMulticastStreamingResponse(soap, _p); _p->ns1__StartMulticastStreamingResponse = ns1__StartMulticastStreamingResponse; } return _p; }

inline struct __ns1__StartMulticastStreamingResponse * soap_new_set___ns1__StartMulticastStreamingResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__StartMulticastStreamingResponse) { struct __ns1__StartMulticastStreamingResponse *_p = soap_instantiate___ns1__StartMulticastStreamingResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartMulticastStreamingResponse(soap, _p); _p->ns1__StartMulticastStreamingResponse = ns1__StartMulticastStreamingResponse; } return _p; }

inline void soap_delete___ns1__StartMulticastStreamingResponse(struct soap *soap, struct __ns1__StartMulticastStreamingResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StartMulticastStreamingResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetStreamUri
#define SOAP_TYPE___ns1__GetStreamUri (1646)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetStreamUri(struct soap*, struct __ns1__GetStreamUri *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetStreamUri(struct soap*, const struct __ns1__GetStreamUri *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetStreamUri(struct soap*, const char*, int, const struct __ns1__GetStreamUri *, const char*);
SOAP_FMAC3 struct __ns1__GetStreamUri * SOAP_FMAC4 soap_in___ns1__GetStreamUri(struct soap*, const char*, struct __ns1__GetStreamUri *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetStreamUri(struct soap*, const struct __ns1__GetStreamUri *, const char*, const char*);

#ifndef soap_write___ns1__GetStreamUri
#define soap_write___ns1__GetStreamUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetStreamUri(soap, data), 0) || soap_put___ns1__GetStreamUri(soap, data, "-ns1:GetStreamUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetStreamUri * SOAP_FMAC4 soap_get___ns1__GetStreamUri(struct soap*, struct __ns1__GetStreamUri *, const char*, const char*);

#ifndef soap_read___ns1__GetStreamUri
#define soap_read___ns1__GetStreamUri(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetStreamUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetStreamUri * SOAP_FMAC2 soap_instantiate___ns1__GetStreamUri(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetStreamUri * soap_new___ns1__GetStreamUri(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetStreamUri(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetStreamUri * soap_new_req___ns1__GetStreamUri(struct soap *soap) { struct __ns1__GetStreamUri *_p = soap_instantiate___ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetStreamUri(soap, _p); } return _p; }

inline struct __ns1__GetStreamUri * soap_new_set___ns1__GetStreamUri(struct soap *soap, _ns1__GetStreamUri *ns1__GetStreamUri) { struct __ns1__GetStreamUri *_p = soap_instantiate___ns1__GetStreamUri(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetStreamUri(soap, _p); _p->ns1__GetStreamUri = ns1__GetStreamUri; } return _p; }

inline void soap_delete___ns1__GetStreamUri(struct soap *soap, struct __ns1__GetStreamUri *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetStreamUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoEncoderInstances
#define SOAP_TYPE___ns1__GetVideoEncoderInstances (1642)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoEncoderInstances(struct soap*, struct __ns1__GetVideoEncoderInstances *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoEncoderInstances(struct soap*, const struct __ns1__GetVideoEncoderInstances *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoEncoderInstances(struct soap*, const char*, int, const struct __ns1__GetVideoEncoderInstances *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoEncoderInstances * SOAP_FMAC4 soap_in___ns1__GetVideoEncoderInstances(struct soap*, const char*, struct __ns1__GetVideoEncoderInstances *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoEncoderInstances(struct soap*, const struct __ns1__GetVideoEncoderInstances *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoEncoderInstances
#define soap_write___ns1__GetVideoEncoderInstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoEncoderInstances(soap, data), 0) || soap_put___ns1__GetVideoEncoderInstances(soap, data, "-ns1:GetVideoEncoderInstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoEncoderInstances * SOAP_FMAC4 soap_get___ns1__GetVideoEncoderInstances(struct soap*, struct __ns1__GetVideoEncoderInstances *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoEncoderInstances
#define soap_read___ns1__GetVideoEncoderInstances(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoEncoderInstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoEncoderInstances * SOAP_FMAC2 soap_instantiate___ns1__GetVideoEncoderInstances(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoEncoderInstances * soap_new___ns1__GetVideoEncoderInstances(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoEncoderInstances(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoEncoderInstances * soap_new_req___ns1__GetVideoEncoderInstances(struct soap *soap) { struct __ns1__GetVideoEncoderInstances *_p = soap_instantiate___ns1__GetVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderInstances(soap, _p); } return _p; }

inline struct __ns1__GetVideoEncoderInstances * soap_new_set___ns1__GetVideoEncoderInstances(struct soap *soap, _ns1__GetVideoEncoderInstances *ns1__GetVideoEncoderInstances) { struct __ns1__GetVideoEncoderInstances *_p = soap_instantiate___ns1__GetVideoEncoderInstances(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderInstances(soap, _p); _p->ns1__GetVideoEncoderInstances = ns1__GetVideoEncoderInstances; } return _p; }

inline void soap_delete___ns1__GetVideoEncoderInstances(struct soap *soap, struct __ns1__GetVideoEncoderInstances *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoEncoderInstances(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioDecoderConfigurationOptions (1638)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioDecoderConfigurationOptions(struct soap*, struct __ns1__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioDecoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioDecoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioDecoderConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioDecoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioDecoderConfigurationOptions
#define soap_write___ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioDecoderConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioDecoderConfigurationOptions(soap, data, "-ns1:GetAudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioDecoderConfigurationOptions(struct soap*, struct __ns1__GetAudioDecoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioDecoderConfigurationOptions
#define soap_read___ns1__GetAudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioDecoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioDecoderConfigurationOptions * soap_new___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioDecoderConfigurationOptions * soap_new_req___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioDecoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioDecoderConfigurationOptions * soap_new_set___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioDecoderConfigurationOptions) { struct __ns1__GetAudioDecoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioDecoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurationOptions(soap, _p); _p->ns1__GetAudioDecoderConfigurationOptions = ns1__GetAudioDecoderConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, struct __ns1__GetAudioDecoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioDecoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioOutputConfigurationOptions (1635)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioOutputConfigurationOptions(struct soap*, struct __ns1__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioOutputConfigurationOptions(struct soap*, const struct __ns1__GetAudioOutputConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioOutputConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioOutputConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioOutputConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioOutputConfigurationOptions(struct soap*, const struct __ns1__GetAudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioOutputConfigurationOptions
#define soap_write___ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioOutputConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioOutputConfigurationOptions(soap, data, "-ns1:GetAudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioOutputConfigurationOptions(struct soap*, struct __ns1__GetAudioOutputConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioOutputConfigurationOptions
#define soap_read___ns1__GetAudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioOutputConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioOutputConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioOutputConfigurationOptions * soap_new___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioOutputConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioOutputConfigurationOptions * soap_new_req___ns1__GetAudioOutputConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioOutputConfigurationOptions *_p = soap_instantiate___ns1__GetAudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioOutputConfigurationOptions * soap_new_set___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioOutputConfigurationOptions) { struct __ns1__GetAudioOutputConfigurationOptions *_p = soap_instantiate___ns1__GetAudioOutputConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurationOptions(soap, _p); _p->ns1__GetAudioOutputConfigurationOptions = ns1__GetAudioOutputConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, struct __ns1__GetAudioOutputConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioOutputConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMetadataConfigurationOptions
#define SOAP_TYPE___ns1__GetMetadataConfigurationOptions (1632)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMetadataConfigurationOptions(struct soap*, struct __ns1__GetMetadataConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMetadataConfigurationOptions(struct soap*, const struct __ns1__GetMetadataConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMetadataConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetMetadataConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetMetadataConfigurationOptions(struct soap*, const char*, struct __ns1__GetMetadataConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMetadataConfigurationOptions(struct soap*, const struct __ns1__GetMetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetMetadataConfigurationOptions
#define soap_write___ns1__GetMetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMetadataConfigurationOptions(soap, data), 0) || soap_put___ns1__GetMetadataConfigurationOptions(soap, data, "-ns1:GetMetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMetadataConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetMetadataConfigurationOptions(struct soap*, struct __ns1__GetMetadataConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetMetadataConfigurationOptions
#define soap_read___ns1__GetMetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMetadataConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetMetadataConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMetadataConfigurationOptions * soap_new___ns1__GetMetadataConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMetadataConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMetadataConfigurationOptions * soap_new_req___ns1__GetMetadataConfigurationOptions(struct soap *soap) { struct __ns1__GetMetadataConfigurationOptions *_p = soap_instantiate___ns1__GetMetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetMetadataConfigurationOptions * soap_new_set___ns1__GetMetadataConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetMetadataConfigurationOptions) { struct __ns1__GetMetadataConfigurationOptions *_p = soap_instantiate___ns1__GetMetadataConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurationOptions(soap, _p); _p->ns1__GetMetadataConfigurationOptions = ns1__GetMetadataConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetMetadataConfigurationOptions(struct soap *soap, struct __ns1__GetMetadataConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMetadataConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioEncoderConfigurationOptions (1629)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioEncoderConfigurationOptions(struct soap*, struct __ns1__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioEncoderConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioEncoderConfigurationOptions(struct soap*, const struct __ns1__GetAudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioEncoderConfigurationOptions
#define soap_write___ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioEncoderConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioEncoderConfigurationOptions(soap, data, "-ns1:GetAudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioEncoderConfigurationOptions(struct soap*, struct __ns1__GetAudioEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioEncoderConfigurationOptions
#define soap_read___ns1__GetAudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioEncoderConfigurationOptions * soap_new___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioEncoderConfigurationOptions * soap_new_req___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioEncoderConfigurationOptions * soap_new_set___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioEncoderConfigurationOptions) { struct __ns1__GetAudioEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetAudioEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurationOptions(soap, _p); _p->ns1__GetAudioEncoderConfigurationOptions = ns1__GetAudioEncoderConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, struct __ns1__GetAudioEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___ns1__GetAudioSourceConfigurationOptions (1626)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioSourceConfigurationOptions(struct soap*, struct __ns1__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioSourceConfigurationOptions(struct soap*, const struct __ns1__GetAudioSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetAudioSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetAudioSourceConfigurationOptions(struct soap*, const char*, struct __ns1__GetAudioSourceConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioSourceConfigurationOptions(struct soap*, const struct __ns1__GetAudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioSourceConfigurationOptions
#define soap_write___ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioSourceConfigurationOptions(soap, data), 0) || soap_put___ns1__GetAudioSourceConfigurationOptions(soap, data, "-ns1:GetAudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetAudioSourceConfigurationOptions(struct soap*, struct __ns1__GetAudioSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioSourceConfigurationOptions
#define soap_read___ns1__GetAudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetAudioSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioSourceConfigurationOptions * soap_new___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioSourceConfigurationOptions * soap_new_req___ns1__GetAudioSourceConfigurationOptions(struct soap *soap) { struct __ns1__GetAudioSourceConfigurationOptions *_p = soap_instantiate___ns1__GetAudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetAudioSourceConfigurationOptions * soap_new_set___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioSourceConfigurationOptions) { struct __ns1__GetAudioSourceConfigurationOptions *_p = soap_instantiate___ns1__GetAudioSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurationOptions(soap, _p); _p->ns1__GetAudioSourceConfigurationOptions = ns1__GetAudioSourceConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, struct __ns1__GetAudioSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___ns1__GetVideoEncoderConfigurationOptions (1623)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoEncoderConfigurationOptions(struct soap*, struct __ns1__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const struct __ns1__GetVideoEncoderConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetVideoEncoderConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const char*, struct __ns1__GetVideoEncoderConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoEncoderConfigurationOptions(struct soap*, const struct __ns1__GetVideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoEncoderConfigurationOptions
#define soap_write___ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoEncoderConfigurationOptions(soap, data), 0) || soap_put___ns1__GetVideoEncoderConfigurationOptions(soap, data, "-ns1:GetVideoEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetVideoEncoderConfigurationOptions(struct soap*, struct __ns1__GetVideoEncoderConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoEncoderConfigurationOptions
#define soap_read___ns1__GetVideoEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoEncoderConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoEncoderConfigurationOptions * soap_new___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoEncoderConfigurationOptions * soap_new_req___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap) { struct __ns1__GetVideoEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetVideoEncoderConfigurationOptions * soap_new_set___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetVideoEncoderConfigurationOptions) { struct __ns1__GetVideoEncoderConfigurationOptions *_p = soap_instantiate___ns1__GetVideoEncoderConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurationOptions(soap, _p); _p->ns1__GetVideoEncoderConfigurationOptions = ns1__GetVideoEncoderConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, struct __ns1__GetVideoEncoderConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoEncoderConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___ns1__GetVideoSourceConfigurationOptions (1620)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceConfigurationOptions(struct soap*, struct __ns1__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceConfigurationOptions(struct soap*, const struct __ns1__GetVideoSourceConfigurationOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, int, const struct __ns1__GetVideoSourceConfigurationOptions *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_in___ns1__GetVideoSourceConfigurationOptions(struct soap*, const char*, struct __ns1__GetVideoSourceConfigurationOptions *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceConfigurationOptions(struct soap*, const struct __ns1__GetVideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceConfigurationOptions
#define soap_write___ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceConfigurationOptions(soap, data), 0) || soap_put___ns1__GetVideoSourceConfigurationOptions(soap, data, "-ns1:GetVideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC4 soap_get___ns1__GetVideoSourceConfigurationOptions(struct soap*, struct __ns1__GetVideoSourceConfigurationOptions *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceConfigurationOptions
#define soap_read___ns1__GetVideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceConfigurationOptions * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceConfigurationOptions * soap_new___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceConfigurationOptions * soap_new_req___ns1__GetVideoSourceConfigurationOptions(struct soap *soap) { struct __ns1__GetVideoSourceConfigurationOptions *_p = soap_instantiate___ns1__GetVideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurationOptions(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceConfigurationOptions * soap_new_set___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, ns1__GetConfiguration *ns1__GetVideoSourceConfigurationOptions) { struct __ns1__GetVideoSourceConfigurationOptions *_p = soap_instantiate___ns1__GetVideoSourceConfigurationOptions(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurationOptions(soap, _p); _p->ns1__GetVideoSourceConfigurationOptions = ns1__GetVideoSourceConfigurationOptions; } return _p; }

inline void soap_delete___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, struct __ns1__GetVideoSourceConfigurationOptions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioDecoderConfiguration
#define SOAP_TYPE___ns1__SetAudioDecoderConfiguration (1617)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioDecoderConfiguration(struct soap*, struct __ns1__SetAudioDecoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioDecoderConfiguration(struct soap*, const struct __ns1__SetAudioDecoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioDecoderConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioDecoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioDecoderConfiguration(struct soap*, const char*, struct __ns1__SetAudioDecoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioDecoderConfiguration(struct soap*, const struct __ns1__SetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioDecoderConfiguration
#define soap_write___ns1__SetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioDecoderConfiguration(soap, data), 0) || soap_put___ns1__SetAudioDecoderConfiguration(soap, data, "-ns1:SetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioDecoderConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioDecoderConfiguration(struct soap*, struct __ns1__SetAudioDecoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioDecoderConfiguration
#define soap_read___ns1__SetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioDecoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioDecoderConfiguration * soap_new___ns1__SetAudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioDecoderConfiguration * soap_new_req___ns1__SetAudioDecoderConfiguration(struct soap *soap) { struct __ns1__SetAudioDecoderConfiguration *_p = soap_instantiate___ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioDecoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioDecoderConfiguration * soap_new_set___ns1__SetAudioDecoderConfiguration(struct soap *soap, _ns1__SetAudioDecoderConfiguration *ns1__SetAudioDecoderConfiguration) { struct __ns1__SetAudioDecoderConfiguration *_p = soap_instantiate___ns1__SetAudioDecoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioDecoderConfiguration(soap, _p); _p->ns1__SetAudioDecoderConfiguration = ns1__SetAudioDecoderConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioDecoderConfiguration(struct soap *soap, struct __ns1__SetAudioDecoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE___ns1__SetAudioDecoderConfigurationResponse (1616)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioDecoderConfigurationResponse(struct soap*, struct __ns1__SetAudioDecoderConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioDecoderConfigurationResponse(struct soap*, const struct __ns1__SetAudioDecoderConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioDecoderConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetAudioDecoderConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetAudioDecoderConfigurationResponse(struct soap*, const char*, struct __ns1__SetAudioDecoderConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioDecoderConfigurationResponse(struct soap*, const struct __ns1__SetAudioDecoderConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioDecoderConfigurationResponse
#define soap_write___ns1__SetAudioDecoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioDecoderConfigurationResponse(soap, data), 0) || soap_put___ns1__SetAudioDecoderConfigurationResponse(soap, data, "-ns1:SetAudioDecoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioDecoderConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetAudioDecoderConfigurationResponse(struct soap*, struct __ns1__SetAudioDecoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioDecoderConfigurationResponse
#define soap_read___ns1__SetAudioDecoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioDecoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioDecoderConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetAudioDecoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioDecoderConfigurationResponse * soap_new___ns1__SetAudioDecoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioDecoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioDecoderConfigurationResponse * soap_new_req___ns1__SetAudioDecoderConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioDecoderConfigurationResponse) { struct __ns1__SetAudioDecoderConfigurationResponse *_p = soap_instantiate___ns1__SetAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioDecoderConfigurationResponse(soap, _p); _p->ns1__SetAudioDecoderConfigurationResponse = ns1__SetAudioDecoderConfigurationResponse; } return _p; }

inline struct __ns1__SetAudioDecoderConfigurationResponse * soap_new_set___ns1__SetAudioDecoderConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioDecoderConfigurationResponse) { struct __ns1__SetAudioDecoderConfigurationResponse *_p = soap_instantiate___ns1__SetAudioDecoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioDecoderConfigurationResponse(soap, _p); _p->ns1__SetAudioDecoderConfigurationResponse = ns1__SetAudioDecoderConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetAudioDecoderConfigurationResponse(struct soap *soap, struct __ns1__SetAudioDecoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioDecoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioOutputConfiguration
#define SOAP_TYPE___ns1__SetAudioOutputConfiguration (1613)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioOutputConfiguration(struct soap*, struct __ns1__SetAudioOutputConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioOutputConfiguration(struct soap*, const struct __ns1__SetAudioOutputConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioOutputConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioOutputConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioOutputConfiguration(struct soap*, const char*, struct __ns1__SetAudioOutputConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioOutputConfiguration(struct soap*, const struct __ns1__SetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioOutputConfiguration
#define soap_write___ns1__SetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioOutputConfiguration(soap, data), 0) || soap_put___ns1__SetAudioOutputConfiguration(soap, data, "-ns1:SetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioOutputConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioOutputConfiguration(struct soap*, struct __ns1__SetAudioOutputConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioOutputConfiguration
#define soap_read___ns1__SetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioOutputConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioOutputConfiguration * soap_new___ns1__SetAudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioOutputConfiguration * soap_new_req___ns1__SetAudioOutputConfiguration(struct soap *soap) { struct __ns1__SetAudioOutputConfiguration *_p = soap_instantiate___ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioOutputConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioOutputConfiguration * soap_new_set___ns1__SetAudioOutputConfiguration(struct soap *soap, _ns1__SetAudioOutputConfiguration *ns1__SetAudioOutputConfiguration) { struct __ns1__SetAudioOutputConfiguration *_p = soap_instantiate___ns1__SetAudioOutputConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioOutputConfiguration(soap, _p); _p->ns1__SetAudioOutputConfiguration = ns1__SetAudioOutputConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioOutputConfiguration(struct soap *soap, struct __ns1__SetAudioOutputConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioOutputConfigurationResponse
#define SOAP_TYPE___ns1__SetAudioOutputConfigurationResponse (1612)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioOutputConfigurationResponse(struct soap*, struct __ns1__SetAudioOutputConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioOutputConfigurationResponse(struct soap*, const struct __ns1__SetAudioOutputConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioOutputConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetAudioOutputConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetAudioOutputConfigurationResponse(struct soap*, const char*, struct __ns1__SetAudioOutputConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioOutputConfigurationResponse(struct soap*, const struct __ns1__SetAudioOutputConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioOutputConfigurationResponse
#define soap_write___ns1__SetAudioOutputConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioOutputConfigurationResponse(soap, data), 0) || soap_put___ns1__SetAudioOutputConfigurationResponse(soap, data, "-ns1:SetAudioOutputConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioOutputConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetAudioOutputConfigurationResponse(struct soap*, struct __ns1__SetAudioOutputConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioOutputConfigurationResponse
#define soap_read___ns1__SetAudioOutputConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioOutputConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioOutputConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetAudioOutputConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioOutputConfigurationResponse * soap_new___ns1__SetAudioOutputConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioOutputConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioOutputConfigurationResponse * soap_new_req___ns1__SetAudioOutputConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioOutputConfigurationResponse) { struct __ns1__SetAudioOutputConfigurationResponse *_p = soap_instantiate___ns1__SetAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioOutputConfigurationResponse(soap, _p); _p->ns1__SetAudioOutputConfigurationResponse = ns1__SetAudioOutputConfigurationResponse; } return _p; }

inline struct __ns1__SetAudioOutputConfigurationResponse * soap_new_set___ns1__SetAudioOutputConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioOutputConfigurationResponse) { struct __ns1__SetAudioOutputConfigurationResponse *_p = soap_instantiate___ns1__SetAudioOutputConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioOutputConfigurationResponse(soap, _p); _p->ns1__SetAudioOutputConfigurationResponse = ns1__SetAudioOutputConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetAudioOutputConfigurationResponse(struct soap *soap, struct __ns1__SetAudioOutputConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioOutputConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetMetadataConfiguration
#define SOAP_TYPE___ns1__SetMetadataConfiguration (1609)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMetadataConfiguration(struct soap*, struct __ns1__SetMetadataConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMetadataConfiguration(struct soap*, const struct __ns1__SetMetadataConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMetadataConfiguration(struct soap*, const char*, int, const struct __ns1__SetMetadataConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_in___ns1__SetMetadataConfiguration(struct soap*, const char*, struct __ns1__SetMetadataConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMetadataConfiguration(struct soap*, const struct __ns1__SetMetadataConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetMetadataConfiguration
#define soap_write___ns1__SetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetMetadataConfiguration(soap, data), 0) || soap_put___ns1__SetMetadataConfiguration(soap, data, "-ns1:SetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetMetadataConfiguration * SOAP_FMAC4 soap_get___ns1__SetMetadataConfiguration(struct soap*, struct __ns1__SetMetadataConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetMetadataConfiguration
#define soap_read___ns1__SetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetMetadataConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetMetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMetadataConfiguration * soap_new___ns1__SetMetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetMetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetMetadataConfiguration * soap_new_req___ns1__SetMetadataConfiguration(struct soap *soap) { struct __ns1__SetMetadataConfiguration *_p = soap_instantiate___ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMetadataConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetMetadataConfiguration * soap_new_set___ns1__SetMetadataConfiguration(struct soap *soap, _ns1__SetMetadataConfiguration *ns1__SetMetadataConfiguration) { struct __ns1__SetMetadataConfiguration *_p = soap_instantiate___ns1__SetMetadataConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMetadataConfiguration(soap, _p); _p->ns1__SetMetadataConfiguration = ns1__SetMetadataConfiguration; } return _p; }

inline void soap_delete___ns1__SetMetadataConfiguration(struct soap *soap, struct __ns1__SetMetadataConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetMetadataConfigurationResponse
#define SOAP_TYPE___ns1__SetMetadataConfigurationResponse (1608)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMetadataConfigurationResponse(struct soap*, struct __ns1__SetMetadataConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMetadataConfigurationResponse(struct soap*, const struct __ns1__SetMetadataConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMetadataConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetMetadataConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetMetadataConfigurationResponse(struct soap*, const char*, struct __ns1__SetMetadataConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMetadataConfigurationResponse(struct soap*, const struct __ns1__SetMetadataConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetMetadataConfigurationResponse
#define soap_write___ns1__SetMetadataConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetMetadataConfigurationResponse(soap, data), 0) || soap_put___ns1__SetMetadataConfigurationResponse(soap, data, "-ns1:SetMetadataConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetMetadataConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetMetadataConfigurationResponse(struct soap*, struct __ns1__SetMetadataConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetMetadataConfigurationResponse
#define soap_read___ns1__SetMetadataConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetMetadataConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetMetadataConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetMetadataConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMetadataConfigurationResponse * soap_new___ns1__SetMetadataConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetMetadataConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetMetadataConfigurationResponse * soap_new_req___ns1__SetMetadataConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetMetadataConfigurationResponse) { struct __ns1__SetMetadataConfigurationResponse *_p = soap_instantiate___ns1__SetMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMetadataConfigurationResponse(soap, _p); _p->ns1__SetMetadataConfigurationResponse = ns1__SetMetadataConfigurationResponse; } return _p; }

inline struct __ns1__SetMetadataConfigurationResponse * soap_new_set___ns1__SetMetadataConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetMetadataConfigurationResponse) { struct __ns1__SetMetadataConfigurationResponse *_p = soap_instantiate___ns1__SetMetadataConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetMetadataConfigurationResponse(soap, _p); _p->ns1__SetMetadataConfigurationResponse = ns1__SetMetadataConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetMetadataConfigurationResponse(struct soap *soap, struct __ns1__SetMetadataConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMetadataConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioEncoderConfiguration
#define SOAP_TYPE___ns1__SetAudioEncoderConfiguration (1605)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioEncoderConfiguration(struct soap*, struct __ns1__SetAudioEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioEncoderConfiguration(struct soap*, const struct __ns1__SetAudioEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioEncoderConfiguration(struct soap*, const char*, struct __ns1__SetAudioEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioEncoderConfiguration(struct soap*, const struct __ns1__SetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioEncoderConfiguration
#define soap_write___ns1__SetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioEncoderConfiguration(soap, data), 0) || soap_put___ns1__SetAudioEncoderConfiguration(soap, data, "-ns1:SetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioEncoderConfiguration(struct soap*, struct __ns1__SetAudioEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioEncoderConfiguration
#define soap_read___ns1__SetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioEncoderConfiguration * soap_new___ns1__SetAudioEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioEncoderConfiguration * soap_new_req___ns1__SetAudioEncoderConfiguration(struct soap *soap) { struct __ns1__SetAudioEncoderConfiguration *_p = soap_instantiate___ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioEncoderConfiguration * soap_new_set___ns1__SetAudioEncoderConfiguration(struct soap *soap, _ns1__SetAudioEncoderConfiguration *ns1__SetAudioEncoderConfiguration) { struct __ns1__SetAudioEncoderConfiguration *_p = soap_instantiate___ns1__SetAudioEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioEncoderConfiguration(soap, _p); _p->ns1__SetAudioEncoderConfiguration = ns1__SetAudioEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioEncoderConfiguration(struct soap *soap, struct __ns1__SetAudioEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE___ns1__SetAudioEncoderConfigurationResponse (1604)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioEncoderConfigurationResponse(struct soap*, struct __ns1__SetAudioEncoderConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioEncoderConfigurationResponse(struct soap*, const struct __ns1__SetAudioEncoderConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioEncoderConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetAudioEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetAudioEncoderConfigurationResponse(struct soap*, const char*, struct __ns1__SetAudioEncoderConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioEncoderConfigurationResponse(struct soap*, const struct __ns1__SetAudioEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioEncoderConfigurationResponse
#define soap_write___ns1__SetAudioEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioEncoderConfigurationResponse(soap, data), 0) || soap_put___ns1__SetAudioEncoderConfigurationResponse(soap, data, "-ns1:SetAudioEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioEncoderConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetAudioEncoderConfigurationResponse(struct soap*, struct __ns1__SetAudioEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioEncoderConfigurationResponse
#define soap_read___ns1__SetAudioEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetAudioEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioEncoderConfigurationResponse * soap_new___ns1__SetAudioEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioEncoderConfigurationResponse * soap_new_req___ns1__SetAudioEncoderConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioEncoderConfigurationResponse) { struct __ns1__SetAudioEncoderConfigurationResponse *_p = soap_instantiate___ns1__SetAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioEncoderConfigurationResponse(soap, _p); _p->ns1__SetAudioEncoderConfigurationResponse = ns1__SetAudioEncoderConfigurationResponse; } return _p; }

inline struct __ns1__SetAudioEncoderConfigurationResponse * soap_new_set___ns1__SetAudioEncoderConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioEncoderConfigurationResponse) { struct __ns1__SetAudioEncoderConfigurationResponse *_p = soap_instantiate___ns1__SetAudioEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioEncoderConfigurationResponse(soap, _p); _p->ns1__SetAudioEncoderConfigurationResponse = ns1__SetAudioEncoderConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetAudioEncoderConfigurationResponse(struct soap *soap, struct __ns1__SetAudioEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioSourceConfiguration
#define SOAP_TYPE___ns1__SetAudioSourceConfiguration (1601)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioSourceConfiguration(struct soap*, struct __ns1__SetAudioSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioSourceConfiguration(struct soap*, const struct __ns1__SetAudioSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioSourceConfiguration(struct soap*, const char*, int, const struct __ns1__SetAudioSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_in___ns1__SetAudioSourceConfiguration(struct soap*, const char*, struct __ns1__SetAudioSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioSourceConfiguration(struct soap*, const struct __ns1__SetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioSourceConfiguration
#define soap_write___ns1__SetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioSourceConfiguration(soap, data), 0) || soap_put___ns1__SetAudioSourceConfiguration(soap, data, "-ns1:SetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioSourceConfiguration * SOAP_FMAC4 soap_get___ns1__SetAudioSourceConfiguration(struct soap*, struct __ns1__SetAudioSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioSourceConfiguration
#define soap_read___ns1__SetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetAudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioSourceConfiguration * soap_new___ns1__SetAudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioSourceConfiguration * soap_new_req___ns1__SetAudioSourceConfiguration(struct soap *soap) { struct __ns1__SetAudioSourceConfiguration *_p = soap_instantiate___ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetAudioSourceConfiguration * soap_new_set___ns1__SetAudioSourceConfiguration(struct soap *soap, _ns1__SetAudioSourceConfiguration *ns1__SetAudioSourceConfiguration) { struct __ns1__SetAudioSourceConfiguration *_p = soap_instantiate___ns1__SetAudioSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioSourceConfiguration(soap, _p); _p->ns1__SetAudioSourceConfiguration = ns1__SetAudioSourceConfiguration; } return _p; }

inline void soap_delete___ns1__SetAudioSourceConfiguration(struct soap *soap, struct __ns1__SetAudioSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetAudioSourceConfigurationResponse
#define SOAP_TYPE___ns1__SetAudioSourceConfigurationResponse (1600)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAudioSourceConfigurationResponse(struct soap*, struct __ns1__SetAudioSourceConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAudioSourceConfigurationResponse(struct soap*, const struct __ns1__SetAudioSourceConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAudioSourceConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetAudioSourceConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetAudioSourceConfigurationResponse(struct soap*, const char*, struct __ns1__SetAudioSourceConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAudioSourceConfigurationResponse(struct soap*, const struct __ns1__SetAudioSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetAudioSourceConfigurationResponse
#define soap_write___ns1__SetAudioSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetAudioSourceConfigurationResponse(soap, data), 0) || soap_put___ns1__SetAudioSourceConfigurationResponse(soap, data, "-ns1:SetAudioSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetAudioSourceConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetAudioSourceConfigurationResponse(struct soap*, struct __ns1__SetAudioSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetAudioSourceConfigurationResponse
#define soap_read___ns1__SetAudioSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetAudioSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetAudioSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetAudioSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAudioSourceConfigurationResponse * soap_new___ns1__SetAudioSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetAudioSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetAudioSourceConfigurationResponse * soap_new_req___ns1__SetAudioSourceConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioSourceConfigurationResponse) { struct __ns1__SetAudioSourceConfigurationResponse *_p = soap_instantiate___ns1__SetAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioSourceConfigurationResponse(soap, _p); _p->ns1__SetAudioSourceConfigurationResponse = ns1__SetAudioSourceConfigurationResponse; } return _p; }

inline struct __ns1__SetAudioSourceConfigurationResponse * soap_new_set___ns1__SetAudioSourceConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetAudioSourceConfigurationResponse) { struct __ns1__SetAudioSourceConfigurationResponse *_p = soap_instantiate___ns1__SetAudioSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetAudioSourceConfigurationResponse(soap, _p); _p->ns1__SetAudioSourceConfigurationResponse = ns1__SetAudioSourceConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetAudioSourceConfigurationResponse(struct soap *soap, struct __ns1__SetAudioSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetAudioSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoEncoderConfiguration
#define SOAP_TYPE___ns1__SetVideoEncoderConfiguration (1597)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoEncoderConfiguration(struct soap*, struct __ns1__SetVideoEncoderConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoEncoderConfiguration(struct soap*, const struct __ns1__SetVideoEncoderConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoEncoderConfiguration(struct soap*, const char*, int, const struct __ns1__SetVideoEncoderConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_in___ns1__SetVideoEncoderConfiguration(struct soap*, const char*, struct __ns1__SetVideoEncoderConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoEncoderConfiguration(struct soap*, const struct __ns1__SetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoEncoderConfiguration
#define soap_write___ns1__SetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoEncoderConfiguration(soap, data), 0) || soap_put___ns1__SetVideoEncoderConfiguration(soap, data, "-ns1:SetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoEncoderConfiguration * SOAP_FMAC4 soap_get___ns1__SetVideoEncoderConfiguration(struct soap*, struct __ns1__SetVideoEncoderConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoEncoderConfiguration
#define soap_read___ns1__SetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoEncoderConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetVideoEncoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoEncoderConfiguration * soap_new___ns1__SetVideoEncoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoEncoderConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoEncoderConfiguration * soap_new_req___ns1__SetVideoEncoderConfiguration(struct soap *soap) { struct __ns1__SetVideoEncoderConfiguration *_p = soap_instantiate___ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoEncoderConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetVideoEncoderConfiguration * soap_new_set___ns1__SetVideoEncoderConfiguration(struct soap *soap, _ns1__SetVideoEncoderConfiguration *ns1__SetVideoEncoderConfiguration) { struct __ns1__SetVideoEncoderConfiguration *_p = soap_instantiate___ns1__SetVideoEncoderConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoEncoderConfiguration(soap, _p); _p->ns1__SetVideoEncoderConfiguration = ns1__SetVideoEncoderConfiguration; } return _p; }

inline void soap_delete___ns1__SetVideoEncoderConfiguration(struct soap *soap, struct __ns1__SetVideoEncoderConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoEncoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE___ns1__SetVideoEncoderConfigurationResponse (1596)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoEncoderConfigurationResponse(struct soap*, struct __ns1__SetVideoEncoderConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoEncoderConfigurationResponse(struct soap*, const struct __ns1__SetVideoEncoderConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoEncoderConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetVideoEncoderConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetVideoEncoderConfigurationResponse(struct soap*, const char*, struct __ns1__SetVideoEncoderConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoEncoderConfigurationResponse(struct soap*, const struct __ns1__SetVideoEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoEncoderConfigurationResponse
#define soap_write___ns1__SetVideoEncoderConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoEncoderConfigurationResponse(soap, data), 0) || soap_put___ns1__SetVideoEncoderConfigurationResponse(soap, data, "-ns1:SetVideoEncoderConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoEncoderConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetVideoEncoderConfigurationResponse(struct soap*, struct __ns1__SetVideoEncoderConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoEncoderConfigurationResponse
#define soap_read___ns1__SetVideoEncoderConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoEncoderConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoEncoderConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetVideoEncoderConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoEncoderConfigurationResponse * soap_new___ns1__SetVideoEncoderConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoEncoderConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoEncoderConfigurationResponse * soap_new_req___ns1__SetVideoEncoderConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetVideoEncoderConfigurationResponse) { struct __ns1__SetVideoEncoderConfigurationResponse *_p = soap_instantiate___ns1__SetVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoEncoderConfigurationResponse(soap, _p); _p->ns1__SetVideoEncoderConfigurationResponse = ns1__SetVideoEncoderConfigurationResponse; } return _p; }

inline struct __ns1__SetVideoEncoderConfigurationResponse * soap_new_set___ns1__SetVideoEncoderConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetVideoEncoderConfigurationResponse) { struct __ns1__SetVideoEncoderConfigurationResponse *_p = soap_instantiate___ns1__SetVideoEncoderConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoEncoderConfigurationResponse(soap, _p); _p->ns1__SetVideoEncoderConfigurationResponse = ns1__SetVideoEncoderConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetVideoEncoderConfigurationResponse(struct soap *soap, struct __ns1__SetVideoEncoderConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoEncoderConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoSourceConfiguration
#define SOAP_TYPE___ns1__SetVideoSourceConfiguration (1593)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoSourceConfiguration(struct soap*, struct __ns1__SetVideoSourceConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoSourceConfiguration(struct soap*, const struct __ns1__SetVideoSourceConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoSourceConfiguration(struct soap*, const char*, int, const struct __ns1__SetVideoSourceConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_in___ns1__SetVideoSourceConfiguration(struct soap*, const char*, struct __ns1__SetVideoSourceConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoSourceConfiguration(struct soap*, const struct __ns1__SetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoSourceConfiguration
#define soap_write___ns1__SetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoSourceConfiguration(soap, data), 0) || soap_put___ns1__SetVideoSourceConfiguration(soap, data, "-ns1:SetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoSourceConfiguration * SOAP_FMAC4 soap_get___ns1__SetVideoSourceConfiguration(struct soap*, struct __ns1__SetVideoSourceConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoSourceConfiguration
#define soap_read___ns1__SetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoSourceConfiguration * SOAP_FMAC2 soap_instantiate___ns1__SetVideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoSourceConfiguration * soap_new___ns1__SetVideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoSourceConfiguration * soap_new_req___ns1__SetVideoSourceConfiguration(struct soap *soap) { struct __ns1__SetVideoSourceConfiguration *_p = soap_instantiate___ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceConfiguration(soap, _p); } return _p; }

inline struct __ns1__SetVideoSourceConfiguration * soap_new_set___ns1__SetVideoSourceConfiguration(struct soap *soap, _ns1__SetVideoSourceConfiguration *ns1__SetVideoSourceConfiguration) { struct __ns1__SetVideoSourceConfiguration *_p = soap_instantiate___ns1__SetVideoSourceConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceConfiguration(soap, _p); _p->ns1__SetVideoSourceConfiguration = ns1__SetVideoSourceConfiguration; } return _p; }

inline void soap_delete___ns1__SetVideoSourceConfiguration(struct soap *soap, struct __ns1__SetVideoSourceConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__SetVideoSourceConfigurationResponse
#define SOAP_TYPE___ns1__SetVideoSourceConfigurationResponse (1592)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetVideoSourceConfigurationResponse(struct soap*, struct __ns1__SetVideoSourceConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetVideoSourceConfigurationResponse(struct soap*, const struct __ns1__SetVideoSourceConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetVideoSourceConfigurationResponse(struct soap*, const char*, int, const struct __ns1__SetVideoSourceConfigurationResponse *, const char*);
SOAP_FMAC3 struct __ns1__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_in___ns1__SetVideoSourceConfigurationResponse(struct soap*, const char*, struct __ns1__SetVideoSourceConfigurationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetVideoSourceConfigurationResponse(struct soap*, const struct __ns1__SetVideoSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_write___ns1__SetVideoSourceConfigurationResponse
#define soap_write___ns1__SetVideoSourceConfigurationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__SetVideoSourceConfigurationResponse(soap, data), 0) || soap_put___ns1__SetVideoSourceConfigurationResponse(soap, data, "-ns1:SetVideoSourceConfigurationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetVideoSourceConfigurationResponse * SOAP_FMAC4 soap_get___ns1__SetVideoSourceConfigurationResponse(struct soap*, struct __ns1__SetVideoSourceConfigurationResponse *, const char*, const char*);

#ifndef soap_read___ns1__SetVideoSourceConfigurationResponse
#define soap_read___ns1__SetVideoSourceConfigurationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__SetVideoSourceConfigurationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetVideoSourceConfigurationResponse * SOAP_FMAC2 soap_instantiate___ns1__SetVideoSourceConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetVideoSourceConfigurationResponse * soap_new___ns1__SetVideoSourceConfigurationResponse(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetVideoSourceConfigurationResponse(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetVideoSourceConfigurationResponse * soap_new_req___ns1__SetVideoSourceConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetVideoSourceConfigurationResponse) { struct __ns1__SetVideoSourceConfigurationResponse *_p = soap_instantiate___ns1__SetVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceConfigurationResponse(soap, _p); _p->ns1__SetVideoSourceConfigurationResponse = ns1__SetVideoSourceConfigurationResponse; } return _p; }

inline struct __ns1__SetVideoSourceConfigurationResponse * soap_new_set___ns1__SetVideoSourceConfigurationResponse(struct soap *soap, ns1__SetConfigurationResponse& ns1__SetVideoSourceConfigurationResponse) { struct __ns1__SetVideoSourceConfigurationResponse *_p = soap_instantiate___ns1__SetVideoSourceConfigurationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetVideoSourceConfigurationResponse(soap, _p); _p->ns1__SetVideoSourceConfigurationResponse = ns1__SetVideoSourceConfigurationResponse; } return _p; }

inline void soap_delete___ns1__SetVideoSourceConfigurationResponse(struct soap *soap, struct __ns1__SetVideoSourceConfigurationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetVideoSourceConfigurationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioDecoderConfigurations
#define SOAP_TYPE___ns1__GetAudioDecoderConfigurations (1588)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioDecoderConfigurations(struct soap*, struct __ns1__GetAudioDecoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioDecoderConfigurations(struct soap*, const struct __ns1__GetAudioDecoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioDecoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioDecoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioDecoderConfigurations(struct soap*, const char*, struct __ns1__GetAudioDecoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioDecoderConfigurations(struct soap*, const struct __ns1__GetAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioDecoderConfigurations
#define soap_write___ns1__GetAudioDecoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioDecoderConfigurations(soap, data), 0) || soap_put___ns1__GetAudioDecoderConfigurations(soap, data, "-ns1:GetAudioDecoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioDecoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioDecoderConfigurations(struct soap*, struct __ns1__GetAudioDecoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioDecoderConfigurations
#define soap_read___ns1__GetAudioDecoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioDecoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioDecoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioDecoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioDecoderConfigurations * soap_new___ns1__GetAudioDecoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioDecoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioDecoderConfigurations * soap_new_req___ns1__GetAudioDecoderConfigurations(struct soap *soap) { struct __ns1__GetAudioDecoderConfigurations *_p = soap_instantiate___ns1__GetAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioDecoderConfigurations * soap_new_set___ns1__GetAudioDecoderConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioDecoderConfigurations) { struct __ns1__GetAudioDecoderConfigurations *_p = soap_instantiate___ns1__GetAudioDecoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioDecoderConfigurations(soap, _p); _p->ns1__GetAudioDecoderConfigurations = ns1__GetAudioDecoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioDecoderConfigurations(struct soap *soap, struct __ns1__GetAudioDecoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioDecoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioOutputConfigurations
#define SOAP_TYPE___ns1__GetAudioOutputConfigurations (1585)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioOutputConfigurations(struct soap*, struct __ns1__GetAudioOutputConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioOutputConfigurations(struct soap*, const struct __ns1__GetAudioOutputConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioOutputConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioOutputConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioOutputConfigurations(struct soap*, const char*, struct __ns1__GetAudioOutputConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioOutputConfigurations(struct soap*, const struct __ns1__GetAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioOutputConfigurations
#define soap_write___ns1__GetAudioOutputConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioOutputConfigurations(soap, data), 0) || soap_put___ns1__GetAudioOutputConfigurations(soap, data, "-ns1:GetAudioOutputConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioOutputConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioOutputConfigurations(struct soap*, struct __ns1__GetAudioOutputConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioOutputConfigurations
#define soap_read___ns1__GetAudioOutputConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioOutputConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioOutputConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioOutputConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioOutputConfigurations * soap_new___ns1__GetAudioOutputConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioOutputConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioOutputConfigurations * soap_new_req___ns1__GetAudioOutputConfigurations(struct soap *soap) { struct __ns1__GetAudioOutputConfigurations *_p = soap_instantiate___ns1__GetAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioOutputConfigurations * soap_new_set___ns1__GetAudioOutputConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioOutputConfigurations) { struct __ns1__GetAudioOutputConfigurations *_p = soap_instantiate___ns1__GetAudioOutputConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioOutputConfigurations(soap, _p); _p->ns1__GetAudioOutputConfigurations = ns1__GetAudioOutputConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioOutputConfigurations(struct soap *soap, struct __ns1__GetAudioOutputConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioOutputConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetMetadataConfigurations
#define SOAP_TYPE___ns1__GetMetadataConfigurations (1582)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMetadataConfigurations(struct soap*, struct __ns1__GetMetadataConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMetadataConfigurations(struct soap*, const struct __ns1__GetMetadataConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMetadataConfigurations(struct soap*, const char*, int, const struct __ns1__GetMetadataConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetMetadataConfigurations * SOAP_FMAC4 soap_in___ns1__GetMetadataConfigurations(struct soap*, const char*, struct __ns1__GetMetadataConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMetadataConfigurations(struct soap*, const struct __ns1__GetMetadataConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetMetadataConfigurations
#define soap_write___ns1__GetMetadataConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetMetadataConfigurations(soap, data), 0) || soap_put___ns1__GetMetadataConfigurations(soap, data, "-ns1:GetMetadataConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMetadataConfigurations * SOAP_FMAC4 soap_get___ns1__GetMetadataConfigurations(struct soap*, struct __ns1__GetMetadataConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetMetadataConfigurations
#define soap_read___ns1__GetMetadataConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetMetadataConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMetadataConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetMetadataConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMetadataConfigurations * soap_new___ns1__GetMetadataConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMetadataConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMetadataConfigurations * soap_new_req___ns1__GetMetadataConfigurations(struct soap *soap) { struct __ns1__GetMetadataConfigurations *_p = soap_instantiate___ns1__GetMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetMetadataConfigurations * soap_new_set___ns1__GetMetadataConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetMetadataConfigurations) { struct __ns1__GetMetadataConfigurations *_p = soap_instantiate___ns1__GetMetadataConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMetadataConfigurations(soap, _p); _p->ns1__GetMetadataConfigurations = ns1__GetMetadataConfigurations; } return _p; }

inline void soap_delete___ns1__GetMetadataConfigurations(struct soap *soap, struct __ns1__GetMetadataConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMetadataConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAnalyticsConfigurations
#define SOAP_TYPE___ns1__GetAnalyticsConfigurations (1579)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAnalyticsConfigurations(struct soap*, struct __ns1__GetAnalyticsConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAnalyticsConfigurations(struct soap*, const struct __ns1__GetAnalyticsConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAnalyticsConfigurations(struct soap*, const char*, int, const struct __ns1__GetAnalyticsConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAnalyticsConfigurations * SOAP_FMAC4 soap_in___ns1__GetAnalyticsConfigurations(struct soap*, const char*, struct __ns1__GetAnalyticsConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAnalyticsConfigurations(struct soap*, const struct __ns1__GetAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAnalyticsConfigurations
#define soap_write___ns1__GetAnalyticsConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAnalyticsConfigurations(soap, data), 0) || soap_put___ns1__GetAnalyticsConfigurations(soap, data, "-ns1:GetAnalyticsConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAnalyticsConfigurations * SOAP_FMAC4 soap_get___ns1__GetAnalyticsConfigurations(struct soap*, struct __ns1__GetAnalyticsConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAnalyticsConfigurations
#define soap_read___ns1__GetAnalyticsConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAnalyticsConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAnalyticsConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAnalyticsConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAnalyticsConfigurations * soap_new___ns1__GetAnalyticsConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAnalyticsConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAnalyticsConfigurations * soap_new_req___ns1__GetAnalyticsConfigurations(struct soap *soap) { struct __ns1__GetAnalyticsConfigurations *_p = soap_instantiate___ns1__GetAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAnalyticsConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAnalyticsConfigurations * soap_new_set___ns1__GetAnalyticsConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetAnalyticsConfigurations) { struct __ns1__GetAnalyticsConfigurations *_p = soap_instantiate___ns1__GetAnalyticsConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAnalyticsConfigurations(soap, _p); _p->ns1__GetAnalyticsConfigurations = ns1__GetAnalyticsConfigurations; } return _p; }

inline void soap_delete___ns1__GetAnalyticsConfigurations(struct soap *soap, struct __ns1__GetAnalyticsConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAnalyticsConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioEncoderConfigurations
#define SOAP_TYPE___ns1__GetAudioEncoderConfigurations (1576)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioEncoderConfigurations(struct soap*, struct __ns1__GetAudioEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioEncoderConfigurations(struct soap*, const struct __ns1__GetAudioEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioEncoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioEncoderConfigurations(struct soap*, const char*, struct __ns1__GetAudioEncoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioEncoderConfigurations(struct soap*, const struct __ns1__GetAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioEncoderConfigurations
#define soap_write___ns1__GetAudioEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioEncoderConfigurations(soap, data), 0) || soap_put___ns1__GetAudioEncoderConfigurations(soap, data, "-ns1:GetAudioEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioEncoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioEncoderConfigurations(struct soap*, struct __ns1__GetAudioEncoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioEncoderConfigurations
#define soap_read___ns1__GetAudioEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioEncoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioEncoderConfigurations * soap_new___ns1__GetAudioEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioEncoderConfigurations * soap_new_req___ns1__GetAudioEncoderConfigurations(struct soap *soap) { struct __ns1__GetAudioEncoderConfigurations *_p = soap_instantiate___ns1__GetAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioEncoderConfigurations * soap_new_set___ns1__GetAudioEncoderConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioEncoderConfigurations) { struct __ns1__GetAudioEncoderConfigurations *_p = soap_instantiate___ns1__GetAudioEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioEncoderConfigurations(soap, _p); _p->ns1__GetAudioEncoderConfigurations = ns1__GetAudioEncoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioEncoderConfigurations(struct soap *soap, struct __ns1__GetAudioEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetAudioSourceConfigurations
#define SOAP_TYPE___ns1__GetAudioSourceConfigurations (1573)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAudioSourceConfigurations(struct soap*, struct __ns1__GetAudioSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAudioSourceConfigurations(struct soap*, const struct __ns1__GetAudioSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAudioSourceConfigurations(struct soap*, const char*, int, const struct __ns1__GetAudioSourceConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurations * SOAP_FMAC4 soap_in___ns1__GetAudioSourceConfigurations(struct soap*, const char*, struct __ns1__GetAudioSourceConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAudioSourceConfigurations(struct soap*, const struct __ns1__GetAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetAudioSourceConfigurations
#define soap_write___ns1__GetAudioSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetAudioSourceConfigurations(soap, data), 0) || soap_put___ns1__GetAudioSourceConfigurations(soap, data, "-ns1:GetAudioSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetAudioSourceConfigurations * SOAP_FMAC4 soap_get___ns1__GetAudioSourceConfigurations(struct soap*, struct __ns1__GetAudioSourceConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetAudioSourceConfigurations
#define soap_read___ns1__GetAudioSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetAudioSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetAudioSourceConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetAudioSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAudioSourceConfigurations * soap_new___ns1__GetAudioSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetAudioSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetAudioSourceConfigurations * soap_new_req___ns1__GetAudioSourceConfigurations(struct soap *soap) { struct __ns1__GetAudioSourceConfigurations *_p = soap_instantiate___ns1__GetAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetAudioSourceConfigurations * soap_new_set___ns1__GetAudioSourceConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetAudioSourceConfigurations) { struct __ns1__GetAudioSourceConfigurations *_p = soap_instantiate___ns1__GetAudioSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetAudioSourceConfigurations(soap, _p); _p->ns1__GetAudioSourceConfigurations = ns1__GetAudioSourceConfigurations; } return _p; }

inline void soap_delete___ns1__GetAudioSourceConfigurations(struct soap *soap, struct __ns1__GetAudioSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAudioSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoEncoderConfigurations
#define SOAP_TYPE___ns1__GetVideoEncoderConfigurations (1570)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoEncoderConfigurations(struct soap*, struct __ns1__GetVideoEncoderConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoEncoderConfigurations(struct soap*, const struct __ns1__GetVideoEncoderConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoEncoderConfigurations(struct soap*, const char*, int, const struct __ns1__GetVideoEncoderConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_in___ns1__GetVideoEncoderConfigurations(struct soap*, const char*, struct __ns1__GetVideoEncoderConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoEncoderConfigurations(struct soap*, const struct __ns1__GetVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoEncoderConfigurations
#define soap_write___ns1__GetVideoEncoderConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoEncoderConfigurations(soap, data), 0) || soap_put___ns1__GetVideoEncoderConfigurations(soap, data, "-ns1:GetVideoEncoderConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoEncoderConfigurations * SOAP_FMAC4 soap_get___ns1__GetVideoEncoderConfigurations(struct soap*, struct __ns1__GetVideoEncoderConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoEncoderConfigurations
#define soap_read___ns1__GetVideoEncoderConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoEncoderConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoEncoderConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetVideoEncoderConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoEncoderConfigurations * soap_new___ns1__GetVideoEncoderConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoEncoderConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoEncoderConfigurations * soap_new_req___ns1__GetVideoEncoderConfigurations(struct soap *soap) { struct __ns1__GetVideoEncoderConfigurations *_p = soap_instantiate___ns1__GetVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetVideoEncoderConfigurations * soap_new_set___ns1__GetVideoEncoderConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetVideoEncoderConfigurations) { struct __ns1__GetVideoEncoderConfigurations *_p = soap_instantiate___ns1__GetVideoEncoderConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoEncoderConfigurations(soap, _p); _p->ns1__GetVideoEncoderConfigurations = ns1__GetVideoEncoderConfigurations; } return _p; }

inline void soap_delete___ns1__GetVideoEncoderConfigurations(struct soap *soap, struct __ns1__GetVideoEncoderConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoEncoderConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetVideoSourceConfigurations
#define SOAP_TYPE___ns1__GetVideoSourceConfigurations (1567)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetVideoSourceConfigurations(struct soap*, struct __ns1__GetVideoSourceConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetVideoSourceConfigurations(struct soap*, const struct __ns1__GetVideoSourceConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetVideoSourceConfigurations(struct soap*, const char*, int, const struct __ns1__GetVideoSourceConfigurations *, const char*);
SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurations * SOAP_FMAC4 soap_in___ns1__GetVideoSourceConfigurations(struct soap*, const char*, struct __ns1__GetVideoSourceConfigurations *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetVideoSourceConfigurations(struct soap*, const struct __ns1__GetVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_write___ns1__GetVideoSourceConfigurations
#define soap_write___ns1__GetVideoSourceConfigurations(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetVideoSourceConfigurations(soap, data), 0) || soap_put___ns1__GetVideoSourceConfigurations(soap, data, "-ns1:GetVideoSourceConfigurations", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetVideoSourceConfigurations * SOAP_FMAC4 soap_get___ns1__GetVideoSourceConfigurations(struct soap*, struct __ns1__GetVideoSourceConfigurations *, const char*, const char*);

#ifndef soap_read___ns1__GetVideoSourceConfigurations
#define soap_read___ns1__GetVideoSourceConfigurations(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetVideoSourceConfigurations(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetVideoSourceConfigurations * SOAP_FMAC2 soap_instantiate___ns1__GetVideoSourceConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetVideoSourceConfigurations * soap_new___ns1__GetVideoSourceConfigurations(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetVideoSourceConfigurations(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetVideoSourceConfigurations * soap_new_req___ns1__GetVideoSourceConfigurations(struct soap *soap) { struct __ns1__GetVideoSourceConfigurations *_p = soap_instantiate___ns1__GetVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurations(soap, _p); } return _p; }

inline struct __ns1__GetVideoSourceConfigurations * soap_new_set___ns1__GetVideoSourceConfigurations(struct soap *soap, ns1__GetConfiguration *ns1__GetVideoSourceConfigurations) { struct __ns1__GetVideoSourceConfigurations *_p = soap_instantiate___ns1__GetVideoSourceConfigurations(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetVideoSourceConfigurations(soap, _p); _p->ns1__GetVideoSourceConfigurations = ns1__GetVideoSourceConfigurations; } return _p; }

inline void soap_delete___ns1__GetVideoSourceConfigurations(struct soap *soap, struct __ns1__GetVideoSourceConfigurations *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetVideoSourceConfigurations(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__DeleteProfile
#define SOAP_TYPE___ns1__DeleteProfile (1563)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DeleteProfile(struct soap*, struct __ns1__DeleteProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DeleteProfile(struct soap*, const struct __ns1__DeleteProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DeleteProfile(struct soap*, const char*, int, const struct __ns1__DeleteProfile *, const char*);
SOAP_FMAC3 struct __ns1__DeleteProfile * SOAP_FMAC4 soap_in___ns1__DeleteProfile(struct soap*, const char*, struct __ns1__DeleteProfile *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DeleteProfile(struct soap*, const struct __ns1__DeleteProfile *, const char*, const char*);

#ifndef soap_write___ns1__DeleteProfile
#define soap_write___ns1__DeleteProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__DeleteProfile(soap, data), 0) || soap_put___ns1__DeleteProfile(soap, data, "-ns1:DeleteProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DeleteProfile * SOAP_FMAC4 soap_get___ns1__DeleteProfile(struct soap*, struct __ns1__DeleteProfile *, const char*, const char*);

#ifndef soap_read___ns1__DeleteProfile
#define soap_read___ns1__DeleteProfile(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__DeleteProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__DeleteProfile * SOAP_FMAC2 soap_instantiate___ns1__DeleteProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DeleteProfile * soap_new___ns1__DeleteProfile(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DeleteProfile(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DeleteProfile * soap_new_req___ns1__DeleteProfile(struct soap *soap) { struct __ns1__DeleteProfile *_p = soap_instantiate___ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteProfile(soap, _p); } return _p; }

inline struct __ns1__DeleteProfile * soap_new_set___ns1__DeleteProfile(struct soap *soap, _ns1__DeleteProfile *ns1__DeleteProfile) { struct __ns1__DeleteProfile *_p = soap_instantiate___ns1__DeleteProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__DeleteProfile(soap, _p); _p->ns1__DeleteProfile = ns1__DeleteProfile; } return _p; }

inline void soap_delete___ns1__DeleteProfile(struct soap *soap, struct __ns1__DeleteProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DeleteProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__RemoveConfiguration
#define SOAP_TYPE___ns1__RemoveConfiguration (1559)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RemoveConfiguration(struct soap*, struct __ns1__RemoveConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RemoveConfiguration(struct soap*, const struct __ns1__RemoveConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RemoveConfiguration(struct soap*, const char*, int, const struct __ns1__RemoveConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__RemoveConfiguration * SOAP_FMAC4 soap_in___ns1__RemoveConfiguration(struct soap*, const char*, struct __ns1__RemoveConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RemoveConfiguration(struct soap*, const struct __ns1__RemoveConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__RemoveConfiguration
#define soap_write___ns1__RemoveConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__RemoveConfiguration(soap, data), 0) || soap_put___ns1__RemoveConfiguration(soap, data, "-ns1:RemoveConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RemoveConfiguration * SOAP_FMAC4 soap_get___ns1__RemoveConfiguration(struct soap*, struct __ns1__RemoveConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__RemoveConfiguration
#define soap_read___ns1__RemoveConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__RemoveConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RemoveConfiguration * SOAP_FMAC2 soap_instantiate___ns1__RemoveConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RemoveConfiguration * soap_new___ns1__RemoveConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RemoveConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RemoveConfiguration * soap_new_req___ns1__RemoveConfiguration(struct soap *soap) { struct __ns1__RemoveConfiguration *_p = soap_instantiate___ns1__RemoveConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveConfiguration(soap, _p); } return _p; }

inline struct __ns1__RemoveConfiguration * soap_new_set___ns1__RemoveConfiguration(struct soap *soap, _ns1__RemoveConfiguration *ns1__RemoveConfiguration) { struct __ns1__RemoveConfiguration *_p = soap_instantiate___ns1__RemoveConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RemoveConfiguration(soap, _p); _p->ns1__RemoveConfiguration = ns1__RemoveConfiguration; } return _p; }

inline void soap_delete___ns1__RemoveConfiguration(struct soap *soap, struct __ns1__RemoveConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RemoveConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AddConfiguration
#define SOAP_TYPE___ns1__AddConfiguration (1555)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddConfiguration(struct soap*, struct __ns1__AddConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddConfiguration(struct soap*, const struct __ns1__AddConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddConfiguration(struct soap*, const char*, int, const struct __ns1__AddConfiguration *, const char*);
SOAP_FMAC3 struct __ns1__AddConfiguration * SOAP_FMAC4 soap_in___ns1__AddConfiguration(struct soap*, const char*, struct __ns1__AddConfiguration *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddConfiguration(struct soap*, const struct __ns1__AddConfiguration *, const char*, const char*);

#ifndef soap_write___ns1__AddConfiguration
#define soap_write___ns1__AddConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AddConfiguration(soap, data), 0) || soap_put___ns1__AddConfiguration(soap, data, "-ns1:AddConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AddConfiguration * SOAP_FMAC4 soap_get___ns1__AddConfiguration(struct soap*, struct __ns1__AddConfiguration *, const char*, const char*);

#ifndef soap_read___ns1__AddConfiguration
#define soap_read___ns1__AddConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AddConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AddConfiguration * SOAP_FMAC2 soap_instantiate___ns1__AddConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AddConfiguration * soap_new___ns1__AddConfiguration(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AddConfiguration(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AddConfiguration * soap_new_req___ns1__AddConfiguration(struct soap *soap) { struct __ns1__AddConfiguration *_p = soap_instantiate___ns1__AddConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddConfiguration(soap, _p); } return _p; }

inline struct __ns1__AddConfiguration * soap_new_set___ns1__AddConfiguration(struct soap *soap, _ns1__AddConfiguration *ns1__AddConfiguration) { struct __ns1__AddConfiguration *_p = soap_instantiate___ns1__AddConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AddConfiguration(soap, _p); _p->ns1__AddConfiguration = ns1__AddConfiguration; } return _p; }

inline void soap_delete___ns1__AddConfiguration(struct soap *soap, struct __ns1__AddConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetProfiles
#define SOAP_TYPE___ns1__GetProfiles (1551)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetProfiles(struct soap*, struct __ns1__GetProfiles *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetProfiles(struct soap*, const struct __ns1__GetProfiles *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetProfiles(struct soap*, const char*, int, const struct __ns1__GetProfiles *, const char*);
SOAP_FMAC3 struct __ns1__GetProfiles * SOAP_FMAC4 soap_in___ns1__GetProfiles(struct soap*, const char*, struct __ns1__GetProfiles *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetProfiles(struct soap*, const struct __ns1__GetProfiles *, const char*, const char*);

#ifndef soap_write___ns1__GetProfiles
#define soap_write___ns1__GetProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetProfiles(soap, data), 0) || soap_put___ns1__GetProfiles(soap, data, "-ns1:GetProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetProfiles * SOAP_FMAC4 soap_get___ns1__GetProfiles(struct soap*, struct __ns1__GetProfiles *, const char*, const char*);

#ifndef soap_read___ns1__GetProfiles
#define soap_read___ns1__GetProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetProfiles * SOAP_FMAC2 soap_instantiate___ns1__GetProfiles(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetProfiles * soap_new___ns1__GetProfiles(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetProfiles(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetProfiles * soap_new_req___ns1__GetProfiles(struct soap *soap) { struct __ns1__GetProfiles *_p = soap_instantiate___ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProfiles(soap, _p); } return _p; }

inline struct __ns1__GetProfiles * soap_new_set___ns1__GetProfiles(struct soap *soap, _ns1__GetProfiles *ns1__GetProfiles) { struct __ns1__GetProfiles *_p = soap_instantiate___ns1__GetProfiles(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProfiles(soap, _p); _p->ns1__GetProfiles = ns1__GetProfiles; } return _p; }

inline void soap_delete___ns1__GetProfiles(struct soap *soap, struct __ns1__GetProfiles *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetProfiles(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__CreateProfile
#define SOAP_TYPE___ns1__CreateProfile (1547)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateProfile(struct soap*, struct __ns1__CreateProfile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateProfile(struct soap*, const struct __ns1__CreateProfile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateProfile(struct soap*, const char*, int, const struct __ns1__CreateProfile *, const char*);
SOAP_FMAC3 struct __ns1__CreateProfile * SOAP_FMAC4 soap_in___ns1__CreateProfile(struct soap*, const char*, struct __ns1__CreateProfile *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateProfile(struct soap*, const struct __ns1__CreateProfile *, const char*, const char*);

#ifndef soap_write___ns1__CreateProfile
#define soap_write___ns1__CreateProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__CreateProfile(soap, data), 0) || soap_put___ns1__CreateProfile(soap, data, "-ns1:CreateProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CreateProfile * SOAP_FMAC4 soap_get___ns1__CreateProfile(struct soap*, struct __ns1__CreateProfile *, const char*, const char*);

#ifndef soap_read___ns1__CreateProfile
#define soap_read___ns1__CreateProfile(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__CreateProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__CreateProfile * SOAP_FMAC2 soap_instantiate___ns1__CreateProfile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateProfile * soap_new___ns1__CreateProfile(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CreateProfile(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CreateProfile * soap_new_req___ns1__CreateProfile(struct soap *soap) { struct __ns1__CreateProfile *_p = soap_instantiate___ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateProfile(soap, _p); } return _p; }

inline struct __ns1__CreateProfile * soap_new_set___ns1__CreateProfile(struct soap *soap, _ns1__CreateProfile *ns1__CreateProfile) { struct __ns1__CreateProfile *_p = soap_instantiate___ns1__CreateProfile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__CreateProfile(soap, _p); _p->ns1__CreateProfile = ns1__CreateProfile; } return _p; }

inline void soap_delete___ns1__CreateProfile(struct soap *soap, struct __ns1__CreateProfile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__CreateProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetServiceCapabilities
#define SOAP_TYPE___ns1__GetServiceCapabilities (1543)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetServiceCapabilities(struct soap*, struct __ns1__GetServiceCapabilities *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetServiceCapabilities(struct soap*, const struct __ns1__GetServiceCapabilities *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetServiceCapabilities(struct soap*, const char*, int, const struct __ns1__GetServiceCapabilities *, const char*);
SOAP_FMAC3 struct __ns1__GetServiceCapabilities * SOAP_FMAC4 soap_in___ns1__GetServiceCapabilities(struct soap*, const char*, struct __ns1__GetServiceCapabilities *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetServiceCapabilities(struct soap*, const struct __ns1__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_write___ns1__GetServiceCapabilities
#define soap_write___ns1__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetServiceCapabilities(soap, data), 0) || soap_put___ns1__GetServiceCapabilities(soap, data, "-ns1:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetServiceCapabilities * SOAP_FMAC4 soap_get___ns1__GetServiceCapabilities(struct soap*, struct __ns1__GetServiceCapabilities *, const char*, const char*);

#ifndef soap_read___ns1__GetServiceCapabilities
#define soap_read___ns1__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetServiceCapabilities * SOAP_FMAC2 soap_instantiate___ns1__GetServiceCapabilities(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetServiceCapabilities * soap_new___ns1__GetServiceCapabilities(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetServiceCapabilities(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetServiceCapabilities * soap_new_req___ns1__GetServiceCapabilities(struct soap *soap) { struct __ns1__GetServiceCapabilities *_p = soap_instantiate___ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetServiceCapabilities(soap, _p); } return _p; }

inline struct __ns1__GetServiceCapabilities * soap_new_set___ns1__GetServiceCapabilities(struct soap *soap, _ns1__GetServiceCapabilities *ns1__GetServiceCapabilities) { struct __ns1__GetServiceCapabilities *_p = soap_instantiate___ns1__GetServiceCapabilities(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetServiceCapabilities(soap, _p); _p->ns1__GetServiceCapabilities = ns1__GetServiceCapabilities; } return _p; }

inline void soap_delete___ns1__GetServiceCapabilities(struct soap *soap, struct __ns1__GetServiceCapabilities *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetServiceCapabilities(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Envelope(struct soap*, const char*, int, const struct SOAP_ENV__Envelope *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_in_SOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Envelope(struct soap*, const struct SOAP_ENV__Envelope *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Envelope
#define soap_write_SOAP_ENV__Envelope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Envelope(soap, data), 0) || soap_put_SOAP_ENV__Envelope(soap, data, "SOAP-ENV:Envelope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Envelope * SOAP_FMAC4 soap_get_SOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Envelope
#define soap_read_SOAP_ENV__Envelope(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Envelope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Envelope * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Envelope(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Envelope * soap_new_SOAP_ENV__Envelope(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Envelope(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Envelope * soap_new_req_SOAP_ENV__Envelope(struct soap *soap) { struct SOAP_ENV__Envelope *_p = soap_instantiate_SOAP_ENV__Envelope(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Envelope(soap, _p); } return _p; }

inline struct SOAP_ENV__Envelope * soap_new_set_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Header *SOAP_ENV__Header, char *SOAP_ENV__Body) { struct SOAP_ENV__Envelope *_p = soap_instantiate_SOAP_ENV__Envelope(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Envelope(soap, _p); _p->SOAP_ENV__Header = SOAP_ENV__Header; _p->SOAP_ENV__Body = SOAP_ENV__Body; } return _p; }

inline void soap_delete_SOAP_ENV__Envelope(struct soap *soap, struct SOAP_ENV__Envelope *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Envelope(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap*, struct _wsse__Security *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap*, const struct _wsse__Security *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap*, const char*, int, const struct _wsse__Security *, const char*);
SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap*, const char*, struct _wsse__Security *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap*, const struct _wsse__Security *, const char*, const char*);

#ifndef soap_write__wsse__Security
#define soap_write__wsse__Security(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Security(soap, data), 0) || soap_put__wsse__Security(soap, data, "wsse:Security", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap*, struct _wsse__Security *, const char*, const char*);

#ifndef soap_read__wsse__Security
#define soap_read__wsse__Security(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__Security(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Security * soap_new__wsse__Security(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Security(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Security * soap_new_req__wsse__Security(struct soap *soap) { struct _wsse__Security *_p = soap_instantiate__wsse__Security(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Security(soap, _p); } return _p; }

inline struct _wsse__Security * soap_new_set__wsse__Security(struct soap *soap, struct _wsu__Timestamp *wsu__Timestamp, struct _wsse__UsernameToken *UsernameToken, struct _wsse__BinarySecurityToken *BinarySecurityToken, struct xenc__EncryptedKeyType *xenc__EncryptedKey, struct _xenc__ReferenceList *xenc__ReferenceList, struct wsc__SecurityContextTokenType *wsc__SecurityContextToken, struct ds__SignatureType *ds__Signature, char *SOAP_ENV__actor, char *SOAP_ENV__role) { struct _wsse__Security *_p = soap_instantiate__wsse__Security(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Security(soap, _p); _p->wsu__Timestamp = wsu__Timestamp; _p->UsernameToken = UsernameToken; _p->BinarySecurityToken = BinarySecurityToken; _p->xenc__EncryptedKey = xenc__EncryptedKey; _p->xenc__ReferenceList = xenc__ReferenceList; _p->wsc__SecurityContextToken = wsc__SecurityContextToken; _p->ds__Signature = ds__Signature; _p->SOAP_ENV__actor = SOAP_ENV__actor; _p->SOAP_ENV__role = SOAP_ENV__role; } return _p; }

inline void soap_delete__wsse__Security(struct soap *soap, struct _wsse__Security *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__Security(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, int, const struct __wsc__DerivedKeyTokenType_sequence *, const char*);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap*, const struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

#ifndef soap_write___wsc__DerivedKeyTokenType_sequence
#define soap_write___wsc__DerivedKeyTokenType_sequence(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, data), 0) || soap_put___wsc__DerivedKeyTokenType_sequence(soap, data, "-wsc:DerivedKeyTokenType-sequence", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *, const char*, const char*);

#ifndef soap_read___wsc__DerivedKeyTokenType_sequence
#define soap_read___wsc__DerivedKeyTokenType_sequence(soap, data) ( soap_begin_recv(soap) || !soap_get___wsc__DerivedKeyTokenType_sequence(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n = -1) { return soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, n, NULL, NULL, NULL); }

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_req___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int __union_DerivedKeyTokenType, union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType) { struct __wsc__DerivedKeyTokenType_sequence *_p = soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p); _p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType; _p->union_DerivedKeyTokenType = union_DerivedKeyTokenType; } return _p; }

inline struct __wsc__DerivedKeyTokenType_sequence * soap_new_set___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int __union_DerivedKeyTokenType, union _wsc__union_DerivedKeyTokenType& union_DerivedKeyTokenType, ULONG64 *Length) { struct __wsc__DerivedKeyTokenType_sequence *_p = soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___wsc__DerivedKeyTokenType_sequence(soap, _p); _p->__union_DerivedKeyTokenType = __union_DerivedKeyTokenType; _p->union_DerivedKeyTokenType = union_DerivedKeyTokenType; _p->Length = Length; } return _p; }

inline void soap_delete___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___wsc__DerivedKeyTokenType_sequence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsc__PropertiesType
#define SOAP_TYPE_wsc__PropertiesType (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap*, const char*, int, const struct wsc__PropertiesType *, const char*);
SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap*, const struct wsc__PropertiesType *, const char*, const char*);

#ifndef soap_write_wsc__PropertiesType
#define soap_write_wsc__PropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__PropertiesType(soap, data), 0) || soap_put_wsc__PropertiesType(soap, data, "wsc:PropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap*, struct wsc__PropertiesType *, const char*, const char*);

#ifndef soap_read_wsc__PropertiesType
#define soap_read_wsc__PropertiesType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsc__PropertiesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__PropertiesType * soap_new_wsc__PropertiesType(struct soap *soap, int n = -1) { return soap_instantiate_wsc__PropertiesType(soap, n, NULL, NULL, NULL); }

inline struct wsc__PropertiesType * soap_new_req_wsc__PropertiesType(struct soap *soap) { struct wsc__PropertiesType *_p = soap_instantiate_wsc__PropertiesType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsc__PropertiesType(soap, _p); } return _p; }

inline struct wsc__PropertiesType * soap_new_set_wsc__PropertiesType(struct soap *soap) { struct wsc__PropertiesType *_p = soap_instantiate_wsc__PropertiesType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsc__PropertiesType(soap, _p); } return _p; }

inline void soap_delete_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsc__PropertiesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType
#define SOAP_TYPE_wsc__DerivedKeyTokenType (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap*, const char*, int, const struct wsc__DerivedKeyTokenType *, const char*);
SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap*, const char*, struct wsc__DerivedKeyTokenType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap*, const struct wsc__DerivedKeyTokenType *, const char*, const char*);

#ifndef soap_write_wsc__DerivedKeyTokenType
#define soap_write_wsc__DerivedKeyTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__DerivedKeyTokenType(soap, data), 0) || soap_put_wsc__DerivedKeyTokenType(soap, data, "wsc:DerivedKeyTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap*, struct wsc__DerivedKeyTokenType *, const char*, const char*);

#ifndef soap_read_wsc__DerivedKeyTokenType
#define soap_read_wsc__DerivedKeyTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsc__DerivedKeyTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__DerivedKeyTokenType * soap_new_wsc__DerivedKeyTokenType(struct soap *soap, int n = -1) { return soap_instantiate_wsc__DerivedKeyTokenType(soap, n, NULL, NULL, NULL); }

inline struct wsc__DerivedKeyTokenType * soap_new_req_wsc__DerivedKeyTokenType(struct soap *soap, int __size_DerivedKeyTokenType_sequence, struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence) { struct wsc__DerivedKeyTokenType *_p = soap_instantiate_wsc__DerivedKeyTokenType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsc__DerivedKeyTokenType(soap, _p); _p->__size_DerivedKeyTokenType_sequence = __size_DerivedKeyTokenType_sequence; _p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence; } return _p; }

inline struct wsc__DerivedKeyTokenType * soap_new_set_wsc__DerivedKeyTokenType(struct soap *soap, struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference, struct wsc__PropertiesType *Properties, int __size_DerivedKeyTokenType_sequence, struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence, char *Label, char *Nonce, char *wsu__Id, char *Algorithm) { struct wsc__DerivedKeyTokenType *_p = soap_instantiate_wsc__DerivedKeyTokenType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsc__DerivedKeyTokenType(soap, _p); _p->wsse__SecurityTokenReference = wsse__SecurityTokenReference; _p->Properties = Properties; _p->__size_DerivedKeyTokenType_sequence = __size_DerivedKeyTokenType_sequence; _p->__DerivedKeyTokenType_sequence = __DerivedKeyTokenType_sequence; _p->Label = Label; _p->Nonce = Nonce; _p->wsu__Id = wsu__Id; _p->Algorithm = Algorithm; } return _p; }

inline void soap_delete_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsc__DerivedKeyTokenType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsc__SecurityContextTokenType
#define SOAP_TYPE_wsc__SecurityContextTokenType (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap*, const char*, int, const struct wsc__SecurityContextTokenType *, const char*);
SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap*, const struct wsc__SecurityContextTokenType *, const char*, const char*);

#ifndef soap_write_wsc__SecurityContextTokenType
#define soap_write_wsc__SecurityContextTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__SecurityContextTokenType(soap, data), 0) || soap_put_wsc__SecurityContextTokenType(soap, data, "wsc:SecurityContextTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *, const char*, const char*);

#ifndef soap_read_wsc__SecurityContextTokenType
#define soap_read_wsc__SecurityContextTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsc__SecurityContextTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsc__SecurityContextTokenType * soap_new_wsc__SecurityContextTokenType(struct soap *soap, int n = -1) { return soap_instantiate_wsc__SecurityContextTokenType(soap, n, NULL, NULL, NULL); }

inline struct wsc__SecurityContextTokenType * soap_new_req_wsc__SecurityContextTokenType(struct soap *soap) { struct wsc__SecurityContextTokenType *_p = soap_instantiate_wsc__SecurityContextTokenType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsc__SecurityContextTokenType(soap, _p); } return _p; }

inline struct wsc__SecurityContextTokenType * soap_new_set_wsc__SecurityContextTokenType(struct soap *soap, char *wsu__Id, char *Identifier, char *Instance) { struct wsc__SecurityContextTokenType *_p = soap_instantiate_wsc__SecurityContextTokenType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsc__SecurityContextTokenType(soap, _p); _p->wsu__Id = wsu__Id; _p->Identifier = Identifier; _p->Instance = Instance; } return _p; }

inline void soap_delete_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsc__SecurityContextTokenType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___xenc__union_ReferenceList
#define SOAP_TYPE___xenc__union_ReferenceList (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap*, const char*, int, const struct __xenc__union_ReferenceList *, const char*);
SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap*, const struct __xenc__union_ReferenceList *, const char*, const char*);

#ifndef soap_write___xenc__union_ReferenceList
#define soap_write___xenc__union_ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___xenc__union_ReferenceList(soap, data), 0) || soap_put___xenc__union_ReferenceList(soap, data, "-xenc:union-ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *, const char*, const char*);

#ifndef soap_read___xenc__union_ReferenceList
#define soap_read___xenc__union_ReferenceList(soap, data) ( soap_begin_recv(soap) || !soap_get___xenc__union_ReferenceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct __xenc__union_ReferenceList * soap_new___xenc__union_ReferenceList(struct soap *soap, int n = -1) { return soap_instantiate___xenc__union_ReferenceList(soap, n, NULL, NULL, NULL); }

inline struct __xenc__union_ReferenceList * soap_new_req___xenc__union_ReferenceList(struct soap *soap) { struct __xenc__union_ReferenceList *_p = soap_instantiate___xenc__union_ReferenceList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___xenc__union_ReferenceList(soap, _p); } return _p; }

inline struct __xenc__union_ReferenceList * soap_new_set___xenc__union_ReferenceList(struct soap *soap, struct xenc__ReferenceType *DataReference, struct xenc__ReferenceType *KeyReference) { struct __xenc__union_ReferenceList *_p = soap_instantiate___xenc__union_ReferenceList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___xenc__union_ReferenceList(soap, _p); _p->DataReference = DataReference; _p->KeyReference = KeyReference; } return _p; }

inline void soap_delete___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___xenc__union_ReferenceList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__xenc__ReferenceList
#define SOAP_TYPE__xenc__ReferenceList (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap*, const char*, int, const struct _xenc__ReferenceList *, const char*);
SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap*, const struct _xenc__ReferenceList *, const char*, const char*);

#ifndef soap_write__xenc__ReferenceList
#define soap_write__xenc__ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__xenc__ReferenceList(soap, data), 0) || soap_put__xenc__ReferenceList(soap, data, "xenc:ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *, const char*, const char*);

#ifndef soap_read__xenc__ReferenceList
#define soap_read__xenc__ReferenceList(soap, data) ( soap_begin_recv(soap) || !soap_get__xenc__ReferenceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);

inline struct _xenc__ReferenceList * soap_new__xenc__ReferenceList(struct soap *soap, int n = -1) { return soap_instantiate__xenc__ReferenceList(soap, n, NULL, NULL, NULL); }

inline struct _xenc__ReferenceList * soap_new_req__xenc__ReferenceList(struct soap *soap, int __size_ReferenceList, struct __xenc__union_ReferenceList *__union_ReferenceList) { struct _xenc__ReferenceList *_p = soap_instantiate__xenc__ReferenceList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__xenc__ReferenceList(soap, _p); _p->__size_ReferenceList = __size_ReferenceList; _p->__union_ReferenceList = __union_ReferenceList; } return _p; }

inline struct _xenc__ReferenceList * soap_new_set__xenc__ReferenceList(struct soap *soap, int __size_ReferenceList, struct __xenc__union_ReferenceList *__union_ReferenceList) { struct _xenc__ReferenceList *_p = soap_instantiate__xenc__ReferenceList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__xenc__ReferenceList(soap, _p); _p->__size_ReferenceList = __size_ReferenceList; _p->__union_ReferenceList = __union_ReferenceList; } return _p; }

inline void soap_delete__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__xenc__ReferenceList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__EncryptionPropertyType
#define SOAP_TYPE_xenc__EncryptionPropertyType (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap*, const char*, int, const struct xenc__EncryptionPropertyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap*, const struct xenc__EncryptionPropertyType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptionPropertyType
#define soap_write_xenc__EncryptionPropertyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptionPropertyType(soap, data), 0) || soap_put_xenc__EncryptionPropertyType(soap, data, "xenc:EncryptionPropertyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptionPropertyType
#define soap_read_xenc__EncryptionPropertyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__EncryptionPropertyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertyType * soap_new_xenc__EncryptionPropertyType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptionPropertyType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptionPropertyType * soap_new_req_xenc__EncryptionPropertyType(struct soap *soap) { struct xenc__EncryptionPropertyType *_p = soap_instantiate_xenc__EncryptionPropertyType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptionPropertyType(soap, _p); } return _p; }

inline struct xenc__EncryptionPropertyType * soap_new_set_xenc__EncryptionPropertyType(struct soap *soap, char *Target, char *Id) { struct xenc__EncryptionPropertyType *_p = soap_instantiate_xenc__EncryptionPropertyType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptionPropertyType(soap, _p); _p->Target = Target; _p->Id = Id; } return _p; }

inline void soap_delete_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__EncryptionPropertyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType
#define SOAP_TYPE_xenc__EncryptionPropertiesType (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap*, const char*, int, const struct xenc__EncryptionPropertiesType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap*, const struct xenc__EncryptionPropertiesType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptionPropertiesType
#define soap_write_xenc__EncryptionPropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptionPropertiesType(soap, data), 0) || soap_put_xenc__EncryptionPropertiesType(soap, data, "xenc:EncryptionPropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptionPropertiesType
#define soap_read_xenc__EncryptionPropertiesType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__EncryptionPropertiesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionPropertiesType * soap_new_xenc__EncryptionPropertiesType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptionPropertiesType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptionPropertiesType * soap_new_req_xenc__EncryptionPropertiesType(struct soap *soap, int __sizeEncryptionProperty, struct xenc__EncryptionPropertyType *EncryptionProperty) { struct xenc__EncryptionPropertiesType *_p = soap_instantiate_xenc__EncryptionPropertiesType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptionPropertiesType(soap, _p); _p->__sizeEncryptionProperty = __sizeEncryptionProperty; _p->EncryptionProperty = EncryptionProperty; } return _p; }

inline struct xenc__EncryptionPropertiesType * soap_new_set_xenc__EncryptionPropertiesType(struct soap *soap, int __sizeEncryptionProperty, struct xenc__EncryptionPropertyType *EncryptionProperty, char *Id) { struct xenc__EncryptionPropertiesType *_p = soap_instantiate_xenc__EncryptionPropertiesType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptionPropertiesType(soap, _p); _p->__sizeEncryptionProperty = __sizeEncryptionProperty; _p->EncryptionProperty = EncryptionProperty; _p->Id = Id; } return _p; }

inline void soap_delete_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__EncryptionPropertiesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__ReferenceType
#define SOAP_TYPE_xenc__ReferenceType (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap*, const char*, int, const struct xenc__ReferenceType *, const char*);
SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap*, const struct xenc__ReferenceType *, const char*, const char*);

#ifndef soap_write_xenc__ReferenceType
#define soap_write_xenc__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__ReferenceType(soap, data), 0) || soap_put_xenc__ReferenceType(soap, data, "xenc:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap*, struct xenc__ReferenceType *, const char*, const char*);

#ifndef soap_read_xenc__ReferenceType
#define soap_read_xenc__ReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__ReferenceType * soap_new_xenc__ReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__ReferenceType(soap, n, NULL, NULL, NULL); }

inline struct xenc__ReferenceType * soap_new_req_xenc__ReferenceType(struct soap *soap, char *URI) { struct xenc__ReferenceType *_p = soap_instantiate_xenc__ReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__ReferenceType(soap, _p); _p->URI = URI; } return _p; }

inline struct xenc__ReferenceType * soap_new_set_xenc__ReferenceType(struct soap *soap, char *URI) { struct xenc__ReferenceType *_p = soap_instantiate_xenc__ReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__ReferenceType(soap, _p); _p->URI = URI; } return _p; }

inline void soap_delete_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__ReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__AgreementMethodType
#define SOAP_TYPE_xenc__AgreementMethodType (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap*, const char*, int, const struct xenc__AgreementMethodType *, const char*);
SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap*, const char*, struct xenc__AgreementMethodType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap*, const struct xenc__AgreementMethodType *, const char*, const char*);

#ifndef soap_write_xenc__AgreementMethodType
#define soap_write_xenc__AgreementMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__AgreementMethodType(soap, data), 0) || soap_put_xenc__AgreementMethodType(soap, data, "xenc:AgreementMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap*, struct xenc__AgreementMethodType *, const char*, const char*);

#ifndef soap_read_xenc__AgreementMethodType
#define soap_read_xenc__AgreementMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__AgreementMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__AgreementMethodType * soap_new_xenc__AgreementMethodType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__AgreementMethodType(soap, n, NULL, NULL, NULL); }

inline struct xenc__AgreementMethodType * soap_new_req_xenc__AgreementMethodType(struct soap *soap, char *Algorithm) { struct xenc__AgreementMethodType *_p = soap_instantiate_xenc__AgreementMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__AgreementMethodType(soap, _p); _p->Algorithm = Algorithm; } return _p; }

inline struct xenc__AgreementMethodType * soap_new_set_xenc__AgreementMethodType(struct soap *soap, char *KA_Nonce, struct ds__KeyInfoType *OriginatorKeyInfo, struct ds__KeyInfoType *RecipientKeyInfo, char *Algorithm, char *__mixed) { struct xenc__AgreementMethodType *_p = soap_instantiate_xenc__AgreementMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__AgreementMethodType(soap, _p); _p->KA_Nonce = KA_Nonce; _p->OriginatorKeyInfo = OriginatorKeyInfo; _p->RecipientKeyInfo = RecipientKeyInfo; _p->Algorithm = Algorithm; _p->__mixed = __mixed; } return _p; }

inline void soap_delete_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__AgreementMethodType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__EncryptedKeyType
#define SOAP_TYPE_xenc__EncryptedKeyType (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap*, const char*, int, const struct xenc__EncryptedKeyType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap*, const struct xenc__EncryptedKeyType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptedKeyType
#define soap_write_xenc__EncryptedKeyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptedKeyType(soap, data), 0) || soap_put_xenc__EncryptedKeyType(soap, data, "xenc:EncryptedKeyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptedKeyType
#define soap_read_xenc__EncryptedKeyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__EncryptedKeyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedKeyType * soap_new_xenc__EncryptedKeyType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptedKeyType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptedKeyType * soap_new_req_xenc__EncryptedKeyType(struct soap *soap, struct xenc__CipherDataType *CipherData) { struct xenc__EncryptedKeyType *_p = soap_instantiate_xenc__EncryptedKeyType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptedKeyType(soap, _p); _p->CipherData = CipherData; } return _p; }

inline struct xenc__EncryptedKeyType * soap_new_set_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptionMethodType *EncryptionMethod, struct ds__KeyInfoType *ds__KeyInfo, struct xenc__CipherDataType *CipherData, struct xenc__EncryptionPropertiesType *EncryptionProperties, char *Id, char *Type, char *MimeType, char *Encoding, struct _xenc__ReferenceList *ReferenceList, char *CarriedKeyName, char *Recipient) { struct xenc__EncryptedKeyType *_p = soap_instantiate_xenc__EncryptedKeyType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptedKeyType(soap, _p); _p->EncryptionMethod = EncryptionMethod; _p->ds__KeyInfo = ds__KeyInfo; _p->CipherData = CipherData; _p->EncryptionProperties = EncryptionProperties; _p->Id = Id; _p->Type = Type; _p->MimeType = MimeType; _p->Encoding = Encoding; _p->ReferenceList = ReferenceList; _p->CarriedKeyName = CarriedKeyName; _p->Recipient = Recipient; } return _p; }

inline void soap_delete_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__EncryptedKeyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__EncryptedDataType
#define SOAP_TYPE_xenc__EncryptedDataType (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap*, const char*, int, const struct xenc__EncryptedDataType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap*, const char*, struct xenc__EncryptedDataType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap*, const struct xenc__EncryptedDataType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptedDataType
#define soap_write_xenc__EncryptedDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptedDataType(soap, data), 0) || soap_put_xenc__EncryptedDataType(soap, data, "xenc:EncryptedDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap*, struct xenc__EncryptedDataType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptedDataType
#define soap_read_xenc__EncryptedDataType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__EncryptedDataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedDataType * soap_new_xenc__EncryptedDataType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptedDataType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptedDataType * soap_new_req_xenc__EncryptedDataType(struct soap *soap, struct xenc__CipherDataType *CipherData) { struct xenc__EncryptedDataType *_p = soap_instantiate_xenc__EncryptedDataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptedDataType(soap, _p); _p->CipherData = CipherData; } return _p; }

inline struct xenc__EncryptedDataType * soap_new_set_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptionMethodType *EncryptionMethod, struct ds__KeyInfoType *ds__KeyInfo, struct xenc__CipherDataType *CipherData, struct xenc__EncryptionPropertiesType *EncryptionProperties, char *Id, char *Type, char *MimeType, char *Encoding) { struct xenc__EncryptedDataType *_p = soap_instantiate_xenc__EncryptedDataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptedDataType(soap, _p); _p->EncryptionMethod = EncryptionMethod; _p->ds__KeyInfo = ds__KeyInfo; _p->CipherData = CipherData; _p->EncryptionProperties = EncryptionProperties; _p->Id = Id; _p->Type = Type; _p->MimeType = MimeType; _p->Encoding = Encoding; } return _p; }

inline void soap_delete_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__EncryptedDataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__TransformsType
#define SOAP_TYPE_xenc__TransformsType (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap*, struct xenc__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap*, const char*, int, const struct xenc__TransformsType *, const char*);
SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap*, const struct xenc__TransformsType *, const char*, const char*);

#ifndef soap_write_xenc__TransformsType
#define soap_write_xenc__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__TransformsType(soap, data), 0) || soap_put_xenc__TransformsType(soap, data, "xenc:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap*, struct xenc__TransformsType *, const char*, const char*);

#ifndef soap_read_xenc__TransformsType
#define soap_read_xenc__TransformsType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__TransformsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__TransformsType * soap_new_xenc__TransformsType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__TransformsType(soap, n, NULL, NULL, NULL); }

inline struct xenc__TransformsType * soap_new_req_xenc__TransformsType(struct soap *soap, struct ds__TransformType& ds__Transform) { struct xenc__TransformsType *_p = soap_instantiate_xenc__TransformsType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__TransformsType(soap, _p); _p->ds__Transform = ds__Transform; } return _p; }

inline struct xenc__TransformsType * soap_new_set_xenc__TransformsType(struct soap *soap, struct ds__TransformType& ds__Transform) { struct xenc__TransformsType *_p = soap_instantiate_xenc__TransformsType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__TransformsType(soap, _p); _p->ds__Transform = ds__Transform; } return _p; }

inline void soap_delete_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__TransformsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__CipherReferenceType
#define SOAP_TYPE_xenc__CipherReferenceType (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap*, const char*, int, const struct xenc__CipherReferenceType *, const char*);
SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap*, const struct xenc__CipherReferenceType *, const char*, const char*);

#ifndef soap_write_xenc__CipherReferenceType
#define soap_write_xenc__CipherReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__CipherReferenceType(soap, data), 0) || soap_put_xenc__CipherReferenceType(soap, data, "xenc:CipherReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *, const char*, const char*);

#ifndef soap_read_xenc__CipherReferenceType
#define soap_read_xenc__CipherReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__CipherReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherReferenceType * soap_new_xenc__CipherReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__CipherReferenceType(soap, n, NULL, NULL, NULL); }

inline struct xenc__CipherReferenceType * soap_new_req_xenc__CipherReferenceType(struct soap *soap, char *URI) { struct xenc__CipherReferenceType *_p = soap_instantiate_xenc__CipherReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__CipherReferenceType(soap, _p); _p->URI = URI; } return _p; }

inline struct xenc__CipherReferenceType * soap_new_set_xenc__CipherReferenceType(struct soap *soap, struct xenc__TransformsType *Transforms, char *URI) { struct xenc__CipherReferenceType *_p = soap_instantiate_xenc__CipherReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__CipherReferenceType(soap, _p); _p->Transforms = Transforms; _p->URI = URI; } return _p; }

inline void soap_delete_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__CipherReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__CipherDataType
#define SOAP_TYPE_xenc__CipherDataType (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap*, const char*, int, const struct xenc__CipherDataType *, const char*);
SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap*, const struct xenc__CipherDataType *, const char*, const char*);

#ifndef soap_write_xenc__CipherDataType
#define soap_write_xenc__CipherDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__CipherDataType(soap, data), 0) || soap_put_xenc__CipherDataType(soap, data, "xenc:CipherDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap*, struct xenc__CipherDataType *, const char*, const char*);

#ifndef soap_read_xenc__CipherDataType
#define soap_read_xenc__CipherDataType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__CipherDataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__CipherDataType * soap_new_xenc__CipherDataType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__CipherDataType(soap, n, NULL, NULL, NULL); }

inline struct xenc__CipherDataType * soap_new_req_xenc__CipherDataType(struct soap *soap) { struct xenc__CipherDataType *_p = soap_instantiate_xenc__CipherDataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__CipherDataType(soap, _p); } return _p; }

inline struct xenc__CipherDataType * soap_new_set_xenc__CipherDataType(struct soap *soap, char *CipherValue, struct xenc__CipherReferenceType *CipherReference) { struct xenc__CipherDataType *_p = soap_instantiate_xenc__CipherDataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__CipherDataType(soap, _p); _p->CipherValue = CipherValue; _p->CipherReference = CipherReference; } return _p; }

inline void soap_delete_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__CipherDataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__EncryptionMethodType
#define SOAP_TYPE_xenc__EncryptionMethodType (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap*, const char*, int, const struct xenc__EncryptionMethodType *, const char*);
SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap*, const struct xenc__EncryptionMethodType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptionMethodType
#define soap_write_xenc__EncryptionMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptionMethodType(soap, data), 0) || soap_put_xenc__EncryptionMethodType(soap, data, "xenc:EncryptionMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptionMethodType
#define soap_read_xenc__EncryptionMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__EncryptionMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptionMethodType * soap_new_xenc__EncryptionMethodType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptionMethodType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptionMethodType * soap_new_req_xenc__EncryptionMethodType(struct soap *soap, char *Algorithm) { struct xenc__EncryptionMethodType *_p = soap_instantiate_xenc__EncryptionMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptionMethodType(soap, _p); _p->Algorithm = Algorithm; } return _p; }

inline struct xenc__EncryptionMethodType * soap_new_set_xenc__EncryptionMethodType(struct soap *soap, int *KeySize, char *OAEPparams, char *Algorithm, struct ds__DigestMethodType *ds__DigestMethod, char *__mixed) { struct xenc__EncryptionMethodType *_p = soap_instantiate_xenc__EncryptionMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptionMethodType(soap, _p); _p->KeySize = KeySize; _p->OAEPparams = OAEPparams; _p->Algorithm = Algorithm; _p->ds__DigestMethod = ds__DigestMethod; _p->__mixed = __mixed; } return _p; }

inline void soap_delete_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__EncryptionMethodType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xenc__EncryptedType
#define SOAP_TYPE_xenc__EncryptedType (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap*, const char*, int, const struct xenc__EncryptedType *, const char*);
SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap*, const char*, struct xenc__EncryptedType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap*, const struct xenc__EncryptedType *, const char*, const char*);

#ifndef soap_write_xenc__EncryptedType
#define soap_write_xenc__EncryptedType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xenc__EncryptedType(soap, data), 0) || soap_put_xenc__EncryptedType(soap, data, "xenc:EncryptedType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap*, struct xenc__EncryptedType *, const char*, const char*);

#ifndef soap_read_xenc__EncryptedType
#define soap_read_xenc__EncryptedType(soap, data) ( soap_begin_recv(soap) || !soap_get_xenc__EncryptedType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);

inline struct xenc__EncryptedType * soap_new_xenc__EncryptedType(struct soap *soap, int n = -1) { return soap_instantiate_xenc__EncryptedType(soap, n, NULL, NULL, NULL); }

inline struct xenc__EncryptedType * soap_new_req_xenc__EncryptedType(struct soap *soap, struct xenc__CipherDataType *CipherData) { struct xenc__EncryptedType *_p = soap_instantiate_xenc__EncryptedType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptedType(soap, _p); _p->CipherData = CipherData; } return _p; }

inline struct xenc__EncryptedType * soap_new_set_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptionMethodType *EncryptionMethod, struct ds__KeyInfoType *ds__KeyInfo, struct xenc__CipherDataType *CipherData, struct xenc__EncryptionPropertiesType *EncryptionProperties, char *Id, char *Type, char *MimeType, char *Encoding) { struct xenc__EncryptedType *_p = soap_instantiate_xenc__EncryptedType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xenc__EncryptedType(soap, _p); _p->EncryptionMethod = EncryptionMethod; _p->ds__KeyInfo = ds__KeyInfo; _p->CipherData = CipherData; _p->EncryptionProperties = EncryptionProperties; _p->Id = Id; _p->Type = Type; _p->MimeType = MimeType; _p->Encoding = Encoding; } return _p; }

inline void soap_delete_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xenc__EncryptedType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap*, const char*, int, const struct ds__RSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap*, const struct ds__RSAKeyValueType *, const char*, const char*);

#ifndef soap_write_ds__RSAKeyValueType
#define soap_write_ds__RSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__RSAKeyValueType(soap, data), 0) || soap_put_ds__RSAKeyValueType(soap, data, "ds:RSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *, const char*, const char*);

#ifndef soap_read_ds__RSAKeyValueType
#define soap_read_ds__RSAKeyValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__RSAKeyValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RSAKeyValueType * soap_new_ds__RSAKeyValueType(struct soap *soap, int n = -1) { return soap_instantiate_ds__RSAKeyValueType(soap, n, NULL, NULL, NULL); }

inline struct ds__RSAKeyValueType * soap_new_req_ds__RSAKeyValueType(struct soap *soap, char *Modulus, char *Exponent) { struct ds__RSAKeyValueType *_p = soap_instantiate_ds__RSAKeyValueType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__RSAKeyValueType(soap, _p); _p->Modulus = Modulus; _p->Exponent = Exponent; } return _p; }

inline struct ds__RSAKeyValueType * soap_new_set_ds__RSAKeyValueType(struct soap *soap, char *Modulus, char *Exponent) { struct ds__RSAKeyValueType *_p = soap_instantiate_ds__RSAKeyValueType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__RSAKeyValueType(soap, _p); _p->Modulus = Modulus; _p->Exponent = Exponent; } return _p; }

inline void soap_delete_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__RSAKeyValueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap*, const char*, int, const struct ds__DSAKeyValueType *, const char*);
SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap*, const struct ds__DSAKeyValueType *, const char*, const char*);

#ifndef soap_write_ds__DSAKeyValueType
#define soap_write_ds__DSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__DSAKeyValueType(soap, data), 0) || soap_put_ds__DSAKeyValueType(soap, data, "ds:DSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *, const char*, const char*);

#ifndef soap_read_ds__DSAKeyValueType
#define soap_read_ds__DSAKeyValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__DSAKeyValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DSAKeyValueType * soap_new_ds__DSAKeyValueType(struct soap *soap, int n = -1) { return soap_instantiate_ds__DSAKeyValueType(soap, n, NULL, NULL, NULL); }

inline struct ds__DSAKeyValueType * soap_new_req_ds__DSAKeyValueType(struct soap *soap, char *Y, char *P, char *Q, char *Seed, char *PgenCounter) { struct ds__DSAKeyValueType *_p = soap_instantiate_ds__DSAKeyValueType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__DSAKeyValueType(soap, _p); _p->Y = Y; _p->P = P; _p->Q = Q; _p->Seed = Seed; _p->PgenCounter = PgenCounter; } return _p; }

inline struct ds__DSAKeyValueType * soap_new_set_ds__DSAKeyValueType(struct soap *soap, char *G, char *Y, char *J, char *P, char *Q, char *Seed, char *PgenCounter) { struct ds__DSAKeyValueType *_p = soap_instantiate_ds__DSAKeyValueType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__DSAKeyValueType(soap, _p); _p->G = G; _p->Y = Y; _p->J = J; _p->P = P; _p->Q = Q; _p->Seed = Seed; _p->PgenCounter = PgenCounter; } return _p; }

inline void soap_delete_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__DSAKeyValueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap*, const char*, int, const struct ds__X509IssuerSerialType *, const char*);
SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap*, const struct ds__X509IssuerSerialType *, const char*, const char*);

#ifndef soap_write_ds__X509IssuerSerialType
#define soap_write_ds__X509IssuerSerialType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__X509IssuerSerialType(soap, data), 0) || soap_put_ds__X509IssuerSerialType(soap, data, "ds:X509IssuerSerialType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *, const char*, const char*);

#ifndef soap_read_ds__X509IssuerSerialType
#define soap_read_ds__X509IssuerSerialType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__X509IssuerSerialType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509IssuerSerialType * soap_new_ds__X509IssuerSerialType(struct soap *soap, int n = -1) { return soap_instantiate_ds__X509IssuerSerialType(soap, n, NULL, NULL, NULL); }

inline struct ds__X509IssuerSerialType * soap_new_req_ds__X509IssuerSerialType(struct soap *soap, char *X509IssuerName, char *X509SerialNumber) { struct ds__X509IssuerSerialType *_p = soap_instantiate_ds__X509IssuerSerialType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__X509IssuerSerialType(soap, _p); _p->X509IssuerName = X509IssuerName; _p->X509SerialNumber = X509SerialNumber; } return _p; }

inline struct ds__X509IssuerSerialType * soap_new_set_ds__X509IssuerSerialType(struct soap *soap, char *X509IssuerName, char *X509SerialNumber) { struct ds__X509IssuerSerialType *_p = soap_instantiate_ds__X509IssuerSerialType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__X509IssuerSerialType(soap, _p); _p->X509IssuerName = X509IssuerName; _p->X509SerialNumber = X509SerialNumber; } return _p; }

inline void soap_delete_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__X509IssuerSerialType(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _ds__KeyInfo is a typedef element/attribute synonym for ds__KeyInfoType */

#ifndef SOAP_TYPE__ds__KeyInfo
#define SOAP_TYPE__ds__KeyInfo (93)
#endif

#define soap_default__ds__KeyInfo(soap, a) soap_default_ds__KeyInfoType(soap, a)


#define soap_serialize__ds__KeyInfo soap_serialize_ds__KeyInfoType


#define soap_out__ds__KeyInfo soap_out_ds__KeyInfoType


#define soap_in__ds__KeyInfo soap_in_ds__KeyInfoType


#define soap_put__ds__KeyInfo soap_put_ds__KeyInfoType


#define soap_get__ds__KeyInfo soap_get_ds__KeyInfoType


#define soap_instantiate__ds__KeyInfo soap_instantiate_ds__KeyInfoType


#define soap_copy__ds__KeyInfo soap_copy_ds__KeyInfoType

#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap*, const char*, int, const struct ds__RetrievalMethodType *, const char*);
SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap*, const struct ds__RetrievalMethodType *, const char*, const char*);

#ifndef soap_write_ds__RetrievalMethodType
#define soap_write_ds__RetrievalMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__RetrievalMethodType(soap, data), 0) || soap_put_ds__RetrievalMethodType(soap, data, "ds:RetrievalMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *, const char*, const char*);

#ifndef soap_read_ds__RetrievalMethodType
#define soap_read_ds__RetrievalMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__RetrievalMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__RetrievalMethodType * soap_new_ds__RetrievalMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__RetrievalMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__RetrievalMethodType * soap_new_req_ds__RetrievalMethodType(struct soap *soap) { struct ds__RetrievalMethodType *_p = soap_instantiate_ds__RetrievalMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__RetrievalMethodType(soap, _p); } return _p; }

inline struct ds__RetrievalMethodType * soap_new_set_ds__RetrievalMethodType(struct soap *soap, struct ds__TransformsType *Transforms, char *URI, char *Type) { struct ds__RetrievalMethodType *_p = soap_instantiate_ds__RetrievalMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__RetrievalMethodType(soap, _p); _p->Transforms = Transforms; _p->URI = URI; _p->Type = Type; } return _p; }

inline void soap_delete_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__RetrievalMethodType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap*, struct ds__KeyValueType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap*, const char*, int, const struct ds__KeyValueType *, const char*);
SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap*, const char*, struct ds__KeyValueType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap*, const struct ds__KeyValueType *, const char*, const char*);

#ifndef soap_write_ds__KeyValueType
#define soap_write_ds__KeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__KeyValueType(soap, data), 0) || soap_put_ds__KeyValueType(soap, data, "ds:KeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap*, struct ds__KeyValueType *, const char*, const char*);

#ifndef soap_read_ds__KeyValueType
#define soap_read_ds__KeyValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__KeyValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyValueType * soap_new_ds__KeyValueType(struct soap *soap, int n = -1) { return soap_instantiate_ds__KeyValueType(soap, n, NULL, NULL, NULL); }

inline struct ds__KeyValueType * soap_new_req_ds__KeyValueType(struct soap *soap) { struct ds__KeyValueType *_p = soap_instantiate_ds__KeyValueType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__KeyValueType(soap, _p); } return _p; }

inline struct ds__KeyValueType * soap_new_set_ds__KeyValueType(struct soap *soap, struct ds__DSAKeyValueType *DSAKeyValue, struct ds__RSAKeyValueType *RSAKeyValue) { struct ds__KeyValueType *_p = soap_instantiate_ds__KeyValueType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__KeyValueType(soap, _p); _p->DSAKeyValue = DSAKeyValue; _p->RSAKeyValue = RSAKeyValue; } return _p; }

inline void soap_delete_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__KeyValueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap*, const char*, int, const struct ds__DigestMethodType *, const char*);
SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap*, const struct ds__DigestMethodType *, const char*, const char*);

#ifndef soap_write_ds__DigestMethodType
#define soap_write_ds__DigestMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__DigestMethodType(soap, data), 0) || soap_put_ds__DigestMethodType(soap, data, "ds:DigestMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap*, struct ds__DigestMethodType *, const char*, const char*);

#ifndef soap_read_ds__DigestMethodType
#define soap_read_ds__DigestMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__DigestMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__DigestMethodType * soap_new_ds__DigestMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__DigestMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__DigestMethodType * soap_new_req_ds__DigestMethodType(struct soap *soap, char *Algorithm) { struct ds__DigestMethodType *_p = soap_instantiate_ds__DigestMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__DigestMethodType(soap, _p); _p->Algorithm = Algorithm; } return _p; }

inline struct ds__DigestMethodType * soap_new_set_ds__DigestMethodType(struct soap *soap, char *Algorithm) { struct ds__DigestMethodType *_p = soap_instantiate_ds__DigestMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__DigestMethodType(soap, _p); _p->Algorithm = Algorithm; } return _p; }

inline void soap_delete_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__DigestMethodType(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _ds__Transform is a typedef element/attribute synonym for ds__TransformType */

#ifndef SOAP_TYPE__ds__Transform
#define SOAP_TYPE__ds__Transform (86)
#endif

#define soap_default__ds__Transform(soap, a) soap_default_ds__TransformType(soap, a)


#define soap_serialize__ds__Transform soap_serialize_ds__TransformType


#define soap_out__ds__Transform soap_out_ds__TransformType


#define soap_in__ds__Transform soap_in_ds__TransformType


#define soap_put__ds__Transform soap_put_ds__TransformType


#define soap_get__ds__Transform soap_get_ds__TransformType


#define soap_instantiate__ds__Transform soap_instantiate_ds__TransformType


#define soap_copy__ds__Transform soap_copy_ds__TransformType

#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap*, struct ds__TransformType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap*, const struct ds__TransformType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap*, const char*, int, const struct ds__TransformType *, const char*);
SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap*, const char*, struct ds__TransformType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap*, const struct ds__TransformType *, const char*, const char*);

#ifndef soap_write_ds__TransformType
#define soap_write_ds__TransformType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__TransformType(soap, data), 0) || soap_put_ds__TransformType(soap, data, "ds:TransformType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap*, struct ds__TransformType *, const char*, const char*);

#ifndef soap_read_ds__TransformType
#define soap_read_ds__TransformType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__TransformType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformType * soap_new_ds__TransformType(struct soap *soap, int n = -1) { return soap_instantiate_ds__TransformType(soap, n, NULL, NULL, NULL); }

inline struct ds__TransformType * soap_new_req_ds__TransformType(struct soap *soap) { struct ds__TransformType *_p = soap_instantiate_ds__TransformType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__TransformType(soap, _p); } return _p; }

inline struct ds__TransformType * soap_new_set_ds__TransformType(struct soap *soap, struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces, char *__any, char *Algorithm) { struct ds__TransformType *_p = soap_instantiate_ds__TransformType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__TransformType(soap, _p); _p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces; _p->__any = __any; _p->Algorithm = Algorithm; } return _p; }

inline void soap_delete_ds__TransformType(struct soap *soap, struct ds__TransformType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__TransformType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap*, const char*, int, const struct _c14n__InclusiveNamespaces *, const char*);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap*, const struct _c14n__InclusiveNamespaces *, const char*, const char*);

#ifndef soap_write__c14n__InclusiveNamespaces
#define soap_write__c14n__InclusiveNamespaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__c14n__InclusiveNamespaces(soap, data), 0) || soap_put__c14n__InclusiveNamespaces(soap, data, "c14n:InclusiveNamespaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *, const char*, const char*);

#ifndef soap_read__c14n__InclusiveNamespaces
#define soap_read__c14n__InclusiveNamespaces(soap, data) ( soap_begin_recv(soap) || !soap_get__c14n__InclusiveNamespaces(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);

inline struct _c14n__InclusiveNamespaces * soap_new__c14n__InclusiveNamespaces(struct soap *soap, int n = -1) { return soap_instantiate__c14n__InclusiveNamespaces(soap, n, NULL, NULL, NULL); }

inline struct _c14n__InclusiveNamespaces * soap_new_req__c14n__InclusiveNamespaces(struct soap *soap) { struct _c14n__InclusiveNamespaces *_p = soap_instantiate__c14n__InclusiveNamespaces(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__c14n__InclusiveNamespaces(soap, _p); } return _p; }

inline struct _c14n__InclusiveNamespaces * soap_new_set__c14n__InclusiveNamespaces(struct soap *soap, char *PrefixList) { struct _c14n__InclusiveNamespaces *_p = soap_instantiate__c14n__InclusiveNamespaces(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__c14n__InclusiveNamespaces(soap, _p); _p->PrefixList = PrefixList; } return _p; }

inline void soap_delete__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__c14n__InclusiveNamespaces(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap*, struct ds__TransformsType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap*, const struct ds__TransformsType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap*, const char*, int, const struct ds__TransformsType *, const char*);
SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap*, const char*, struct ds__TransformsType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap*, const struct ds__TransformsType *, const char*, const char*);

#ifndef soap_write_ds__TransformsType
#define soap_write_ds__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__TransformsType(soap, data), 0) || soap_put_ds__TransformsType(soap, data, "ds:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap*, struct ds__TransformsType *, const char*, const char*);

#ifndef soap_read_ds__TransformsType
#define soap_read_ds__TransformsType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__TransformsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__TransformsType * soap_new_ds__TransformsType(struct soap *soap, int n = -1) { return soap_instantiate_ds__TransformsType(soap, n, NULL, NULL, NULL); }

inline struct ds__TransformsType * soap_new_req_ds__TransformsType(struct soap *soap, int __sizeTransform, struct ds__TransformType *Transform) { struct ds__TransformsType *_p = soap_instantiate_ds__TransformsType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__TransformsType(soap, _p); _p->__sizeTransform = __sizeTransform; _p->Transform = Transform; } return _p; }

inline struct ds__TransformsType * soap_new_set_ds__TransformsType(struct soap *soap, int __sizeTransform, struct ds__TransformType *Transform) { struct ds__TransformsType *_p = soap_instantiate_ds__TransformsType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__TransformsType(soap, _p); _p->__sizeTransform = __sizeTransform; _p->Transform = Transform; } return _p; }

inline void soap_delete_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__TransformsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap*, struct ds__ReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap*, const char*, int, const struct ds__ReferenceType *, const char*);
SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap*, const char*, struct ds__ReferenceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap*, const struct ds__ReferenceType *, const char*, const char*);

#ifndef soap_write_ds__ReferenceType
#define soap_write_ds__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__ReferenceType(soap, data), 0) || soap_put_ds__ReferenceType(soap, data, "ds:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap*, struct ds__ReferenceType *, const char*, const char*);

#ifndef soap_read_ds__ReferenceType
#define soap_read_ds__ReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__ReferenceType * soap_new_ds__ReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_ds__ReferenceType(soap, n, NULL, NULL, NULL); }

inline struct ds__ReferenceType * soap_new_req_ds__ReferenceType(struct soap *soap, struct ds__DigestMethodType *DigestMethod, char *DigestValue) { struct ds__ReferenceType *_p = soap_instantiate_ds__ReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__ReferenceType(soap, _p); _p->DigestMethod = DigestMethod; _p->DigestValue = DigestValue; } return _p; }

inline struct ds__ReferenceType * soap_new_set_ds__ReferenceType(struct soap *soap, struct ds__TransformsType *Transforms, struct ds__DigestMethodType *DigestMethod, char *DigestValue, char *Id, char *URI, char *Type) { struct ds__ReferenceType *_p = soap_instantiate_ds__ReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__ReferenceType(soap, _p); _p->Transforms = Transforms; _p->DigestMethod = DigestMethod; _p->DigestValue = DigestValue; _p->Id = Id; _p->URI = URI; _p->Type = Type; } return _p; }

inline void soap_delete_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__ReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap*, const char*, int, const struct ds__SignatureMethodType *, const char*);
SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap*, const struct ds__SignatureMethodType *, const char*, const char*);

#ifndef soap_write_ds__SignatureMethodType
#define soap_write_ds__SignatureMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__SignatureMethodType(soap, data), 0) || soap_put_ds__SignatureMethodType(soap, data, "ds:SignatureMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *, const char*, const char*);

#ifndef soap_read_ds__SignatureMethodType
#define soap_read_ds__SignatureMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__SignatureMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureMethodType * soap_new_ds__SignatureMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__SignatureMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__SignatureMethodType * soap_new_req_ds__SignatureMethodType(struct soap *soap, char *Algorithm) { struct ds__SignatureMethodType *_p = soap_instantiate_ds__SignatureMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__SignatureMethodType(soap, _p); _p->Algorithm = Algorithm; } return _p; }

inline struct ds__SignatureMethodType * soap_new_set_ds__SignatureMethodType(struct soap *soap, int *HMACOutputLength, char *Algorithm) { struct ds__SignatureMethodType *_p = soap_instantiate_ds__SignatureMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__SignatureMethodType(soap, _p); _p->HMACOutputLength = HMACOutputLength; _p->Algorithm = Algorithm; } return _p; }

inline void soap_delete_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__SignatureMethodType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap*, const char*, int, const struct ds__CanonicalizationMethodType *, const char*);
SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap*, const struct ds__CanonicalizationMethodType *, const char*, const char*);

#ifndef soap_write_ds__CanonicalizationMethodType
#define soap_write_ds__CanonicalizationMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__CanonicalizationMethodType(soap, data), 0) || soap_put_ds__CanonicalizationMethodType(soap, data, "ds:CanonicalizationMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *, const char*, const char*);

#ifndef soap_read_ds__CanonicalizationMethodType
#define soap_read_ds__CanonicalizationMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__CanonicalizationMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__CanonicalizationMethodType * soap_new_ds__CanonicalizationMethodType(struct soap *soap, int n = -1) { return soap_instantiate_ds__CanonicalizationMethodType(soap, n, NULL, NULL, NULL); }

inline struct ds__CanonicalizationMethodType * soap_new_req_ds__CanonicalizationMethodType(struct soap *soap, char *Algorithm) { struct ds__CanonicalizationMethodType *_p = soap_instantiate_ds__CanonicalizationMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__CanonicalizationMethodType(soap, _p); _p->Algorithm = Algorithm; } return _p; }

inline struct ds__CanonicalizationMethodType * soap_new_set_ds__CanonicalizationMethodType(struct soap *soap, char *Algorithm, struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces) { struct ds__CanonicalizationMethodType *_p = soap_instantiate_ds__CanonicalizationMethodType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__CanonicalizationMethodType(soap, _p); _p->Algorithm = Algorithm; _p->c14n__InclusiveNamespaces = c14n__InclusiveNamespaces; } return _p; }

inline void soap_delete_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__CanonicalizationMethodType(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _ds__Signature is a typedef element/attribute synonym for ds__SignatureType */

#ifndef SOAP_TYPE__ds__Signature
#define SOAP_TYPE__ds__Signature (78)
#endif

#define soap_default__ds__Signature(soap, a) soap_default_ds__SignatureType(soap, a)


#define soap_serialize__ds__Signature soap_serialize_ds__SignatureType


#define soap_out__ds__Signature soap_out_ds__SignatureType


#define soap_in__ds__Signature soap_in_ds__SignatureType


#define soap_put__ds__Signature soap_put_ds__SignatureType


#define soap_get__ds__Signature soap_get_ds__SignatureType


#define soap_instantiate__ds__Signature soap_instantiate_ds__SignatureType


#define soap_copy__ds__Signature soap_copy_ds__SignatureType

#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap*, const char*, int, const struct ds__KeyInfoType *, const char*);
SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap*, const struct ds__KeyInfoType *, const char*, const char*);

#ifndef soap_write_ds__KeyInfoType
#define soap_write_ds__KeyInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__KeyInfoType(soap, data), 0) || soap_put_ds__KeyInfoType(soap, data, "ds:KeyInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap*, struct ds__KeyInfoType *, const char*, const char*);

#ifndef soap_read_ds__KeyInfoType
#define soap_read_ds__KeyInfoType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__KeyInfoType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__KeyInfoType * soap_new_ds__KeyInfoType(struct soap *soap, int n = -1) { return soap_instantiate_ds__KeyInfoType(soap, n, NULL, NULL, NULL); }

inline struct ds__KeyInfoType * soap_new_req_ds__KeyInfoType(struct soap *soap) { struct ds__KeyInfoType *_p = soap_instantiate_ds__KeyInfoType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__KeyInfoType(soap, _p); } return _p; }

inline struct ds__KeyInfoType * soap_new_set_ds__KeyInfoType(struct soap *soap, char *KeyName, struct ds__KeyValueType *KeyValue, struct ds__RetrievalMethodType *RetrievalMethod, struct ds__X509DataType *X509Data, struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference, char *Id) { struct ds__KeyInfoType *_p = soap_instantiate_ds__KeyInfoType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__KeyInfoType(soap, _p); _p->KeyName = KeyName; _p->KeyValue = KeyValue; _p->RetrievalMethod = RetrievalMethod; _p->X509Data = X509Data; _p->wsse__SecurityTokenReference = wsse__SecurityTokenReference; _p->Id = Id; } return _p; }

inline void soap_delete_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__KeyInfoType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap*, const char*, int, const struct ds__SignedInfoType *, const char*);
SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap*, const struct ds__SignedInfoType *, const char*, const char*);

#ifndef soap_write_ds__SignedInfoType
#define soap_write_ds__SignedInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__SignedInfoType(soap, data), 0) || soap_put_ds__SignedInfoType(soap, data, "ds:SignedInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap*, struct ds__SignedInfoType *, const char*, const char*);

#ifndef soap_read_ds__SignedInfoType
#define soap_read_ds__SignedInfoType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__SignedInfoType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignedInfoType * soap_new_ds__SignedInfoType(struct soap *soap, int n = -1) { return soap_instantiate_ds__SignedInfoType(soap, n, NULL, NULL, NULL); }

inline struct ds__SignedInfoType * soap_new_req_ds__SignedInfoType(struct soap *soap, struct ds__CanonicalizationMethodType *CanonicalizationMethod, struct ds__SignatureMethodType *SignatureMethod, int __sizeReference, struct ds__ReferenceType **Reference) { struct ds__SignedInfoType *_p = soap_instantiate_ds__SignedInfoType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__SignedInfoType(soap, _p); _p->CanonicalizationMethod = CanonicalizationMethod; _p->SignatureMethod = SignatureMethod; _p->__sizeReference = __sizeReference; _p->Reference = Reference; } return _p; }

inline struct ds__SignedInfoType * soap_new_set_ds__SignedInfoType(struct soap *soap, struct ds__CanonicalizationMethodType *CanonicalizationMethod, struct ds__SignatureMethodType *SignatureMethod, int __sizeReference, struct ds__ReferenceType **Reference, char *Id) { struct ds__SignedInfoType *_p = soap_instantiate_ds__SignedInfoType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__SignedInfoType(soap, _p); _p->CanonicalizationMethod = CanonicalizationMethod; _p->SignatureMethod = SignatureMethod; _p->__sizeReference = __sizeReference; _p->Reference = Reference; _p->Id = Id; } return _p; }

inline void soap_delete_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__SignedInfoType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap*, struct ds__SignatureType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap*, const struct ds__SignatureType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap*, const char*, int, const struct ds__SignatureType *, const char*);
SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap*, const char*, struct ds__SignatureType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap*, const struct ds__SignatureType *, const char*, const char*);

#ifndef soap_write_ds__SignatureType
#define soap_write_ds__SignatureType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__SignatureType(soap, data), 0) || soap_put_ds__SignatureType(soap, data, "ds:SignatureType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap*, struct ds__SignatureType *, const char*, const char*);

#ifndef soap_read_ds__SignatureType
#define soap_read_ds__SignatureType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__SignatureType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__SignatureType * soap_new_ds__SignatureType(struct soap *soap, int n = -1) { return soap_instantiate_ds__SignatureType(soap, n, NULL, NULL, NULL); }

inline struct ds__SignatureType * soap_new_req_ds__SignatureType(struct soap *soap) { struct ds__SignatureType *_p = soap_instantiate_ds__SignatureType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__SignatureType(soap, _p); } return _p; }

inline struct ds__SignatureType * soap_new_set_ds__SignatureType(struct soap *soap, struct ds__SignedInfoType *SignedInfo, char *SignatureValue, struct ds__KeyInfoType *KeyInfo, char *Id) { struct ds__SignatureType *_p = soap_instantiate_ds__SignatureType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__SignatureType(soap, _p); _p->SignedInfo = SignedInfo; _p->SignatureValue = SignatureValue; _p->KeyInfo = KeyInfo; _p->Id = Id; } return _p; }

inline void soap_delete_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__SignatureType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap*, struct ds__X509DataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap*, const struct ds__X509DataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap*, const char*, int, const struct ds__X509DataType *, const char*);
SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap*, const char*, struct ds__X509DataType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap*, const struct ds__X509DataType *, const char*, const char*);

#ifndef soap_write_ds__X509DataType
#define soap_write_ds__X509DataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ds__X509DataType(soap, data), 0) || soap_put_ds__X509DataType(soap, data, "ds:X509DataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap*, struct ds__X509DataType *, const char*, const char*);

#ifndef soap_read_ds__X509DataType
#define soap_read_ds__X509DataType(soap, data) ( soap_begin_recv(soap) || !soap_get_ds__X509DataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);

inline struct ds__X509DataType * soap_new_ds__X509DataType(struct soap *soap, int n = -1) { return soap_instantiate_ds__X509DataType(soap, n, NULL, NULL, NULL); }

inline struct ds__X509DataType * soap_new_req_ds__X509DataType(struct soap *soap) { struct ds__X509DataType *_p = soap_instantiate_ds__X509DataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__X509DataType(soap, _p); } return _p; }

inline struct ds__X509DataType * soap_new_set_ds__X509DataType(struct soap *soap, struct ds__X509IssuerSerialType *X509IssuerSerial, char *X509SKI, char *X509SubjectName, char *X509Certificate, char *X509CRL) { struct ds__X509DataType *_p = soap_instantiate_ds__X509DataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ds__X509DataType(soap, _p); _p->X509IssuerSerial = X509IssuerSerial; _p->X509SKI = X509SKI; _p->X509SubjectName = X509SubjectName; _p->X509Certificate = X509Certificate; _p->X509CRL = X509CRL; } return _p; }

inline void soap_delete_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ds__X509DataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap*, const char*, int, const struct _wsse__SecurityTokenReference *, const char*);
SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap*, const struct _wsse__SecurityTokenReference *, const char*, const char*);

#ifndef soap_write__wsse__SecurityTokenReference
#define soap_write__wsse__SecurityTokenReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__SecurityTokenReference(soap, data), 0) || soap_put__wsse__SecurityTokenReference(soap, data, "wsse:SecurityTokenReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *, const char*, const char*);

#ifndef soap_read__wsse__SecurityTokenReference
#define soap_read__wsse__SecurityTokenReference(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__SecurityTokenReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__SecurityTokenReference * soap_new__wsse__SecurityTokenReference(struct soap *soap, int n = -1) { return soap_instantiate__wsse__SecurityTokenReference(soap, n, NULL, NULL, NULL); }

inline struct _wsse__SecurityTokenReference * soap_new_req__wsse__SecurityTokenReference(struct soap *soap) { struct _wsse__SecurityTokenReference *_p = soap_instantiate__wsse__SecurityTokenReference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__SecurityTokenReference(soap, _p); } return _p; }

inline struct _wsse__SecurityTokenReference * soap_new_set__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__Reference *Reference, struct _wsse__KeyIdentifier *KeyIdentifier, struct _wsse__Embedded *Embedded, struct ds__X509DataType *ds__X509Data, char *wsu__Id, char *wsc__Instance, char *Usage) { struct _wsse__SecurityTokenReference *_p = soap_instantiate__wsse__SecurityTokenReference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__SecurityTokenReference(soap, _p); _p->Reference = Reference; _p->KeyIdentifier = KeyIdentifier; _p->Embedded = Embedded; _p->ds__X509Data = ds__X509Data; _p->wsu__Id = wsu__Id; _p->wsc__Instance = wsc__Instance; _p->Usage = Usage; } return _p; }

inline void soap_delete__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__SecurityTokenReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap*, const char*, int, const struct _wsse__KeyIdentifier *, const char*);
SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap*, const struct _wsse__KeyIdentifier *, const char*, const char*);

#ifndef soap_write__wsse__KeyIdentifier
#define soap_write__wsse__KeyIdentifier(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__KeyIdentifier(soap, data), 0) || soap_put__wsse__KeyIdentifier(soap, data, "wsse:KeyIdentifier", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *, const char*, const char*);

#ifndef soap_read__wsse__KeyIdentifier
#define soap_read__wsse__KeyIdentifier(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__KeyIdentifier(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__KeyIdentifier * soap_new__wsse__KeyIdentifier(struct soap *soap, int n = -1) { return soap_instantiate__wsse__KeyIdentifier(soap, n, NULL, NULL, NULL); }

inline struct _wsse__KeyIdentifier * soap_new_req__wsse__KeyIdentifier(struct soap *soap) { struct _wsse__KeyIdentifier *_p = soap_instantiate__wsse__KeyIdentifier(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__KeyIdentifier(soap, _p); } return _p; }

inline struct _wsse__KeyIdentifier * soap_new_set__wsse__KeyIdentifier(struct soap *soap, char *__item, char *wsu__Id, char *ValueType, char *EncodingType) { struct _wsse__KeyIdentifier *_p = soap_instantiate__wsse__KeyIdentifier(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__KeyIdentifier(soap, _p); _p->__item = __item; _p->wsu__Id = wsu__Id; _p->ValueType = ValueType; _p->EncodingType = EncodingType; } return _p; }

inline void soap_delete__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__KeyIdentifier(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap*, struct _wsse__Embedded *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap*, const struct _wsse__Embedded *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap*, const char*, int, const struct _wsse__Embedded *, const char*);
SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap*, const struct _wsse__Embedded *, const char*, const char*);

#ifndef soap_write__wsse__Embedded
#define soap_write__wsse__Embedded(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Embedded(soap, data), 0) || soap_put__wsse__Embedded(soap, data, "wsse:Embedded", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap*, struct _wsse__Embedded *, const char*, const char*);

#ifndef soap_read__wsse__Embedded
#define soap_read__wsse__Embedded(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__Embedded(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Embedded * soap_new__wsse__Embedded(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Embedded(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Embedded * soap_new_req__wsse__Embedded(struct soap *soap) { struct _wsse__Embedded *_p = soap_instantiate__wsse__Embedded(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Embedded(soap, _p); } return _p; }

inline struct _wsse__Embedded * soap_new_set__wsse__Embedded(struct soap *soap, char *wsu__Id, char *ValueType) { struct _wsse__Embedded *_p = soap_instantiate__wsse__Embedded(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Embedded(soap, _p); _p->wsu__Id = wsu__Id; _p->ValueType = ValueType; } return _p; }

inline void soap_delete__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__Embedded(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap*, struct _wsse__Reference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap*, const struct _wsse__Reference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap*, const char*, int, const struct _wsse__Reference *, const char*);
SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap*, const char*, struct _wsse__Reference *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap*, const struct _wsse__Reference *, const char*, const char*);

#ifndef soap_write__wsse__Reference
#define soap_write__wsse__Reference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Reference(soap, data), 0) || soap_put__wsse__Reference(soap, data, "wsse:Reference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap*, struct _wsse__Reference *, const char*, const char*);

#ifndef soap_read__wsse__Reference
#define soap_read__wsse__Reference(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__Reference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Reference * soap_new__wsse__Reference(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Reference(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Reference * soap_new_req__wsse__Reference(struct soap *soap) { struct _wsse__Reference *_p = soap_instantiate__wsse__Reference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Reference(soap, _p); } return _p; }

inline struct _wsse__Reference * soap_new_set__wsse__Reference(struct soap *soap, char *URI, char *ValueType) { struct _wsse__Reference *_p = soap_instantiate__wsse__Reference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Reference(soap, _p); _p->URI = URI; _p->ValueType = ValueType; } return _p; }

inline void soap_delete__wsse__Reference(struct soap *soap, struct _wsse__Reference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__Reference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap*, const char*, int, const struct _wsse__BinarySecurityToken *, const char*);
SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap*, const struct _wsse__BinarySecurityToken *, const char*, const char*);

#ifndef soap_write__wsse__BinarySecurityToken
#define soap_write__wsse__BinarySecurityToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__BinarySecurityToken(soap, data), 0) || soap_put__wsse__BinarySecurityToken(soap, data, "wsse:BinarySecurityToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *, const char*, const char*);

#ifndef soap_read__wsse__BinarySecurityToken
#define soap_read__wsse__BinarySecurityToken(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__BinarySecurityToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__BinarySecurityToken * soap_new__wsse__BinarySecurityToken(struct soap *soap, int n = -1) { return soap_instantiate__wsse__BinarySecurityToken(soap, n, NULL, NULL, NULL); }

inline struct _wsse__BinarySecurityToken * soap_new_req__wsse__BinarySecurityToken(struct soap *soap) { struct _wsse__BinarySecurityToken *_p = soap_instantiate__wsse__BinarySecurityToken(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__BinarySecurityToken(soap, _p); } return _p; }

inline struct _wsse__BinarySecurityToken * soap_new_set__wsse__BinarySecurityToken(struct soap *soap, char *__item, char *wsu__Id, char *ValueType, char *EncodingType) { struct _wsse__BinarySecurityToken *_p = soap_instantiate__wsse__BinarySecurityToken(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__BinarySecurityToken(soap, _p); _p->__item = __item; _p->wsu__Id = wsu__Id; _p->ValueType = ValueType; _p->EncodingType = EncodingType; } return _p; }

inline void soap_delete__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__BinarySecurityToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap*, struct _wsse__Password *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap*, const struct _wsse__Password *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap*, const char*, int, const struct _wsse__Password *, const char*);
SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap*, const char*, struct _wsse__Password *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap*, const struct _wsse__Password *, const char*, const char*);

#ifndef soap_write__wsse__Password
#define soap_write__wsse__Password(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__Password(soap, data), 0) || soap_put__wsse__Password(soap, data, "wsse:Password", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap*, struct _wsse__Password *, const char*, const char*);

#ifndef soap_read__wsse__Password
#define soap_read__wsse__Password(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__Password(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__Password * soap_new__wsse__Password(struct soap *soap, int n = -1) { return soap_instantiate__wsse__Password(soap, n, NULL, NULL, NULL); }

inline struct _wsse__Password * soap_new_req__wsse__Password(struct soap *soap) { struct _wsse__Password *_p = soap_instantiate__wsse__Password(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Password(soap, _p); } return _p; }

inline struct _wsse__Password * soap_new_set__wsse__Password(struct soap *soap, char *__item, char *Type) { struct _wsse__Password *_p = soap_instantiate__wsse__Password(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__Password(soap, _p); _p->__item = __item; _p->Type = Type; } return _p; }

inline void soap_delete__wsse__Password(struct soap *soap, struct _wsse__Password *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__Password(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap*, const char*, int, const struct _wsse__UsernameToken *, const char*);
SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap*, const struct _wsse__UsernameToken *, const char*, const char*);

#ifndef soap_write__wsse__UsernameToken
#define soap_write__wsse__UsernameToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsse__UsernameToken(soap, data), 0) || soap_put__wsse__UsernameToken(soap, data, "wsse:UsernameToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *, const char*, const char*);

#ifndef soap_read__wsse__UsernameToken
#define soap_read__wsse__UsernameToken(soap, data) ( soap_begin_recv(soap) || !soap_get__wsse__UsernameToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsse__UsernameToken * soap_new__wsse__UsernameToken(struct soap *soap, int n = -1) { return soap_instantiate__wsse__UsernameToken(soap, n, NULL, NULL, NULL); }

inline struct _wsse__UsernameToken * soap_new_req__wsse__UsernameToken(struct soap *soap) { struct _wsse__UsernameToken *_p = soap_instantiate__wsse__UsernameToken(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__UsernameToken(soap, _p); } return _p; }

inline struct _wsse__UsernameToken * soap_new_set__wsse__UsernameToken(struct soap *soap, char *Username, struct _wsse__Password *Password, char *Nonce, char *wsu__Created, char *wsu__Id) { struct _wsse__UsernameToken *_p = soap_instantiate__wsse__UsernameToken(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsse__UsernameToken(soap, _p); _p->Username = Username; _p->Password = Password; _p->Nonce = Nonce; _p->wsu__Created = wsu__Created; _p->wsu__Id = wsu__Id; } return _p; }

inline void soap_delete__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsse__UsernameToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap*, const char*, int, const struct _wsu__Timestamp *, const char*);
SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap*, const struct _wsu__Timestamp *, const char*, const char*);

#ifndef soap_write__wsu__Timestamp
#define soap_write__wsu__Timestamp(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsu__Timestamp(soap, data), 0) || soap_put__wsu__Timestamp(soap, data, "wsu:Timestamp", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap*, struct _wsu__Timestamp *, const char*, const char*);

#ifndef soap_read__wsu__Timestamp
#define soap_read__wsu__Timestamp(soap, data) ( soap_begin_recv(soap) || !soap_get__wsu__Timestamp(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);

inline struct _wsu__Timestamp * soap_new__wsu__Timestamp(struct soap *soap, int n = -1) { return soap_instantiate__wsu__Timestamp(soap, n, NULL, NULL, NULL); }

inline struct _wsu__Timestamp * soap_new_req__wsu__Timestamp(struct soap *soap) { struct _wsu__Timestamp *_p = soap_instantiate__wsu__Timestamp(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsu__Timestamp(soap, _p); } return _p; }

inline struct _wsu__Timestamp * soap_new_set__wsu__Timestamp(struct soap *soap, char *wsu__Id, char *Created, char *Expires) { struct _wsu__Timestamp *_p = soap_instantiate__wsu__Timestamp(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__wsu__Timestamp(soap, _p); _p->wsu__Id = wsu__Id; _p->Created = Created; _p->Expires = Expires; } return _p; }

inline void soap_delete__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__wsu__Timestamp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); _p->wsa5__MessageID = wsa5__MessageID; _p->wsa5__RelatesTo = wsa5__RelatesTo; _p->wsa5__From = wsa5__From; _p->wsa5__ReplyTo = wsa5__ReplyTo; _p->wsa5__FaultTo = wsa5__FaultTo; _p->wsa5__To = wsa5__To; _p->wsa5__Action = wsa5__Action; _p->chan__ChannelInstance = chan__ChannelInstance; _p->wsse__Security = wsse__Security; } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

#ifndef soap_write_chan__ChannelInstanceType
#define soap_write_chan__ChannelInstanceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_chan__ChannelInstanceType(soap, data), 0) || soap_put_chan__ChannelInstanceType(soap, data, "chan:ChannelInstanceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

#ifndef soap_read_chan__ChannelInstanceType
#define soap_read_chan__ChannelInstanceType(soap, data) ( soap_begin_recv(soap) || !soap_get_chan__ChannelInstanceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1) { return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL); }

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(struct soap *soap, int __item) { struct chan__ChannelInstanceType *_p = soap_instantiate_chan__ChannelInstanceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_chan__ChannelInstanceType(soap, _p); _p->__item = __item; } return _p; }

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(struct soap *soap, int __item, enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter) { struct chan__ChannelInstanceType *_p = soap_instantiate_chan__ChannelInstanceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_chan__ChannelInstanceType(soap, _p); _p->__item = __item; _p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter; } return _p; }

inline void soap_delete_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_chan__ChannelInstanceType(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _wsa5__ProblemAction is a typedef element/attribute synonym for wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
#endif

#define soap_default__wsa5__ProblemAction(soap, a) soap_default_wsa5__ProblemActionType(soap, a)


#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_put__wsa5__ProblemAction soap_put_wsa5__ProblemActionType


#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_copy__wsa5__ProblemAction soap_copy_wsa5__ProblemActionType

/* _wsa5__FaultTo is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
#endif

#define soap_default__wsa5__FaultTo(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__FaultTo soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__FaultTo soap_copy_wsa5__EndpointReferenceType

/* _wsa5__From is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
#endif

#define soap_default__wsa5__From(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__From soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__From soap_copy_wsa5__EndpointReferenceType

/* _wsa5__ReplyTo is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
#endif

#define soap_default__wsa5__ReplyTo(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__ReplyTo soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__ReplyTo soap_copy_wsa5__EndpointReferenceType

/* _wsa5__RelatesTo is a typedef element/attribute synonym for wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
#endif

#define soap_default__wsa5__RelatesTo(soap, a) soap_default_wsa5__RelatesToType(soap, a)


#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_put__wsa5__RelatesTo soap_put_wsa5__RelatesToType


#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_copy__wsa5__RelatesTo soap_copy_wsa5__RelatesToType

/* _wsa5__Metadata is a typedef element/attribute synonym for wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
#endif

#define soap_default__wsa5__Metadata(soap, a) soap_default_wsa5__MetadataType(soap, a)


#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_put__wsa5__Metadata soap_put_wsa5__MetadataType


#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_copy__wsa5__Metadata soap_copy_wsa5__MetadataType

/* _wsa5__ReferenceParameters is a typedef element/attribute synonym for wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
#endif

#define soap_default__wsa5__ReferenceParameters(soap, a) soap_default_wsa5__ReferenceParametersType(soap, a)


#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_put__wsa5__ReferenceParameters soap_put_wsa5__ReferenceParametersType


#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_copy__wsa5__ReferenceParameters soap_copy_wsa5__ReferenceParametersType

/* _wsa5__EndpointReference is a typedef element/attribute synonym for wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
#endif

#define soap_default__wsa5__EndpointReference(soap, a) soap_default_wsa5__EndpointReferenceType(soap, a)


#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_put__wsa5__EndpointReference soap_put_wsa5__EndpointReferenceType


#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_copy__wsa5__EndpointReference soap_copy_wsa5__EndpointReferenceType

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

#ifndef soap_write_wsa5__ProblemActionType
#define soap_write_wsa5__ProblemActionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__ProblemActionType(soap, data), 0) || soap_put_wsa5__ProblemActionType(soap, data, "wsa5:ProblemActionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

#ifndef soap_read_wsa5__ProblemActionType
#define soap_read_wsa5__ProblemActionType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__ProblemActionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(struct soap *soap) { struct wsa5__ProblemActionType *_p = soap_instantiate_wsa5__ProblemActionType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ProblemActionType(soap, _p); } return _p; }

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(struct soap *soap, char *Action, char *SoapAction, char *__anyAttribute) { struct wsa5__ProblemActionType *_p = soap_instantiate_wsa5__ProblemActionType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ProblemActionType(soap, _p); _p->Action = Action; _p->SoapAction = SoapAction; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__ProblemActionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

#ifndef soap_write_wsa5__RelatesToType
#define soap_write_wsa5__RelatesToType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__RelatesToType(soap, data), 0) || soap_put_wsa5__RelatesToType(soap, data, "wsa5:RelatesToType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

#ifndef soap_read_wsa5__RelatesToType
#define soap_read_wsa5__RelatesToType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__RelatesToType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(struct soap *soap) { struct wsa5__RelatesToType *_p = soap_instantiate_wsa5__RelatesToType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__RelatesToType(soap, _p); } return _p; }

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(struct soap *soap, char *__item, char *RelationshipType, char *__anyAttribute) { struct wsa5__RelatesToType *_p = soap_instantiate_wsa5__RelatesToType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__RelatesToType(soap, _p); _p->__item = __item; _p->RelationshipType = RelationshipType; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__RelatesToType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

#ifndef soap_write_wsa5__MetadataType
#define soap_write_wsa5__MetadataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__MetadataType(soap, data), 0) || soap_put_wsa5__MetadataType(soap, data, "wsa5:MetadataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

#ifndef soap_read_wsa5__MetadataType
#define soap_read_wsa5__MetadataType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__MetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(struct soap *soap, int __size, char **__any) { struct wsa5__MetadataType *_p = soap_instantiate_wsa5__MetadataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__MetadataType(soap, _p); _p->__size = __size; _p->__any = __any; } return _p; }

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(struct soap *soap, int __size, char **__any, char *__anyAttribute) { struct wsa5__MetadataType *_p = soap_instantiate_wsa5__MetadataType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__MetadataType(soap, _p); _p->__size = __size; _p->__any = __any; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__MetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

#ifndef soap_write_wsa5__ReferenceParametersType
#define soap_write_wsa5__ReferenceParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__ReferenceParametersType(soap, data), 0) || soap_put_wsa5__ReferenceParametersType(soap, data, "wsa5:ReferenceParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

#ifndef soap_read_wsa5__ReferenceParametersType
#define soap_read_wsa5__ReferenceParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__ReferenceParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(struct soap *soap, int __size, char **__any) { struct wsa5__ReferenceParametersType *_p = soap_instantiate_wsa5__ReferenceParametersType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ReferenceParametersType(soap, _p); _p->__size = __size; _p->__any = __any; } return _p; }

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(struct soap *soap, int *chan__ChannelInstance, int __size, char **__any, char *__anyAttribute) { struct wsa5__ReferenceParametersType *_p = soap_instantiate_wsa5__ReferenceParametersType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__ReferenceParametersType(soap, _p); _p->chan__ChannelInstance = chan__ChannelInstance; _p->__size = __size; _p->__any = __any; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__ReferenceParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

#ifndef soap_write_wsa5__EndpointReferenceType
#define soap_write_wsa5__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__EndpointReferenceType(soap, data), 0) || soap_put_wsa5__EndpointReferenceType(soap, data, "wsa5:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

#ifndef soap_read_wsa5__EndpointReferenceType
#define soap_read_wsa5__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL); }

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(struct soap *soap, char *Address, int __size, char **__any) { struct wsa5__EndpointReferenceType *_p = soap_instantiate_wsa5__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__EndpointReferenceType(soap, _p); _p->Address = Address; _p->__size = __size; _p->__any = __any; } return _p; }

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(struct soap *soap, char *Address, struct wsa5__ReferenceParametersType *ReferenceParameters, struct wsa5__MetadataType *Metadata, int __size, char **__any, char *__anyAttribute) { struct wsa5__EndpointReferenceType *_p = soap_instantiate_wsa5__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_wsa5__EndpointReferenceType(soap, _p); _p->Address = Address; _p->ReferenceParameters = ReferenceParameters; _p->Metadata = Metadata; _p->__size = __size; _p->__any = __any; _p->__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa5__EndpointReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap*, struct _xop__Include *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap*, struct _xop__Include const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap*, const char*, int, const struct _xop__Include *, const char*);
SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap*, const char*, struct _xop__Include *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap*, const struct _xop__Include *, const char*, const char*);

#ifndef soap_write__xop__Include
#define soap_write__xop__Include(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__xop__Include(soap, data), 0) || soap_put__xop__Include(soap, data, "xop:Include", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap*, struct _xop__Include *, const char*, const char*);

#ifndef soap_read__xop__Include
#define soap_read__xop__Include(soap, data) ( soap_begin_recv(soap) || !soap_get__xop__Include(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap*, int, const char*, const char*, size_t*);

inline struct _xop__Include * soap_new__xop__Include(struct soap *soap, int n = -1) { return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL); }

inline struct _xop__Include * soap_new_req__xop__Include(struct soap *soap) { struct _xop__Include *_p = soap_instantiate__xop__Include(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__xop__Include(soap, _p); } return _p; }

inline struct _xop__Include * soap_new_set__xop__Include(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { struct _xop__Include *_p = soap_instantiate__xop__Include(soap, -1, NULL, NULL, NULL); if (_p) { soap_default__xop__Include(soap, _p); _p->__ptr = __ptr; _p->__size = __size; _p->id = id; _p->type = type; _p->options = options; } return _p; }

inline void soap_delete__xop__Include(struct soap *soap, struct _xop__Include *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__xop__Include(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__tt__union_ColorOptions
#define SOAP_TYPE__tt__union_ColorOptions (1406)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_ColorOptions(struct soap*, int, const union _tt__union_ColorOptions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_ColorOptions(struct soap*, int, const union _tt__union_ColorOptions *);
SOAP_FMAC3 union _tt__union_ColorOptions * SOAP_FMAC4 soap_in__tt__union_ColorOptions(struct soap*, int*, union _tt__union_ColorOptions *);

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (1203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__tt__union_PTZPresetTourPresetDetail(struct soap*, int, const union _tt__union_PTZPresetTourPresetDetail *);
SOAP_FMAC3 union _tt__union_PTZPresetTourPresetDetail * SOAP_FMAC4 soap_in__tt__union_PTZPresetTourPresetDetail(struct soap*, int*, union _tt__union_PTZPresetTourPresetDetail *);

#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap*, int, const union _wsc__union_DerivedKeyTokenType *);
SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap*, int*, union _wsc__union_DerivedKeyTokenType *);

#ifndef SOAP_TYPE_PointerTo_ns1__DeleteMask
#define SOAP_TYPE_PointerTo_ns1__DeleteMask (1706)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteMask(struct soap*, _ns1__DeleteMask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteMask(struct soap*, const char *, int, _ns1__DeleteMask *const*, const char *);
SOAP_FMAC3 _ns1__DeleteMask ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteMask(struct soap*, const char*, _ns1__DeleteMask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteMask(struct soap*, _ns1__DeleteMask *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DeleteMask
#define soap_write_PointerTo_ns1__DeleteMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__DeleteMask(soap, data), 0) || soap_put_PointerTo_ns1__DeleteMask(soap, data, "ns1:DeleteMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteMask ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteMask(struct soap*, _ns1__DeleteMask **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DeleteMask
#define soap_read_PointerTo_ns1__DeleteMask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__DeleteMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__CreateMask
#define SOAP_TYPE_PointerTo_ns1__CreateMask (1702)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateMask(struct soap*, _ns1__CreateMask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateMask(struct soap*, const char *, int, _ns1__CreateMask *const*, const char *);
SOAP_FMAC3 _ns1__CreateMask ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateMask(struct soap*, const char*, _ns1__CreateMask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateMask(struct soap*, _ns1__CreateMask *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__CreateMask
#define soap_write_PointerTo_ns1__CreateMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__CreateMask(soap, data), 0) || soap_put_PointerTo_ns1__CreateMask(soap, data, "ns1:CreateMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateMask ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateMask(struct soap*, _ns1__CreateMask **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__CreateMask
#define soap_read_PointerTo_ns1__CreateMask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__CreateMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetMask
#define SOAP_TYPE_PointerTo_ns1__SetMask (1698)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMask(struct soap*, _ns1__SetMask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMask(struct soap*, const char *, int, _ns1__SetMask *const*, const char *);
SOAP_FMAC3 _ns1__SetMask ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMask(struct soap*, const char*, _ns1__SetMask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMask(struct soap*, _ns1__SetMask *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetMask
#define soap_write_PointerTo_ns1__SetMask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetMask(soap, data), 0) || soap_put_PointerTo_ns1__SetMask(soap, data, "ns1:SetMask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMask ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMask(struct soap*, _ns1__SetMask **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetMask
#define soap_read_PointerTo_ns1__SetMask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetMask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetMaskOptions
#define SOAP_TYPE_PointerTo_ns1__GetMaskOptions (1694)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMaskOptions(struct soap*, _ns1__GetMaskOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMaskOptions(struct soap*, const char *, int, _ns1__GetMaskOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetMaskOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMaskOptions(struct soap*, const char*, _ns1__GetMaskOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMaskOptions(struct soap*, _ns1__GetMaskOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetMaskOptions
#define soap_write_PointerTo_ns1__GetMaskOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetMaskOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetMaskOptions(soap, data, "ns1:GetMaskOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMaskOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMaskOptions(struct soap*, _ns1__GetMaskOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetMaskOptions
#define soap_read_PointerTo_ns1__GetMaskOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetMaskOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetMasks
#define SOAP_TYPE_PointerTo_ns1__GetMasks (1690)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMasks(struct soap*, _ns1__GetMasks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMasks(struct soap*, const char *, int, _ns1__GetMasks *const*, const char *);
SOAP_FMAC3 _ns1__GetMasks ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMasks(struct soap*, const char*, _ns1__GetMasks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMasks(struct soap*, _ns1__GetMasks *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetMasks
#define soap_write_PointerTo_ns1__GetMasks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetMasks(soap, data), 0) || soap_put_PointerTo_ns1__GetMasks(soap, data, "ns1:GetMasks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetMasks ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMasks(struct soap*, _ns1__GetMasks **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetMasks
#define soap_read_PointerTo_ns1__GetMasks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetMasks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__DeleteOSD
#define SOAP_TYPE_PointerTo_ns1__DeleteOSD (1686)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteOSD(struct soap*, const char *, int, _ns1__DeleteOSD *const*, const char *);
SOAP_FMAC3 _ns1__DeleteOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteOSD(struct soap*, const char*, _ns1__DeleteOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DeleteOSD
#define soap_write_PointerTo_ns1__DeleteOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__DeleteOSD(soap, data), 0) || soap_put_PointerTo_ns1__DeleteOSD(soap, data, "ns1:DeleteOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteOSD(struct soap*, _ns1__DeleteOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DeleteOSD
#define soap_read_PointerTo_ns1__DeleteOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__DeleteOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__CreateOSD
#define SOAP_TYPE_PointerTo_ns1__CreateOSD (1682)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateOSD(struct soap*, _ns1__CreateOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateOSD(struct soap*, const char *, int, _ns1__CreateOSD *const*, const char *);
SOAP_FMAC3 _ns1__CreateOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateOSD(struct soap*, const char*, _ns1__CreateOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateOSD(struct soap*, _ns1__CreateOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__CreateOSD
#define soap_write_PointerTo_ns1__CreateOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__CreateOSD(soap, data), 0) || soap_put_PointerTo_ns1__CreateOSD(soap, data, "ns1:CreateOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateOSD(struct soap*, _ns1__CreateOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__CreateOSD
#define soap_read_PointerTo_ns1__CreateOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__CreateOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetOSD
#define SOAP_TYPE_PointerTo_ns1__SetOSD (1678)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetOSD(struct soap*, _ns1__SetOSD *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetOSD(struct soap*, const char *, int, _ns1__SetOSD *const*, const char *);
SOAP_FMAC3 _ns1__SetOSD ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetOSD(struct soap*, const char*, _ns1__SetOSD **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetOSD(struct soap*, _ns1__SetOSD *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetOSD
#define soap_write_PointerTo_ns1__SetOSD(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetOSD(soap, data), 0) || soap_put_PointerTo_ns1__SetOSD(soap, data, "ns1:SetOSD", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetOSD ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetOSD(struct soap*, _ns1__SetOSD **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetOSD
#define soap_read_PointerTo_ns1__SetOSD(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetOSD(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOSDOptions
#define SOAP_TYPE_PointerTo_ns1__GetOSDOptions (1674)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOSDOptions(struct soap*, const char *, int, _ns1__GetOSDOptions *const*, const char *);
SOAP_FMAC3 _ns1__GetOSDOptions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOSDOptions(struct soap*, const char*, _ns1__GetOSDOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOSDOptions
#define soap_write_PointerTo_ns1__GetOSDOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOSDOptions(soap, data), 0) || soap_put_PointerTo_ns1__GetOSDOptions(soap, data, "ns1:GetOSDOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDOptions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOSDOptions(struct soap*, _ns1__GetOSDOptions **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOSDOptions
#define soap_read_PointerTo_ns1__GetOSDOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOSDOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOSDs
#define SOAP_TYPE_PointerTo_ns1__GetOSDs (1670)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOSDs(struct soap*, _ns1__GetOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOSDs(struct soap*, const char *, int, _ns1__GetOSDs *const*, const char *);
SOAP_FMAC3 _ns1__GetOSDs ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOSDs(struct soap*, const char*, _ns1__GetOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOSDs(struct soap*, _ns1__GetOSDs *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOSDs
#define soap_write_PointerTo_ns1__GetOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOSDs(soap, data), 0) || soap_put_PointerTo_ns1__GetOSDs(soap, data, "ns1:GetOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOSDs ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOSDs(struct soap*, _ns1__GetOSDs **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOSDs
#define soap_read_PointerTo_ns1__GetOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoSourceMode
#define SOAP_TYPE_PointerTo_ns1__SetVideoSourceMode (1666)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoSourceMode(struct soap*, const char *, int, _ns1__SetVideoSourceMode *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoSourceMode ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoSourceMode(struct soap*, const char*, _ns1__SetVideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoSourceMode
#define soap_write_PointerTo_ns1__SetVideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoSourceMode(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoSourceMode(soap, data, "ns1:SetVideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceMode ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoSourceMode(struct soap*, _ns1__SetVideoSourceMode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoSourceMode
#define soap_read_PointerTo_ns1__SetVideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoSourceModes
#define SOAP_TYPE_PointerTo_ns1__GetVideoSourceModes (1662)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoSourceModes(struct soap*, const char *, int, _ns1__GetVideoSourceModes *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoSourceModes ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoSourceModes(struct soap*, const char*, _ns1__GetVideoSourceModes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoSourceModes
#define soap_write_PointerTo_ns1__GetVideoSourceModes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoSourceModes(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoSourceModes(soap, data, "ns1:GetVideoSourceModes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoSourceModes ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoSourceModes(struct soap*, _ns1__GetVideoSourceModes **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoSourceModes
#define soap_read_PointerTo_ns1__GetVideoSourceModes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoSourceModes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetSnapshotUri
#define SOAP_TYPE_PointerTo_ns1__GetSnapshotUri (1658)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSnapshotUri(struct soap*, const char *, int, _ns1__GetSnapshotUri *const*, const char *);
SOAP_FMAC3 _ns1__GetSnapshotUri ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSnapshotUri(struct soap*, const char*, _ns1__GetSnapshotUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetSnapshotUri
#define soap_write_PointerTo_ns1__GetSnapshotUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetSnapshotUri(soap, data), 0) || soap_put_PointerTo_ns1__GetSnapshotUri(soap, data, "ns1:GetSnapshotUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetSnapshotUri ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSnapshotUri(struct soap*, _ns1__GetSnapshotUri **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetSnapshotUri
#define soap_read_PointerTo_ns1__GetSnapshotUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetSnapshotUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetSynchronizationPoint
#define SOAP_TYPE_PointerTo_ns1__SetSynchronizationPoint (1654)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSynchronizationPoint(struct soap*, const char *, int, _ns1__SetSynchronizationPoint *const*, const char *);
SOAP_FMAC3 _ns1__SetSynchronizationPoint ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSynchronizationPoint(struct soap*, const char*, _ns1__SetSynchronizationPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetSynchronizationPoint
#define soap_write_PointerTo_ns1__SetSynchronizationPoint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetSynchronizationPoint(soap, data), 0) || soap_put_PointerTo_ns1__SetSynchronizationPoint(soap, data, "ns1:SetSynchronizationPoint", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetSynchronizationPoint ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSynchronizationPoint(struct soap*, _ns1__SetSynchronizationPoint **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetSynchronizationPoint
#define soap_read_PointerTo_ns1__SetSynchronizationPoint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetSynchronizationPoint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__StartStopMulticastStreaming
#define SOAP_TYPE_PointerTons1__StartStopMulticastStreaming (1647)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StartStopMulticastStreaming(struct soap*, ns1__StartStopMulticastStreaming *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StartStopMulticastStreaming(struct soap*, const char *, int, ns1__StartStopMulticastStreaming *const*, const char *);
SOAP_FMAC3 ns1__StartStopMulticastStreaming ** SOAP_FMAC4 soap_in_PointerTons1__StartStopMulticastStreaming(struct soap*, const char*, ns1__StartStopMulticastStreaming **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StartStopMulticastStreaming(struct soap*, ns1__StartStopMulticastStreaming *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__StartStopMulticastStreaming
#define soap_write_PointerTons1__StartStopMulticastStreaming(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__StartStopMulticastStreaming(soap, data), 0) || soap_put_PointerTons1__StartStopMulticastStreaming(soap, data, "ns1:StartStopMulticastStreaming", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StartStopMulticastStreaming ** SOAP_FMAC4 soap_get_PointerTons1__StartStopMulticastStreaming(struct soap*, ns1__StartStopMulticastStreaming **, const char*, const char*);

#ifndef soap_read_PointerTons1__StartStopMulticastStreaming
#define soap_read_PointerTons1__StartStopMulticastStreaming(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__StartStopMulticastStreaming(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetStreamUri
#define SOAP_TYPE_PointerTo_ns1__GetStreamUri (1643)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStreamUri(struct soap*, const char *, int, _ns1__GetStreamUri *const*, const char *);
SOAP_FMAC3 _ns1__GetStreamUri ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStreamUri(struct soap*, const char*, _ns1__GetStreamUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetStreamUri
#define soap_write_PointerTo_ns1__GetStreamUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetStreamUri(soap, data), 0) || soap_put_PointerTo_ns1__GetStreamUri(soap, data, "ns1:GetStreamUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetStreamUri ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStreamUri(struct soap*, _ns1__GetStreamUri **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetStreamUri
#define soap_read_PointerTo_ns1__GetStreamUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetStreamUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetVideoEncoderInstances
#define SOAP_TYPE_PointerTo_ns1__GetVideoEncoderInstances (1639)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVideoEncoderInstances(struct soap*, _ns1__GetVideoEncoderInstances *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVideoEncoderInstances(struct soap*, const char *, int, _ns1__GetVideoEncoderInstances *const*, const char *);
SOAP_FMAC3 _ns1__GetVideoEncoderInstances ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVideoEncoderInstances(struct soap*, const char*, _ns1__GetVideoEncoderInstances **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVideoEncoderInstances(struct soap*, _ns1__GetVideoEncoderInstances *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetVideoEncoderInstances
#define soap_write_PointerTo_ns1__GetVideoEncoderInstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetVideoEncoderInstances(soap, data), 0) || soap_put_PointerTo_ns1__GetVideoEncoderInstances(soap, data, "ns1:GetVideoEncoderInstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetVideoEncoderInstances ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVideoEncoderInstances(struct soap*, _ns1__GetVideoEncoderInstances **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetVideoEncoderInstances
#define soap_read_PointerTo_ns1__GetVideoEncoderInstances(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetVideoEncoderInstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioDecoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioDecoderConfiguration (1614)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, const char *, int, _ns1__SetAudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, const char*, _ns1__SetAudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioDecoderConfiguration
#define soap_write_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data, "ns1:SetAudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioDecoderConfiguration(struct soap*, _ns1__SetAudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioDecoderConfiguration
#define soap_read_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioOutputConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioOutputConfiguration (1610)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, const char *, int, _ns1__SetAudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, const char*, _ns1__SetAudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioOutputConfiguration
#define soap_write_PointerTo_ns1__SetAudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioOutputConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioOutputConfiguration(soap, data, "ns1:SetAudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioOutputConfiguration(struct soap*, _ns1__SetAudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioOutputConfiguration
#define soap_read_PointerTo_ns1__SetAudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetMetadataConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetMetadataConfiguration (1606)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMetadataConfiguration(struct soap*, const char *, int, _ns1__SetMetadataConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetMetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMetadataConfiguration(struct soap*, const char*, _ns1__SetMetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetMetadataConfiguration
#define soap_write_PointerTo_ns1__SetMetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetMetadataConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetMetadataConfiguration(soap, data, "ns1:SetMetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetMetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMetadataConfiguration(struct soap*, _ns1__SetMetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetMetadataConfiguration
#define soap_read_PointerTo_ns1__SetMetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetMetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioEncoderConfiguration (1602)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, const char *, int, _ns1__SetAudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, const char*, _ns1__SetAudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioEncoderConfiguration
#define soap_write_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data, "ns1:SetAudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioEncoderConfiguration(struct soap*, _ns1__SetAudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioEncoderConfiguration
#define soap_read_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetAudioSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetAudioSourceConfiguration (1598)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, const char *, int, _ns1__SetAudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, const char*, _ns1__SetAudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetAudioSourceConfiguration
#define soap_write_PointerTo_ns1__SetAudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetAudioSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetAudioSourceConfiguration(soap, data, "ns1:SetAudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetAudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAudioSourceConfiguration(struct soap*, _ns1__SetAudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetAudioSourceConfiguration
#define soap_read_PointerTo_ns1__SetAudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetAudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoEncoderConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetVideoEncoderConfiguration (1594)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, const char *, int, _ns1__SetVideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, const char*, _ns1__SetVideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoEncoderConfiguration
#define soap_write_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data, "ns1:SetVideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoEncoderConfiguration(struct soap*, _ns1__SetVideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoEncoderConfiguration
#define soap_read_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__SetVideoSourceConfiguration
#define SOAP_TYPE_PointerTo_ns1__SetVideoSourceConfiguration (1589)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, const char *, int, _ns1__SetVideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, const char*, _ns1__SetVideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetVideoSourceConfiguration
#define soap_write_PointerTo_ns1__SetVideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__SetVideoSourceConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__SetVideoSourceConfiguration(soap, data, "ns1:SetVideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetVideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetVideoSourceConfiguration(struct soap*, _ns1__SetVideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetVideoSourceConfiguration
#define soap_read_PointerTo_ns1__SetVideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__SetVideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__GetConfiguration
#define SOAP_TYPE_PointerTons1__GetConfiguration (1564)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GetConfiguration(struct soap*, ns1__GetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GetConfiguration(struct soap*, const char *, int, ns1__GetConfiguration *const*, const char *);
SOAP_FMAC3 ns1__GetConfiguration ** SOAP_FMAC4 soap_in_PointerTons1__GetConfiguration(struct soap*, const char*, ns1__GetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GetConfiguration(struct soap*, ns1__GetConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__GetConfiguration
#define soap_write_PointerTons1__GetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__GetConfiguration(soap, data), 0) || soap_put_PointerTons1__GetConfiguration(soap, data, "ns1:GetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__GetConfiguration ** SOAP_FMAC4 soap_get_PointerTons1__GetConfiguration(struct soap*, ns1__GetConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTons1__GetConfiguration
#define soap_read_PointerTons1__GetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__GetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__DeleteProfile
#define SOAP_TYPE_PointerTo_ns1__DeleteProfile (1560)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeleteProfile(struct soap*, const char *, int, _ns1__DeleteProfile *const*, const char *);
SOAP_FMAC3 _ns1__DeleteProfile ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeleteProfile(struct soap*, const char*, _ns1__DeleteProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DeleteProfile
#define soap_write_PointerTo_ns1__DeleteProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__DeleteProfile(soap, data), 0) || soap_put_PointerTo_ns1__DeleteProfile(soap, data, "ns1:DeleteProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DeleteProfile ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeleteProfile(struct soap*, _ns1__DeleteProfile **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DeleteProfile
#define soap_read_PointerTo_ns1__DeleteProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__DeleteProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__RemoveConfiguration
#define SOAP_TYPE_PointerTo_ns1__RemoveConfiguration (1556)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RemoveConfiguration(struct soap*, _ns1__RemoveConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RemoveConfiguration(struct soap*, const char *, int, _ns1__RemoveConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__RemoveConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__RemoveConfiguration(struct soap*, const char*, _ns1__RemoveConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RemoveConfiguration(struct soap*, _ns1__RemoveConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__RemoveConfiguration
#define soap_write_PointerTo_ns1__RemoveConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__RemoveConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__RemoveConfiguration(soap, data, "ns1:RemoveConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__RemoveConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__RemoveConfiguration(struct soap*, _ns1__RemoveConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__RemoveConfiguration
#define soap_read_PointerTo_ns1__RemoveConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__RemoveConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AddConfiguration
#define SOAP_TYPE_PointerTo_ns1__AddConfiguration (1552)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddConfiguration(struct soap*, _ns1__AddConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddConfiguration(struct soap*, const char *, int, _ns1__AddConfiguration *const*, const char *);
SOAP_FMAC3 _ns1__AddConfiguration ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddConfiguration(struct soap*, const char*, _ns1__AddConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddConfiguration(struct soap*, _ns1__AddConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AddConfiguration
#define soap_write_PointerTo_ns1__AddConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AddConfiguration(soap, data), 0) || soap_put_PointerTo_ns1__AddConfiguration(soap, data, "ns1:AddConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AddConfiguration ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddConfiguration(struct soap*, _ns1__AddConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AddConfiguration
#define soap_read_PointerTo_ns1__AddConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AddConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetProfiles
#define SOAP_TYPE_PointerTo_ns1__GetProfiles (1548)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetProfiles(struct soap*, _ns1__GetProfiles *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetProfiles(struct soap*, const char *, int, _ns1__GetProfiles *const*, const char *);
SOAP_FMAC3 _ns1__GetProfiles ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetProfiles(struct soap*, const char*, _ns1__GetProfiles **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetProfiles(struct soap*, _ns1__GetProfiles *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetProfiles
#define soap_write_PointerTo_ns1__GetProfiles(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetProfiles(soap, data), 0) || soap_put_PointerTo_ns1__GetProfiles(soap, data, "ns1:GetProfiles", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProfiles ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetProfiles(struct soap*, _ns1__GetProfiles **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetProfiles
#define soap_read_PointerTo_ns1__GetProfiles(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetProfiles(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__CreateProfile
#define SOAP_TYPE_PointerTo_ns1__CreateProfile (1544)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateProfile(struct soap*, _ns1__CreateProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateProfile(struct soap*, const char *, int, _ns1__CreateProfile *const*, const char *);
SOAP_FMAC3 _ns1__CreateProfile ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateProfile(struct soap*, const char*, _ns1__CreateProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateProfile(struct soap*, _ns1__CreateProfile *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__CreateProfile
#define soap_write_PointerTo_ns1__CreateProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__CreateProfile(soap, data), 0) || soap_put_PointerTo_ns1__CreateProfile(soap, data, "ns1:CreateProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CreateProfile ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateProfile(struct soap*, _ns1__CreateProfile **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__CreateProfile
#define soap_read_PointerTo_ns1__CreateProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__CreateProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetServiceCapabilities
#define SOAP_TYPE_PointerTo_ns1__GetServiceCapabilities (1540)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetServiceCapabilities(struct soap*, const char *, int, _ns1__GetServiceCapabilities *const*, const char *);
SOAP_FMAC3 _ns1__GetServiceCapabilities ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetServiceCapabilities(struct soap*, const char*, _ns1__GetServiceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetServiceCapabilities
#define soap_write_PointerTo_ns1__GetServiceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetServiceCapabilities(soap, data), 0) || soap_put_PointerTo_ns1__GetServiceCapabilities(soap, data, "ns1:GetServiceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetServiceCapabilities ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetServiceCapabilities(struct soap*, _ns1__GetServiceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetServiceCapabilities
#define soap_read_PointerTo_ns1__GetServiceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetServiceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__NCName
#define SOAP_TYPE_PointerToxsd__NCName (1539)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NCName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NCName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__NCName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NCName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__NCName
#define soap_write_PointerToxsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__NCName(soap, data), 0) || soap_put_PointerToxsd__NCName(soap, data, "xsd:NCName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__NCName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__NCName
#define soap_read_PointerToxsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic (1538)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char *, int, std::vector<_wstop__TopicNamespaceType_Topic >*const*, const char *);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define soap_write_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define soap_read_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__ConcreteTopicExpression
#define SOAP_TYPE_PointerTowstop__ConcreteTopicExpression (1536)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__ConcreteTopicExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowstop__ConcreteTopicExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__ConcreteTopicExpression
#define soap_write_PointerTowstop__ConcreteTopicExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__ConcreteTopicExpression(soap, data), 0) || soap_put_PointerTowstop__ConcreteTopicExpression(soap, data, "wstop:ConcreteTopicExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowstop__ConcreteTopicExpression(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTowstop__ConcreteTopicExpression
#define soap_read_PointerTowstop__ConcreteTopicExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__ConcreteTopicExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (1535)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__QName
#define soap_write_PointerToxsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__QName(soap, data), 0) || soap_put_PointerToxsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__QName
#define soap_read_PointerToxsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__TopicType
#define SOAP_TYPE_PointerTowstop__TopicType (1533)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicType(struct soap*, const char *, int, wstop__TopicType *const*, const char *);
SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicType(struct soap*, const char*, wstop__TopicType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicType(struct soap*, wstop__TopicType *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__TopicType
#define soap_write_PointerTowstop__TopicType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__TopicType(soap, data), 0) || soap_put_PointerTowstop__TopicType(soap, data, "wstop:TopicType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicType(struct soap*, wstop__TopicType **, const char*, const char*);

#ifndef soap_read_PointerTowstop__TopicType
#define soap_read_PointerTowstop__TopicType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__TopicType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__QueryExpressionType
#define SOAP_TYPE_PointerTowstop__QueryExpressionType (1532)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__QueryExpressionType(struct soap*, const char *, int, wstop__QueryExpressionType *const*, const char *);
SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTowstop__QueryExpressionType(struct soap*, const char*, wstop__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__QueryExpressionType
#define soap_write_PointerTowstop__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__QueryExpressionType(soap, data), 0) || soap_put_PointerTowstop__QueryExpressionType(soap, data, "wstop:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTowstop__QueryExpressionType(struct soap*, wstop__QueryExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTowstop__QueryExpressionType
#define soap_read_PointerTowstop__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDConfigurationExtension (1529)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationExtension(struct soap*, const char *, int, tt__OSDConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationExtension(struct soap*, const char*, tt__OSDConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDConfigurationExtension
#define soap_write_PointerTott__OSDConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDConfigurationExtension(soap, data), 0) || soap_put_PointerTott__OSDConfigurationExtension(soap, data, "tt:OSDConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationExtension(struct soap*, tt__OSDConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDConfigurationExtension
#define soap_read_PointerTott__OSDConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDImgConfiguration
#define SOAP_TYPE_PointerTott__OSDImgConfiguration (1528)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgConfiguration(struct soap*, const char *, int, tt__OSDImgConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDImgConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDImgConfiguration(struct soap*, const char*, tt__OSDImgConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDImgConfiguration
#define soap_write_PointerTott__OSDImgConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDImgConfiguration(soap, data), 0) || soap_put_PointerTott__OSDImgConfiguration(soap, data, "tt:OSDImgConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDImgConfiguration(struct soap*, tt__OSDImgConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDImgConfiguration
#define soap_read_PointerTott__OSDImgConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDImgConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDTextConfiguration
#define SOAP_TYPE_PointerTott__OSDTextConfiguration (1527)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextConfiguration(struct soap*, const char *, int, tt__OSDTextConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDTextConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDTextConfiguration(struct soap*, const char*, tt__OSDTextConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDTextConfiguration
#define soap_write_PointerTott__OSDTextConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDTextConfiguration(soap, data), 0) || soap_put_PointerTott__OSDTextConfiguration(soap, data, "tt:OSDTextConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDTextConfiguration(struct soap*, tt__OSDTextConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDTextConfiguration
#define soap_read_PointerTott__OSDTextConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDTextConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDPosConfiguration
#define SOAP_TYPE_PointerTott__OSDPosConfiguration (1526)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDPosConfiguration(struct soap*, const char *, int, tt__OSDPosConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDPosConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDPosConfiguration(struct soap*, const char*, tt__OSDPosConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDPosConfiguration
#define soap_write_PointerTott__OSDPosConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDPosConfiguration(soap, data), 0) || soap_put_PointerTott__OSDPosConfiguration(soap, data, "tt:OSDPosConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDPosConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDPosConfiguration(struct soap*, tt__OSDPosConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDPosConfiguration
#define soap_read_PointerTott__OSDPosConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDPosConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDReference
#define SOAP_TYPE_PointerTott__OSDReference (1525)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDReference(struct soap*, tt__OSDReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDReference(struct soap*, const char *, int, tt__OSDReference *const*, const char *);
SOAP_FMAC3 tt__OSDReference ** SOAP_FMAC4 soap_in_PointerTott__OSDReference(struct soap*, const char*, tt__OSDReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDReference(struct soap*, tt__OSDReference *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDReference
#define soap_write_PointerTott__OSDReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDReference(soap, data), 0) || soap_put_PointerTott__OSDReference(soap, data, "tt:OSDReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDReference ** SOAP_FMAC4 soap_get_PointerTott__OSDReference(struct soap*, tt__OSDReference **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDReference
#define soap_read_PointerTott__OSDReference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataInput
#define SOAP_TYPE_PointerTott__MetadataInput (1524)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataInput(struct soap*, tt__MetadataInput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataInput(struct soap*, const char *, int, tt__MetadataInput *const*, const char *);
SOAP_FMAC3 tt__MetadataInput ** SOAP_FMAC4 soap_in_PointerTott__MetadataInput(struct soap*, const char*, tt__MetadataInput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataInput(struct soap*, tt__MetadataInput *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataInput
#define soap_write_PointerTott__MetadataInput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataInput(soap, data), 0) || soap_put_PointerTott__MetadataInput(soap, data, "tt:MetadataInput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataInput ** SOAP_FMAC4 soap_get_PointerTott__MetadataInput(struct soap*, tt__MetadataInput **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataInput
#define soap_read_PointerTott__MetadataInput(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataInput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SourceIdentification
#define SOAP_TYPE_PointerTott__SourceIdentification (1523)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SourceIdentification(struct soap*, tt__SourceIdentification *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SourceIdentification(struct soap*, const char *, int, tt__SourceIdentification *const*, const char *);
SOAP_FMAC3 tt__SourceIdentification ** SOAP_FMAC4 soap_in_PointerTott__SourceIdentification(struct soap*, const char*, tt__SourceIdentification **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SourceIdentification(struct soap*, tt__SourceIdentification *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SourceIdentification
#define soap_write_PointerTott__SourceIdentification(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SourceIdentification(soap, data), 0) || soap_put_PointerTott__SourceIdentification(soap, data, "tt:SourceIdentification", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SourceIdentification ** SOAP_FMAC4 soap_get_PointerTott__SourceIdentification(struct soap*, tt__SourceIdentification **, const char*, const char*);

#ifndef soap_read_PointerTott__SourceIdentification
#define soap_read_PointerTott__SourceIdentification(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SourceIdentification(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfiguration (1522)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, const char *, int, tt__AnalyticsDeviceEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, const char*, tt__AnalyticsDeviceEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsDeviceEngineConfiguration
#define soap_write_PointerTott__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsDeviceEngineConfiguration(soap, data), 0) || soap_put_PointerTott__AnalyticsDeviceEngineConfiguration(soap, data, "tt:AnalyticsDeviceEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceEngineConfiguration(struct soap*, tt__AnalyticsDeviceEngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsDeviceEngineConfiguration
#define soap_read_PointerTott__AnalyticsDeviceEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsDeviceEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension (1521)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension(struct soap*, const char *, int, tt__PTZConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension(struct soap*, const char*, tt__PTZConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZConfigurationExtension
#define soap_write_PointerTott__PTZConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZConfigurationExtension(soap, data), 0) || soap_put_PointerTott__PTZConfigurationExtension(soap, data, "tt:PTZConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension(struct soap*, tt__PTZConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZConfigurationExtension
#define soap_read_PointerTott__PTZConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ZoomLimits
#define SOAP_TYPE_PointerTott__ZoomLimits (1520)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ZoomLimits(struct soap*, const char *, int, tt__ZoomLimits *const*, const char *);
SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_in_PointerTott__ZoomLimits(struct soap*, const char*, tt__ZoomLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ZoomLimits
#define soap_write_PointerTott__ZoomLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ZoomLimits(soap, data), 0) || soap_put_PointerTott__ZoomLimits(soap, data, "tt:ZoomLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ZoomLimits ** SOAP_FMAC4 soap_get_PointerTott__ZoomLimits(struct soap*, tt__ZoomLimits **, const char*, const char*);

#ifndef soap_read_PointerTott__ZoomLimits
#define soap_read_PointerTott__ZoomLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ZoomLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PanTiltLimits
#define SOAP_TYPE_PointerTott__PanTiltLimits (1519)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PanTiltLimits(struct soap*, const char *, int, tt__PanTiltLimits *const*, const char *);
SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_in_PointerTott__PanTiltLimits(struct soap*, const char*, tt__PanTiltLimits **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PanTiltLimits
#define soap_write_PointerTott__PanTiltLimits(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PanTiltLimits(soap, data), 0) || soap_put_PointerTott__PanTiltLimits(soap, data, "tt:PanTiltLimits", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PanTiltLimits ** SOAP_FMAC4 soap_get_PointerTott__PanTiltLimits(struct soap*, tt__PanTiltLimits **, const char*, const char*);

#ifndef soap_read_PointerTott__PanTiltLimits
#define soap_read_PointerTott__PanTiltLimits(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PanTiltLimits(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension
#define SOAP_TYPE_PointerTott__PTZNodeExtension (1518)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension(struct soap*, const char *, int, tt__PTZNodeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension(struct soap*, const char*, tt__PTZNodeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZNodeExtension
#define soap_write_PointerTott__PTZNodeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZNodeExtension(soap, data), 0) || soap_put_PointerTott__PTZNodeExtension(soap, data, "tt:PTZNodeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZNodeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension(struct soap*, tt__PTZNodeExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZNodeExtension
#define soap_read_PointerTott__PTZNodeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZNodeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DigitalIdleState
#define SOAP_TYPE_PointerTott__DigitalIdleState (1517)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DigitalIdleState(struct soap*, const char *, int, enum tt__DigitalIdleState *const*, const char *);
SOAP_FMAC3 enum tt__DigitalIdleState ** SOAP_FMAC4 soap_in_PointerTott__DigitalIdleState(struct soap*, const char*, enum tt__DigitalIdleState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DigitalIdleState(struct soap*, enum tt__DigitalIdleState *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DigitalIdleState
#define soap_write_PointerTott__DigitalIdleState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DigitalIdleState(soap, data), 0) || soap_put_PointerTott__DigitalIdleState(soap, data, "tt:DigitalIdleState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__DigitalIdleState ** SOAP_FMAC4 soap_get_PointerTott__DigitalIdleState(struct soap*, enum tt__DigitalIdleState **, const char*, const char*);

#ifndef soap_read_PointerTott__DigitalIdleState
#define soap_read_PointerTott__DigitalIdleState(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DigitalIdleState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RelayOutputSettings
#define SOAP_TYPE_PointerTott__RelayOutputSettings (1516)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelayOutputSettings(struct soap*, const char *, int, tt__RelayOutputSettings *const*, const char *);
SOAP_FMAC3 tt__RelayOutputSettings ** SOAP_FMAC4 soap_in_PointerTott__RelayOutputSettings(struct soap*, const char*, tt__RelayOutputSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RelayOutputSettings
#define soap_write_PointerTott__RelayOutputSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RelayOutputSettings(soap, data), 0) || soap_put_PointerTott__RelayOutputSettings(soap, data, "tt:RelayOutputSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelayOutputSettings ** SOAP_FMAC4 soap_get_PointerTott__RelayOutputSettings(struct soap*, tt__RelayOutputSettings **, const char*, const char*);

#ifndef soap_read_PointerTott__RelayOutputSettings
#define soap_read_PointerTott__RelayOutputSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RelayOutputSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension (1515)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceExtension(struct soap*, const char *, int, tt__NetworkInterfaceExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceExtension(struct soap*, const char*, tt__NetworkInterfaceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceExtension
#define soap_write_PointerTott__NetworkInterfaceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceExtension(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceExtension(soap, data, "tt:NetworkInterfaceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceExtension(struct soap*, tt__NetworkInterfaceExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceExtension
#define soap_read_PointerTott__NetworkInterfaceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterface
#define SOAP_TYPE_PointerTott__IPv6NetworkInterface (1514)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6NetworkInterface(struct soap*, const char *, int, tt__IPv6NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__IPv6NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__IPv6NetworkInterface(struct soap*, const char*, tt__IPv6NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv6NetworkInterface
#define soap_write_PointerTott__IPv6NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv6NetworkInterface(soap, data), 0) || soap_put_PointerTott__IPv6NetworkInterface(soap, data, "tt:IPv6NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__IPv6NetworkInterface(struct soap*, tt__IPv6NetworkInterface **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv6NetworkInterface
#define soap_read_PointerTott__IPv6NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv6NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterface
#define SOAP_TYPE_PointerTott__IPv4NetworkInterface (1513)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4NetworkInterface(struct soap*, const char *, int, tt__IPv4NetworkInterface *const*, const char *);
SOAP_FMAC3 tt__IPv4NetworkInterface ** SOAP_FMAC4 soap_in_PointerTott__IPv4NetworkInterface(struct soap*, const char*, tt__IPv4NetworkInterface **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv4NetworkInterface
#define soap_write_PointerTott__IPv4NetworkInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv4NetworkInterface(soap, data), 0) || soap_put_PointerTott__IPv4NetworkInterface(soap, data, "tt:IPv4NetworkInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4NetworkInterface ** SOAP_FMAC4 soap_get_PointerTott__IPv4NetworkInterface(struct soap*, tt__IPv4NetworkInterface **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv4NetworkInterface
#define soap_read_PointerTott__IPv4NetworkInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv4NetworkInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceLink
#define SOAP_TYPE_PointerTott__NetworkInterfaceLink (1512)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceLink(struct soap*, const char *, int, tt__NetworkInterfaceLink *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceLink ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceLink(struct soap*, const char*, tt__NetworkInterfaceLink **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceLink
#define soap_write_PointerTott__NetworkInterfaceLink(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceLink(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceLink(soap, data, "tt:NetworkInterfaceLink", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceLink ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceLink(struct soap*, tt__NetworkInterfaceLink **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceLink
#define soap_read_PointerTott__NetworkInterfaceLink(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceLink(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceInfo
#define SOAP_TYPE_PointerTott__NetworkInterfaceInfo (1511)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceInfo(struct soap*, const char *, int, tt__NetworkInterfaceInfo *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceInfo ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceInfo(struct soap*, const char*, tt__NetworkInterfaceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceInfo
#define soap_write_PointerTott__NetworkInterfaceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceInfo(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceInfo(soap, data, "tt:NetworkInterfaceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceInfo ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceInfo(struct soap*, tt__NetworkInterfaceInfo **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceInfo
#define soap_read_PointerTott__NetworkInterfaceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoOutputExtension
#define SOAP_TYPE_PointerTott__VideoOutputExtension (1510)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoOutputExtension(struct soap*, tt__VideoOutputExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoOutputExtension(struct soap*, const char *, int, tt__VideoOutputExtension *const*, const char *);
SOAP_FMAC3 tt__VideoOutputExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoOutputExtension(struct soap*, const char*, tt__VideoOutputExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoOutputExtension(struct soap*, tt__VideoOutputExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoOutputExtension
#define soap_write_PointerTott__VideoOutputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoOutputExtension(soap, data), 0) || soap_put_PointerTott__VideoOutputExtension(soap, data, "tt:VideoOutputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoOutputExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoOutputExtension(struct soap*, tt__VideoOutputExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoOutputExtension
#define soap_read_PointerTott__VideoOutputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoOutputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Layout
#define SOAP_TYPE_PointerTott__Layout (1509)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Layout(struct soap*, tt__Layout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Layout(struct soap*, const char *, int, tt__Layout *const*, const char *);
SOAP_FMAC3 tt__Layout ** SOAP_FMAC4 soap_in_PointerTott__Layout(struct soap*, const char*, tt__Layout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Layout(struct soap*, tt__Layout *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Layout
#define soap_write_PointerTott__Layout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Layout(soap, data), 0) || soap_put_PointerTott__Layout(soap, data, "tt:Layout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Layout ** SOAP_FMAC4 soap_get_PointerTott__Layout(struct soap*, tt__Layout **, const char*, const char*);

#ifndef soap_read_PointerTott__Layout
#define soap_read_PointerTott__Layout(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Layout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationExtension
#define SOAP_TYPE_PointerTott__MetadataConfigurationExtension (1508)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationExtension(struct soap*, const char *, int, tt__MetadataConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationExtension(struct soap*, const char*, tt__MetadataConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataConfigurationExtension
#define soap_write_PointerTott__MetadataConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataConfigurationExtension(soap, data), 0) || soap_put_PointerTott__MetadataConfigurationExtension(soap, data, "tt:MetadataConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationExtension(struct soap*, tt__MetadataConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataConfigurationExtension
#define soap_read_PointerTott__MetadataConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EventSubscription
#define SOAP_TYPE_PointerTott__EventSubscription (1507)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventSubscription(struct soap*, tt__EventSubscription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventSubscription(struct soap*, const char *, int, tt__EventSubscription *const*, const char *);
SOAP_FMAC3 tt__EventSubscription ** SOAP_FMAC4 soap_in_PointerTott__EventSubscription(struct soap*, const char*, tt__EventSubscription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventSubscription(struct soap*, tt__EventSubscription *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EventSubscription
#define soap_write_PointerTott__EventSubscription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EventSubscription(soap, data), 0) || soap_put_PointerTott__EventSubscription(soap, data, "tt:EventSubscription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EventSubscription ** SOAP_FMAC4 soap_get_PointerTott__EventSubscription(struct soap*, tt__EventSubscription **, const char*, const char*);

#ifndef soap_read_PointerTott__EventSubscription
#define soap_read_PointerTott__EventSubscription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EventSubscription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZFilter
#define SOAP_TYPE_PointerTott__PTZFilter (1506)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZFilter(struct soap*, tt__PTZFilter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZFilter(struct soap*, const char *, int, tt__PTZFilter *const*, const char *);
SOAP_FMAC3 tt__PTZFilter ** SOAP_FMAC4 soap_in_PointerTott__PTZFilter(struct soap*, const char*, tt__PTZFilter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZFilter(struct soap*, tt__PTZFilter *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZFilter
#define soap_write_PointerTott__PTZFilter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZFilter(soap, data), 0) || soap_put_PointerTott__PTZFilter(soap, data, "tt:PTZFilter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZFilter ** SOAP_FMAC4 soap_get_PointerTott__PTZFilter(struct soap*, tt__PTZFilter **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZFilter
#define soap_read_PointerTott__PTZFilter(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZFilter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RuleEngineConfiguration
#define SOAP_TYPE_PointerTott__RuleEngineConfiguration (1505)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RuleEngineConfiguration(struct soap*, const char *, int, tt__RuleEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__RuleEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RuleEngineConfiguration(struct soap*, const char*, tt__RuleEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RuleEngineConfiguration
#define soap_write_PointerTott__RuleEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RuleEngineConfiguration(soap, data), 0) || soap_put_PointerTott__RuleEngineConfiguration(soap, data, "tt:RuleEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RuleEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RuleEngineConfiguration(struct soap*, tt__RuleEngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__RuleEngineConfiguration
#define soap_read_PointerTott__RuleEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RuleEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfiguration (1504)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineConfiguration(struct soap*, const char *, int, tt__AnalyticsEngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineConfiguration(struct soap*, const char*, tt__AnalyticsEngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsEngineConfiguration
#define soap_write_PointerTott__AnalyticsEngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsEngineConfiguration(soap, data), 0) || soap_put_PointerTott__AnalyticsEngineConfiguration(soap, data, "tt:AnalyticsEngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineConfiguration(struct soap*, tt__AnalyticsEngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsEngineConfiguration
#define soap_read_PointerTott__AnalyticsEngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsEngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoRateControl2
#define SOAP_TYPE_PointerTott__VideoRateControl2 (1503)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoRateControl2(struct soap*, tt__VideoRateControl2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoRateControl2(struct soap*, const char *, int, tt__VideoRateControl2 *const*, const char *);
SOAP_FMAC3 tt__VideoRateControl2 ** SOAP_FMAC4 soap_in_PointerTott__VideoRateControl2(struct soap*, const char*, tt__VideoRateControl2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoRateControl2(struct soap*, tt__VideoRateControl2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoRateControl2
#define soap_write_PointerTott__VideoRateControl2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoRateControl2(soap, data), 0) || soap_put_PointerTott__VideoRateControl2(soap, data, "tt:VideoRateControl2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoRateControl2 ** SOAP_FMAC4 soap_get_PointerTott__VideoRateControl2(struct soap*, tt__VideoRateControl2 **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoRateControl2
#define soap_read_PointerTott__VideoRateControl2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoRateControl2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MulticastConfiguration
#define SOAP_TYPE_PointerTott__MulticastConfiguration (1502)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MulticastConfiguration(struct soap*, const char *, int, tt__MulticastConfiguration *const*, const char *);
SOAP_FMAC3 tt__MulticastConfiguration ** SOAP_FMAC4 soap_in_PointerTott__MulticastConfiguration(struct soap*, const char*, tt__MulticastConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MulticastConfiguration
#define soap_write_PointerTott__MulticastConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MulticastConfiguration(soap, data), 0) || soap_put_PointerTott__MulticastConfiguration(soap, data, "tt:MulticastConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MulticastConfiguration ** SOAP_FMAC4 soap_get_PointerTott__MulticastConfiguration(struct soap*, tt__MulticastConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__MulticastConfiguration
#define soap_read_PointerTott__MulticastConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MulticastConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__H264Configuration
#define SOAP_TYPE_PointerTott__H264Configuration (1501)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Configuration(struct soap*, tt__H264Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Configuration(struct soap*, const char *, int, tt__H264Configuration *const*, const char *);
SOAP_FMAC3 tt__H264Configuration ** SOAP_FMAC4 soap_in_PointerTott__H264Configuration(struct soap*, const char*, tt__H264Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Configuration(struct soap*, tt__H264Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__H264Configuration
#define soap_write_PointerTott__H264Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__H264Configuration(soap, data), 0) || soap_put_PointerTott__H264Configuration(soap, data, "tt:H264Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Configuration ** SOAP_FMAC4 soap_get_PointerTott__H264Configuration(struct soap*, tt__H264Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__H264Configuration
#define soap_read_PointerTott__H264Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__H264Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Mpeg4Configuration
#define SOAP_TYPE_PointerTott__Mpeg4Configuration (1500)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Configuration(struct soap*, const char *, int, tt__Mpeg4Configuration *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Configuration ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Configuration(struct soap*, const char*, tt__Mpeg4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Mpeg4Configuration
#define soap_write_PointerTott__Mpeg4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Mpeg4Configuration(soap, data), 0) || soap_put_PointerTott__Mpeg4Configuration(soap, data, "tt:Mpeg4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Configuration ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Configuration(struct soap*, tt__Mpeg4Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__Mpeg4Configuration
#define soap_read_PointerTott__Mpeg4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Mpeg4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoRateControl
#define SOAP_TYPE_PointerTott__VideoRateControl (1499)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoRateControl(struct soap*, const char *, int, tt__VideoRateControl *const*, const char *);
SOAP_FMAC3 tt__VideoRateControl ** SOAP_FMAC4 soap_in_PointerTott__VideoRateControl(struct soap*, const char*, tt__VideoRateControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoRateControl
#define soap_write_PointerTott__VideoRateControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoRateControl(soap, data), 0) || soap_put_PointerTott__VideoRateControl(soap, data, "tt:VideoRateControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoRateControl ** SOAP_FMAC4 soap_get_PointerTott__VideoRateControl(struct soap*, tt__VideoRateControl **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoRateControl
#define soap_read_PointerTott__VideoRateControl(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoRateControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension (1498)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationExtension(struct soap*, const char *, int, tt__VideoSourceConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationExtension(struct soap*, const char*, tt__VideoSourceConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceConfigurationExtension
#define soap_write_PointerTott__VideoSourceConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceConfigurationExtension(soap, data), 0) || soap_put_PointerTott__VideoSourceConfigurationExtension(soap, data, "tt:VideoSourceConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationExtension(struct soap*, tt__VideoSourceConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceConfigurationExtension
#define soap_read_PointerTott__VideoSourceConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IntRectangle
#define SOAP_TYPE_PointerTott__IntRectangle (1497)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRectangle(struct soap*, tt__IntRectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRectangle(struct soap*, const char *, int, tt__IntRectangle *const*, const char *);
SOAP_FMAC3 tt__IntRectangle ** SOAP_FMAC4 soap_in_PointerTott__IntRectangle(struct soap*, const char*, tt__IntRectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRectangle(struct soap*, tt__IntRectangle *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IntRectangle
#define soap_write_PointerTott__IntRectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IntRectangle(soap, data), 0) || soap_put_PointerTott__IntRectangle(soap, data, "tt:IntRectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntRectangle ** SOAP_FMAC4 soap_get_PointerTott__IntRectangle(struct soap*, tt__IntRectangle **, const char*, const char*);

#ifndef soap_read_PointerTott__IntRectangle
#define soap_read_PointerTott__IntRectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IntRectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension
#define SOAP_TYPE_PointerTott__VideoSourceExtension (1496)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceExtension(struct soap*, const char *, int, tt__VideoSourceExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceExtension(struct soap*, const char*, tt__VideoSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceExtension
#define soap_write_PointerTott__VideoSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceExtension(soap, data), 0) || soap_put_PointerTott__VideoSourceExtension(soap, data, "tt:VideoSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceExtension(struct soap*, tt__VideoSourceExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceExtension
#define soap_read_PointerTott__VideoSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettings
#define SOAP_TYPE_PointerTott__ImagingSettings (1495)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettings(struct soap*, const char *, int, tt__ImagingSettings *const*, const char *);
SOAP_FMAC3 tt__ImagingSettings ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettings(struct soap*, const char*, tt__ImagingSettings **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettings
#define soap_write_PointerTott__ImagingSettings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettings(soap, data), 0) || soap_put_PointerTott__ImagingSettings(soap, data, "tt:ImagingSettings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettings ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettings(struct soap*, tt__ImagingSettings **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettings
#define soap_read_PointerTott__ImagingSettings(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__MaskOptions
#define SOAP_TYPE_PointerTons1__MaskOptions (1494)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MaskOptions(struct soap*, ns1__MaskOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MaskOptions(struct soap*, const char *, int, ns1__MaskOptions *const*, const char *);
SOAP_FMAC3 ns1__MaskOptions ** SOAP_FMAC4 soap_in_PointerTons1__MaskOptions(struct soap*, const char*, ns1__MaskOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MaskOptions(struct soap*, ns1__MaskOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__MaskOptions
#define soap_write_PointerTons1__MaskOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__MaskOptions(soap, data), 0) || soap_put_PointerTons1__MaskOptions(soap, data, "ns1:MaskOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__MaskOptions ** SOAP_FMAC4 soap_get_PointerTons1__MaskOptions(struct soap*, ns1__MaskOptions **, const char*, const char*);

#ifndef soap_read_PointerTons1__MaskOptions
#define soap_read_PointerTons1__MaskOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__MaskOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Mask
#define SOAP_TYPE_PointerTons1__Mask (1492)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Mask(struct soap*, ns1__Mask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Mask(struct soap*, const char *, int, ns1__Mask *const*, const char *);
SOAP_FMAC3 ns1__Mask ** SOAP_FMAC4 soap_in_PointerTons1__Mask(struct soap*, const char*, ns1__Mask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Mask(struct soap*, ns1__Mask *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Mask
#define soap_write_PointerTons1__Mask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__Mask(soap, data), 0) || soap_put_PointerTons1__Mask(soap, data, "ns1:Mask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Mask ** SOAP_FMAC4 soap_get_PointerTons1__Mask(struct soap*, ns1__Mask **, const char*, const char*);

#ifndef soap_read_PointerTons1__Mask
#define soap_read_PointerTons1__Mask(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Mask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptions
#define SOAP_TYPE_PointerTott__OSDConfigurationOptions (1491)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationOptions(struct soap*, const char *, int, tt__OSDConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationOptions(struct soap*, const char*, tt__OSDConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDConfigurationOptions
#define soap_write_PointerTott__OSDConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDConfigurationOptions(soap, data), 0) || soap_put_PointerTott__OSDConfigurationOptions(soap, data, "tt:OSDConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationOptions(struct soap*, tt__OSDConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDConfigurationOptions
#define soap_read_PointerTott__OSDConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDConfiguration
#define SOAP_TYPE_PointerTott__OSDConfiguration (1489)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfiguration(struct soap*, const char *, int, tt__OSDConfiguration *const*, const char *);
SOAP_FMAC3 tt__OSDConfiguration ** SOAP_FMAC4 soap_in_PointerTott__OSDConfiguration(struct soap*, const char*, tt__OSDConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDConfiguration
#define soap_write_PointerTott__OSDConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDConfiguration(soap, data), 0) || soap_put_PointerTott__OSDConfiguration(soap, data, "tt:OSDConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfiguration ** SOAP_FMAC4 soap_get_PointerTott__OSDConfiguration(struct soap*, tt__OSDConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDConfiguration
#define soap_read_PointerTott__OSDConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__VideoSourceMode
#define SOAP_TYPE_PointerTons1__VideoSourceMode (1487)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VideoSourceMode(struct soap*, ns1__VideoSourceMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VideoSourceMode(struct soap*, const char *, int, ns1__VideoSourceMode *const*, const char *);
SOAP_FMAC3 ns1__VideoSourceMode ** SOAP_FMAC4 soap_in_PointerTons1__VideoSourceMode(struct soap*, const char*, ns1__VideoSourceMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VideoSourceMode(struct soap*, ns1__VideoSourceMode *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__VideoSourceMode
#define soap_write_PointerTons1__VideoSourceMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__VideoSourceMode(soap, data), 0) || soap_put_PointerTons1__VideoSourceMode(soap, data, "ns1:VideoSourceMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__VideoSourceMode ** SOAP_FMAC4 soap_get_PointerTons1__VideoSourceMode(struct soap*, ns1__VideoSourceMode **, const char*, const char*);

#ifndef soap_read_PointerTons1__VideoSourceMode
#define soap_read_PointerTons1__VideoSourceMode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__VideoSourceMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__EncoderInstanceInfo
#define SOAP_TYPE_PointerTons1__EncoderInstanceInfo (1486)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EncoderInstanceInfo(struct soap*, ns1__EncoderInstanceInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EncoderInstanceInfo(struct soap*, const char *, int, ns1__EncoderInstanceInfo *const*, const char *);
SOAP_FMAC3 ns1__EncoderInstanceInfo ** SOAP_FMAC4 soap_in_PointerTons1__EncoderInstanceInfo(struct soap*, const char*, ns1__EncoderInstanceInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EncoderInstanceInfo(struct soap*, ns1__EncoderInstanceInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__EncoderInstanceInfo
#define soap_write_PointerTons1__EncoderInstanceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__EncoderInstanceInfo(soap, data), 0) || soap_put_PointerTons1__EncoderInstanceInfo(soap, data, "ns1:EncoderInstanceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__EncoderInstanceInfo ** SOAP_FMAC4 soap_get_PointerTons1__EncoderInstanceInfo(struct soap*, ns1__EncoderInstanceInfo **, const char*, const char*);

#ifndef soap_read_PointerTons1__EncoderInstanceInfo
#define soap_read_PointerTons1__EncoderInstanceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__EncoderInstanceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioOutputConfigurationOptions (1485)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutputConfigurationOptions(struct soap*, const char *, int, tt__AudioOutputConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioOutputConfigurationOptions(struct soap*, const char*, tt__AudioOutputConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioOutputConfigurationOptions
#define soap_write_PointerTott__AudioOutputConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioOutputConfigurationOptions(soap, data), 0) || soap_put_PointerTott__AudioOutputConfigurationOptions(soap, data, "tt:AudioOutputConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioOutputConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioOutputConfigurationOptions(struct soap*, tt__AudioOutputConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioOutputConfigurationOptions
#define soap_read_PointerTott__AudioOutputConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioOutputConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptions
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptions (1484)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptions(struct soap*, const char *, int, tt__MetadataConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptions(struct soap*, const char*, tt__MetadataConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataConfigurationOptions
#define soap_write_PointerTott__MetadataConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataConfigurationOptions(soap, data), 0) || soap_put_PointerTott__MetadataConfigurationOptions(soap, data, "tt:MetadataConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptions(struct soap*, tt__MetadataConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataConfigurationOptions
#define soap_read_PointerTott__MetadataConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioEncoder2ConfigurationOptions (1482)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoder2ConfigurationOptions(struct soap*, tt__AudioEncoder2ConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoder2ConfigurationOptions(struct soap*, const char *, int, tt__AudioEncoder2ConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioEncoder2ConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoder2ConfigurationOptions(struct soap*, const char*, tt__AudioEncoder2ConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoder2ConfigurationOptions(struct soap*, tt__AudioEncoder2ConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioEncoder2ConfigurationOptions
#define soap_write_PointerTott__AudioEncoder2ConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioEncoder2ConfigurationOptions(soap, data), 0) || soap_put_PointerTott__AudioEncoder2ConfigurationOptions(soap, data, "tt:AudioEncoder2ConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoder2ConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoder2ConfigurationOptions(struct soap*, tt__AudioEncoder2ConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioEncoder2ConfigurationOptions
#define soap_read_PointerTott__AudioEncoder2ConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioEncoder2ConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioSourceConfigurationOptions (1481)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceConfigurationOptions(struct soap*, const char *, int, tt__AudioSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceConfigurationOptions(struct soap*, const char*, tt__AudioSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioSourceConfigurationOptions
#define soap_write_PointerTott__AudioSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioSourceConfigurationOptions(soap, data), 0) || soap_put_PointerTott__AudioSourceConfigurationOptions(soap, data, "tt:AudioSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceConfigurationOptions(struct soap*, tt__AudioSourceConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioSourceConfigurationOptions
#define soap_read_PointerTott__AudioSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoEncoder2ConfigurationOptions (1479)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoder2ConfigurationOptions(struct soap*, tt__VideoEncoder2ConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoder2ConfigurationOptions(struct soap*, const char *, int, tt__VideoEncoder2ConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoEncoder2ConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoder2ConfigurationOptions(struct soap*, const char*, tt__VideoEncoder2ConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoder2ConfigurationOptions(struct soap*, tt__VideoEncoder2ConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoEncoder2ConfigurationOptions
#define soap_write_PointerTott__VideoEncoder2ConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoEncoder2ConfigurationOptions(soap, data), 0) || soap_put_PointerTott__VideoEncoder2ConfigurationOptions(soap, data, "tt:VideoEncoder2ConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoder2ConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoder2ConfigurationOptions(struct soap*, tt__VideoEncoder2ConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoEncoder2ConfigurationOptions
#define soap_read_PointerTott__VideoEncoder2ConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoEncoder2ConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptions (1478)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptions(struct soap*, const char *, int, tt__VideoSourceConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptions(struct soap*, const char*, tt__VideoSourceConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceConfigurationOptions
#define soap_write_PointerTott__VideoSourceConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceConfigurationOptions(soap, data), 0) || soap_put_PointerTott__VideoSourceConfigurationOptions(soap, data, "tt:VideoSourceConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptions(struct soap*, tt__VideoSourceConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceConfigurationOptions
#define soap_read_PointerTott__VideoSourceConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__MediaProfile
#define SOAP_TYPE_PointerTons1__MediaProfile (1468)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaProfile(struct soap*, ns1__MediaProfile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaProfile(struct soap*, const char *, int, ns1__MediaProfile *const*, const char *);
SOAP_FMAC3 ns1__MediaProfile ** SOAP_FMAC4 soap_in_PointerTons1__MediaProfile(struct soap*, const char*, ns1__MediaProfile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaProfile(struct soap*, ns1__MediaProfile *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__MediaProfile
#define soap_write_PointerTons1__MediaProfile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__MediaProfile(soap, data), 0) || soap_put_PointerTons1__MediaProfile(soap, data, "ns1:MediaProfile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__MediaProfile ** SOAP_FMAC4 soap_get_PointerTons1__MediaProfile(struct soap*, ns1__MediaProfile **, const char*, const char*);

#ifndef soap_read_PointerTons1__MediaProfile
#define soap_read_PointerTons1__MediaProfile(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__MediaProfile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ConfigurationRef
#define SOAP_TYPE_PointerTons1__ConfigurationRef (1466)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ConfigurationRef(struct soap*, ns1__ConfigurationRef *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ConfigurationRef(struct soap*, const char *, int, ns1__ConfigurationRef *const*, const char *);
SOAP_FMAC3 ns1__ConfigurationRef ** SOAP_FMAC4 soap_in_PointerTons1__ConfigurationRef(struct soap*, const char*, ns1__ConfigurationRef **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ConfigurationRef(struct soap*, ns1__ConfigurationRef *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ConfigurationRef
#define soap_write_PointerTons1__ConfigurationRef(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ConfigurationRef(soap, data), 0) || soap_put_PointerTons1__ConfigurationRef(soap, data, "ns1:ConfigurationRef", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ConfigurationRef ** SOAP_FMAC4 soap_get_PointerTons1__ConfigurationRef(struct soap*, ns1__ConfigurationRef **, const char*, const char*);

#ifndef soap_read_PointerTons1__ConfigurationRef
#define soap_read_PointerTons1__ConfigurationRef(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ConfigurationRef(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Capabilities2
#define SOAP_TYPE_PointerTons1__Capabilities2 (1465)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Capabilities2(struct soap*, ns1__Capabilities2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Capabilities2(struct soap*, const char *, int, ns1__Capabilities2 *const*, const char *);
SOAP_FMAC3 ns1__Capabilities2 ** SOAP_FMAC4 soap_in_PointerTons1__Capabilities2(struct soap*, const char*, ns1__Capabilities2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Capabilities2(struct soap*, ns1__Capabilities2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Capabilities2
#define soap_write_PointerTons1__Capabilities2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__Capabilities2(soap, data), 0) || soap_put_PointerTons1__Capabilities2(soap, data, "ns1:Capabilities2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__Capabilities2 ** SOAP_FMAC4 soap_get_PointerTons1__Capabilities2(struct soap*, ns1__Capabilities2 **, const char*, const char*);

#ifndef soap_read_PointerTons1__Capabilities2
#define soap_read_PointerTons1__Capabilities2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Capabilities2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Description
#define SOAP_TYPE_PointerTott__Description (1464)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Description(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Description(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Description(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Description(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Description
#define soap_write_PointerTott__Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Description(soap, data), 0) || soap_put_PointerTott__Description(soap, data, "tt:Description", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Description(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__Description
#define soap_read_PointerTott__Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__EncoderInstance
#define SOAP_TYPE_PointerTons1__EncoderInstance (1462)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EncoderInstance(struct soap*, ns1__EncoderInstance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EncoderInstance(struct soap*, const char *, int, ns1__EncoderInstance *const*, const char *);
SOAP_FMAC3 ns1__EncoderInstance ** SOAP_FMAC4 soap_in_PointerTons1__EncoderInstance(struct soap*, const char*, ns1__EncoderInstance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EncoderInstance(struct soap*, ns1__EncoderInstance *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__EncoderInstance
#define soap_write_PointerTons1__EncoderInstance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__EncoderInstance(soap, data), 0) || soap_put_PointerTons1__EncoderInstance(soap, data, "ns1:EncoderInstance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__EncoderInstance ** SOAP_FMAC4 soap_get_PointerTons1__EncoderInstance(struct soap*, ns1__EncoderInstance **, const char*, const char*);

#ifndef soap_read_PointerTons1__EncoderInstance
#define soap_read_PointerTons1__EncoderInstance(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__EncoderInstance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ConfigurationSet
#define SOAP_TYPE_PointerTons1__ConfigurationSet (1461)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ConfigurationSet(struct soap*, ns1__ConfigurationSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ConfigurationSet(struct soap*, const char *, int, ns1__ConfigurationSet *const*, const char *);
SOAP_FMAC3 ns1__ConfigurationSet ** SOAP_FMAC4 soap_in_PointerTons1__ConfigurationSet(struct soap*, const char*, ns1__ConfigurationSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ConfigurationSet(struct soap*, ns1__ConfigurationSet *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ConfigurationSet
#define soap_write_PointerTons1__ConfigurationSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ConfigurationSet(soap, data), 0) || soap_put_PointerTons1__ConfigurationSet(soap, data, "ns1:ConfigurationSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ConfigurationSet ** SOAP_FMAC4 soap_get_PointerTons1__ConfigurationSet(struct soap*, ns1__ConfigurationSet **, const char*, const char*);

#ifndef soap_read_PointerTons1__ConfigurationSet
#define soap_read_PointerTons1__ConfigurationSet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ConfigurationSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioEncoder2Configuration
#define SOAP_TYPE_PointerTott__AudioEncoder2Configuration (1460)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoder2Configuration(struct soap*, tt__AudioEncoder2Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoder2Configuration(struct soap*, const char *, int, tt__AudioEncoder2Configuration *const*, const char *);
SOAP_FMAC3 tt__AudioEncoder2Configuration ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoder2Configuration(struct soap*, const char*, tt__AudioEncoder2Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoder2Configuration(struct soap*, tt__AudioEncoder2Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioEncoder2Configuration
#define soap_write_PointerTott__AudioEncoder2Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioEncoder2Configuration(soap, data), 0) || soap_put_PointerTott__AudioEncoder2Configuration(soap, data, "tt:AudioEncoder2Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoder2Configuration ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoder2Configuration(struct soap*, tt__AudioEncoder2Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioEncoder2Configuration
#define soap_read_PointerTott__AudioEncoder2Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioEncoder2Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoEncoder2Configuration
#define SOAP_TYPE_PointerTott__VideoEncoder2Configuration (1459)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoder2Configuration(struct soap*, tt__VideoEncoder2Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoder2Configuration(struct soap*, const char *, int, tt__VideoEncoder2Configuration *const*, const char *);
SOAP_FMAC3 tt__VideoEncoder2Configuration ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoder2Configuration(struct soap*, const char*, tt__VideoEncoder2Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoder2Configuration(struct soap*, tt__VideoEncoder2Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoEncoder2Configuration
#define soap_write_PointerTott__VideoEncoder2Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoEncoder2Configuration(soap, data), 0) || soap_put_PointerTott__VideoEncoder2Configuration(soap, data, "tt:VideoEncoder2Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoder2Configuration ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoder2Configuration(struct soap*, tt__VideoEncoder2Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoEncoder2Configuration
#define soap_read_PointerTott__VideoEncoder2Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoEncoder2Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__StreamingCapabilities
#define SOAP_TYPE_PointerTons1__StreamingCapabilities (1458)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StreamingCapabilities(struct soap*, const char *, int, ns1__StreamingCapabilities *const*, const char *);
SOAP_FMAC3 ns1__StreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTons1__StreamingCapabilities(struct soap*, const char*, ns1__StreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__StreamingCapabilities
#define soap_write_PointerTons1__StreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__StreamingCapabilities(soap, data), 0) || soap_put_PointerTons1__StreamingCapabilities(soap, data, "ns1:StreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__StreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTons1__StreamingCapabilities(struct soap*, ns1__StreamingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons1__StreamingCapabilities
#define soap_read_PointerTons1__StreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__StreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ProfileCapabilities
#define SOAP_TYPE_PointerTons1__ProfileCapabilities (1457)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProfileCapabilities(struct soap*, const char *, int, ns1__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 ns1__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTons1__ProfileCapabilities(struct soap*, const char*, ns1__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ProfileCapabilities
#define soap_write_PointerTons1__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__ProfileCapabilities(soap, data), 0) || soap_put_PointerTons1__ProfileCapabilities(soap, data, "ns1:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTons1__ProfileCapabilities(struct soap*, ns1__ProfileCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTons1__ProfileCapabilities
#define soap_read_PointerTons1__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__Documentation
#define SOAP_TYPE_PointerTowstop__Documentation (1456)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__Documentation(struct soap*, const char *, int, wstop__Documentation *const*, const char *);
SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_in_PointerTowstop__Documentation(struct soap*, const char*, wstop__Documentation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__Documentation(struct soap*, wstop__Documentation *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__Documentation
#define soap_write_PointerTowstop__Documentation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__Documentation(soap, data), 0) || soap_put_PointerTowstop__Documentation(soap, data, "wstop:Documentation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__Documentation ** SOAP_FMAC4 soap_get_PointerTowstop__Documentation(struct soap*, wstop__Documentation **, const char*, const char*);

#ifndef soap_read_PointerTowstop__Documentation
#define soap_read_PointerTowstop__Documentation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__Documentation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_FaultCause (1455)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char *, int, _wsrfbf__BaseFaultType_FaultCause *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, const char*, _wsrfbf__BaseFaultType_FaultCause **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define soap_write_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data), 0) || soap_put_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data, "wsrfbf:BaseFaultType-FaultCause", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_FaultCause ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(struct soap*, _wsrfbf__BaseFaultType_FaultCause **, const char*, const char*);

#ifndef soap_read_PointerTo_wsrfbf__BaseFaultType_FaultCause
#define soap_read_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsrfbf__BaseFaultType_FaultCause(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description (1453)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char *, int, std::vector<_wsrfbf__BaseFaultType_Description >*const*, const char *);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define soap_write_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define soap_read_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (1451)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xml__lang
#define soap_write_PointerTo_xml__lang(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xml__lang(soap, data), 0) || soap_put_PointerTo_xml__lang(soap, data, "xml:lang", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTo_xml__lang
#define soap_read_PointerTo_xml__lang(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xml__lang(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE_PointerTo_wsrfbf__BaseFaultType_ErrorCode (1449)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char *, int, _wsrfbf__BaseFaultType_ErrorCode *const*, const char *);
SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_in_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, const char*, _wsrfbf__BaseFaultType_ErrorCode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define soap_write_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data), 0) || soap_put_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data, "wsrfbf:BaseFaultType-ErrorCode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsrfbf__BaseFaultType_ErrorCode ** SOAP_FMAC4 soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(struct soap*, _wsrfbf__BaseFaultType_ErrorCode **, const char*, const char*);

#ifndef soap_read_PointerTo_wsrfbf__BaseFaultType_ErrorCode
#define soap_read_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsrfbf__BaseFaultType_ErrorCode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger (1447)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__nonNegativeInteger
#define soap_write_PointerToxsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__nonNegativeInteger(soap, data), 0) || soap_put_PointerToxsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__nonNegativeInteger
#define soap_read_PointerToxsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_wsnt__Subscribe_SubscriptionPolicy (1446)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char *, int, _wsnt__Subscribe_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, const char*, _wsnt__Subscribe_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define soap_write_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data), 0) || soap_put_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data, "wsnt:Subscribe-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _wsnt__Subscribe_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(struct soap*, _wsnt__Subscribe_SubscriptionPolicy **, const char*, const char*);

#ifndef soap_read_PointerTo_wsnt__Subscribe_SubscriptionPolicy
#define soap_read_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsnt__Subscribe_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_PointerTowsnt__AbsoluteOrRelativeTimeType (1444)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__AbsoluteOrRelativeTimeType
#define soap_write_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data), 0) || soap_put_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data, "wsnt:AbsoluteOrRelativeTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__AbsoluteOrRelativeTimeType
#define soap_read_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__AbsoluteOrRelativeTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType
#define SOAP_TYPE_PointerTowsnt__SubscriptionPolicyType (1442)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char *, int, wsnt__SubscriptionPolicyType *const*, const char *);
SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_in_PointerTowsnt__SubscriptionPolicyType(struct soap*, const char*, wsnt__SubscriptionPolicyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__SubscriptionPolicyType
#define soap_write_PointerTowsnt__SubscriptionPolicyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__SubscriptionPolicyType(soap, data), 0) || soap_put_PointerTowsnt__SubscriptionPolicyType(soap, data, "wsnt:SubscriptionPolicyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__SubscriptionPolicyType ** SOAP_FMAC4 soap_get_PointerTowsnt__SubscriptionPolicyType(struct soap*, wsnt__SubscriptionPolicyType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__SubscriptionPolicyType
#define soap_read_PointerTowsnt__SubscriptionPolicyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__SubscriptionPolicyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowstop__TopicSetType
#define SOAP_TYPE_PointerTowstop__TopicSetType (1441)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowstop__TopicSetType(struct soap*, const char *, int, wstop__TopicSetType *const*, const char *);
SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_in_PointerTowstop__TopicSetType(struct soap*, const char*, wstop__TopicSetType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType *const*, const char*, const char*);

#ifndef soap_write_PointerTowstop__TopicSetType
#define soap_write_PointerTowstop__TopicSetType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowstop__TopicSetType(soap, data), 0) || soap_put_PointerTowstop__TopicSetType(soap, data, "wstop:TopicSetType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wstop__TopicSetType ** SOAP_FMAC4 soap_get_PointerTowstop__TopicSetType(struct soap*, wstop__TopicSetType **, const char*, const char*);

#ifndef soap_read_PointerTowstop__TopicSetType
#define soap_read_PointerTowstop__TopicSetType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowstop__TopicSetType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__TopicExpressionType
#define SOAP_TYPE_PointerTowsnt__TopicExpressionType (1438)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__TopicExpressionType(struct soap*, const char *, int, wsnt__TopicExpressionType *const*, const char *);
SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_in_PointerTowsnt__TopicExpressionType(struct soap*, const char*, wsnt__TopicExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__TopicExpressionType
#define soap_write_PointerTowsnt__TopicExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__TopicExpressionType(soap, data), 0) || soap_put_PointerTowsnt__TopicExpressionType(soap, data, "wsnt:TopicExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__TopicExpressionType ** SOAP_FMAC4 soap_get_PointerTowsnt__TopicExpressionType(struct soap*, wsnt__TopicExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__TopicExpressionType
#define soap_read_PointerTowsnt__TopicExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__TopicExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa5__EndpointReferenceType
#define SOAP_TYPE_PointerTowsa5__EndpointReferenceType (1437)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__EndpointReferenceType(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa5__EndpointReferenceType
#define soap_write_PointerTowsa5__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa5__EndpointReferenceType(soap, data), 0) || soap_put_PointerTowsa5__EndpointReferenceType(soap, data, "wsa5:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTowsa5__EndpointReferenceType
#define soap_read_PointerTowsa5__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa5__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PropertyOperation
#define SOAP_TYPE_PointerTott__PropertyOperation (1436)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PropertyOperation(struct soap*, enum tt__PropertyOperation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PropertyOperation(struct soap*, const char *, int, enum tt__PropertyOperation *const*, const char *);
SOAP_FMAC3 enum tt__PropertyOperation ** SOAP_FMAC4 soap_in_PointerTott__PropertyOperation(struct soap*, const char*, enum tt__PropertyOperation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PropertyOperation(struct soap*, enum tt__PropertyOperation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PropertyOperation
#define soap_write_PointerTott__PropertyOperation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PropertyOperation(soap, data), 0) || soap_put_PointerTott__PropertyOperation(soap, data, "tt:PropertyOperation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__PropertyOperation ** SOAP_FMAC4 soap_get_PointerTott__PropertyOperation(struct soap*, enum tt__PropertyOperation **, const char*, const char*);

#ifndef soap_read_PointerTott__PropertyOperation
#define soap_read_PointerTott__PropertyOperation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PropertyOperation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MessageExtension
#define SOAP_TYPE_PointerTott__MessageExtension (1435)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MessageExtension(struct soap*, tt__MessageExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MessageExtension(struct soap*, const char *, int, tt__MessageExtension *const*, const char *);
SOAP_FMAC3 tt__MessageExtension ** SOAP_FMAC4 soap_in_PointerTott__MessageExtension(struct soap*, const char*, tt__MessageExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MessageExtension(struct soap*, tt__MessageExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MessageExtension
#define soap_write_PointerTott__MessageExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MessageExtension(soap, data), 0) || soap_put_PointerTott__MessageExtension(soap, data, "tt:MessageExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MessageExtension ** SOAP_FMAC4 soap_get_PointerTott__MessageExtension(struct soap*, tt__MessageExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__MessageExtension
#define soap_read_PointerTott__MessageExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MessageExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LocalOrientation
#define SOAP_TYPE_PointerTott__LocalOrientation (1434)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LocalOrientation(struct soap*, tt__LocalOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LocalOrientation(struct soap*, const char *, int, tt__LocalOrientation *const*, const char *);
SOAP_FMAC3 tt__LocalOrientation ** SOAP_FMAC4 soap_in_PointerTott__LocalOrientation(struct soap*, const char*, tt__LocalOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LocalOrientation(struct soap*, tt__LocalOrientation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LocalOrientation
#define soap_write_PointerTott__LocalOrientation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LocalOrientation(soap, data), 0) || soap_put_PointerTott__LocalOrientation(soap, data, "tt:LocalOrientation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LocalOrientation ** SOAP_FMAC4 soap_get_PointerTott__LocalOrientation(struct soap*, tt__LocalOrientation **, const char*, const char*);

#ifndef soap_read_PointerTott__LocalOrientation
#define soap_read_PointerTott__LocalOrientation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LocalOrientation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LocalLocation
#define SOAP_TYPE_PointerTott__LocalLocation (1433)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LocalLocation(struct soap*, tt__LocalLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LocalLocation(struct soap*, const char *, int, tt__LocalLocation *const*, const char *);
SOAP_FMAC3 tt__LocalLocation ** SOAP_FMAC4 soap_in_PointerTott__LocalLocation(struct soap*, const char*, tt__LocalLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LocalLocation(struct soap*, tt__LocalLocation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LocalLocation
#define soap_write_PointerTott__LocalLocation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LocalLocation(soap, data), 0) || soap_put_PointerTott__LocalLocation(soap, data, "tt:LocalLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LocalLocation ** SOAP_FMAC4 soap_get_PointerTott__LocalLocation(struct soap*, tt__LocalLocation **, const char*, const char*);

#ifndef soap_read_PointerTott__LocalLocation
#define soap_read_PointerTott__LocalLocation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LocalLocation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__GeoOrientation
#define SOAP_TYPE_PointerTott__GeoOrientation (1432)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoOrientation(struct soap*, tt__GeoOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoOrientation(struct soap*, const char *, int, tt__GeoOrientation *const*, const char *);
SOAP_FMAC3 tt__GeoOrientation ** SOAP_FMAC4 soap_in_PointerTott__GeoOrientation(struct soap*, const char*, tt__GeoOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoOrientation(struct soap*, tt__GeoOrientation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__GeoOrientation
#define soap_write_PointerTott__GeoOrientation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__GeoOrientation(soap, data), 0) || soap_put_PointerTott__GeoOrientation(soap, data, "tt:GeoOrientation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GeoOrientation ** SOAP_FMAC4 soap_get_PointerTott__GeoOrientation(struct soap*, tt__GeoOrientation **, const char*, const char*);

#ifndef soap_read_PointerTott__GeoOrientation
#define soap_read_PointerTott__GeoOrientation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__GeoOrientation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__GeoLocation
#define SOAP_TYPE_PointerTott__GeoLocation (1431)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GeoLocation(struct soap*, const char *, int, tt__GeoLocation *const*, const char *);
SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_in_PointerTott__GeoLocation(struct soap*, const char*, tt__GeoLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GeoLocation(struct soap*, tt__GeoLocation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__GeoLocation
#define soap_write_PointerTott__GeoLocation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__GeoLocation(soap, data), 0) || soap_put_PointerTott__GeoLocation(soap, data, "tt:GeoLocation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GeoLocation ** SOAP_FMAC4 soap_get_PointerTott__GeoLocation(struct soap*, tt__GeoLocation **, const char*, const char*);

#ifndef soap_read_PointerTott__GeoLocation
#define soap_read_PointerTott__GeoLocation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__GeoLocation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (1430)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerTodouble
#define soap_write_PointerTodouble(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTodouble(soap, data), 0) || soap_put_PointerTodouble(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerTodouble
#define soap_read_PointerTodouble(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTodouble(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TransformationExtension
#define SOAP_TYPE_PointerTott__TransformationExtension (1429)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TransformationExtension(struct soap*, tt__TransformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TransformationExtension(struct soap*, const char *, int, tt__TransformationExtension *const*, const char *);
SOAP_FMAC3 tt__TransformationExtension ** SOAP_FMAC4 soap_in_PointerTott__TransformationExtension(struct soap*, const char*, tt__TransformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TransformationExtension(struct soap*, tt__TransformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TransformationExtension
#define soap_write_PointerTott__TransformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TransformationExtension(soap, data), 0) || soap_put_PointerTott__TransformationExtension(soap, data, "tt:TransformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TransformationExtension ** SOAP_FMAC4 soap_get_PointerTott__TransformationExtension(struct soap*, tt__TransformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__TransformationExtension
#define soap_read_PointerTott__TransformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TransformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyType
#define SOAP_TYPE_PointerToxsd__anyType (1428)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap*, xsd__anyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap*, const char *, int, xsd__anyType *const*, const char *);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap*, const char*, xsd__anyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap*, xsd__anyType *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyType
#define soap_write_PointerToxsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__anyType(soap, data), 0) || soap_put_PointerToxsd__anyType(soap, data, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap*, xsd__anyType **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyType
#define soap_read_PointerToxsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster (1427)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char *, int, std::vector<_tt__ColorDescriptor_ColorCluster >*const*, const char *);
SOAP_FMAC3 std::vector<_tt__ColorDescriptor_ColorCluster >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char*, std::vector<_tt__ColorDescriptor_ColorCluster >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster
#define soap_write_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_tt__ColorDescriptor_ColorCluster >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster
#define soap_read_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ColorCovariance
#define SOAP_TYPE_PointerTott__ColorCovariance (1425)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorCovariance(struct soap*, tt__ColorCovariance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorCovariance(struct soap*, const char *, int, tt__ColorCovariance *const*, const char *);
SOAP_FMAC3 tt__ColorCovariance ** SOAP_FMAC4 soap_in_PointerTott__ColorCovariance(struct soap*, const char*, tt__ColorCovariance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorCovariance(struct soap*, tt__ColorCovariance *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ColorCovariance
#define soap_write_PointerTott__ColorCovariance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ColorCovariance(soap, data), 0) || soap_put_PointerTott__ColorCovariance(soap, data, "tt:ColorCovariance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorCovariance ** SOAP_FMAC4 soap_get_PointerTott__ColorCovariance(struct soap*, tt__ColorCovariance **, const char*, const char*);

#ifndef soap_read_PointerTott__ColorCovariance
#define soap_read_PointerTott__ColorCovariance(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ColorCovariance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MoveStatus
#define SOAP_TYPE_PointerTott__MoveStatus (1423)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MoveStatus(struct soap*, const char *, int, enum tt__MoveStatus *const*, const char *);
SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_in_PointerTott__MoveStatus(struct soap*, const char*, enum tt__MoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MoveStatus
#define soap_write_PointerTott__MoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MoveStatus(soap, data), 0) || soap_put_PointerTott__MoveStatus(soap, data, "tt:MoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__MoveStatus ** SOAP_FMAC4 soap_get_PointerTott__MoveStatus(struct soap*, enum tt__MoveStatus **, const char*, const char*);

#ifndef soap_read_PointerTott__MoveStatus
#define soap_read_PointerTott__MoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZMoveStatus
#define SOAP_TYPE_PointerTott__PTZMoveStatus (1422)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZMoveStatus(struct soap*, const char *, int, tt__PTZMoveStatus *const*, const char *);
SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZMoveStatus(struct soap*, const char*, tt__PTZMoveStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZMoveStatus
#define soap_write_PointerTott__PTZMoveStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZMoveStatus(soap, data), 0) || soap_put_PointerTott__PTZMoveStatus(soap, data, "tt:PTZMoveStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZMoveStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZMoveStatus(struct soap*, tt__PTZMoveStatus **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZMoveStatus
#define soap_read_PointerTott__PTZMoveStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZMoveStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (1421)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyURI
#define soap_write_PointerToxsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__anyURI(soap, data), 0) || soap_put_PointerToxsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyURI
#define soap_read_PointerToxsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__StorageReferencePathExtension
#define SOAP_TYPE_PointerTott__StorageReferencePathExtension (1420)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StorageReferencePathExtension(struct soap*, const char *, int, tt__StorageReferencePathExtension *const*, const char *);
SOAP_FMAC3 tt__StorageReferencePathExtension ** SOAP_FMAC4 soap_in_PointerTott__StorageReferencePathExtension(struct soap*, const char*, tt__StorageReferencePathExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__StorageReferencePathExtension
#define soap_write_PointerTott__StorageReferencePathExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__StorageReferencePathExtension(soap, data), 0) || soap_put_PointerTott__StorageReferencePathExtension(soap, data, "tt:StorageReferencePathExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__StorageReferencePathExtension ** SOAP_FMAC4 soap_get_PointerTott__StorageReferencePathExtension(struct soap*, tt__StorageReferencePathExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__StorageReferencePathExtension
#define soap_read_PointerTott__StorageReferencePathExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__StorageReferencePathExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension
#define SOAP_TYPE_PointerTott__ArrayOfFileProgressExtension (1419)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ArrayOfFileProgressExtension(struct soap*, const char *, int, tt__ArrayOfFileProgressExtension *const*, const char *);
SOAP_FMAC3 tt__ArrayOfFileProgressExtension ** SOAP_FMAC4 soap_in_PointerTott__ArrayOfFileProgressExtension(struct soap*, const char*, tt__ArrayOfFileProgressExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ArrayOfFileProgressExtension
#define soap_write_PointerTott__ArrayOfFileProgressExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ArrayOfFileProgressExtension(soap, data), 0) || soap_put_PointerTott__ArrayOfFileProgressExtension(soap, data, "tt:ArrayOfFileProgressExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ArrayOfFileProgressExtension ** SOAP_FMAC4 soap_get_PointerTott__ArrayOfFileProgressExtension(struct soap*, tt__ArrayOfFileProgressExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ArrayOfFileProgressExtension
#define soap_read_PointerTott__ArrayOfFileProgressExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ArrayOfFileProgressExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FileProgress
#define SOAP_TYPE_PointerTott__FileProgress (1417)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FileProgress(struct soap*, tt__FileProgress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FileProgress(struct soap*, const char *, int, tt__FileProgress *const*, const char *);
SOAP_FMAC3 tt__FileProgress ** SOAP_FMAC4 soap_in_PointerTott__FileProgress(struct soap*, const char*, tt__FileProgress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FileProgress(struct soap*, tt__FileProgress *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FileProgress
#define soap_write_PointerTott__FileProgress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FileProgress(soap, data), 0) || soap_put_PointerTott__FileProgress(soap, data, "tt:FileProgress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FileProgress ** SOAP_FMAC4 soap_get_PointerTott__FileProgress(struct soap*, tt__FileProgress **, const char*, const char*);

#ifndef soap_read_PointerTott__FileProgress
#define soap_read_PointerTott__FileProgress(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FileProgress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__OSDConfigurationOptionsExtension (1416)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDConfigurationOptionsExtension(struct soap*, const char *, int, tt__OSDConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDConfigurationOptionsExtension(struct soap*, const char*, tt__OSDConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDConfigurationOptionsExtension
#define soap_write_PointerTott__OSDConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTott__OSDConfigurationOptionsExtension(soap, data, "tt:OSDConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDConfigurationOptionsExtension(struct soap*, tt__OSDConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDConfigurationOptionsExtension
#define soap_read_PointerTott__OSDConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDImgOptions
#define SOAP_TYPE_PointerTott__OSDImgOptions (1415)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgOptions(struct soap*, const char *, int, tt__OSDImgOptions *const*, const char *);
SOAP_FMAC3 tt__OSDImgOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDImgOptions(struct soap*, const char*, tt__OSDImgOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDImgOptions
#define soap_write_PointerTott__OSDImgOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDImgOptions(soap, data), 0) || soap_put_PointerTott__OSDImgOptions(soap, data, "tt:OSDImgOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDImgOptions(struct soap*, tt__OSDImgOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDImgOptions
#define soap_read_PointerTott__OSDImgOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDImgOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDTextOptions
#define SOAP_TYPE_PointerTott__OSDTextOptions (1414)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextOptions(struct soap*, const char *, int, tt__OSDTextOptions *const*, const char *);
SOAP_FMAC3 tt__OSDTextOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDTextOptions(struct soap*, const char*, tt__OSDTextOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDTextOptions
#define soap_write_PointerTott__OSDTextOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDTextOptions(soap, data), 0) || soap_put_PointerTott__OSDTextOptions(soap, data, "tt:OSDTextOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDTextOptions(struct soap*, tt__OSDTextOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDTextOptions
#define soap_read_PointerTott__OSDTextOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDTextOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MaximumNumberOfOSDs
#define SOAP_TYPE_PointerTott__MaximumNumberOfOSDs (1412)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MaximumNumberOfOSDs(struct soap*, const char *, int, tt__MaximumNumberOfOSDs *const*, const char *);
SOAP_FMAC3 tt__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_in_PointerTott__MaximumNumberOfOSDs(struct soap*, const char*, tt__MaximumNumberOfOSDs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MaximumNumberOfOSDs
#define soap_write_PointerTott__MaximumNumberOfOSDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MaximumNumberOfOSDs(soap, data), 0) || soap_put_PointerTott__MaximumNumberOfOSDs(soap, data, "tt:MaximumNumberOfOSDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MaximumNumberOfOSDs ** SOAP_FMAC4 soap_get_PointerTott__MaximumNumberOfOSDs(struct soap*, tt__MaximumNumberOfOSDs **, const char*, const char*);

#ifndef soap_read_PointerTott__MaximumNumberOfOSDs
#define soap_read_PointerTott__MaximumNumberOfOSDs(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MaximumNumberOfOSDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDImgOptionsExtension
#define SOAP_TYPE_PointerTott__OSDImgOptionsExtension (1411)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgOptionsExtension(struct soap*, const char *, int, tt__OSDImgOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDImgOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDImgOptionsExtension(struct soap*, const char*, tt__OSDImgOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDImgOptionsExtension
#define soap_write_PointerTott__OSDImgOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDImgOptionsExtension(soap, data), 0) || soap_put_PointerTott__OSDImgOptionsExtension(soap, data, "tt:OSDImgOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDImgOptionsExtension(struct soap*, tt__OSDImgOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDImgOptionsExtension
#define soap_read_PointerTott__OSDImgOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDImgOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDTextOptionsExtension
#define SOAP_TYPE_PointerTott__OSDTextOptionsExtension (1410)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextOptionsExtension(struct soap*, const char *, int, tt__OSDTextOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDTextOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDTextOptionsExtension(struct soap*, const char*, tt__OSDTextOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDTextOptionsExtension
#define soap_write_PointerTott__OSDTextOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDTextOptionsExtension(soap, data), 0) || soap_put_PointerTott__OSDTextOptionsExtension(soap, data, "tt:OSDTextOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDTextOptionsExtension(struct soap*, tt__OSDTextOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDTextOptionsExtension
#define soap_read_PointerTott__OSDTextOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDTextOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDColorOptions
#define SOAP_TYPE_PointerTott__OSDColorOptions (1409)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColorOptions(struct soap*, const char *, int, tt__OSDColorOptions *const*, const char *);
SOAP_FMAC3 tt__OSDColorOptions ** SOAP_FMAC4 soap_in_PointerTott__OSDColorOptions(struct soap*, const char*, tt__OSDColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDColorOptions
#define soap_write_PointerTott__OSDColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDColorOptions(soap, data), 0) || soap_put_PointerTott__OSDColorOptions(soap, data, "tt:OSDColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDColorOptions ** SOAP_FMAC4 soap_get_PointerTott__OSDColorOptions(struct soap*, tt__OSDColorOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDColorOptions
#define soap_read_PointerTott__OSDColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDColorOptionsExtension
#define SOAP_TYPE_PointerTott__OSDColorOptionsExtension (1408)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColorOptionsExtension(struct soap*, const char *, int, tt__OSDColorOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__OSDColorOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDColorOptionsExtension(struct soap*, const char*, tt__OSDColorOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDColorOptionsExtension
#define soap_write_PointerTott__OSDColorOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDColorOptionsExtension(soap, data), 0) || soap_put_PointerTott__OSDColorOptionsExtension(soap, data, "tt:OSDColorOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDColorOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDColorOptionsExtension(struct soap*, tt__OSDColorOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDColorOptionsExtension
#define soap_read_PointerTott__OSDColorOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDColorOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ColorOptions
#define SOAP_TYPE_PointerTott__ColorOptions (1407)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorOptions(struct soap*, tt__ColorOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorOptions(struct soap*, const char *, int, tt__ColorOptions *const*, const char *);
SOAP_FMAC3 tt__ColorOptions ** SOAP_FMAC4 soap_in_PointerTott__ColorOptions(struct soap*, const char*, tt__ColorOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorOptions(struct soap*, tt__ColorOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ColorOptions
#define soap_write_PointerTott__ColorOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ColorOptions(soap, data), 0) || soap_put_PointerTott__ColorOptions(soap, data, "tt:ColorOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorOptions ** SOAP_FMAC4 soap_get_PointerTott__ColorOptions(struct soap*, tt__ColorOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__ColorOptions
#define soap_read_PointerTott__ColorOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ColorOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange (1405)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char *, int, std::vector<tt__ColorspaceRange * >*const*, const char *);
SOAP_FMAC3 std::vector<tt__ColorspaceRange * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, std::vector<tt__ColorspaceRange * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange
#define soap_write_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<tt__ColorspaceRange * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange
#define soap_read_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTott__ColorspaceRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ColorspaceRange
#define SOAP_TYPE_PointerTott__ColorspaceRange (1403)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ColorspaceRange(struct soap*, const char *, int, tt__ColorspaceRange *const*, const char *);
SOAP_FMAC3 tt__ColorspaceRange ** SOAP_FMAC4 soap_in_PointerTott__ColorspaceRange(struct soap*, const char*, tt__ColorspaceRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ColorspaceRange
#define soap_write_PointerTott__ColorspaceRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ColorspaceRange(soap, data), 0) || soap_put_PointerTott__ColorspaceRange(soap, data, "tt:ColorspaceRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ColorspaceRange ** SOAP_FMAC4 soap_get_PointerTott__ColorspaceRange(struct soap*, tt__ColorspaceRange **, const char*, const char*);

#ifndef soap_read_PointerTott__ColorspaceRange
#define soap_read_PointerTott__ColorspaceRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ColorspaceRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerTott__Color (1402)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, const char *, int, std::vector<tt__Color * >*const*, const char *);
SOAP_FMAC3 std::vector<tt__Color * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, const char*, std::vector<tt__Color * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerTott__Color
#define soap_write_PointerTostd__vectorTemplateOfPointerTott__Color(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerTott__Color(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOfPointerTott__Color(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<tt__Color * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerTott__Color
#define soap_read_PointerTostd__vectorTemplateOfPointerTott__Color(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerTott__Color(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDImgConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDImgConfigurationExtension (1400)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDImgConfigurationExtension(struct soap*, const char *, int, tt__OSDImgConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDImgConfigurationExtension(struct soap*, const char*, tt__OSDImgConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDImgConfigurationExtension
#define soap_write_PointerTott__OSDImgConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDImgConfigurationExtension(soap, data), 0) || soap_put_PointerTott__OSDImgConfigurationExtension(soap, data, "tt:OSDImgConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDImgConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDImgConfigurationExtension(struct soap*, tt__OSDImgConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDImgConfigurationExtension
#define soap_read_PointerTott__OSDImgConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDImgConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDTextConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDTextConfigurationExtension (1399)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDTextConfigurationExtension(struct soap*, const char *, int, tt__OSDTextConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDTextConfigurationExtension(struct soap*, const char*, tt__OSDTextConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDTextConfigurationExtension
#define soap_write_PointerTott__OSDTextConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDTextConfigurationExtension(soap, data), 0) || soap_put_PointerTott__OSDTextConfigurationExtension(soap, data, "tt:OSDTextConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDTextConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDTextConfigurationExtension(struct soap*, tt__OSDTextConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDTextConfigurationExtension
#define soap_read_PointerTott__OSDTextConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDTextConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDColor
#define SOAP_TYPE_PointerTott__OSDColor (1398)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDColor(struct soap*, tt__OSDColor *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDColor(struct soap*, const char *, int, tt__OSDColor *const*, const char *);
SOAP_FMAC3 tt__OSDColor ** SOAP_FMAC4 soap_in_PointerTott__OSDColor(struct soap*, const char*, tt__OSDColor **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDColor(struct soap*, tt__OSDColor *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDColor
#define soap_write_PointerTott__OSDColor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDColor(soap, data), 0) || soap_put_PointerTott__OSDColor(soap, data, "tt:OSDColor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDColor ** SOAP_FMAC4 soap_get_PointerTott__OSDColor(struct soap*, tt__OSDColor **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDColor
#define soap_read_PointerTott__OSDColor(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDColor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Color
#define SOAP_TYPE_PointerTott__Color (1397)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Color(struct soap*, tt__Color *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Color(struct soap*, const char *, int, tt__Color *const*, const char *);
SOAP_FMAC3 tt__Color ** SOAP_FMAC4 soap_in_PointerTott__Color(struct soap*, const char*, tt__Color **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Color(struct soap*, tt__Color *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Color
#define soap_write_PointerTott__Color(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Color(soap, data), 0) || soap_put_PointerTott__Color(soap, data, "tt:Color", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Color ** SOAP_FMAC4 soap_get_PointerTott__Color(struct soap*, tt__Color **, const char*, const char*);

#ifndef soap_read_PointerTott__Color
#define soap_read_PointerTott__Color(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Color(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OSDPosConfigurationExtension
#define SOAP_TYPE_PointerTott__OSDPosConfigurationExtension (1396)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OSDPosConfigurationExtension(struct soap*, const char *, int, tt__OSDPosConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__OSDPosConfigurationExtension(struct soap*, const char*, tt__OSDPosConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OSDPosConfigurationExtension
#define soap_write_PointerTott__OSDPosConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OSDPosConfigurationExtension(soap, data), 0) || soap_put_PointerTott__OSDPosConfigurationExtension(soap, data, "tt:OSDPosConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OSDPosConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__OSDPosConfigurationExtension(struct soap*, tt__OSDPosConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__OSDPosConfigurationExtension
#define soap_read_PointerTott__OSDPosConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OSDPosConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ProfileStatusExtension
#define SOAP_TYPE_PointerTott__ProfileStatusExtension (1395)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileStatusExtension(struct soap*, const char *, int, tt__ProfileStatusExtension *const*, const char *);
SOAP_FMAC3 tt__ProfileStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__ProfileStatusExtension(struct soap*, const char*, tt__ProfileStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ProfileStatusExtension
#define soap_write_PointerTott__ProfileStatusExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ProfileStatusExtension(soap, data), 0) || soap_put_PointerTott__ProfileStatusExtension(soap, data, "tt:ProfileStatusExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__ProfileStatusExtension(struct soap*, tt__ProfileStatusExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ProfileStatusExtension
#define soap_read_PointerTott__ProfileStatusExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ProfileStatusExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ActiveConnection
#define SOAP_TYPE_PointerTott__ActiveConnection (1393)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ActiveConnection(struct soap*, tt__ActiveConnection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ActiveConnection(struct soap*, const char *, int, tt__ActiveConnection *const*, const char *);
SOAP_FMAC3 tt__ActiveConnection ** SOAP_FMAC4 soap_in_PointerTott__ActiveConnection(struct soap*, const char*, tt__ActiveConnection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ActiveConnection(struct soap*, tt__ActiveConnection *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ActiveConnection
#define soap_write_PointerTott__ActiveConnection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ActiveConnection(soap, data), 0) || soap_put_PointerTott__ActiveConnection(soap, data, "tt:ActiveConnection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ActiveConnection ** SOAP_FMAC4 soap_get_PointerTott__ActiveConnection(struct soap*, tt__ActiveConnection **, const char*, const char*);

#ifndef soap_read_PointerTott__ActiveConnection
#define soap_read_PointerTott__ActiveConnection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ActiveConnection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioClassDescriptorExtension
#define SOAP_TYPE_PointerTott__AudioClassDescriptorExtension (1392)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioClassDescriptorExtension(struct soap*, const char *, int, tt__AudioClassDescriptorExtension *const*, const char *);
SOAP_FMAC3 tt__AudioClassDescriptorExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioClassDescriptorExtension(struct soap*, const char*, tt__AudioClassDescriptorExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioClassDescriptorExtension
#define soap_write_PointerTott__AudioClassDescriptorExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioClassDescriptorExtension(soap, data), 0) || soap_put_PointerTott__AudioClassDescriptorExtension(soap, data, "tt:AudioClassDescriptorExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioClassDescriptorExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioClassDescriptorExtension(struct soap*, tt__AudioClassDescriptorExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioClassDescriptorExtension
#define soap_read_PointerTott__AudioClassDescriptorExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioClassDescriptorExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioClassCandidate
#define SOAP_TYPE_PointerTott__AudioClassCandidate (1390)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioClassCandidate(struct soap*, tt__AudioClassCandidate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioClassCandidate(struct soap*, const char *, int, tt__AudioClassCandidate *const*, const char *);
SOAP_FMAC3 tt__AudioClassCandidate ** SOAP_FMAC4 soap_in_PointerTott__AudioClassCandidate(struct soap*, const char*, tt__AudioClassCandidate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioClassCandidate(struct soap*, tt__AudioClassCandidate *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioClassCandidate
#define soap_write_PointerTott__AudioClassCandidate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioClassCandidate(soap, data), 0) || soap_put_PointerTott__AudioClassCandidate(soap, data, "tt:AudioClassCandidate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioClassCandidate ** SOAP_FMAC4 soap_get_PointerTott__AudioClassCandidate(struct soap*, tt__AudioClassCandidate **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioClassCandidate
#define soap_read_PointerTott__AudioClassCandidate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioClassCandidate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension
#define SOAP_TYPE_PointerTott__ActionEngineEventPayloadExtension (1389)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ActionEngineEventPayloadExtension(struct soap*, const char *, int, tt__ActionEngineEventPayloadExtension *const*, const char *);
SOAP_FMAC3 tt__ActionEngineEventPayloadExtension ** SOAP_FMAC4 soap_in_PointerTott__ActionEngineEventPayloadExtension(struct soap*, const char*, tt__ActionEngineEventPayloadExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ActionEngineEventPayloadExtension
#define soap_write_PointerTott__ActionEngineEventPayloadExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ActionEngineEventPayloadExtension(soap, data), 0) || soap_put_PointerTott__ActionEngineEventPayloadExtension(soap, data, "tt:ActionEngineEventPayloadExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ActionEngineEventPayloadExtension ** SOAP_FMAC4 soap_get_PointerTott__ActionEngineEventPayloadExtension(struct soap*, tt__ActionEngineEventPayloadExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ActionEngineEventPayloadExtension
#define soap_read_PointerTott__ActionEngineEventPayloadExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ActionEngineEventPayloadExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Fault
#define SOAP_TYPE_PointerToSOAP_ENV__Fault (1388)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Fault(struct soap*, const char *, int, struct SOAP_ENV__Fault *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Fault ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Fault
#define soap_write_PointerToSOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Fault(soap, data), 0) || soap_put_PointerToSOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Fault
#define soap_read_PointerToSOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Envelope
#define SOAP_TYPE_PointerToSOAP_ENV__Envelope (1387)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Envelope(struct soap*, const char *, int, struct SOAP_ENV__Envelope *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Envelope ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Envelope(struct soap*, const char*, struct SOAP_ENV__Envelope **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Envelope
#define soap_write_PointerToSOAP_ENV__Envelope(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Envelope(soap, data), 0) || soap_put_PointerToSOAP_ENV__Envelope(soap, data, "SOAP-ENV:Envelope", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Envelope ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Envelope(struct soap*, struct SOAP_ENV__Envelope **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Envelope
#define soap_read_PointerToSOAP_ENV__Envelope(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Envelope(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsState
#define SOAP_TYPE_PointerTott__AnalyticsState (1386)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsState(struct soap*, tt__AnalyticsState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsState(struct soap*, const char *, int, tt__AnalyticsState *const*, const char *);
SOAP_FMAC3 tt__AnalyticsState ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsState(struct soap*, const char*, tt__AnalyticsState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsState(struct soap*, tt__AnalyticsState *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsState
#define soap_write_PointerTott__AnalyticsState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsState(soap, data), 0) || soap_put_PointerTott__AnalyticsState(soap, data, "tt:AnalyticsState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsState ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsState(struct soap*, tt__AnalyticsState **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsState
#define soap_read_PointerTott__AnalyticsState(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataInputExtension
#define SOAP_TYPE_PointerTott__MetadataInputExtension (1385)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataInputExtension(struct soap*, tt__MetadataInputExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataInputExtension(struct soap*, const char *, int, tt__MetadataInputExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataInputExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataInputExtension(struct soap*, const char*, tt__MetadataInputExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataInputExtension(struct soap*, tt__MetadataInputExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataInputExtension
#define soap_write_PointerTott__MetadataInputExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataInputExtension(soap, data), 0) || soap_put_PointerTott__MetadataInputExtension(soap, data, "tt:MetadataInputExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataInputExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataInputExtension(struct soap*, tt__MetadataInputExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataInputExtension
#define soap_read_PointerTott__MetadataInputExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataInputExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SourceIdentificationExtension
#define SOAP_TYPE_PointerTott__SourceIdentificationExtension (1384)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SourceIdentificationExtension(struct soap*, const char *, int, tt__SourceIdentificationExtension *const*, const char *);
SOAP_FMAC3 tt__SourceIdentificationExtension ** SOAP_FMAC4 soap_in_PointerTott__SourceIdentificationExtension(struct soap*, const char*, tt__SourceIdentificationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SourceIdentificationExtension
#define soap_write_PointerTott__SourceIdentificationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SourceIdentificationExtension(soap, data), 0) || soap_put_PointerTott__SourceIdentificationExtension(soap, data, "tt:SourceIdentificationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SourceIdentificationExtension ** SOAP_FMAC4 soap_get_PointerTott__SourceIdentificationExtension(struct soap*, tt__SourceIdentificationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SourceIdentificationExtension
#define soap_read_PointerTott__SourceIdentificationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SourceIdentificationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfoExtension (1383)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, const char *, int, tt__AnalyticsEngineInputInfoExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, const char*, tt__AnalyticsEngineInputInfoExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsEngineInputInfoExtension
#define soap_write_PointerTott__AnalyticsEngineInputInfoExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsEngineInputInfoExtension(soap, data), 0) || soap_put_PointerTott__AnalyticsEngineInputInfoExtension(soap, data, "tt:AnalyticsEngineInputInfoExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineInputInfoExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineInputInfoExtension(struct soap*, tt__AnalyticsEngineInputInfoExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsEngineInputInfoExtension
#define soap_read_PointerTott__AnalyticsEngineInputInfoExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsEngineInputInfoExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo
#define SOAP_TYPE_PointerTott__AnalyticsEngineInputInfo (1382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineInputInfo(struct soap*, const char *, int, tt__AnalyticsEngineInputInfo *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineInputInfo ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineInputInfo(struct soap*, const char*, tt__AnalyticsEngineInputInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsEngineInputInfo
#define soap_write_PointerTott__AnalyticsEngineInputInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsEngineInputInfo(soap, data), 0) || soap_put_PointerTott__AnalyticsEngineInputInfo(soap, data, "tt:AnalyticsEngineInputInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineInputInfo ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineInputInfo(struct soap*, tt__AnalyticsEngineInputInfo **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsEngineInputInfo
#define soap_read_PointerTott__AnalyticsEngineInputInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsEngineInputInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceEngineConfigurationExtension (1381)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char *, int, tt__AnalyticsDeviceEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsDeviceEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsDeviceEngineConfigurationExtension
#define soap_write_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, data), 0) || soap_put_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, data, "tt:AnalyticsDeviceEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceEngineConfigurationExtension(struct soap*, tt__AnalyticsDeviceEngineConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsDeviceEngineConfigurationExtension
#define soap_read_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsDeviceEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EngineConfiguration
#define SOAP_TYPE_PointerTott__EngineConfiguration (1379)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EngineConfiguration(struct soap*, tt__EngineConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EngineConfiguration(struct soap*, const char *, int, tt__EngineConfiguration *const*, const char *);
SOAP_FMAC3 tt__EngineConfiguration ** SOAP_FMAC4 soap_in_PointerTott__EngineConfiguration(struct soap*, const char*, tt__EngineConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EngineConfiguration(struct soap*, tt__EngineConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EngineConfiguration
#define soap_write_PointerTott__EngineConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EngineConfiguration(soap, data), 0) || soap_put_PointerTott__EngineConfiguration(soap, data, "tt:EngineConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EngineConfiguration ** SOAP_FMAC4 soap_get_PointerTott__EngineConfiguration(struct soap*, tt__EngineConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__EngineConfiguration
#define soap_read_PointerTott__EngineConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EngineConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobConfiguration
#define SOAP_TYPE_PointerTott__RecordingJobConfiguration (1378)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobConfiguration(struct soap*, const char *, int, tt__RecordingJobConfiguration *const*, const char *);
SOAP_FMAC3 tt__RecordingJobConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobConfiguration(struct soap*, const char*, tt__RecordingJobConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobConfiguration
#define soap_write_PointerTott__RecordingJobConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobConfiguration(soap, data), 0) || soap_put_PointerTott__RecordingJobConfiguration(soap, data, "tt:RecordingJobConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobConfiguration(struct soap*, tt__RecordingJobConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobConfiguration
#define soap_read_PointerTott__RecordingJobConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTrack
#define SOAP_TYPE_PointerTott__RecordingJobStateTrack (1376)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateTrack(struct soap*, const char *, int, tt__RecordingJobStateTrack *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateTrack ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateTrack(struct soap*, const char*, tt__RecordingJobStateTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobStateTrack
#define soap_write_PointerTott__RecordingJobStateTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobStateTrack(soap, data), 0) || soap_put_PointerTott__RecordingJobStateTrack(soap, data, "tt:RecordingJobStateTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateTrack ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateTrack(struct soap*, tt__RecordingJobStateTrack **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobStateTrack
#define soap_read_PointerTott__RecordingJobStateTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobStateTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobStateTracks
#define SOAP_TYPE_PointerTott__RecordingJobStateTracks (1375)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateTracks(struct soap*, const char *, int, tt__RecordingJobStateTracks *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateTracks ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateTracks(struct soap*, const char*, tt__RecordingJobStateTracks **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobStateTracks
#define soap_write_PointerTott__RecordingJobStateTracks(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobStateTracks(soap, data), 0) || soap_put_PointerTott__RecordingJobStateTracks(soap, data, "tt:RecordingJobStateTracks", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateTracks ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateTracks(struct soap*, tt__RecordingJobStateTracks **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobStateTracks
#define soap_read_PointerTott__RecordingJobStateTracks(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobStateTracks(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension
#define SOAP_TYPE_PointerTott__RecordingJobStateInformationExtension (1374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateInformationExtension(struct soap*, const char *, int, tt__RecordingJobStateInformationExtension *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateInformationExtension(struct soap*, const char*, tt__RecordingJobStateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobStateInformationExtension
#define soap_write_PointerTott__RecordingJobStateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobStateInformationExtension(soap, data), 0) || soap_put_PointerTott__RecordingJobStateInformationExtension(soap, data, "tt:RecordingJobStateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateInformationExtension(struct soap*, tt__RecordingJobStateInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobStateInformationExtension
#define soap_read_PointerTott__RecordingJobStateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobStateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobStateSource
#define SOAP_TYPE_PointerTott__RecordingJobStateSource (1372)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobStateSource(struct soap*, const char *, int, tt__RecordingJobStateSource *const*, const char *);
SOAP_FMAC3 tt__RecordingJobStateSource ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobStateSource(struct soap*, const char*, tt__RecordingJobStateSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobStateSource
#define soap_write_PointerTott__RecordingJobStateSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobStateSource(soap, data), 0) || soap_put_PointerTott__RecordingJobStateSource(soap, data, "tt:RecordingJobStateSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobStateSource ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobStateSource(struct soap*, tt__RecordingJobStateSource **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobStateSource
#define soap_read_PointerTott__RecordingJobStateSource(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobStateSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobSourceExtension
#define SOAP_TYPE_PointerTott__RecordingJobSourceExtension (1371)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobSourceExtension(struct soap*, const char *, int, tt__RecordingJobSourceExtension *const*, const char *);
SOAP_FMAC3 tt__RecordingJobSourceExtension ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobSourceExtension(struct soap*, const char*, tt__RecordingJobSourceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobSourceExtension
#define soap_write_PointerTott__RecordingJobSourceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobSourceExtension(soap, data), 0) || soap_put_PointerTott__RecordingJobSourceExtension(soap, data, "tt:RecordingJobSourceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobSourceExtension ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobSourceExtension(struct soap*, tt__RecordingJobSourceExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobSourceExtension
#define soap_read_PointerTott__RecordingJobSourceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobSourceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobTrack
#define SOAP_TYPE_PointerTott__RecordingJobTrack (1369)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobTrack(struct soap*, tt__RecordingJobTrack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobTrack(struct soap*, const char *, int, tt__RecordingJobTrack *const*, const char *);
SOAP_FMAC3 tt__RecordingJobTrack ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobTrack(struct soap*, const char*, tt__RecordingJobTrack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobTrack(struct soap*, tt__RecordingJobTrack *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobTrack
#define soap_write_PointerTott__RecordingJobTrack(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobTrack(soap, data), 0) || soap_put_PointerTott__RecordingJobTrack(soap, data, "tt:RecordingJobTrack", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobTrack ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobTrack(struct soap*, tt__RecordingJobTrack **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobTrack
#define soap_read_PointerTott__RecordingJobTrack(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobTrack(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension
#define SOAP_TYPE_PointerTott__RecordingJobConfigurationExtension (1368)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobConfigurationExtension(struct soap*, const char *, int, tt__RecordingJobConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__RecordingJobConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobConfigurationExtension(struct soap*, const char*, tt__RecordingJobConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobConfigurationExtension
#define soap_write_PointerTott__RecordingJobConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobConfigurationExtension(soap, data), 0) || soap_put_PointerTott__RecordingJobConfigurationExtension(soap, data, "tt:RecordingJobConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobConfigurationExtension(struct soap*, tt__RecordingJobConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobConfigurationExtension
#define soap_read_PointerTott__RecordingJobConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingJobSource
#define SOAP_TYPE_PointerTott__RecordingJobSource (1366)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingJobSource(struct soap*, tt__RecordingJobSource *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingJobSource(struct soap*, const char *, int, tt__RecordingJobSource *const*, const char *);
SOAP_FMAC3 tt__RecordingJobSource ** SOAP_FMAC4 soap_in_PointerTott__RecordingJobSource(struct soap*, const char*, tt__RecordingJobSource **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingJobSource(struct soap*, tt__RecordingJobSource *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingJobSource
#define soap_write_PointerTott__RecordingJobSource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingJobSource(soap, data), 0) || soap_put_PointerTott__RecordingJobSource(soap, data, "tt:RecordingJobSource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingJobSource ** SOAP_FMAC4 soap_get_PointerTott__RecordingJobSource(struct soap*, tt__RecordingJobSource **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingJobSource
#define soap_read_PointerTott__RecordingJobSource(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingJobSource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TrackConfiguration
#define SOAP_TYPE_PointerTott__TrackConfiguration (1365)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackConfiguration(struct soap*, tt__TrackConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackConfiguration(struct soap*, const char *, int, tt__TrackConfiguration *const*, const char *);
SOAP_FMAC3 tt__TrackConfiguration ** SOAP_FMAC4 soap_in_PointerTott__TrackConfiguration(struct soap*, const char*, tt__TrackConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackConfiguration(struct soap*, tt__TrackConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TrackConfiguration
#define soap_write_PointerTott__TrackConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TrackConfiguration(soap, data), 0) || soap_put_PointerTott__TrackConfiguration(soap, data, "tt:TrackConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackConfiguration ** SOAP_FMAC4 soap_get_PointerTott__TrackConfiguration(struct soap*, tt__TrackConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__TrackConfiguration
#define soap_read_PointerTott__TrackConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TrackConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__GetTracksResponseItem
#define SOAP_TYPE_PointerTott__GetTracksResponseItem (1363)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GetTracksResponseItem(struct soap*, const char *, int, tt__GetTracksResponseItem *const*, const char *);
SOAP_FMAC3 tt__GetTracksResponseItem ** SOAP_FMAC4 soap_in_PointerTott__GetTracksResponseItem(struct soap*, const char*, tt__GetTracksResponseItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem *const*, const char*, const char*);

#ifndef soap_write_PointerTott__GetTracksResponseItem
#define soap_write_PointerTott__GetTracksResponseItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__GetTracksResponseItem(soap, data), 0) || soap_put_PointerTott__GetTracksResponseItem(soap, data, "tt:GetTracksResponseItem", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GetTracksResponseItem ** SOAP_FMAC4 soap_get_PointerTott__GetTracksResponseItem(struct soap*, tt__GetTracksResponseItem **, const char*, const char*);

#ifndef soap_read_PointerTott__GetTracksResponseItem
#define soap_read_PointerTott__GetTracksResponseItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__GetTracksResponseItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__GetTracksResponseList
#define SOAP_TYPE_PointerTott__GetTracksResponseList (1362)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__GetTracksResponseList(struct soap*, tt__GetTracksResponseList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__GetTracksResponseList(struct soap*, const char *, int, tt__GetTracksResponseList *const*, const char *);
SOAP_FMAC3 tt__GetTracksResponseList ** SOAP_FMAC4 soap_in_PointerTott__GetTracksResponseList(struct soap*, const char*, tt__GetTracksResponseList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__GetTracksResponseList(struct soap*, tt__GetTracksResponseList *const*, const char*, const char*);

#ifndef soap_write_PointerTott__GetTracksResponseList
#define soap_write_PointerTott__GetTracksResponseList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__GetTracksResponseList(soap, data), 0) || soap_put_PointerTott__GetTracksResponseList(soap, data, "tt:GetTracksResponseList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__GetTracksResponseList ** SOAP_FMAC4 soap_get_PointerTott__GetTracksResponseList(struct soap*, tt__GetTracksResponseList **, const char*, const char*);

#ifndef soap_read_PointerTott__GetTracksResponseList
#define soap_read_PointerTott__GetTracksResponseList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__GetTracksResponseList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingConfiguration
#define SOAP_TYPE_PointerTott__RecordingConfiguration (1361)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingConfiguration(struct soap*, tt__RecordingConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingConfiguration(struct soap*, const char *, int, tt__RecordingConfiguration *const*, const char *);
SOAP_FMAC3 tt__RecordingConfiguration ** SOAP_FMAC4 soap_in_PointerTott__RecordingConfiguration(struct soap*, const char*, tt__RecordingConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingConfiguration(struct soap*, tt__RecordingConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingConfiguration
#define soap_write_PointerTott__RecordingConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingConfiguration(soap, data), 0) || soap_put_PointerTott__RecordingConfiguration(soap, data, "tt:RecordingConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingConfiguration ** SOAP_FMAC4 soap_get_PointerTott__RecordingConfiguration(struct soap*, tt__RecordingConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingConfiguration
#define soap_read_PointerTott__RecordingConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TrackAttributesExtension
#define SOAP_TYPE_PointerTott__TrackAttributesExtension (1360)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackAttributesExtension(struct soap*, const char *, int, tt__TrackAttributesExtension *const*, const char *);
SOAP_FMAC3 tt__TrackAttributesExtension ** SOAP_FMAC4 soap_in_PointerTott__TrackAttributesExtension(struct soap*, const char*, tt__TrackAttributesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TrackAttributesExtension
#define soap_write_PointerTott__TrackAttributesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TrackAttributesExtension(soap, data), 0) || soap_put_PointerTott__TrackAttributesExtension(soap, data, "tt:TrackAttributesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackAttributesExtension ** SOAP_FMAC4 soap_get_PointerTott__TrackAttributesExtension(struct soap*, tt__TrackAttributesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__TrackAttributesExtension
#define soap_read_PointerTott__TrackAttributesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TrackAttributesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataAttributes
#define SOAP_TYPE_PointerTott__MetadataAttributes (1359)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataAttributes(struct soap*, tt__MetadataAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataAttributes(struct soap*, const char *, int, tt__MetadataAttributes *const*, const char *);
SOAP_FMAC3 tt__MetadataAttributes ** SOAP_FMAC4 soap_in_PointerTott__MetadataAttributes(struct soap*, const char*, tt__MetadataAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataAttributes(struct soap*, tt__MetadataAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataAttributes
#define soap_write_PointerTott__MetadataAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataAttributes(soap, data), 0) || soap_put_PointerTott__MetadataAttributes(soap, data, "tt:MetadataAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataAttributes ** SOAP_FMAC4 soap_get_PointerTott__MetadataAttributes(struct soap*, tt__MetadataAttributes **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataAttributes
#define soap_read_PointerTott__MetadataAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioAttributes
#define SOAP_TYPE_PointerTott__AudioAttributes (1358)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioAttributes(struct soap*, tt__AudioAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioAttributes(struct soap*, const char *, int, tt__AudioAttributes *const*, const char *);
SOAP_FMAC3 tt__AudioAttributes ** SOAP_FMAC4 soap_in_PointerTott__AudioAttributes(struct soap*, const char*, tt__AudioAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioAttributes(struct soap*, tt__AudioAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioAttributes
#define soap_write_PointerTott__AudioAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioAttributes(soap, data), 0) || soap_put_PointerTott__AudioAttributes(soap, data, "tt:AudioAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioAttributes ** SOAP_FMAC4 soap_get_PointerTott__AudioAttributes(struct soap*, tt__AudioAttributes **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioAttributes
#define soap_read_PointerTott__AudioAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoAttributes
#define SOAP_TYPE_PointerTott__VideoAttributes (1357)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAttributes(struct soap*, tt__VideoAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAttributes(struct soap*, const char *, int, tt__VideoAttributes *const*, const char *);
SOAP_FMAC3 tt__VideoAttributes ** SOAP_FMAC4 soap_in_PointerTott__VideoAttributes(struct soap*, const char*, tt__VideoAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAttributes(struct soap*, tt__VideoAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoAttributes
#define soap_write_PointerTott__VideoAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoAttributes(soap, data), 0) || soap_put_PointerTott__VideoAttributes(soap, data, "tt:VideoAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoAttributes ** SOAP_FMAC4 soap_get_PointerTott__VideoAttributes(struct soap*, tt__VideoAttributes **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoAttributes
#define soap_read_PointerTott__VideoAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TrackAttributes
#define SOAP_TYPE_PointerTott__TrackAttributes (1355)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackAttributes(struct soap*, tt__TrackAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackAttributes(struct soap*, const char *, int, tt__TrackAttributes *const*, const char *);
SOAP_FMAC3 tt__TrackAttributes ** SOAP_FMAC4 soap_in_PointerTott__TrackAttributes(struct soap*, const char*, tt__TrackAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackAttributes(struct soap*, tt__TrackAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TrackAttributes
#define soap_write_PointerTott__TrackAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TrackAttributes(soap, data), 0) || soap_put_PointerTott__TrackAttributes(soap, data, "tt:TrackAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackAttributes ** SOAP_FMAC4 soap_get_PointerTott__TrackAttributes(struct soap*, tt__TrackAttributes **, const char*, const char*);

#ifndef soap_read_PointerTott__TrackAttributes
#define soap_read_PointerTott__TrackAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TrackAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TrackInformation
#define SOAP_TYPE_PointerTott__TrackInformation (1353)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TrackInformation(struct soap*, tt__TrackInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TrackInformation(struct soap*, const char *, int, tt__TrackInformation *const*, const char *);
SOAP_FMAC3 tt__TrackInformation ** SOAP_FMAC4 soap_in_PointerTott__TrackInformation(struct soap*, const char*, tt__TrackInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TrackInformation(struct soap*, tt__TrackInformation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TrackInformation
#define soap_write_PointerTott__TrackInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TrackInformation(soap, data), 0) || soap_put_PointerTott__TrackInformation(soap, data, "tt:TrackInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TrackInformation ** SOAP_FMAC4 soap_get_PointerTott__TrackInformation(struct soap*, tt__TrackInformation **, const char*, const char*);

#ifndef soap_read_PointerTott__TrackInformation
#define soap_read_PointerTott__TrackInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TrackInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (1352)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTotime(soap, data), 0) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingSourceInformation
#define SOAP_TYPE_PointerTott__RecordingSourceInformation (1351)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingSourceInformation(struct soap*, const char *, int, tt__RecordingSourceInformation *const*, const char *);
SOAP_FMAC3 tt__RecordingSourceInformation ** SOAP_FMAC4 soap_in_PointerTott__RecordingSourceInformation(struct soap*, const char*, tt__RecordingSourceInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingSourceInformation
#define soap_write_PointerTott__RecordingSourceInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingSourceInformation(soap, data), 0) || soap_put_PointerTott__RecordingSourceInformation(soap, data, "tt:RecordingSourceInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingSourceInformation ** SOAP_FMAC4 soap_get_PointerTott__RecordingSourceInformation(struct soap*, tt__RecordingSourceInformation **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingSourceInformation
#define soap_read_PointerTott__RecordingSourceInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingSourceInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FindMetadataResult
#define SOAP_TYPE_PointerTott__FindMetadataResult (1349)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FindMetadataResult(struct soap*, tt__FindMetadataResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FindMetadataResult(struct soap*, const char *, int, tt__FindMetadataResult *const*, const char *);
SOAP_FMAC3 tt__FindMetadataResult ** SOAP_FMAC4 soap_in_PointerTott__FindMetadataResult(struct soap*, const char*, tt__FindMetadataResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FindMetadataResult(struct soap*, tt__FindMetadataResult *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FindMetadataResult
#define soap_write_PointerTott__FindMetadataResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FindMetadataResult(soap, data), 0) || soap_put_PointerTott__FindMetadataResult(soap, data, "tt:FindMetadataResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindMetadataResult ** SOAP_FMAC4 soap_get_PointerTott__FindMetadataResult(struct soap*, tt__FindMetadataResult **, const char*, const char*);

#ifndef soap_read_PointerTott__FindMetadataResult
#define soap_read_PointerTott__FindMetadataResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FindMetadataResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FindPTZPositionResult
#define SOAP_TYPE_PointerTott__FindPTZPositionResult (1347)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FindPTZPositionResult(struct soap*, const char *, int, tt__FindPTZPositionResult *const*, const char *);
SOAP_FMAC3 tt__FindPTZPositionResult ** SOAP_FMAC4 soap_in_PointerTott__FindPTZPositionResult(struct soap*, const char*, tt__FindPTZPositionResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FindPTZPositionResult
#define soap_write_PointerTott__FindPTZPositionResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FindPTZPositionResult(soap, data), 0) || soap_put_PointerTott__FindPTZPositionResult(soap, data, "tt:FindPTZPositionResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindPTZPositionResult ** SOAP_FMAC4 soap_get_PointerTott__FindPTZPositionResult(struct soap*, tt__FindPTZPositionResult **, const char*, const char*);

#ifndef soap_read_PointerTott__FindPTZPositionResult
#define soap_read_PointerTott__FindPTZPositionResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FindPTZPositionResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_PointerTowsnt__NotificationMessageHolderType (1346)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char *, int, wsnt__NotificationMessageHolderType *const*, const char *);
SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_in_PointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, wsnt__NotificationMessageHolderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__NotificationMessageHolderType
#define soap_write_PointerTowsnt__NotificationMessageHolderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__NotificationMessageHolderType(soap, data), 0) || soap_put_PointerTowsnt__NotificationMessageHolderType(soap, data, "wsnt:NotificationMessageHolderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__NotificationMessageHolderType ** SOAP_FMAC4 soap_get_PointerTowsnt__NotificationMessageHolderType(struct soap*, wsnt__NotificationMessageHolderType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__NotificationMessageHolderType
#define soap_read_PointerTowsnt__NotificationMessageHolderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__NotificationMessageHolderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FindEventResult
#define SOAP_TYPE_PointerTott__FindEventResult (1344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FindEventResult(struct soap*, tt__FindEventResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FindEventResult(struct soap*, const char *, int, tt__FindEventResult *const*, const char *);
SOAP_FMAC3 tt__FindEventResult ** SOAP_FMAC4 soap_in_PointerTott__FindEventResult(struct soap*, const char*, tt__FindEventResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FindEventResult(struct soap*, tt__FindEventResult *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FindEventResult
#define soap_write_PointerTott__FindEventResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FindEventResult(soap, data), 0) || soap_put_PointerTott__FindEventResult(soap, data, "tt:FindEventResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FindEventResult ** SOAP_FMAC4 soap_get_PointerTott__FindEventResult(struct soap*, tt__FindEventResult **, const char*, const char*);

#ifndef soap_read_PointerTott__FindEventResult
#define soap_read_PointerTott__FindEventResult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FindEventResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingInformation
#define SOAP_TYPE_PointerTott__RecordingInformation (1342)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingInformation(struct soap*, tt__RecordingInformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingInformation(struct soap*, const char *, int, tt__RecordingInformation *const*, const char *);
SOAP_FMAC3 tt__RecordingInformation ** SOAP_FMAC4 soap_in_PointerTott__RecordingInformation(struct soap*, const char*, tt__RecordingInformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingInformation(struct soap*, tt__RecordingInformation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingInformation
#define soap_write_PointerTott__RecordingInformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingInformation(soap, data), 0) || soap_put_PointerTott__RecordingInformation(soap, data, "tt:RecordingInformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingInformation ** SOAP_FMAC4 soap_get_PointerTott__RecordingInformation(struct soap*, tt__RecordingInformation **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingInformation
#define soap_read_PointerTott__RecordingInformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingInformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SearchScopeExtension
#define SOAP_TYPE_PointerTott__SearchScopeExtension (1341)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SearchScopeExtension(struct soap*, tt__SearchScopeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SearchScopeExtension(struct soap*, const char *, int, tt__SearchScopeExtension *const*, const char *);
SOAP_FMAC3 tt__SearchScopeExtension ** SOAP_FMAC4 soap_in_PointerTott__SearchScopeExtension(struct soap*, const char*, tt__SearchScopeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SearchScopeExtension(struct soap*, tt__SearchScopeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SearchScopeExtension
#define soap_write_PointerTott__SearchScopeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SearchScopeExtension(soap, data), 0) || soap_put_PointerTott__SearchScopeExtension(soap, data, "tt:SearchScopeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SearchScopeExtension ** SOAP_FMAC4 soap_get_PointerTott__SearchScopeExtension(struct soap*, tt__SearchScopeExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SearchScopeExtension
#define soap_read_PointerTott__SearchScopeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SearchScopeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__XPathExpression
#define SOAP_TYPE_PointerTott__XPathExpression (1340)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__XPathExpression(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__XPathExpression(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__XPathExpression(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__XPathExpression(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__XPathExpression
#define soap_write_PointerTott__XPathExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__XPathExpression(soap, data), 0) || soap_put_PointerTott__XPathExpression(soap, data, "tt:XPathExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__XPathExpression(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__XPathExpression
#define soap_read_PointerTott__XPathExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__XPathExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SourceReference
#define SOAP_TYPE_PointerTott__SourceReference (1337)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SourceReference(struct soap*, tt__SourceReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SourceReference(struct soap*, const char *, int, tt__SourceReference *const*, const char *);
SOAP_FMAC3 tt__SourceReference ** SOAP_FMAC4 soap_in_PointerTott__SourceReference(struct soap*, const char*, tt__SourceReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SourceReference(struct soap*, tt__SourceReference *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SourceReference
#define soap_write_PointerTott__SourceReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SourceReference(soap, data), 0) || soap_put_PointerTott__SourceReference(soap, data, "tt:SourceReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SourceReference ** SOAP_FMAC4 soap_get_PointerTott__SourceReference(struct soap*, tt__SourceReference **, const char*, const char*);

#ifndef soap_read_PointerTott__SourceReference
#define soap_read_PointerTott__SourceReference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SourceReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__StreamSetup
#define SOAP_TYPE_PointerTott__StreamSetup (1336)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StreamSetup(struct soap*, tt__StreamSetup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StreamSetup(struct soap*, const char *, int, tt__StreamSetup *const*, const char *);
SOAP_FMAC3 tt__StreamSetup ** SOAP_FMAC4 soap_in_PointerTott__StreamSetup(struct soap*, const char*, tt__StreamSetup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StreamSetup(struct soap*, tt__StreamSetup *const*, const char*, const char*);

#ifndef soap_write_PointerTott__StreamSetup
#define soap_write_PointerTott__StreamSetup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__StreamSetup(soap, data), 0) || soap_put_PointerTott__StreamSetup(soap, data, "tt:StreamSetup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__StreamSetup ** SOAP_FMAC4 soap_get_PointerTott__StreamSetup(struct soap*, tt__StreamSetup **, const char*, const char*);

#ifndef soap_read_PointerTott__StreamSetup
#define soap_read_PointerTott__StreamSetup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__StreamSetup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ReceiverConfiguration
#define SOAP_TYPE_PointerTott__ReceiverConfiguration (1335)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReceiverConfiguration(struct soap*, const char *, int, tt__ReceiverConfiguration *const*, const char *);
SOAP_FMAC3 tt__ReceiverConfiguration ** SOAP_FMAC4 soap_in_PointerTott__ReceiverConfiguration(struct soap*, const char*, tt__ReceiverConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ReceiverConfiguration
#define soap_write_PointerTott__ReceiverConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ReceiverConfiguration(soap, data), 0) || soap_put_PointerTott__ReceiverConfiguration(soap, data, "tt:ReceiverConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverConfiguration ** SOAP_FMAC4 soap_get_PointerTott__ReceiverConfiguration(struct soap*, tt__ReceiverConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__ReceiverConfiguration
#define soap_read_PointerTott__ReceiverConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ReceiverConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PaneOptionExtension
#define SOAP_TYPE_PointerTott__PaneOptionExtension (1334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PaneOptionExtension(struct soap*, tt__PaneOptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PaneOptionExtension(struct soap*, const char *, int, tt__PaneOptionExtension *const*, const char *);
SOAP_FMAC3 tt__PaneOptionExtension ** SOAP_FMAC4 soap_in_PointerTott__PaneOptionExtension(struct soap*, const char*, tt__PaneOptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PaneOptionExtension(struct soap*, tt__PaneOptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PaneOptionExtension
#define soap_write_PointerTott__PaneOptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PaneOptionExtension(soap, data), 0) || soap_put_PointerTott__PaneOptionExtension(soap, data, "tt:PaneOptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneOptionExtension ** SOAP_FMAC4 soap_get_PointerTott__PaneOptionExtension(struct soap*, tt__PaneOptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PaneOptionExtension
#define soap_read_PointerTott__PaneOptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PaneOptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LayoutOptionsExtension
#define SOAP_TYPE_PointerTott__LayoutOptionsExtension (1332)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LayoutOptionsExtension(struct soap*, const char *, int, tt__LayoutOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__LayoutOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__LayoutOptionsExtension(struct soap*, const char*, tt__LayoutOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LayoutOptionsExtension
#define soap_write_PointerTott__LayoutOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LayoutOptionsExtension(soap, data), 0) || soap_put_PointerTott__LayoutOptionsExtension(soap, data, "tt:LayoutOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LayoutOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__LayoutOptionsExtension(struct soap*, tt__LayoutOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__LayoutOptionsExtension
#define soap_read_PointerTott__LayoutOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LayoutOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PaneLayoutOptions
#define SOAP_TYPE_PointerTott__PaneLayoutOptions (1330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PaneLayoutOptions(struct soap*, const char *, int, tt__PaneLayoutOptions *const*, const char *);
SOAP_FMAC3 tt__PaneLayoutOptions ** SOAP_FMAC4 soap_in_PointerTott__PaneLayoutOptions(struct soap*, const char*, tt__PaneLayoutOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PaneLayoutOptions
#define soap_write_PointerTott__PaneLayoutOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PaneLayoutOptions(soap, data), 0) || soap_put_PointerTott__PaneLayoutOptions(soap, data, "tt:PaneLayoutOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneLayoutOptions ** SOAP_FMAC4 soap_get_PointerTott__PaneLayoutOptions(struct soap*, tt__PaneLayoutOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__PaneLayoutOptions
#define soap_read_PointerTott__PaneLayoutOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PaneLayoutOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptions (1329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoDecoderConfigurationOptions(struct soap*, const char *, int, tt__VideoDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__VideoDecoderConfigurationOptions(struct soap*, const char*, tt__VideoDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoDecoderConfigurationOptions
#define soap_write_PointerTott__VideoDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoDecoderConfigurationOptions(soap, data), 0) || soap_put_PointerTott__VideoDecoderConfigurationOptions(soap, data, "tt:VideoDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__VideoDecoderConfigurationOptions(struct soap*, tt__VideoDecoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoDecoderConfigurationOptions
#define soap_read_PointerTott__VideoDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptions (1328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfigurationOptions(struct soap*, const char *, int, tt__AudioDecoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfigurationOptions(struct soap*, const char*, tt__AudioDecoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioDecoderConfigurationOptions
#define soap_write_PointerTott__AudioDecoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioDecoderConfigurationOptions(soap, data), 0) || soap_put_PointerTott__AudioDecoderConfigurationOptions(soap, data, "tt:AudioDecoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioDecoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfigurationOptions(struct soap*, tt__AudioDecoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioDecoderConfigurationOptions
#define soap_read_PointerTott__AudioDecoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioDecoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOptions (1327)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfigurationOptions(struct soap*, const char *, int, tt__AudioEncoderConfigurationOptions *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfigurationOptions(struct soap*, const char*, tt__AudioEncoderConfigurationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioEncoderConfigurationOptions
#define soap_write_PointerTott__AudioEncoderConfigurationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioEncoderConfigurationOptions(soap, data), 0) || soap_put_PointerTott__AudioEncoderConfigurationOptions(soap, data, "tt:AudioEncoderConfigurationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoderConfigurationOptions ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfigurationOptions(struct soap*, tt__AudioEncoderConfigurationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioEncoderConfigurationOptions
#define soap_read_PointerTott__AudioEncoderConfigurationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioEncoderConfigurationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LayoutExtension
#define SOAP_TYPE_PointerTott__LayoutExtension (1326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LayoutExtension(struct soap*, tt__LayoutExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LayoutExtension(struct soap*, const char *, int, tt__LayoutExtension *const*, const char *);
SOAP_FMAC3 tt__LayoutExtension ** SOAP_FMAC4 soap_in_PointerTott__LayoutExtension(struct soap*, const char*, tt__LayoutExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LayoutExtension(struct soap*, tt__LayoutExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LayoutExtension
#define soap_write_PointerTott__LayoutExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LayoutExtension(soap, data), 0) || soap_put_PointerTott__LayoutExtension(soap, data, "tt:LayoutExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LayoutExtension ** SOAP_FMAC4 soap_get_PointerTott__LayoutExtension(struct soap*, tt__LayoutExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__LayoutExtension
#define soap_read_PointerTott__LayoutExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LayoutExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PaneLayout
#define SOAP_TYPE_PointerTott__PaneLayout (1324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PaneLayout(struct soap*, tt__PaneLayout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PaneLayout(struct soap*, const char *, int, tt__PaneLayout *const*, const char *);
SOAP_FMAC3 tt__PaneLayout ** SOAP_FMAC4 soap_in_PointerTott__PaneLayout(struct soap*, const char*, tt__PaneLayout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PaneLayout(struct soap*, tt__PaneLayout *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PaneLayout
#define soap_write_PointerTott__PaneLayout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PaneLayout(soap, data), 0) || soap_put_PointerTott__PaneLayout(soap, data, "tt:PaneLayout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PaneLayout ** SOAP_FMAC4 soap_get_PointerTott__PaneLayout(struct soap*, tt__PaneLayout **, const char*, const char*);

#ifndef soap_read_PointerTott__PaneLayout
#define soap_read_PointerTott__PaneLayout(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PaneLayout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Transformation
#define SOAP_TYPE_PointerTott__Transformation (1323)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Transformation(struct soap*, tt__Transformation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Transformation(struct soap*, const char *, int, tt__Transformation *const*, const char *);
SOAP_FMAC3 tt__Transformation ** SOAP_FMAC4 soap_in_PointerTott__Transformation(struct soap*, const char*, tt__Transformation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Transformation(struct soap*, tt__Transformation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Transformation
#define soap_write_PointerTott__Transformation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Transformation(soap, data), 0) || soap_put_PointerTott__Transformation(soap, data, "tt:Transformation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Transformation ** SOAP_FMAC4 soap_get_PointerTott__Transformation(struct soap*, tt__Transformation **, const char*, const char*);

#ifndef soap_read_PointerTott__Transformation
#define soap_read_PointerTott__Transformation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Transformation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MotionExpression
#define SOAP_TYPE_PointerTott__MotionExpression (1322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MotionExpression(struct soap*, tt__MotionExpression *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MotionExpression(struct soap*, const char *, int, tt__MotionExpression *const*, const char *);
SOAP_FMAC3 tt__MotionExpression ** SOAP_FMAC4 soap_in_PointerTott__MotionExpression(struct soap*, const char*, tt__MotionExpression **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MotionExpression(struct soap*, tt__MotionExpression *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MotionExpression
#define soap_write_PointerTott__MotionExpression(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MotionExpression(soap, data), 0) || soap_put_PointerTott__MotionExpression(soap, data, "tt:MotionExpression", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MotionExpression ** SOAP_FMAC4 soap_get_PointerTott__MotionExpression(struct soap*, tt__MotionExpression **, const char*, const char*);

#ifndef soap_read_PointerTott__MotionExpression
#define soap_read_PointerTott__MotionExpression(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MotionExpression(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PolylineArray
#define SOAP_TYPE_PointerTott__PolylineArray (1321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PolylineArray(struct soap*, tt__PolylineArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PolylineArray(struct soap*, const char *, int, tt__PolylineArray *const*, const char *);
SOAP_FMAC3 tt__PolylineArray ** SOAP_FMAC4 soap_in_PointerTott__PolylineArray(struct soap*, const char*, tt__PolylineArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PolylineArray(struct soap*, tt__PolylineArray *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PolylineArray
#define soap_write_PointerTott__PolylineArray(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PolylineArray(soap, data), 0) || soap_put_PointerTott__PolylineArray(soap, data, "tt:PolylineArray", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PolylineArray ** SOAP_FMAC4 soap_get_PointerTott__PolylineArray(struct soap*, tt__PolylineArray **, const char*, const char*);

#ifndef soap_read_PointerTott__PolylineArray
#define soap_read_PointerTott__PolylineArray(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PolylineArray(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PolylineArrayExtension
#define SOAP_TYPE_PointerTott__PolylineArrayExtension (1320)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PolylineArrayExtension(struct soap*, const char *, int, tt__PolylineArrayExtension *const*, const char *);
SOAP_FMAC3 tt__PolylineArrayExtension ** SOAP_FMAC4 soap_in_PointerTott__PolylineArrayExtension(struct soap*, const char*, tt__PolylineArrayExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PolylineArrayExtension
#define soap_write_PointerTott__PolylineArrayExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PolylineArrayExtension(soap, data), 0) || soap_put_PointerTott__PolylineArrayExtension(soap, data, "tt:PolylineArrayExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PolylineArrayExtension ** SOAP_FMAC4 soap_get_PointerTott__PolylineArrayExtension(struct soap*, tt__PolylineArrayExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PolylineArrayExtension
#define soap_read_PointerTott__PolylineArrayExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PolylineArrayExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Polyline
#define SOAP_TYPE_PointerTott__Polyline (1318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Polyline(struct soap*, tt__Polyline *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Polyline(struct soap*, const char *, int, tt__Polyline *const*, const char *);
SOAP_FMAC3 tt__Polyline ** SOAP_FMAC4 soap_in_PointerTott__Polyline(struct soap*, const char*, tt__Polyline **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Polyline(struct soap*, tt__Polyline *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Polyline
#define soap_write_PointerTott__Polyline(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Polyline(soap, data), 0) || soap_put_PointerTott__Polyline(soap, data, "tt:Polyline", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Polyline ** SOAP_FMAC4 soap_get_PointerTott__Polyline(struct soap*, tt__Polyline **, const char*, const char*);

#ifndef soap_read_PointerTott__Polyline
#define soap_read_PointerTott__Polyline(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Polyline(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Polygon
#define SOAP_TYPE_PointerTott__Polygon (1317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Polygon(struct soap*, tt__Polygon *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Polygon(struct soap*, const char *, int, tt__Polygon *const*, const char *);
SOAP_FMAC3 tt__Polygon ** SOAP_FMAC4 soap_in_PointerTott__Polygon(struct soap*, const char*, tt__Polygon **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Polygon(struct soap*, tt__Polygon *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Polygon
#define soap_write_PointerTott__Polygon(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Polygon(soap, data), 0) || soap_put_PointerTott__Polygon(soap, data, "tt:Polygon", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Polygon ** SOAP_FMAC4 soap_get_PointerTott__Polygon(struct soap*, tt__Polygon **, const char*, const char*);

#ifndef soap_read_PointerTott__Polygon
#define soap_read_PointerTott__Polygon(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Polygon(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_PointerTott__SupportedAnalyticsModulesExtension (1316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, const char *, int, tt__SupportedAnalyticsModulesExtension *const*, const char *);
SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension ** SOAP_FMAC4 soap_in_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, const char*, tt__SupportedAnalyticsModulesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SupportedAnalyticsModulesExtension
#define soap_write_PointerTott__SupportedAnalyticsModulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SupportedAnalyticsModulesExtension(soap, data), 0) || soap_put_PointerTott__SupportedAnalyticsModulesExtension(soap, data, "tt:SupportedAnalyticsModulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportedAnalyticsModulesExtension ** SOAP_FMAC4 soap_get_PointerTott__SupportedAnalyticsModulesExtension(struct soap*, tt__SupportedAnalyticsModulesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SupportedAnalyticsModulesExtension
#define soap_read_PointerTott__SupportedAnalyticsModulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SupportedAnalyticsModulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SupportedRulesExtension
#define SOAP_TYPE_PointerTott__SupportedRulesExtension (1315)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SupportedRulesExtension(struct soap*, const char *, int, tt__SupportedRulesExtension *const*, const char *);
SOAP_FMAC3 tt__SupportedRulesExtension ** SOAP_FMAC4 soap_in_PointerTott__SupportedRulesExtension(struct soap*, const char*, tt__SupportedRulesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SupportedRulesExtension
#define soap_write_PointerTott__SupportedRulesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SupportedRulesExtension(soap, data), 0) || soap_put_PointerTott__SupportedRulesExtension(soap, data, "tt:SupportedRulesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SupportedRulesExtension ** SOAP_FMAC4 soap_get_PointerTott__SupportedRulesExtension(struct soap*, tt__SupportedRulesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SupportedRulesExtension
#define soap_read_PointerTott__SupportedRulesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SupportedRulesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ConfigDescription
#define SOAP_TYPE_PointerTott__ConfigDescription (1313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ConfigDescription(struct soap*, tt__ConfigDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ConfigDescription(struct soap*, const char *, int, tt__ConfigDescription *const*, const char *);
SOAP_FMAC3 tt__ConfigDescription ** SOAP_FMAC4 soap_in_PointerTott__ConfigDescription(struct soap*, const char*, tt__ConfigDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ConfigDescription(struct soap*, tt__ConfigDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ConfigDescription
#define soap_write_PointerTott__ConfigDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ConfigDescription(soap, data), 0) || soap_put_PointerTott__ConfigDescription(soap, data, "tt:ConfigDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ConfigDescription ** SOAP_FMAC4 soap_get_PointerTott__ConfigDescription(struct soap*, tt__ConfigDescription **, const char*, const char*);

#ifndef soap_read_PointerTott__ConfigDescription
#define soap_read_PointerTott__ConfigDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ConfigDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (1312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__integer
#define soap_write_PointerToxsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__integer(soap, data), 0) || soap_put_PointerToxsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__integer
#define soap_read_PointerToxsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ConfigDescriptionExtension
#define SOAP_TYPE_PointerTott__ConfigDescriptionExtension (1311)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ConfigDescriptionExtension(struct soap*, const char *, int, tt__ConfigDescriptionExtension *const*, const char *);
SOAP_FMAC3 tt__ConfigDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTott__ConfigDescriptionExtension(struct soap*, const char*, tt__ConfigDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ConfigDescriptionExtension
#define soap_write_PointerTott__ConfigDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ConfigDescriptionExtension(soap, data), 0) || soap_put_PointerTott__ConfigDescriptionExtension(soap, data, "tt:ConfigDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ConfigDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTott__ConfigDescriptionExtension(struct soap*, tt__ConfigDescriptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ConfigDescriptionExtension
#define soap_read_PointerTott__ConfigDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ConfigDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages (1310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char *, int, std::vector<_tt__ConfigDescription_Messages >*const*, const char *);
SOAP_FMAC3 std::vector<_tt__ConfigDescription_Messages >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char*, std::vector<_tt__ConfigDescription_Messages >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages
#define soap_write_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_tt__ConfigDescription_Messages >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages
#define soap_read_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_tt__ConfigDescription_Messages(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ItemList
#define SOAP_TYPE_PointerTott__ItemList (1307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemList(struct soap*, tt__ItemList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemList(struct soap*, const char *, int, tt__ItemList *const*, const char *);
SOAP_FMAC3 tt__ItemList ** SOAP_FMAC4 soap_in_PointerTott__ItemList(struct soap*, const char*, tt__ItemList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemList(struct soap*, tt__ItemList *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ItemList
#define soap_write_PointerTott__ItemList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ItemList(soap, data), 0) || soap_put_PointerTott__ItemList(soap, data, "tt:ItemList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemList ** SOAP_FMAC4 soap_get_PointerTott__ItemList(struct soap*, tt__ItemList **, const char*, const char*);

#ifndef soap_read_PointerTott__ItemList
#define soap_read_PointerTott__ItemList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ItemList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__RuleEngineConfigurationExtension (1306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RuleEngineConfigurationExtension(struct soap*, const char *, int, tt__RuleEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__RuleEngineConfigurationExtension(struct soap*, const char*, tt__RuleEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RuleEngineConfigurationExtension
#define soap_write_PointerTott__RuleEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RuleEngineConfigurationExtension(soap, data), 0) || soap_put_PointerTott__RuleEngineConfigurationExtension(soap, data, "tt:RuleEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RuleEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__RuleEngineConfigurationExtension(struct soap*, tt__RuleEngineConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RuleEngineConfigurationExtension
#define soap_read_PointerTott__RuleEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RuleEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_PointerTott__AnalyticsEngineConfigurationExtension (1305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, const char *, int, tt__AnalyticsEngineConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, const char*, tt__AnalyticsEngineConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsEngineConfigurationExtension
#define soap_write_PointerTott__AnalyticsEngineConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsEngineConfigurationExtension(soap, data), 0) || soap_put_PointerTott__AnalyticsEngineConfigurationExtension(soap, data, "tt:AnalyticsEngineConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsEngineConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsEngineConfigurationExtension(struct soap*, tt__AnalyticsEngineConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsEngineConfigurationExtension
#define soap_read_PointerTott__AnalyticsEngineConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsEngineConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Config
#define SOAP_TYPE_PointerTott__Config (1303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Config(struct soap*, tt__Config *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Config(struct soap*, const char *, int, tt__Config *const*, const char *);
SOAP_FMAC3 tt__Config ** SOAP_FMAC4 soap_in_PointerTott__Config(struct soap*, const char*, tt__Config **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Config(struct soap*, tt__Config *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Config
#define soap_write_PointerTott__Config(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Config(soap, data), 0) || soap_put_PointerTott__Config(soap, data, "tt:Config", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Config ** SOAP_FMAC4 soap_get_PointerTott__Config(struct soap*, tt__Config **, const char*, const char*);

#ifndef soap_read_PointerTott__Config
#define soap_read_PointerTott__Config(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Config(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Vector
#define SOAP_TYPE_PointerTott__Vector (1301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector(struct soap*, tt__Vector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector(struct soap*, const char *, int, tt__Vector *const*, const char *);
SOAP_FMAC3 tt__Vector ** SOAP_FMAC4 soap_in_PointerTott__Vector(struct soap*, const char*, tt__Vector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector(struct soap*, tt__Vector *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Vector
#define soap_write_PointerTott__Vector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Vector(soap, data), 0) || soap_put_PointerTott__Vector(soap, data, "tt:Vector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Vector ** SOAP_FMAC4 soap_get_PointerTott__Vector(struct soap*, tt__Vector **, const char*, const char*);

#ifndef soap_read_PointerTott__Vector
#define soap_read_PointerTott__Vector(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Vector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ItemListDescriptionExtension
#define SOAP_TYPE_PointerTott__ItemListDescriptionExtension (1300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListDescriptionExtension(struct soap*, const char *, int, tt__ItemListDescriptionExtension *const*, const char *);
SOAP_FMAC3 tt__ItemListDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTott__ItemListDescriptionExtension(struct soap*, const char*, tt__ItemListDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ItemListDescriptionExtension
#define soap_write_PointerTott__ItemListDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ItemListDescriptionExtension(soap, data), 0) || soap_put_PointerTott__ItemListDescriptionExtension(soap, data, "tt:ItemListDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemListDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTott__ItemListDescriptionExtension(struct soap*, tt__ItemListDescriptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ItemListDescriptionExtension
#define soap_read_PointerTott__ItemListDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ItemListDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription (1299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char *, int, std::vector<_tt__ItemListDescription_ElementItemDescription >*const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_ElementItemDescription >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_ElementItemDescription >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription
#define soap_write_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_tt__ItemListDescription_ElementItemDescription >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription
#define soap_read_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription (1296)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char *, int, std::vector<_tt__ItemListDescription_SimpleItemDescription >*const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_SimpleItemDescription >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_SimpleItemDescription >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription
#define soap_write_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_tt__ItemListDescription_SimpleItemDescription >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription
#define soap_read_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MessageDescriptionExtension
#define SOAP_TYPE_PointerTott__MessageDescriptionExtension (1293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MessageDescriptionExtension(struct soap*, const char *, int, tt__MessageDescriptionExtension *const*, const char *);
SOAP_FMAC3 tt__MessageDescriptionExtension ** SOAP_FMAC4 soap_in_PointerTott__MessageDescriptionExtension(struct soap*, const char*, tt__MessageDescriptionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MessageDescriptionExtension
#define soap_write_PointerTott__MessageDescriptionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MessageDescriptionExtension(soap, data), 0) || soap_put_PointerTott__MessageDescriptionExtension(soap, data, "tt:MessageDescriptionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MessageDescriptionExtension ** SOAP_FMAC4 soap_get_PointerTott__MessageDescriptionExtension(struct soap*, tt__MessageDescriptionExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__MessageDescriptionExtension
#define soap_read_PointerTott__MessageDescriptionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MessageDescriptionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ItemListDescription
#define SOAP_TYPE_PointerTott__ItemListDescription (1292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListDescription(struct soap*, tt__ItemListDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListDescription(struct soap*, const char *, int, tt__ItemListDescription *const*, const char *);
SOAP_FMAC3 tt__ItemListDescription ** SOAP_FMAC4 soap_in_PointerTott__ItemListDescription(struct soap*, const char*, tt__ItemListDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListDescription(struct soap*, tt__ItemListDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ItemListDescription
#define soap_write_PointerTott__ItemListDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ItemListDescription(soap, data), 0) || soap_put_PointerTott__ItemListDescription(soap, data, "tt:ItemListDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemListDescription ** SOAP_FMAC4 soap_get_PointerTott__ItemListDescription(struct soap*, tt__ItemListDescription **, const char*, const char*);

#ifndef soap_read_PointerTott__ItemListDescription
#define soap_read_PointerTott__ItemListDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ItemListDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ItemListExtension
#define SOAP_TYPE_PointerTott__ItemListExtension (1291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ItemListExtension(struct soap*, const char *, int, tt__ItemListExtension *const*, const char *);
SOAP_FMAC3 tt__ItemListExtension ** SOAP_FMAC4 soap_in_PointerTott__ItemListExtension(struct soap*, const char*, tt__ItemListExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ItemListExtension
#define soap_write_PointerTott__ItemListExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ItemListExtension(soap, data), 0) || soap_put_PointerTott__ItemListExtension(soap, data, "tt:ItemListExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ItemListExtension ** SOAP_FMAC4 soap_get_PointerTott__ItemListExtension(struct soap*, tt__ItemListExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ItemListExtension
#define soap_read_PointerTott__ItemListExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ItemListExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem (1290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char *, int, std::vector<_tt__ItemList_ElementItem >*const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, std::vector<_tt__ItemList_ElementItem >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem
#define soap_write_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem
#define soap_read_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_tt__ItemList_ElementItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem (1287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char *, int, std::vector<_tt__ItemList_SimpleItem >*const*, const char *);
SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, std::vector<_tt__ItemList_SimpleItem >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem
#define soap_write_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem
#define soap_read_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_tt__ItemList_SimpleItem(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusOptions20Extension
#define SOAP_TYPE_PointerTott__FocusOptions20Extension (1284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusOptions20Extension(struct soap*, const char *, int, tt__FocusOptions20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusOptions20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusOptions20Extension(struct soap*, const char*, tt__FocusOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusOptions20Extension
#define soap_write_PointerTott__FocusOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusOptions20Extension(soap, data), 0) || soap_put_PointerTott__FocusOptions20Extension(soap, data, "tt:FocusOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusOptions20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusOptions20Extension(struct soap*, tt__FocusOptions20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusOptions20Extension
#define soap_read_PointerTott__FocusOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20Extension (1283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalanceOptions20Extension(struct soap*, const char *, int, tt__WhiteBalanceOptions20Extension *const*, const char *);
SOAP_FMAC3 tt__WhiteBalanceOptions20Extension ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalanceOptions20Extension(struct soap*, const char*, tt__WhiteBalanceOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WhiteBalanceOptions20Extension
#define soap_write_PointerTott__WhiteBalanceOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WhiteBalanceOptions20Extension(soap, data), 0) || soap_put_PointerTott__WhiteBalanceOptions20Extension(soap, data, "tt:WhiteBalanceOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceOptions20Extension ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalanceOptions20Extension(struct soap*, tt__WhiteBalanceOptions20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__WhiteBalanceOptions20Extension
#define soap_read_PointerTott__WhiteBalanceOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WhiteBalanceOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20Extension
#define SOAP_TYPE_PointerTott__FocusConfiguration20Extension (1282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration20Extension(struct soap*, const char *, int, tt__FocusConfiguration20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration20Extension(struct soap*, const char*, tt__FocusConfiguration20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusConfiguration20Extension
#define soap_write_PointerTott__FocusConfiguration20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusConfiguration20Extension(soap, data), 0) || soap_put_PointerTott__FocusConfiguration20Extension(soap, data, "tt:FocusConfiguration20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusConfiguration20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration20Extension(struct soap*, tt__FocusConfiguration20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusConfiguration20Extension
#define soap_read_PointerTott__FocusConfiguration20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusConfiguration20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WhiteBalance20Extension
#define SOAP_TYPE_PointerTott__WhiteBalance20Extension (1281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance20Extension(struct soap*, const char *, int, tt__WhiteBalance20Extension *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance20Extension ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance20Extension(struct soap*, const char*, tt__WhiteBalance20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WhiteBalance20Extension
#define soap_write_PointerTott__WhiteBalance20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WhiteBalance20Extension(soap, data), 0) || soap_put_PointerTott__WhiteBalance20Extension(soap, data, "tt:WhiteBalance20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalance20Extension ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance20Extension(struct soap*, tt__WhiteBalance20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__WhiteBalance20Extension
#define soap_read_PointerTott__WhiteBalance20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WhiteBalance20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions20
#define SOAP_TYPE_PointerTott__RelativeFocusOptions20 (1280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelativeFocusOptions20(struct soap*, const char *, int, tt__RelativeFocusOptions20 *const*, const char *);
SOAP_FMAC3 tt__RelativeFocusOptions20 ** SOAP_FMAC4 soap_in_PointerTott__RelativeFocusOptions20(struct soap*, const char*, tt__RelativeFocusOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RelativeFocusOptions20
#define soap_write_PointerTott__RelativeFocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RelativeFocusOptions20(soap, data), 0) || soap_put_PointerTott__RelativeFocusOptions20(soap, data, "tt:RelativeFocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelativeFocusOptions20 ** SOAP_FMAC4 soap_get_PointerTott__RelativeFocusOptions20(struct soap*, tt__RelativeFocusOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTott__RelativeFocusOptions20
#define soap_read_PointerTott__RelativeFocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RelativeFocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension (1278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_write_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, data), 0) || soap_put_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, data, "tt:IrCutFilterAutoAdjustmentOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(struct soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension
#define soap_read_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IrCutFilterAutoAdjustmentOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension
#define SOAP_TYPE_PointerTott__ImageStabilizationOptionsExtension (1277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationOptionsExtension(struct soap*, const char *, int, tt__ImageStabilizationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationOptionsExtension(struct soap*, const char*, tt__ImageStabilizationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImageStabilizationOptionsExtension
#define soap_write_PointerTott__ImageStabilizationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImageStabilizationOptionsExtension(soap, data), 0) || soap_put_PointerTott__ImageStabilizationOptionsExtension(soap, data, "tt:ImageStabilizationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationOptionsExtension(struct soap*, tt__ImageStabilizationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ImageStabilizationOptionsExtension
#define soap_read_PointerTott__ImageStabilizationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImageStabilizationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension4
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension4 (1275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension4(struct soap*, const char *, int, tt__ImagingOptions20Extension4 *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension4 ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension4(struct soap*, const char*, tt__ImagingOptions20Extension4 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingOptions20Extension4
#define soap_write_PointerTott__ImagingOptions20Extension4(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingOptions20Extension4(soap, data), 0) || soap_put_PointerTott__ImagingOptions20Extension4(soap, data, "tt:ImagingOptions20Extension4", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension4 ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension4(struct soap*, tt__ImagingOptions20Extension4 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingOptions20Extension4
#define soap_read_PointerTott__ImagingOptions20Extension4(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingOptions20Extension4(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NoiseReductionOptions
#define SOAP_TYPE_PointerTott__NoiseReductionOptions (1274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NoiseReductionOptions(struct soap*, const char *, int, tt__NoiseReductionOptions *const*, const char *);
SOAP_FMAC3 tt__NoiseReductionOptions ** SOAP_FMAC4 soap_in_PointerTott__NoiseReductionOptions(struct soap*, const char*, tt__NoiseReductionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NoiseReductionOptions
#define soap_write_PointerTott__NoiseReductionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NoiseReductionOptions(soap, data), 0) || soap_put_PointerTott__NoiseReductionOptions(soap, data, "tt:NoiseReductionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NoiseReductionOptions ** SOAP_FMAC4 soap_get_PointerTott__NoiseReductionOptions(struct soap*, tt__NoiseReductionOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__NoiseReductionOptions
#define soap_read_PointerTott__NoiseReductionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NoiseReductionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DefoggingOptions
#define SOAP_TYPE_PointerTott__DefoggingOptions (1273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DefoggingOptions(struct soap*, tt__DefoggingOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DefoggingOptions(struct soap*, const char *, int, tt__DefoggingOptions *const*, const char *);
SOAP_FMAC3 tt__DefoggingOptions ** SOAP_FMAC4 soap_in_PointerTott__DefoggingOptions(struct soap*, const char*, tt__DefoggingOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DefoggingOptions(struct soap*, tt__DefoggingOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DefoggingOptions
#define soap_write_PointerTott__DefoggingOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DefoggingOptions(soap, data), 0) || soap_put_PointerTott__DefoggingOptions(soap, data, "tt:DefoggingOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DefoggingOptions ** SOAP_FMAC4 soap_get_PointerTott__DefoggingOptions(struct soap*, tt__DefoggingOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__DefoggingOptions
#define soap_read_PointerTott__DefoggingOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DefoggingOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ToneCompensationOptions
#define SOAP_TYPE_PointerTott__ToneCompensationOptions (1272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensationOptions(struct soap*, const char *, int, tt__ToneCompensationOptions *const*, const char *);
SOAP_FMAC3 tt__ToneCompensationOptions ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensationOptions(struct soap*, const char*, tt__ToneCompensationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ToneCompensationOptions
#define soap_write_PointerTott__ToneCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ToneCompensationOptions(soap, data), 0) || soap_put_PointerTott__ToneCompensationOptions(soap, data, "tt:ToneCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensationOptions ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensationOptions(struct soap*, tt__ToneCompensationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__ToneCompensationOptions
#define soap_read_PointerTott__ToneCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ToneCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension3
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension3 (1271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension3(struct soap*, const char *, int, tt__ImagingOptions20Extension3 *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension3 ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension3(struct soap*, const char*, tt__ImagingOptions20Extension3 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingOptions20Extension3
#define soap_write_PointerTott__ImagingOptions20Extension3(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingOptions20Extension3(soap, data), 0) || soap_put_PointerTott__ImagingOptions20Extension3(soap, data, "tt:ImagingOptions20Extension3", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension3 ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension3(struct soap*, tt__ImagingOptions20Extension3 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingOptions20Extension3
#define soap_read_PointerTott__ImagingOptions20Extension3(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingOptions20Extension3(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentOptions (1270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentOptions *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IrCutFilterAutoAdjustmentOptions
#define soap_write_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, data), 0) || soap_put_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, data, "tt:IrCutFilterAutoAdjustmentOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentOptions ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentOptions(struct soap*, tt__IrCutFilterAutoAdjustmentOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__IrCutFilterAutoAdjustmentOptions
#define soap_read_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IrCutFilterAutoAdjustmentOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension2
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension2 (1269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension2(struct soap*, const char *, int, tt__ImagingOptions20Extension2 *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension2 ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension2(struct soap*, const char*, tt__ImagingOptions20Extension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingOptions20Extension2
#define soap_write_PointerTott__ImagingOptions20Extension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingOptions20Extension2(soap, data), 0) || soap_put_PointerTott__ImagingOptions20Extension2(soap, data, "tt:ImagingOptions20Extension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension2 ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension2(struct soap*, tt__ImagingOptions20Extension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingOptions20Extension2
#define soap_read_PointerTott__ImagingOptions20Extension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingOptions20Extension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImageStabilizationOptions
#define SOAP_TYPE_PointerTott__ImageStabilizationOptions (1268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationOptions(struct soap*, const char *, int, tt__ImageStabilizationOptions *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationOptions ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationOptions(struct soap*, const char*, tt__ImageStabilizationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImageStabilizationOptions
#define soap_write_PointerTott__ImageStabilizationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImageStabilizationOptions(soap, data), 0) || soap_put_PointerTott__ImageStabilizationOptions(soap, data, "tt:ImageStabilizationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationOptions ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationOptions(struct soap*, tt__ImageStabilizationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__ImageStabilizationOptions
#define soap_read_PointerTott__ImageStabilizationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImageStabilizationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingOptions20Extension
#define SOAP_TYPE_PointerTott__ImagingOptions20Extension (1267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingOptions20Extension(struct soap*, const char *, int, tt__ImagingOptions20Extension *const*, const char *);
SOAP_FMAC3 tt__ImagingOptions20Extension ** SOAP_FMAC4 soap_in_PointerTott__ImagingOptions20Extension(struct soap*, const char*, tt__ImagingOptions20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingOptions20Extension
#define soap_write_PointerTott__ImagingOptions20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingOptions20Extension(soap, data), 0) || soap_put_PointerTott__ImagingOptions20Extension(soap, data, "tt:ImagingOptions20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingOptions20Extension ** SOAP_FMAC4 soap_get_PointerTott__ImagingOptions20Extension(struct soap*, tt__ImagingOptions20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingOptions20Extension
#define soap_read_PointerTott__ImagingOptions20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingOptions20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions20
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions20 (1266)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalanceOptions20(struct soap*, const char *, int, tt__WhiteBalanceOptions20 *const*, const char *);
SOAP_FMAC3 tt__WhiteBalanceOptions20 ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalanceOptions20(struct soap*, const char*, tt__WhiteBalanceOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WhiteBalanceOptions20
#define soap_write_PointerTott__WhiteBalanceOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WhiteBalanceOptions20(soap, data), 0) || soap_put_PointerTott__WhiteBalanceOptions20(soap, data, "tt:WhiteBalanceOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceOptions20 ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalanceOptions20(struct soap*, tt__WhiteBalanceOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTott__WhiteBalanceOptions20
#define soap_read_PointerTott__WhiteBalanceOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WhiteBalanceOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions20
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions20 (1265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRangeOptions20(struct soap*, const char *, int, tt__WideDynamicRangeOptions20 *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRangeOptions20 ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRangeOptions20(struct soap*, const char*, tt__WideDynamicRangeOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WideDynamicRangeOptions20
#define soap_write_PointerTott__WideDynamicRangeOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WideDynamicRangeOptions20(soap, data), 0) || soap_put_PointerTott__WideDynamicRangeOptions20(soap, data, "tt:WideDynamicRangeOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRangeOptions20 ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRangeOptions20(struct soap*, tt__WideDynamicRangeOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTott__WideDynamicRangeOptions20
#define soap_read_PointerTott__WideDynamicRangeOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WideDynamicRangeOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusOptions20
#define SOAP_TYPE_PointerTott__FocusOptions20 (1264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusOptions20(struct soap*, tt__FocusOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusOptions20(struct soap*, const char *, int, tt__FocusOptions20 *const*, const char *);
SOAP_FMAC3 tt__FocusOptions20 ** SOAP_FMAC4 soap_in_PointerTott__FocusOptions20(struct soap*, const char*, tt__FocusOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusOptions20(struct soap*, tt__FocusOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusOptions20
#define soap_write_PointerTott__FocusOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusOptions20(soap, data), 0) || soap_put_PointerTott__FocusOptions20(soap, data, "tt:FocusOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusOptions20 ** SOAP_FMAC4 soap_get_PointerTott__FocusOptions20(struct soap*, tt__FocusOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusOptions20
#define soap_read_PointerTott__FocusOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ExposureOptions20
#define SOAP_TYPE_PointerTott__ExposureOptions20 (1263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposureOptions20(struct soap*, tt__ExposureOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposureOptions20(struct soap*, const char *, int, tt__ExposureOptions20 *const*, const char *);
SOAP_FMAC3 tt__ExposureOptions20 ** SOAP_FMAC4 soap_in_PointerTott__ExposureOptions20(struct soap*, const char*, tt__ExposureOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposureOptions20(struct soap*, tt__ExposureOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ExposureOptions20
#define soap_write_PointerTott__ExposureOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ExposureOptions20(soap, data), 0) || soap_put_PointerTott__ExposureOptions20(soap, data, "tt:ExposureOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ExposureOptions20 ** SOAP_FMAC4 soap_get_PointerTott__ExposureOptions20(struct soap*, tt__ExposureOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTott__ExposureOptions20
#define soap_read_PointerTott__ExposureOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ExposureOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions20
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions20 (1262)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensationOptions20(struct soap*, const char *, int, tt__BacklightCompensationOptions20 *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensationOptions20 ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensationOptions20(struct soap*, const char*, tt__BacklightCompensationOptions20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__BacklightCompensationOptions20
#define soap_write_PointerTott__BacklightCompensationOptions20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__BacklightCompensationOptions20(soap, data), 0) || soap_put_PointerTott__BacklightCompensationOptions20(soap, data, "tt:BacklightCompensationOptions20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensationOptions20 ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensationOptions20(struct soap*, tt__BacklightCompensationOptions20 **, const char*, const char*);

#ifndef soap_read_PointerTott__BacklightCompensationOptions20
#define soap_read_PointerTott__BacklightCompensationOptions20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__BacklightCompensationOptions20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DefoggingExtension
#define SOAP_TYPE_PointerTott__DefoggingExtension (1261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DefoggingExtension(struct soap*, const char *, int, tt__DefoggingExtension *const*, const char *);
SOAP_FMAC3 tt__DefoggingExtension ** SOAP_FMAC4 soap_in_PointerTott__DefoggingExtension(struct soap*, const char*, tt__DefoggingExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DefoggingExtension
#define soap_write_PointerTott__DefoggingExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DefoggingExtension(soap, data), 0) || soap_put_PointerTott__DefoggingExtension(soap, data, "tt:DefoggingExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DefoggingExtension ** SOAP_FMAC4 soap_get_PointerTott__DefoggingExtension(struct soap*, tt__DefoggingExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__DefoggingExtension
#define soap_read_PointerTott__DefoggingExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DefoggingExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ToneCompensationExtension
#define SOAP_TYPE_PointerTott__ToneCompensationExtension (1260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensationExtension(struct soap*, const char *, int, tt__ToneCompensationExtension *const*, const char *);
SOAP_FMAC3 tt__ToneCompensationExtension ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensationExtension(struct soap*, const char*, tt__ToneCompensationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ToneCompensationExtension
#define soap_write_PointerTott__ToneCompensationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ToneCompensationExtension(soap, data), 0) || soap_put_PointerTott__ToneCompensationExtension(soap, data, "tt:ToneCompensationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensationExtension ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensationExtension(struct soap*, tt__ToneCompensationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ToneCompensationExtension
#define soap_read_PointerTott__ToneCompensationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ToneCompensationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ExposurePriority
#define SOAP_TYPE_PointerTott__ExposurePriority (1259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposurePriority(struct soap*, const char *, int, enum tt__ExposurePriority *const*, const char *);
SOAP_FMAC3 enum tt__ExposurePriority ** SOAP_FMAC4 soap_in_PointerTott__ExposurePriority(struct soap*, const char*, enum tt__ExposurePriority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ExposurePriority
#define soap_write_PointerTott__ExposurePriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ExposurePriority(soap, data), 0) || soap_put_PointerTott__ExposurePriority(soap, data, "tt:ExposurePriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__ExposurePriority ** SOAP_FMAC4 soap_get_PointerTott__ExposurePriority(struct soap*, enum tt__ExposurePriority **, const char*, const char*);

#ifndef soap_read_PointerTott__ExposurePriority
#define soap_read_PointerTott__ExposurePriority(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ExposurePriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustmentExtension (1258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustmentExtension *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, const char*, tt__IrCutFilterAutoAdjustmentExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IrCutFilterAutoAdjustmentExtension
#define soap_write_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, data), 0) || soap_put_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, data, "tt:IrCutFilterAutoAdjustmentExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustmentExtension ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustmentExtension(struct soap*, tt__IrCutFilterAutoAdjustmentExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__IrCutFilterAutoAdjustmentExtension
#define soap_read_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IrCutFilterAutoAdjustmentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImageStabilizationExtension
#define SOAP_TYPE_PointerTott__ImageStabilizationExtension (1257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilizationExtension(struct soap*, const char *, int, tt__ImageStabilizationExtension *const*, const char *);
SOAP_FMAC3 tt__ImageStabilizationExtension ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilizationExtension(struct soap*, const char*, tt__ImageStabilizationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImageStabilizationExtension
#define soap_write_PointerTott__ImageStabilizationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImageStabilizationExtension(soap, data), 0) || soap_put_PointerTott__ImageStabilizationExtension(soap, data, "tt:ImageStabilizationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilizationExtension ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilizationExtension(struct soap*, tt__ImageStabilizationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ImageStabilizationExtension
#define soap_read_PointerTott__ImageStabilizationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImageStabilizationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension204
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension204 (1256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension204(struct soap*, const char *, int, tt__ImagingSettingsExtension204 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension204(struct soap*, const char*, tt__ImagingSettingsExtension204 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettingsExtension204
#define soap_write_PointerTott__ImagingSettingsExtension204(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettingsExtension204(soap, data), 0) || soap_put_PointerTott__ImagingSettingsExtension204(soap, data, "tt:ImagingSettingsExtension204", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension204 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension204(struct soap*, tt__ImagingSettingsExtension204 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettingsExtension204
#define soap_read_PointerTott__ImagingSettingsExtension204(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettingsExtension204(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NoiseReduction
#define SOAP_TYPE_PointerTott__NoiseReduction (1255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NoiseReduction(struct soap*, const char *, int, tt__NoiseReduction *const*, const char *);
SOAP_FMAC3 tt__NoiseReduction ** SOAP_FMAC4 soap_in_PointerTott__NoiseReduction(struct soap*, const char*, tt__NoiseReduction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NoiseReduction
#define soap_write_PointerTott__NoiseReduction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NoiseReduction(soap, data), 0) || soap_put_PointerTott__NoiseReduction(soap, data, "tt:NoiseReduction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NoiseReduction ** SOAP_FMAC4 soap_get_PointerTott__NoiseReduction(struct soap*, tt__NoiseReduction **, const char*, const char*);

#ifndef soap_read_PointerTott__NoiseReduction
#define soap_read_PointerTott__NoiseReduction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NoiseReduction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Defogging
#define SOAP_TYPE_PointerTott__Defogging (1254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Defogging(struct soap*, tt__Defogging *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Defogging(struct soap*, const char *, int, tt__Defogging *const*, const char *);
SOAP_FMAC3 tt__Defogging ** SOAP_FMAC4 soap_in_PointerTott__Defogging(struct soap*, const char*, tt__Defogging **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Defogging(struct soap*, tt__Defogging *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Defogging
#define soap_write_PointerTott__Defogging(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Defogging(soap, data), 0) || soap_put_PointerTott__Defogging(soap, data, "tt:Defogging", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Defogging ** SOAP_FMAC4 soap_get_PointerTott__Defogging(struct soap*, tt__Defogging **, const char*, const char*);

#ifndef soap_read_PointerTott__Defogging
#define soap_read_PointerTott__Defogging(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Defogging(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ToneCompensation
#define SOAP_TYPE_PointerTott__ToneCompensation (1253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ToneCompensation(struct soap*, const char *, int, tt__ToneCompensation *const*, const char *);
SOAP_FMAC3 tt__ToneCompensation ** SOAP_FMAC4 soap_in_PointerTott__ToneCompensation(struct soap*, const char*, tt__ToneCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ToneCompensation
#define soap_write_PointerTott__ToneCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ToneCompensation(soap, data), 0) || soap_put_PointerTott__ToneCompensation(soap, data, "tt:ToneCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ToneCompensation ** SOAP_FMAC4 soap_get_PointerTott__ToneCompensation(struct soap*, tt__ToneCompensation **, const char*, const char*);

#ifndef soap_read_PointerTott__ToneCompensation
#define soap_read_PointerTott__ToneCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ToneCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension203
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension203 (1252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension203(struct soap*, const char *, int, tt__ImagingSettingsExtension203 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension203(struct soap*, const char*, tt__ImagingSettingsExtension203 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettingsExtension203
#define soap_write_PointerTott__ImagingSettingsExtension203(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettingsExtension203(soap, data), 0) || soap_put_PointerTott__ImagingSettingsExtension203(soap, data, "tt:ImagingSettingsExtension203", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension203 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension203(struct soap*, tt__ImagingSettingsExtension203 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettingsExtension203
#define soap_read_PointerTott__ImagingSettingsExtension203(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettingsExtension203(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment
#define SOAP_TYPE_PointerTott__IrCutFilterAutoAdjustment (1250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterAutoAdjustment(struct soap*, const char *, int, tt__IrCutFilterAutoAdjustment *const*, const char *);
SOAP_FMAC3 tt__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, tt__IrCutFilterAutoAdjustment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IrCutFilterAutoAdjustment
#define soap_write_PointerTott__IrCutFilterAutoAdjustment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IrCutFilterAutoAdjustment(soap, data), 0) || soap_put_PointerTott__IrCutFilterAutoAdjustment(soap, data, "tt:IrCutFilterAutoAdjustment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IrCutFilterAutoAdjustment ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterAutoAdjustment(struct soap*, tt__IrCutFilterAutoAdjustment **, const char*, const char*);

#ifndef soap_read_PointerTott__IrCutFilterAutoAdjustment
#define soap_read_PointerTott__IrCutFilterAutoAdjustment(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IrCutFilterAutoAdjustment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension202
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension202 (1249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension202(struct soap*, const char *, int, tt__ImagingSettingsExtension202 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension202(struct soap*, const char*, tt__ImagingSettingsExtension202 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettingsExtension202
#define soap_write_PointerTott__ImagingSettingsExtension202(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettingsExtension202(soap, data), 0) || soap_put_PointerTott__ImagingSettingsExtension202(soap, data, "tt:ImagingSettingsExtension202", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension202 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension202(struct soap*, tt__ImagingSettingsExtension202 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettingsExtension202
#define soap_read_PointerTott__ImagingSettingsExtension202(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettingsExtension202(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImageStabilization
#define SOAP_TYPE_PointerTott__ImageStabilization (1248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImageStabilization(struct soap*, const char *, int, tt__ImageStabilization *const*, const char *);
SOAP_FMAC3 tt__ImageStabilization ** SOAP_FMAC4 soap_in_PointerTott__ImageStabilization(struct soap*, const char*, tt__ImageStabilization **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImageStabilization
#define soap_write_PointerTott__ImageStabilization(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImageStabilization(soap, data), 0) || soap_put_PointerTott__ImageStabilization(soap, data, "tt:ImageStabilization", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImageStabilization ** SOAP_FMAC4 soap_get_PointerTott__ImageStabilization(struct soap*, tt__ImageStabilization **, const char*, const char*);

#ifndef soap_read_PointerTott__ImageStabilization
#define soap_read_PointerTott__ImageStabilization(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImageStabilization(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension20
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension20 (1247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension20(struct soap*, const char *, int, tt__ImagingSettingsExtension20 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension20(struct soap*, const char*, tt__ImagingSettingsExtension20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettingsExtension20
#define soap_write_PointerTott__ImagingSettingsExtension20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettingsExtension20(soap, data), 0) || soap_put_PointerTott__ImagingSettingsExtension20(soap, data, "tt:ImagingSettingsExtension20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension20 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension20(struct soap*, tt__ImagingSettingsExtension20 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettingsExtension20
#define soap_read_PointerTott__ImagingSettingsExtension20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettingsExtension20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WhiteBalance20
#define SOAP_TYPE_PointerTott__WhiteBalance20 (1246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance20(struct soap*, const char *, int, tt__WhiteBalance20 *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance20 ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance20(struct soap*, const char*, tt__WhiteBalance20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WhiteBalance20
#define soap_write_PointerTott__WhiteBalance20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WhiteBalance20(soap, data), 0) || soap_put_PointerTott__WhiteBalance20(soap, data, "tt:WhiteBalance20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalance20 ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance20(struct soap*, tt__WhiteBalance20 **, const char*, const char*);

#ifndef soap_read_PointerTott__WhiteBalance20
#define soap_read_PointerTott__WhiteBalance20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WhiteBalance20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WideDynamicRange20
#define SOAP_TYPE_PointerTott__WideDynamicRange20 (1245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRange20(struct soap*, const char *, int, tt__WideDynamicRange20 *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRange20 ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRange20(struct soap*, const char*, tt__WideDynamicRange20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WideDynamicRange20
#define soap_write_PointerTott__WideDynamicRange20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WideDynamicRange20(soap, data), 0) || soap_put_PointerTott__WideDynamicRange20(soap, data, "tt:WideDynamicRange20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRange20 ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRange20(struct soap*, tt__WideDynamicRange20 **, const char*, const char*);

#ifndef soap_read_PointerTott__WideDynamicRange20
#define soap_read_PointerTott__WideDynamicRange20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WideDynamicRange20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusConfiguration20
#define SOAP_TYPE_PointerTott__FocusConfiguration20 (1244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration20(struct soap*, const char *, int, tt__FocusConfiguration20 *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration20 ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration20(struct soap*, const char*, tt__FocusConfiguration20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusConfiguration20
#define soap_write_PointerTott__FocusConfiguration20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusConfiguration20(soap, data), 0) || soap_put_PointerTott__FocusConfiguration20(soap, data, "tt:FocusConfiguration20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusConfiguration20 ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration20(struct soap*, tt__FocusConfiguration20 **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusConfiguration20
#define soap_read_PointerTott__FocusConfiguration20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusConfiguration20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Exposure20
#define SOAP_TYPE_PointerTott__Exposure20 (1243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Exposure20(struct soap*, tt__Exposure20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Exposure20(struct soap*, const char *, int, tt__Exposure20 *const*, const char *);
SOAP_FMAC3 tt__Exposure20 ** SOAP_FMAC4 soap_in_PointerTott__Exposure20(struct soap*, const char*, tt__Exposure20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Exposure20(struct soap*, tt__Exposure20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Exposure20
#define soap_write_PointerTott__Exposure20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Exposure20(soap, data), 0) || soap_put_PointerTott__Exposure20(soap, data, "tt:Exposure20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Exposure20 ** SOAP_FMAC4 soap_get_PointerTott__Exposure20(struct soap*, tt__Exposure20 **, const char*, const char*);

#ifndef soap_read_PointerTott__Exposure20
#define soap_read_PointerTott__Exposure20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Exposure20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__BacklightCompensation20
#define SOAP_TYPE_PointerTott__BacklightCompensation20 (1242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensation20(struct soap*, const char *, int, tt__BacklightCompensation20 *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensation20 ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensation20(struct soap*, const char*, tt__BacklightCompensation20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__BacklightCompensation20
#define soap_write_PointerTott__BacklightCompensation20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__BacklightCompensation20(soap, data), 0) || soap_put_PointerTott__BacklightCompensation20(soap, data, "tt:BacklightCompensation20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensation20 ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensation20(struct soap*, tt__BacklightCompensation20 **, const char*, const char*);

#ifndef soap_read_PointerTott__BacklightCompensation20
#define soap_read_PointerTott__BacklightCompensation20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__BacklightCompensation20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusStatus20Extension
#define SOAP_TYPE_PointerTott__FocusStatus20Extension (1241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusStatus20Extension(struct soap*, const char *, int, tt__FocusStatus20Extension *const*, const char *);
SOAP_FMAC3 tt__FocusStatus20Extension ** SOAP_FMAC4 soap_in_PointerTott__FocusStatus20Extension(struct soap*, const char*, tt__FocusStatus20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusStatus20Extension
#define soap_write_PointerTott__FocusStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusStatus20Extension(soap, data), 0) || soap_put_PointerTott__FocusStatus20Extension(soap, data, "tt:FocusStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusStatus20Extension ** SOAP_FMAC4 soap_get_PointerTott__FocusStatus20Extension(struct soap*, tt__FocusStatus20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusStatus20Extension
#define soap_read_PointerTott__FocusStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingStatus20Extension
#define SOAP_TYPE_PointerTott__ImagingStatus20Extension (1240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingStatus20Extension(struct soap*, const char *, int, tt__ImagingStatus20Extension *const*, const char *);
SOAP_FMAC3 tt__ImagingStatus20Extension ** SOAP_FMAC4 soap_in_PointerTott__ImagingStatus20Extension(struct soap*, const char*, tt__ImagingStatus20Extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingStatus20Extension
#define soap_write_PointerTott__ImagingStatus20Extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingStatus20Extension(soap, data), 0) || soap_put_PointerTott__ImagingStatus20Extension(soap, data, "tt:ImagingStatus20Extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingStatus20Extension ** SOAP_FMAC4 soap_get_PointerTott__ImagingStatus20Extension(struct soap*, tt__ImagingStatus20Extension **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingStatus20Extension
#define soap_read_PointerTott__ImagingStatus20Extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingStatus20Extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusStatus20
#define SOAP_TYPE_PointerTott__FocusStatus20 (1239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusStatus20(struct soap*, tt__FocusStatus20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusStatus20(struct soap*, const char *, int, tt__FocusStatus20 *const*, const char *);
SOAP_FMAC3 tt__FocusStatus20 ** SOAP_FMAC4 soap_in_PointerTott__FocusStatus20(struct soap*, const char*, tt__FocusStatus20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusStatus20(struct soap*, tt__FocusStatus20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusStatus20
#define soap_write_PointerTott__FocusStatus20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusStatus20(soap, data), 0) || soap_put_PointerTott__FocusStatus20(soap, data, "tt:FocusStatus20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusStatus20 ** SOAP_FMAC4 soap_get_PointerTott__FocusStatus20(struct soap*, tt__FocusStatus20 **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusStatus20
#define soap_read_PointerTott__FocusStatus20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusStatus20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ContinuousFocusOptions
#define SOAP_TYPE_PointerTott__ContinuousFocusOptions (1238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ContinuousFocusOptions(struct soap*, const char *, int, tt__ContinuousFocusOptions *const*, const char *);
SOAP_FMAC3 tt__ContinuousFocusOptions ** SOAP_FMAC4 soap_in_PointerTott__ContinuousFocusOptions(struct soap*, const char*, tt__ContinuousFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ContinuousFocusOptions
#define soap_write_PointerTott__ContinuousFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ContinuousFocusOptions(soap, data), 0) || soap_put_PointerTott__ContinuousFocusOptions(soap, data, "tt:ContinuousFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ContinuousFocusOptions ** SOAP_FMAC4 soap_get_PointerTott__ContinuousFocusOptions(struct soap*, tt__ContinuousFocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__ContinuousFocusOptions
#define soap_read_PointerTott__ContinuousFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ContinuousFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RelativeFocusOptions
#define SOAP_TYPE_PointerTott__RelativeFocusOptions (1237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelativeFocusOptions(struct soap*, const char *, int, tt__RelativeFocusOptions *const*, const char *);
SOAP_FMAC3 tt__RelativeFocusOptions ** SOAP_FMAC4 soap_in_PointerTott__RelativeFocusOptions(struct soap*, const char*, tt__RelativeFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RelativeFocusOptions
#define soap_write_PointerTott__RelativeFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RelativeFocusOptions(soap, data), 0) || soap_put_PointerTott__RelativeFocusOptions(soap, data, "tt:RelativeFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelativeFocusOptions ** SOAP_FMAC4 soap_get_PointerTott__RelativeFocusOptions(struct soap*, tt__RelativeFocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__RelativeFocusOptions
#define soap_read_PointerTott__RelativeFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RelativeFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AbsoluteFocusOptions
#define SOAP_TYPE_PointerTott__AbsoluteFocusOptions (1236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AbsoluteFocusOptions(struct soap*, const char *, int, tt__AbsoluteFocusOptions *const*, const char *);
SOAP_FMAC3 tt__AbsoluteFocusOptions ** SOAP_FMAC4 soap_in_PointerTott__AbsoluteFocusOptions(struct soap*, const char*, tt__AbsoluteFocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AbsoluteFocusOptions
#define soap_write_PointerTott__AbsoluteFocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AbsoluteFocusOptions(soap, data), 0) || soap_put_PointerTott__AbsoluteFocusOptions(soap, data, "tt:AbsoluteFocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AbsoluteFocusOptions ** SOAP_FMAC4 soap_get_PointerTott__AbsoluteFocusOptions(struct soap*, tt__AbsoluteFocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AbsoluteFocusOptions
#define soap_read_PointerTott__AbsoluteFocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AbsoluteFocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ContinuousFocus
#define SOAP_TYPE_PointerTott__ContinuousFocus (1235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ContinuousFocus(struct soap*, tt__ContinuousFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ContinuousFocus(struct soap*, const char *, int, tt__ContinuousFocus *const*, const char *);
SOAP_FMAC3 tt__ContinuousFocus ** SOAP_FMAC4 soap_in_PointerTott__ContinuousFocus(struct soap*, const char*, tt__ContinuousFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ContinuousFocus(struct soap*, tt__ContinuousFocus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ContinuousFocus
#define soap_write_PointerTott__ContinuousFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ContinuousFocus(soap, data), 0) || soap_put_PointerTott__ContinuousFocus(soap, data, "tt:ContinuousFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ContinuousFocus ** SOAP_FMAC4 soap_get_PointerTott__ContinuousFocus(struct soap*, tt__ContinuousFocus **, const char*, const char*);

#ifndef soap_read_PointerTott__ContinuousFocus
#define soap_read_PointerTott__ContinuousFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ContinuousFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RelativeFocus
#define SOAP_TYPE_PointerTott__RelativeFocus (1234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RelativeFocus(struct soap*, tt__RelativeFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RelativeFocus(struct soap*, const char *, int, tt__RelativeFocus *const*, const char *);
SOAP_FMAC3 tt__RelativeFocus ** SOAP_FMAC4 soap_in_PointerTott__RelativeFocus(struct soap*, const char*, tt__RelativeFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RelativeFocus(struct soap*, tt__RelativeFocus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RelativeFocus
#define soap_write_PointerTott__RelativeFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RelativeFocus(soap, data), 0) || soap_put_PointerTott__RelativeFocus(soap, data, "tt:RelativeFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RelativeFocus ** SOAP_FMAC4 soap_get_PointerTott__RelativeFocus(struct soap*, tt__RelativeFocus **, const char*, const char*);

#ifndef soap_read_PointerTott__RelativeFocus
#define soap_read_PointerTott__RelativeFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RelativeFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AbsoluteFocus
#define SOAP_TYPE_PointerTott__AbsoluteFocus (1233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AbsoluteFocus(struct soap*, tt__AbsoluteFocus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AbsoluteFocus(struct soap*, const char *, int, tt__AbsoluteFocus *const*, const char *);
SOAP_FMAC3 tt__AbsoluteFocus ** SOAP_FMAC4 soap_in_PointerTott__AbsoluteFocus(struct soap*, const char*, tt__AbsoluteFocus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AbsoluteFocus(struct soap*, tt__AbsoluteFocus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AbsoluteFocus
#define soap_write_PointerTott__AbsoluteFocus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AbsoluteFocus(soap, data), 0) || soap_put_PointerTott__AbsoluteFocus(soap, data, "tt:AbsoluteFocus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AbsoluteFocus ** SOAP_FMAC4 soap_get_PointerTott__AbsoluteFocus(struct soap*, tt__AbsoluteFocus **, const char*, const char*);

#ifndef soap_read_PointerTott__AbsoluteFocus
#define soap_read_PointerTott__AbsoluteFocus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AbsoluteFocus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WhiteBalanceOptions
#define SOAP_TYPE_PointerTott__WhiteBalanceOptions (1227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalanceOptions(struct soap*, const char *, int, tt__WhiteBalanceOptions *const*, const char *);
SOAP_FMAC3 tt__WhiteBalanceOptions ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalanceOptions(struct soap*, const char*, tt__WhiteBalanceOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WhiteBalanceOptions
#define soap_write_PointerTott__WhiteBalanceOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WhiteBalanceOptions(soap, data), 0) || soap_put_PointerTott__WhiteBalanceOptions(soap, data, "tt:WhiteBalanceOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalanceOptions ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalanceOptions(struct soap*, tt__WhiteBalanceOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__WhiteBalanceOptions
#define soap_read_PointerTott__WhiteBalanceOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WhiteBalanceOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WideDynamicRangeOptions
#define SOAP_TYPE_PointerTott__WideDynamicRangeOptions (1226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRangeOptions(struct soap*, const char *, int, tt__WideDynamicRangeOptions *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRangeOptions ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRangeOptions(struct soap*, const char*, tt__WideDynamicRangeOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WideDynamicRangeOptions
#define soap_write_PointerTott__WideDynamicRangeOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WideDynamicRangeOptions(soap, data), 0) || soap_put_PointerTott__WideDynamicRangeOptions(soap, data, "tt:WideDynamicRangeOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRangeOptions ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRangeOptions(struct soap*, tt__WideDynamicRangeOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__WideDynamicRangeOptions
#define soap_read_PointerTott__WideDynamicRangeOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WideDynamicRangeOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusOptions
#define SOAP_TYPE_PointerTott__FocusOptions (1224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusOptions(struct soap*, tt__FocusOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusOptions(struct soap*, const char *, int, tt__FocusOptions *const*, const char *);
SOAP_FMAC3 tt__FocusOptions ** SOAP_FMAC4 soap_in_PointerTott__FocusOptions(struct soap*, const char*, tt__FocusOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusOptions(struct soap*, tt__FocusOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusOptions
#define soap_write_PointerTott__FocusOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusOptions(soap, data), 0) || soap_put_PointerTott__FocusOptions(soap, data, "tt:FocusOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusOptions ** SOAP_FMAC4 soap_get_PointerTott__FocusOptions(struct soap*, tt__FocusOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusOptions
#define soap_read_PointerTott__FocusOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ExposureOptions
#define SOAP_TYPE_PointerTott__ExposureOptions (1223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ExposureOptions(struct soap*, tt__ExposureOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ExposureOptions(struct soap*, const char *, int, tt__ExposureOptions *const*, const char *);
SOAP_FMAC3 tt__ExposureOptions ** SOAP_FMAC4 soap_in_PointerTott__ExposureOptions(struct soap*, const char*, tt__ExposureOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ExposureOptions(struct soap*, tt__ExposureOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ExposureOptions
#define soap_write_PointerTott__ExposureOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ExposureOptions(soap, data), 0) || soap_put_PointerTott__ExposureOptions(soap, data, "tt:ExposureOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ExposureOptions ** SOAP_FMAC4 soap_get_PointerTott__ExposureOptions(struct soap*, tt__ExposureOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__ExposureOptions
#define soap_read_PointerTott__ExposureOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ExposureOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__BacklightCompensationOptions
#define SOAP_TYPE_PointerTott__BacklightCompensationOptions (1222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensationOptions(struct soap*, const char *, int, tt__BacklightCompensationOptions *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensationOptions ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensationOptions(struct soap*, const char*, tt__BacklightCompensationOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__BacklightCompensationOptions
#define soap_write_PointerTott__BacklightCompensationOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__BacklightCompensationOptions(soap, data), 0) || soap_put_PointerTott__BacklightCompensationOptions(soap, data, "tt:BacklightCompensationOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensationOptions ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensationOptions(struct soap*, tt__BacklightCompensationOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__BacklightCompensationOptions
#define soap_read_PointerTott__BacklightCompensationOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__BacklightCompensationOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Rectangle
#define SOAP_TYPE_PointerTott__Rectangle (1221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rectangle(struct soap*, tt__Rectangle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rectangle(struct soap*, const char *, int, tt__Rectangle *const*, const char *);
SOAP_FMAC3 tt__Rectangle ** SOAP_FMAC4 soap_in_PointerTott__Rectangle(struct soap*, const char*, tt__Rectangle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rectangle(struct soap*, tt__Rectangle *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Rectangle
#define soap_write_PointerTott__Rectangle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Rectangle(soap, data), 0) || soap_put_PointerTott__Rectangle(soap, data, "tt:Rectangle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Rectangle ** SOAP_FMAC4 soap_get_PointerTott__Rectangle(struct soap*, tt__Rectangle **, const char*, const char*);

#ifndef soap_read_PointerTott__Rectangle
#define soap_read_PointerTott__Rectangle(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Rectangle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettingsExtension
#define SOAP_TYPE_PointerTott__ImagingSettingsExtension (1220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettingsExtension(struct soap*, const char *, int, tt__ImagingSettingsExtension *const*, const char *);
SOAP_FMAC3 tt__ImagingSettingsExtension ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettingsExtension(struct soap*, const char*, tt__ImagingSettingsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettingsExtension
#define soap_write_PointerTott__ImagingSettingsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettingsExtension(soap, data), 0) || soap_put_PointerTott__ImagingSettingsExtension(soap, data, "tt:ImagingSettingsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettingsExtension ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettingsExtension(struct soap*, tt__ImagingSettingsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettingsExtension
#define soap_read_PointerTott__ImagingSettingsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettingsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WhiteBalance
#define SOAP_TYPE_PointerTott__WhiteBalance (1219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WhiteBalance(struct soap*, const char *, int, tt__WhiteBalance *const*, const char *);
SOAP_FMAC3 tt__WhiteBalance ** SOAP_FMAC4 soap_in_PointerTott__WhiteBalance(struct soap*, const char*, tt__WhiteBalance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WhiteBalance
#define soap_write_PointerTott__WhiteBalance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WhiteBalance(soap, data), 0) || soap_put_PointerTott__WhiteBalance(soap, data, "tt:WhiteBalance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WhiteBalance ** SOAP_FMAC4 soap_get_PointerTott__WhiteBalance(struct soap*, tt__WhiteBalance **, const char*, const char*);

#ifndef soap_read_PointerTott__WhiteBalance
#define soap_read_PointerTott__WhiteBalance(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WhiteBalance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__WideDynamicRange
#define SOAP_TYPE_PointerTott__WideDynamicRange (1218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__WideDynamicRange(struct soap*, const char *, int, tt__WideDynamicRange *const*, const char *);
SOAP_FMAC3 tt__WideDynamicRange ** SOAP_FMAC4 soap_in_PointerTott__WideDynamicRange(struct soap*, const char*, tt__WideDynamicRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__WideDynamicRange
#define soap_write_PointerTott__WideDynamicRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__WideDynamicRange(soap, data), 0) || soap_put_PointerTott__WideDynamicRange(soap, data, "tt:WideDynamicRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__WideDynamicRange ** SOAP_FMAC4 soap_get_PointerTott__WideDynamicRange(struct soap*, tt__WideDynamicRange **, const char*, const char*);

#ifndef soap_read_PointerTott__WideDynamicRange
#define soap_read_PointerTott__WideDynamicRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__WideDynamicRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IrCutFilterMode
#define SOAP_TYPE_PointerTott__IrCutFilterMode (1217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IrCutFilterMode(struct soap*, const char *, int, enum tt__IrCutFilterMode *const*, const char *);
SOAP_FMAC3 enum tt__IrCutFilterMode ** SOAP_FMAC4 soap_in_PointerTott__IrCutFilterMode(struct soap*, const char*, enum tt__IrCutFilterMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IrCutFilterMode
#define soap_write_PointerTott__IrCutFilterMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IrCutFilterMode(soap, data), 0) || soap_put_PointerTott__IrCutFilterMode(soap, data, "tt:IrCutFilterMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IrCutFilterMode ** SOAP_FMAC4 soap_get_PointerTott__IrCutFilterMode(struct soap*, enum tt__IrCutFilterMode **, const char*, const char*);

#ifndef soap_read_PointerTott__IrCutFilterMode
#define soap_read_PointerTott__IrCutFilterMode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IrCutFilterMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusConfiguration
#define SOAP_TYPE_PointerTott__FocusConfiguration (1216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusConfiguration(struct soap*, const char *, int, tt__FocusConfiguration *const*, const char *);
SOAP_FMAC3 tt__FocusConfiguration ** SOAP_FMAC4 soap_in_PointerTott__FocusConfiguration(struct soap*, const char*, tt__FocusConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusConfiguration
#define soap_write_PointerTott__FocusConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusConfiguration(soap, data), 0) || soap_put_PointerTott__FocusConfiguration(soap, data, "tt:FocusConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusConfiguration ** SOAP_FMAC4 soap_get_PointerTott__FocusConfiguration(struct soap*, tt__FocusConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusConfiguration
#define soap_read_PointerTott__FocusConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Exposure
#define SOAP_TYPE_PointerTott__Exposure (1215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Exposure(struct soap*, tt__Exposure *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Exposure(struct soap*, const char *, int, tt__Exposure *const*, const char *);
SOAP_FMAC3 tt__Exposure ** SOAP_FMAC4 soap_in_PointerTott__Exposure(struct soap*, const char*, tt__Exposure **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Exposure(struct soap*, tt__Exposure *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Exposure
#define soap_write_PointerTott__Exposure(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Exposure(soap, data), 0) || soap_put_PointerTott__Exposure(soap, data, "tt:Exposure", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Exposure ** SOAP_FMAC4 soap_get_PointerTott__Exposure(struct soap*, tt__Exposure **, const char*, const char*);

#ifndef soap_read_PointerTott__Exposure
#define soap_read_PointerTott__Exposure(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Exposure(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__BacklightCompensation
#define SOAP_TYPE_PointerTott__BacklightCompensation (1214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BacklightCompensation(struct soap*, const char *, int, tt__BacklightCompensation *const*, const char *);
SOAP_FMAC3 tt__BacklightCompensation ** SOAP_FMAC4 soap_in_PointerTott__BacklightCompensation(struct soap*, const char*, tt__BacklightCompensation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__BacklightCompensation
#define soap_write_PointerTott__BacklightCompensation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__BacklightCompensation(soap, data), 0) || soap_put_PointerTott__BacklightCompensation(soap, data, "tt:BacklightCompensation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BacklightCompensation ** SOAP_FMAC4 soap_get_PointerTott__BacklightCompensation(struct soap*, tt__BacklightCompensation **, const char*, const char*);

#ifndef soap_read_PointerTott__BacklightCompensation
#define soap_read_PointerTott__BacklightCompensation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__BacklightCompensation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FocusStatus
#define SOAP_TYPE_PointerTott__FocusStatus (1213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FocusStatus(struct soap*, tt__FocusStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FocusStatus(struct soap*, const char *, int, tt__FocusStatus *const*, const char *);
SOAP_FMAC3 tt__FocusStatus ** SOAP_FMAC4 soap_in_PointerTott__FocusStatus(struct soap*, const char*, tt__FocusStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FocusStatus(struct soap*, tt__FocusStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FocusStatus
#define soap_write_PointerTott__FocusStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FocusStatus(soap, data), 0) || soap_put_PointerTott__FocusStatus(soap, data, "tt:FocusStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FocusStatus ** SOAP_FMAC4 soap_get_PointerTott__FocusStatus(struct soap*, tt__FocusStatus **, const char*, const char*);

#ifndef soap_read_PointerTott__FocusStatus
#define soap_read_PointerTott__FocusStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FocusStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptionsExtension (1212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourStartingConditionOptionsExtension
#define soap_write_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, data, "tt:PTZPresetTourStartingConditionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptionsExtension(struct soap*, tt__PTZPresetTourStartingConditionOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourStartingConditionOptionsExtension
#define soap_read_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourStartingConditionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptionsExtension (1210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourPresetDetailOptionsExtension
#define soap_write_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, data, "tt:PTZPresetTourPresetDetailOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptionsExtension(struct soap*, tt__PTZPresetTourPresetDetailOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourPresetDetailOptionsExtension
#define soap_read_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourPresetDetailOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetailOptions (1209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char *, int, tt__PTZPresetTourPresetDetailOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, const char*, tt__PTZPresetTourPresetDetailOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourPresetDetailOptions
#define soap_write_PointerTott__PTZPresetTourPresetDetailOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourPresetDetailOptions(soap, data), 0) || soap_put_PointerTott__PTZPresetTourPresetDetailOptions(soap, data, "tt:PTZPresetTourPresetDetailOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourPresetDetailOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetailOptions(struct soap*, tt__PTZPresetTourPresetDetailOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourPresetDetailOptions
#define soap_read_PointerTott__PTZPresetTourPresetDetailOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourPresetDetailOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotOptions (1208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char *, int, tt__PTZPresetTourSpotOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotOptions(struct soap*, const char*, tt__PTZPresetTourSpotOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourSpotOptions
#define soap_write_PointerTott__PTZPresetTourSpotOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourSpotOptions(soap, data), 0) || soap_put_PointerTott__PTZPresetTourSpotOptions(soap, data, "tt:PTZPresetTourSpotOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSpotOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotOptions(struct soap*, tt__PTZPresetTourSpotOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourSpotOptions
#define soap_read_PointerTott__PTZPresetTourSpotOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourSpotOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionOptions (1207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionOptions *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, const char*, tt__PTZPresetTourStartingConditionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourStartingConditionOptions
#define soap_write_PointerTott__PTZPresetTourStartingConditionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourStartingConditionOptions(soap, data), 0) || soap_put_PointerTott__PTZPresetTourStartingConditionOptions(soap, data, "tt:PTZPresetTourStartingConditionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingConditionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionOptions(struct soap*, tt__PTZPresetTourStartingConditionOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourStartingConditionOptions
#define soap_read_PointerTott__PTZPresetTourStartingConditionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourStartingConditionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingConditionExtension (1206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char *, int, tt__PTZPresetTourStartingConditionExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, const char*, tt__PTZPresetTourStartingConditionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourStartingConditionExtension
#define soap_write_PointerTott__PTZPresetTourStartingConditionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourStartingConditionExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourStartingConditionExtension(soap, data, "tt:PTZPresetTourStartingConditionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingConditionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingConditionExtension(struct soap*, tt__PTZPresetTourStartingConditionExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourStartingConditionExtension
#define soap_read_PointerTott__PTZPresetTourStartingConditionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourStartingConditionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourDirection
#define SOAP_TYPE_PointerTott__PTZPresetTourDirection (1205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourDirection(struct soap*, const char *, int, enum tt__PTZPresetTourDirection *const*, const char *);
SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourDirection(struct soap*, const char*, enum tt__PTZPresetTourDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourDirection
#define soap_write_PointerTott__PTZPresetTourDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourDirection(soap, data), 0) || soap_put_PointerTott__PTZPresetTourDirection(soap, data, "tt:PTZPresetTourDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__PTZPresetTourDirection ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourDirection(struct soap*, enum tt__PTZPresetTourDirection **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourDirection
#define soap_read_PointerTott__PTZPresetTourDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourStatusExtension (1204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char *, int, tt__PTZPresetTourStatusExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatusExtension(struct soap*, const char*, tt__PTZPresetTourStatusExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourStatusExtension
#define soap_write_PointerTott__PTZPresetTourStatusExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourStatusExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourStatusExtension(soap, data, "tt:PTZPresetTourStatusExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStatusExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatusExtension(struct soap*, tt__PTZPresetTourStatusExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourStatusExtension
#define soap_read_PointerTott__PTZPresetTourStatusExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourStatusExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourTypeExtension (1202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char *, int, tt__PTZPresetTourTypeExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourTypeExtension(struct soap*, const char*, tt__PTZPresetTourTypeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourTypeExtension
#define soap_write_PointerTott__PTZPresetTourTypeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourTypeExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourTypeExtension(soap, data, "tt:PTZPresetTourTypeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourTypeExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourTypeExtension(struct soap*, tt__PTZPresetTourTypeExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourTypeExtension
#define soap_read_PointerTott__PTZPresetTourTypeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourTypeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourSpotExtension (1201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char *, int, tt__PTZPresetTourSpotExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpotExtension(struct soap*, const char*, tt__PTZPresetTourSpotExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourSpotExtension
#define soap_write_PointerTott__PTZPresetTourSpotExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourSpotExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourSpotExtension(soap, data, "tt:PTZPresetTourSpotExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSpotExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpotExtension(struct soap*, tt__PTZPresetTourSpotExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourSpotExtension
#define soap_read_PointerTott__PTZPresetTourSpotExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourSpotExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZSpeed
#define SOAP_TYPE_PointerTott__PTZSpeed (1200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpeed(struct soap*, const char *, int, tt__PTZSpeed *const*, const char *);
SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_in_PointerTott__PTZSpeed(struct soap*, const char*, tt__PTZSpeed **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZSpeed
#define soap_write_PointerTott__PTZSpeed(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZSpeed(soap, data), 0) || soap_put_PointerTott__PTZSpeed(soap, data, "tt:PTZSpeed", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZSpeed ** SOAP_FMAC4 soap_get_PointerTott__PTZSpeed(struct soap*, tt__PTZSpeed **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZSpeed
#define soap_read_PointerTott__PTZSpeed(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZSpeed(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail
#define SOAP_TYPE_PointerTott__PTZPresetTourPresetDetail (1199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char *, int, tt__PTZPresetTourPresetDetail *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourPresetDetail(struct soap*, const char*, tt__PTZPresetTourPresetDetail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourPresetDetail
#define soap_write_PointerTott__PTZPresetTourPresetDetail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourPresetDetail(soap, data), 0) || soap_put_PointerTott__PTZPresetTourPresetDetail(soap, data, "tt:PTZPresetTourPresetDetail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourPresetDetail ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourPresetDetail(struct soap*, tt__PTZPresetTourPresetDetail **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourPresetDetail
#define soap_read_PointerTott__PTZPresetTourPresetDetail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourPresetDetail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourExtension (1198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourExtension(struct soap*, const char *, int, tt__PTZPresetTourExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourExtension(struct soap*, const char*, tt__PTZPresetTourExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourExtension
#define soap_write_PointerTott__PTZPresetTourExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourExtension(soap, data, "tt:PTZPresetTourExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourExtension(struct soap*, tt__PTZPresetTourExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourExtension
#define soap_read_PointerTott__PTZPresetTourExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSpot
#define SOAP_TYPE_PointerTott__PTZPresetTourSpot (1196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSpot(struct soap*, const char *, int, tt__PTZPresetTourSpot *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSpot(struct soap*, const char*, tt__PTZPresetTourSpot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourSpot
#define soap_write_PointerTott__PTZPresetTourSpot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourSpot(soap, data), 0) || soap_put_PointerTott__PTZPresetTourSpot(soap, data, "tt:PTZPresetTourSpot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSpot ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSpot(struct soap*, tt__PTZPresetTourSpot **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourSpot
#define soap_read_PointerTott__PTZPresetTourSpot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourSpot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition
#define SOAP_TYPE_PointerTott__PTZPresetTourStartingCondition (1195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char *, int, tt__PTZPresetTourStartingCondition *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStartingCondition(struct soap*, const char*, tt__PTZPresetTourStartingCondition **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourStartingCondition
#define soap_write_PointerTott__PTZPresetTourStartingCondition(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourStartingCondition(soap, data), 0) || soap_put_PointerTott__PTZPresetTourStartingCondition(soap, data, "tt:PTZPresetTourStartingCondition", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStartingCondition ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStartingCondition(struct soap*, tt__PTZPresetTourStartingCondition **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourStartingCondition
#define soap_read_PointerTott__PTZPresetTourStartingCondition(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourStartingCondition(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourStatus
#define SOAP_TYPE_PointerTott__PTZPresetTourStatus (1194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourStatus(struct soap*, const char *, int, tt__PTZPresetTourStatus *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourStatus(struct soap*, const char*, tt__PTZPresetTourStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourStatus
#define soap_write_PointerTott__PTZPresetTourStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourStatus(soap, data), 0) || soap_put_PointerTott__PTZPresetTourStatus(soap, data, "tt:PTZPresetTourStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourStatus ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourStatus(struct soap*, tt__PTZPresetTourStatus **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourStatus
#define soap_read_PointerTott__PTZPresetTourStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZVector
#define SOAP_TYPE_PointerTott__PTZVector (1193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZVector(struct soap*, const char *, int, tt__PTZVector *const*, const char *);
SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_in_PointerTott__PTZVector(struct soap*, const char*, tt__PTZVector **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZVector(struct soap*, tt__PTZVector *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZVector
#define soap_write_PointerTott__PTZVector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZVector(soap, data), 0) || soap_put_PointerTott__PTZVector(soap, data, "tt:PTZVector", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZVector ** SOAP_FMAC4 soap_get_PointerTott__PTZVector(struct soap*, tt__PTZVector **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZVector
#define soap_read_PointerTott__PTZVector(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZVector(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Name
#define SOAP_TYPE_PointerTott__Name (1192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Name(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Name(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Name(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Name(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Name
#define soap_write_PointerTott__Name(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Name(soap, data), 0) || soap_put_PointerTott__Name(soap, data, "tt:Name", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Name(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__Name
#define soap_read_PointerTott__Name(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Name(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Vector1D
#define SOAP_TYPE_PointerTott__Vector1D (1191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector1D(struct soap*, const char *, int, tt__Vector1D *const*, const char *);
SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_in_PointerTott__Vector1D(struct soap*, const char*, tt__Vector1D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector1D(struct soap*, tt__Vector1D *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Vector1D
#define soap_write_PointerTott__Vector1D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Vector1D(soap, data), 0) || soap_put_PointerTott__Vector1D(soap, data, "tt:Vector1D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Vector1D ** SOAP_FMAC4 soap_get_PointerTott__Vector1D(struct soap*, tt__Vector1D **, const char*, const char*);

#ifndef soap_read_PointerTott__Vector1D
#define soap_read_PointerTott__Vector1D(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Vector1D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Vector2D
#define SOAP_TYPE_PointerTott__Vector2D (1190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Vector2D(struct soap*, const char *, int, tt__Vector2D *const*, const char *);
SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_in_PointerTott__Vector2D(struct soap*, const char*, tt__Vector2D **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Vector2D(struct soap*, tt__Vector2D *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Vector2D
#define soap_write_PointerTott__Vector2D(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Vector2D(soap, data), 0) || soap_put_PointerTott__Vector2D(soap, data, "tt:Vector2D", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Vector2D ** SOAP_FMAC4 soap_get_PointerTott__Vector2D(struct soap*, tt__Vector2D **, const char*, const char*);

#ifndef soap_read_PointerTott__Vector2D
#define soap_read_PointerTott__Vector2D(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Vector2D(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZSpacesExtension
#define SOAP_TYPE_PointerTott__PTZSpacesExtension (1189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpacesExtension(struct soap*, const char *, int, tt__PTZSpacesExtension *const*, const char *);
SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZSpacesExtension(struct soap*, const char*, tt__PTZSpacesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZSpacesExtension
#define soap_write_PointerTott__PTZSpacesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZSpacesExtension(soap, data), 0) || soap_put_PointerTott__PTZSpacesExtension(soap, data, "tt:PTZSpacesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZSpacesExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZSpacesExtension(struct soap*, tt__PTZSpacesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZSpacesExtension
#define soap_read_PointerTott__PTZSpacesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZSpacesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Space1DDescription
#define SOAP_TYPE_PointerTott__Space1DDescription (1186)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space1DDescription(struct soap*, const char *, int, tt__Space1DDescription *const*, const char *);
SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space1DDescription(struct soap*, const char*, tt__Space1DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Space1DDescription
#define soap_write_PointerTott__Space1DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Space1DDescription(soap, data), 0) || soap_put_PointerTott__Space1DDescription(soap, data, "tt:Space1DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Space1DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space1DDescription(struct soap*, tt__Space1DDescription **, const char*, const char*);

#ifndef soap_read_PointerTott__Space1DDescription
#define soap_read_PointerTott__Space1DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Space1DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Space2DDescription
#define SOAP_TYPE_PointerTott__Space2DDescription (1185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Space2DDescription(struct soap*, const char *, int, tt__Space2DDescription *const*, const char *);
SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_in_PointerTott__Space2DDescription(struct soap*, const char*, tt__Space2DDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Space2DDescription
#define soap_write_PointerTott__Space2DDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Space2DDescription(soap, data), 0) || soap_put_PointerTott__Space2DDescription(soap, data, "tt:Space2DDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Space2DDescription ** SOAP_FMAC4 soap_get_PointerTott__Space2DDescription(struct soap*, tt__Space2DDescription **, const char*, const char*);

#ifndef soap_read_PointerTott__Space2DDescription
#define soap_read_PointerTott__Space2DDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Space2DDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ReverseOptionsExtension
#define SOAP_TYPE_PointerTott__ReverseOptionsExtension (1184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptionsExtension(struct soap*, const char *, int, tt__ReverseOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptionsExtension(struct soap*, const char*, tt__ReverseOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ReverseOptionsExtension
#define soap_write_PointerTott__ReverseOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ReverseOptionsExtension(soap, data), 0) || soap_put_PointerTott__ReverseOptionsExtension(soap, data, "tt:ReverseOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReverseOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptionsExtension(struct soap*, tt__ReverseOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ReverseOptionsExtension
#define soap_read_PointerTott__ReverseOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ReverseOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EFlipOptionsExtension
#define SOAP_TYPE_PointerTott__EFlipOptionsExtension (1182)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptionsExtension(struct soap*, const char *, int, tt__EFlipOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptionsExtension(struct soap*, const char*, tt__EFlipOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EFlipOptionsExtension
#define soap_write_PointerTott__EFlipOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EFlipOptionsExtension(soap, data), 0) || soap_put_PointerTott__EFlipOptionsExtension(soap, data, "tt:EFlipOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlipOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptionsExtension(struct soap*, tt__EFlipOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__EFlipOptionsExtension
#define soap_read_PointerTott__EFlipOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EFlipOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension
#define SOAP_TYPE_PointerTott__PTControlDirectionOptionsExtension (1180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char *, int, tt__PTControlDirectionOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptionsExtension(struct soap*, const char*, tt__PTControlDirectionOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTControlDirectionOptionsExtension
#define soap_write_PointerTott__PTControlDirectionOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTControlDirectionOptionsExtension(soap, data), 0) || soap_put_PointerTott__PTControlDirectionOptionsExtension(soap, data, "tt:PTControlDirectionOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirectionOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptionsExtension(struct soap*, tt__PTControlDirectionOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTControlDirectionOptionsExtension
#define soap_read_PointerTott__PTControlDirectionOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTControlDirectionOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ReverseOptions
#define SOAP_TYPE_PointerTott__ReverseOptions (1179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReverseOptions(struct soap*, const char *, int, tt__ReverseOptions *const*, const char *);
SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_in_PointerTott__ReverseOptions(struct soap*, const char*, tt__ReverseOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ReverseOptions
#define soap_write_PointerTott__ReverseOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ReverseOptions(soap, data), 0) || soap_put_PointerTott__ReverseOptions(soap, data, "tt:ReverseOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReverseOptions ** SOAP_FMAC4 soap_get_PointerTott__ReverseOptions(struct soap*, tt__ReverseOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__ReverseOptions
#define soap_read_PointerTott__ReverseOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ReverseOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EFlipOptions
#define SOAP_TYPE_PointerTott__EFlipOptions (1178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlipOptions(struct soap*, const char *, int, tt__EFlipOptions *const*, const char *);
SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_in_PointerTott__EFlipOptions(struct soap*, const char*, tt__EFlipOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EFlipOptions
#define soap_write_PointerTott__EFlipOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EFlipOptions(soap, data), 0) || soap_put_PointerTott__EFlipOptions(soap, data, "tt:EFlipOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlipOptions ** SOAP_FMAC4 soap_get_PointerTott__EFlipOptions(struct soap*, tt__EFlipOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__EFlipOptions
#define soap_read_PointerTott__EFlipOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EFlipOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZConfigurationOptions2
#define SOAP_TYPE_PointerTott__PTZConfigurationOptions2 (1177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationOptions2(struct soap*, const char *, int, tt__PTZConfigurationOptions2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationOptions2(struct soap*, const char*, tt__PTZConfigurationOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZConfigurationOptions2
#define soap_write_PointerTott__PTZConfigurationOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZConfigurationOptions2(soap, data), 0) || soap_put_PointerTott__PTZConfigurationOptions2(soap, data, "tt:PTZConfigurationOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationOptions2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationOptions2(struct soap*, tt__PTZConfigurationOptions2 **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZConfigurationOptions2
#define soap_read_PointerTott__PTZConfigurationOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZConfigurationOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTControlDirectionOptions
#define SOAP_TYPE_PointerTott__PTControlDirectionOptions (1176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionOptions(struct soap*, const char *, int, tt__PTControlDirectionOptions *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionOptions(struct soap*, const char*, tt__PTControlDirectionOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTControlDirectionOptions
#define soap_write_PointerTott__PTControlDirectionOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTControlDirectionOptions(soap, data), 0) || soap_put_PointerTott__PTControlDirectionOptions(soap, data, "tt:PTControlDirectionOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirectionOptions ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionOptions(struct soap*, tt__PTControlDirectionOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__PTControlDirectionOptions
#define soap_read_PointerTott__PTControlDirectionOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTControlDirectionOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DurationRange
#define SOAP_TYPE_PointerTott__DurationRange (1175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DurationRange(struct soap*, const char *, int, tt__DurationRange *const*, const char *);
SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_in_PointerTott__DurationRange(struct soap*, const char*, tt__DurationRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DurationRange(struct soap*, tt__DurationRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DurationRange
#define soap_write_PointerTott__DurationRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DurationRange(soap, data), 0) || soap_put_PointerTott__DurationRange(soap, data, "tt:DurationRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DurationRange ** SOAP_FMAC4 soap_get_PointerTott__DurationRange(struct soap*, tt__DurationRange **, const char*, const char*);

#ifndef soap_read_PointerTott__DurationRange
#define soap_read_PointerTott__DurationRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DurationRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZSpaces
#define SOAP_TYPE_PointerTott__PTZSpaces (1174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZSpaces(struct soap*, const char *, int, tt__PTZSpaces *const*, const char *);
SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_in_PointerTott__PTZSpaces(struct soap*, const char*, tt__PTZSpaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZSpaces
#define soap_write_PointerTott__PTZSpaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZSpaces(soap, data), 0) || soap_put_PointerTott__PTZSpaces(soap, data, "tt:PTZSpaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZSpaces ** SOAP_FMAC4 soap_get_PointerTott__PTZSpaces(struct soap*, tt__PTZSpaces **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZSpaces
#define soap_read_PointerTott__PTZSpaces(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZSpaces(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTControlDirectionExtension
#define SOAP_TYPE_PointerTott__PTControlDirectionExtension (1173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirectionExtension(struct soap*, const char *, int, tt__PTControlDirectionExtension *const*, const char *);
SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirectionExtension(struct soap*, const char*, tt__PTControlDirectionExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTControlDirectionExtension
#define soap_write_PointerTott__PTControlDirectionExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTControlDirectionExtension(soap, data), 0) || soap_put_PointerTott__PTControlDirectionExtension(soap, data, "tt:PTControlDirectionExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirectionExtension ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirectionExtension(struct soap*, tt__PTControlDirectionExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTControlDirectionExtension
#define soap_read_PointerTott__PTControlDirectionExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTControlDirectionExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Reverse
#define SOAP_TYPE_PointerTott__Reverse (1172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Reverse(struct soap*, tt__Reverse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Reverse(struct soap*, const char *, int, tt__Reverse *const*, const char *);
SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_in_PointerTott__Reverse(struct soap*, const char*, tt__Reverse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Reverse(struct soap*, tt__Reverse *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Reverse
#define soap_write_PointerTott__Reverse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Reverse(soap, data), 0) || soap_put_PointerTott__Reverse(soap, data, "tt:Reverse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Reverse ** SOAP_FMAC4 soap_get_PointerTott__Reverse(struct soap*, tt__Reverse **, const char*, const char*);

#ifndef soap_read_PointerTott__Reverse
#define soap_read_PointerTott__Reverse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Reverse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EFlip
#define SOAP_TYPE_PointerTott__EFlip (1171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EFlip(struct soap*, tt__EFlip *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EFlip(struct soap*, const char *, int, tt__EFlip *const*, const char *);
SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_in_PointerTott__EFlip(struct soap*, const char*, tt__EFlip **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EFlip(struct soap*, tt__EFlip *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EFlip
#define soap_write_PointerTott__EFlip(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EFlip(soap, data), 0) || soap_put_PointerTott__EFlip(soap, data, "tt:EFlip", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EFlip ** SOAP_FMAC4 soap_get_PointerTott__EFlip(struct soap*, tt__EFlip **, const char*, const char*);

#ifndef soap_read_PointerTott__EFlip
#define soap_read_PointerTott__EFlip(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EFlip(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZConfigurationExtension2
#define SOAP_TYPE_PointerTott__PTZConfigurationExtension2 (1170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfigurationExtension2(struct soap*, const char *, int, tt__PTZConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZConfigurationExtension2(struct soap*, const char*, tt__PTZConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZConfigurationExtension2
#define soap_write_PointerTott__PTZConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZConfigurationExtension2(soap, data), 0) || soap_put_PointerTott__PTZConfigurationExtension2(soap, data, "tt:PTZConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZConfigurationExtension2(struct soap*, tt__PTZConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZConfigurationExtension2
#define soap_read_PointerTott__PTZConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTControlDirection
#define SOAP_TYPE_PointerTott__PTControlDirection (1169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTControlDirection(struct soap*, const char *, int, tt__PTControlDirection *const*, const char *);
SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_in_PointerTott__PTControlDirection(struct soap*, const char*, tt__PTControlDirection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTControlDirection
#define soap_write_PointerTott__PTControlDirection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTControlDirection(soap, data), 0) || soap_put_PointerTott__PTControlDirection(soap, data, "tt:PTControlDirection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTControlDirection ** SOAP_FMAC4 soap_get_PointerTott__PTControlDirection(struct soap*, tt__PTControlDirection **, const char*, const char*);

#ifndef soap_read_PointerTott__PTControlDirection
#define soap_read_PointerTott__PTControlDirection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTControlDirection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension
#define SOAP_TYPE_PointerTott__PTZPresetTourSupportedExtension (1168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char *, int, tt__PTZPresetTourSupportedExtension *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupportedExtension(struct soap*, const char*, tt__PTZPresetTourSupportedExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourSupportedExtension
#define soap_write_PointerTott__PTZPresetTourSupportedExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourSupportedExtension(soap, data), 0) || soap_put_PointerTott__PTZPresetTourSupportedExtension(soap, data, "tt:PTZPresetTourSupportedExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSupportedExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupportedExtension(struct soap*, tt__PTZPresetTourSupportedExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourSupportedExtension
#define soap_read_PointerTott__PTZPresetTourSupportedExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourSupportedExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZNodeExtension2
#define SOAP_TYPE_PointerTott__PTZNodeExtension2 (1166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZNodeExtension2(struct soap*, const char *, int, tt__PTZNodeExtension2 *const*, const char *);
SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_in_PointerTott__PTZNodeExtension2(struct soap*, const char*, tt__PTZNodeExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZNodeExtension2
#define soap_write_PointerTott__PTZNodeExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZNodeExtension2(soap, data), 0) || soap_put_PointerTott__PTZNodeExtension2(soap, data, "tt:PTZNodeExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZNodeExtension2 ** SOAP_FMAC4 soap_get_PointerTott__PTZNodeExtension2(struct soap*, tt__PTZNodeExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZNodeExtension2
#define soap_read_PointerTott__PTZNodeExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZNodeExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZPresetTourSupported
#define SOAP_TYPE_PointerTott__PTZPresetTourSupported (1165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZPresetTourSupported(struct soap*, const char *, int, tt__PTZPresetTourSupported *const*, const char *);
SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_in_PointerTott__PTZPresetTourSupported(struct soap*, const char*, tt__PTZPresetTourSupported **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZPresetTourSupported
#define soap_write_PointerTott__PTZPresetTourSupported(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZPresetTourSupported(soap, data), 0) || soap_put_PointerTott__PTZPresetTourSupported(soap, data, "tt:PTZPresetTourSupported", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZPresetTourSupported ** SOAP_FMAC4 soap_get_PointerTott__PTZPresetTourSupported(struct soap*, tt__PTZPresetTourSupported **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZPresetTourSupported
#define soap_read_PointerTott__PTZPresetTourSupported(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZPresetTourSupported(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EapMethodExtension
#define SOAP_TYPE_PointerTott__EapMethodExtension (1164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EapMethodExtension(struct soap*, const char *, int, tt__EapMethodExtension *const*, const char *);
SOAP_FMAC3 tt__EapMethodExtension ** SOAP_FMAC4 soap_in_PointerTott__EapMethodExtension(struct soap*, const char*, tt__EapMethodExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EapMethodExtension
#define soap_write_PointerTott__EapMethodExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EapMethodExtension(soap, data), 0) || soap_put_PointerTott__EapMethodExtension(soap, data, "tt:EapMethodExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EapMethodExtension ** SOAP_FMAC4 soap_get_PointerTott__EapMethodExtension(struct soap*, tt__EapMethodExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__EapMethodExtension
#define soap_read_PointerTott__EapMethodExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EapMethodExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TLSConfiguration
#define SOAP_TYPE_PointerTott__TLSConfiguration (1163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TLSConfiguration(struct soap*, const char *, int, tt__TLSConfiguration *const*, const char *);
SOAP_FMAC3 tt__TLSConfiguration ** SOAP_FMAC4 soap_in_PointerTott__TLSConfiguration(struct soap*, const char*, tt__TLSConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TLSConfiguration
#define soap_write_PointerTott__TLSConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TLSConfiguration(soap, data), 0) || soap_put_PointerTott__TLSConfiguration(soap, data, "tt:TLSConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TLSConfiguration ** SOAP_FMAC4 soap_get_PointerTott__TLSConfiguration(struct soap*, tt__TLSConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__TLSConfiguration
#define soap_read_PointerTott__TLSConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TLSConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot1XConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot1XConfigurationExtension (1162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot1XConfigurationExtension(struct soap*, const char *, int, tt__Dot1XConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot1XConfigurationExtension(struct soap*, const char*, tt__Dot1XConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot1XConfigurationExtension
#define soap_write_PointerTott__Dot1XConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot1XConfigurationExtension(soap, data), 0) || soap_put_PointerTott__Dot1XConfigurationExtension(soap, data, "tt:Dot1XConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot1XConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot1XConfigurationExtension(struct soap*, tt__Dot1XConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot1XConfigurationExtension
#define soap_read_PointerTott__Dot1XConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot1XConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EAPMethodConfiguration
#define SOAP_TYPE_PointerTott__EAPMethodConfiguration (1161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EAPMethodConfiguration(struct soap*, const char *, int, tt__EAPMethodConfiguration *const*, const char *);
SOAP_FMAC3 tt__EAPMethodConfiguration ** SOAP_FMAC4 soap_in_PointerTott__EAPMethodConfiguration(struct soap*, const char*, tt__EAPMethodConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EAPMethodConfiguration
#define soap_write_PointerTott__EAPMethodConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EAPMethodConfiguration(soap, data), 0) || soap_put_PointerTott__EAPMethodConfiguration(soap, data, "tt:EAPMethodConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EAPMethodConfiguration ** SOAP_FMAC4 soap_get_PointerTott__EAPMethodConfiguration(struct soap*, tt__EAPMethodConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__EAPMethodConfiguration
#define soap_read_PointerTott__EAPMethodConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EAPMethodConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__CertificateInformationExtension
#define SOAP_TYPE_PointerTott__CertificateInformationExtension (1160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateInformationExtension(struct soap*, const char *, int, tt__CertificateInformationExtension *const*, const char *);
SOAP_FMAC3 tt__CertificateInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__CertificateInformationExtension(struct soap*, const char*, tt__CertificateInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__CertificateInformationExtension
#define soap_write_PointerTott__CertificateInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__CertificateInformationExtension(soap, data), 0) || soap_put_PointerTott__CertificateInformationExtension(soap, data, "tt:CertificateInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__CertificateInformationExtension(struct soap*, tt__CertificateInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__CertificateInformationExtension
#define soap_read_PointerTott__CertificateInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__CertificateInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DateTimeRange
#define SOAP_TYPE_PointerTott__DateTimeRange (1159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DateTimeRange(struct soap*, const char *, int, tt__DateTimeRange *const*, const char *);
SOAP_FMAC3 tt__DateTimeRange ** SOAP_FMAC4 soap_in_PointerTott__DateTimeRange(struct soap*, const char*, tt__DateTimeRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DateTimeRange
#define soap_write_PointerTott__DateTimeRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DateTimeRange(soap, data), 0) || soap_put_PointerTott__DateTimeRange(soap, data, "tt:DateTimeRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DateTimeRange ** SOAP_FMAC4 soap_get_PointerTott__DateTimeRange(struct soap*, tt__DateTimeRange **, const char*, const char*);

#ifndef soap_read_PointerTott__DateTimeRange
#define soap_read_PointerTott__DateTimeRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DateTimeRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__CertificateUsage
#define SOAP_TYPE_PointerTott__CertificateUsage (1158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateUsage(struct soap*, const char *, int, tt__CertificateUsage *const*, const char *);
SOAP_FMAC3 tt__CertificateUsage ** SOAP_FMAC4 soap_in_PointerTott__CertificateUsage(struct soap*, const char*, tt__CertificateUsage **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage *const*, const char*, const char*);

#ifndef soap_write_PointerTott__CertificateUsage
#define soap_write_PointerTott__CertificateUsage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__CertificateUsage(soap, data), 0) || soap_put_PointerTott__CertificateUsage(soap, data, "tt:CertificateUsage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateUsage ** SOAP_FMAC4 soap_get_PointerTott__CertificateUsage(struct soap*, tt__CertificateUsage **, const char*, const char*);

#ifndef soap_read_PointerTott__CertificateUsage
#define soap_read_PointerTott__CertificateUsage(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__CertificateUsage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__BinaryData
#define SOAP_TYPE_PointerTott__BinaryData (1157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__BinaryData(struct soap*, tt__BinaryData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__BinaryData(struct soap*, const char *, int, tt__BinaryData *const*, const char *);
SOAP_FMAC3 tt__BinaryData ** SOAP_FMAC4 soap_in_PointerTott__BinaryData(struct soap*, const char*, tt__BinaryData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__BinaryData(struct soap*, tt__BinaryData *const*, const char*, const char*);

#ifndef soap_write_PointerTott__BinaryData
#define soap_write_PointerTott__BinaryData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__BinaryData(soap, data), 0) || soap_put_PointerTott__BinaryData(soap, data, "tt:BinaryData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__BinaryData ** SOAP_FMAC4 soap_get_PointerTott__BinaryData(struct soap*, tt__BinaryData **, const char*, const char*);

#ifndef soap_read_PointerTott__BinaryData
#define soap_read_PointerTott__BinaryData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__BinaryData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension
#define SOAP_TYPE_PointerTott__CertificateGenerationParametersExtension (1156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CertificateGenerationParametersExtension(struct soap*, const char *, int, tt__CertificateGenerationParametersExtension *const*, const char *);
SOAP_FMAC3 tt__CertificateGenerationParametersExtension ** SOAP_FMAC4 soap_in_PointerTott__CertificateGenerationParametersExtension(struct soap*, const char*, tt__CertificateGenerationParametersExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__CertificateGenerationParametersExtension
#define soap_write_PointerTott__CertificateGenerationParametersExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__CertificateGenerationParametersExtension(soap, data), 0) || soap_put_PointerTott__CertificateGenerationParametersExtension(soap, data, "tt:CertificateGenerationParametersExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CertificateGenerationParametersExtension ** SOAP_FMAC4 soap_get_PointerTott__CertificateGenerationParametersExtension(struct soap*, tt__CertificateGenerationParametersExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__CertificateGenerationParametersExtension
#define soap_read_PointerTott__CertificateGenerationParametersExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__CertificateGenerationParametersExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__UserExtension
#define SOAP_TYPE_PointerTott__UserExtension (1155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__UserExtension(struct soap*, tt__UserExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__UserExtension(struct soap*, const char *, int, tt__UserExtension *const*, const char *);
SOAP_FMAC3 tt__UserExtension ** SOAP_FMAC4 soap_in_PointerTott__UserExtension(struct soap*, const char*, tt__UserExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__UserExtension(struct soap*, tt__UserExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__UserExtension
#define soap_write_PointerTott__UserExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__UserExtension(soap, data), 0) || soap_put_PointerTott__UserExtension(soap, data, "tt:UserExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__UserExtension ** SOAP_FMAC4 soap_get_PointerTott__UserExtension(struct soap*, tt__UserExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__UserExtension
#define soap_read_PointerTott__UserExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__UserExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Date
#define SOAP_TYPE_PointerTott__Date (1154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Date(struct soap*, tt__Date *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Date(struct soap*, const char *, int, tt__Date *const*, const char *);
SOAP_FMAC3 tt__Date ** SOAP_FMAC4 soap_in_PointerTott__Date(struct soap*, const char*, tt__Date **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Date(struct soap*, tt__Date *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Date
#define soap_write_PointerTott__Date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Date(soap, data), 0) || soap_put_PointerTott__Date(soap, data, "tt:Date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Date ** SOAP_FMAC4 soap_get_PointerTott__Date(struct soap*, tt__Date **, const char*, const char*);

#ifndef soap_read_PointerTott__Date
#define soap_read_PointerTott__Date(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Date(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Time
#define SOAP_TYPE_PointerTott__Time (1153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Time(struct soap*, tt__Time *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Time(struct soap*, const char *, int, tt__Time *const*, const char *);
SOAP_FMAC3 tt__Time ** SOAP_FMAC4 soap_in_PointerTott__Time(struct soap*, const char*, tt__Time **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Time(struct soap*, tt__Time *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Time
#define soap_write_PointerTott__Time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Time(soap, data), 0) || soap_put_PointerTott__Time(soap, data, "tt:Time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Time ** SOAP_FMAC4 soap_get_PointerTott__Time(struct soap*, tt__Time **, const char*, const char*);

#ifndef soap_read_PointerTott__Time
#define soap_read_PointerTott__Time(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SystemDateTimeExtension
#define SOAP_TYPE_PointerTott__SystemDateTimeExtension (1152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemDateTimeExtension(struct soap*, const char *, int, tt__SystemDateTimeExtension *const*, const char *);
SOAP_FMAC3 tt__SystemDateTimeExtension ** SOAP_FMAC4 soap_in_PointerTott__SystemDateTimeExtension(struct soap*, const char*, tt__SystemDateTimeExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SystemDateTimeExtension
#define soap_write_PointerTott__SystemDateTimeExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SystemDateTimeExtension(soap, data), 0) || soap_put_PointerTott__SystemDateTimeExtension(soap, data, "tt:SystemDateTimeExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemDateTimeExtension ** SOAP_FMAC4 soap_get_PointerTott__SystemDateTimeExtension(struct soap*, tt__SystemDateTimeExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SystemDateTimeExtension
#define soap_read_PointerTott__SystemDateTimeExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SystemDateTimeExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DateTime
#define SOAP_TYPE_PointerTott__DateTime (1151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DateTime(struct soap*, tt__DateTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DateTime(struct soap*, const char *, int, tt__DateTime *const*, const char *);
SOAP_FMAC3 tt__DateTime ** SOAP_FMAC4 soap_in_PointerTott__DateTime(struct soap*, const char*, tt__DateTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DateTime(struct soap*, tt__DateTime *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DateTime
#define soap_write_PointerTott__DateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DateTime(soap, data), 0) || soap_put_PointerTott__DateTime(soap, data, "tt:DateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DateTime ** SOAP_FMAC4 soap_get_PointerTott__DateTime(struct soap*, tt__DateTime **, const char*, const char*);

#ifndef soap_read_PointerTott__DateTime
#define soap_read_PointerTott__DateTime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__TimeZone
#define SOAP_TYPE_PointerTott__TimeZone (1150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__TimeZone(struct soap*, tt__TimeZone *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__TimeZone(struct soap*, const char *, int, tt__TimeZone *const*, const char *);
SOAP_FMAC3 tt__TimeZone ** SOAP_FMAC4 soap_in_PointerTott__TimeZone(struct soap*, const char*, tt__TimeZone **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__TimeZone(struct soap*, tt__TimeZone *const*, const char*, const char*);

#ifndef soap_write_PointerTott__TimeZone
#define soap_write_PointerTott__TimeZone(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__TimeZone(soap, data), 0) || soap_put_PointerTott__TimeZone(soap, data, "tt:TimeZone", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__TimeZone ** SOAP_FMAC4 soap_get_PointerTott__TimeZone(struct soap*, tt__TimeZone **, const char*, const char*);

#ifndef soap_read_PointerTott__TimeZone
#define soap_read_PointerTott__TimeZone(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__TimeZone(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SystemLogUri
#define SOAP_TYPE_PointerTott__SystemLogUri (1148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemLogUri(struct soap*, const char *, int, tt__SystemLogUri *const*, const char *);
SOAP_FMAC3 tt__SystemLogUri ** SOAP_FMAC4 soap_in_PointerTott__SystemLogUri(struct soap*, const char*, tt__SystemLogUri **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SystemLogUri
#define soap_write_PointerTott__SystemLogUri(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SystemLogUri(soap, data), 0) || soap_put_PointerTott__SystemLogUri(soap, data, "tt:SystemLogUri", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemLogUri ** SOAP_FMAC4 soap_get_PointerTott__SystemLogUri(struct soap*, tt__SystemLogUri **, const char*, const char*);

#ifndef soap_read_PointerTott__SystemLogUri
#define soap_read_PointerTott__SystemLogUri(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SystemLogUri(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AttachmentData
#define SOAP_TYPE_PointerTott__AttachmentData (1147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AttachmentData(struct soap*, tt__AttachmentData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AttachmentData(struct soap*, const char *, int, tt__AttachmentData *const*, const char *);
SOAP_FMAC3 tt__AttachmentData ** SOAP_FMAC4 soap_in_PointerTott__AttachmentData(struct soap*, const char*, tt__AttachmentData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AttachmentData(struct soap*, tt__AttachmentData *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AttachmentData
#define soap_write_PointerTott__AttachmentData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AttachmentData(soap, data), 0) || soap_put_PointerTott__AttachmentData(soap, data, "tt:AttachmentData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AttachmentData ** SOAP_FMAC4 soap_get_PointerTott__AttachmentData(struct soap*, tt__AttachmentData **, const char*, const char*);

#ifndef soap_read_PointerTott__AttachmentData
#define soap_read_PointerTott__AttachmentData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AttachmentData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceExtension
#define SOAP_TYPE_PointerTott__AnalyticsDeviceExtension (1146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceExtension(struct soap*, const char *, int, tt__AnalyticsDeviceExtension *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceExtension(struct soap*, const char*, tt__AnalyticsDeviceExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsDeviceExtension
#define soap_write_PointerTott__AnalyticsDeviceExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsDeviceExtension(soap, data), 0) || soap_put_PointerTott__AnalyticsDeviceExtension(soap, data, "tt:AnalyticsDeviceExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceExtension ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceExtension(struct soap*, tt__AnalyticsDeviceExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsDeviceExtension
#define soap_read_PointerTott__AnalyticsDeviceExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsDeviceExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension2 (1145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilitiesExtension2(struct soap*, const char *, int, tt__SystemCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilitiesExtension2(struct soap*, const char*, tt__SystemCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SystemCapabilitiesExtension2
#define soap_write_PointerTott__SystemCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SystemCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTott__SystemCapabilitiesExtension2(soap, data, "tt:SystemCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilitiesExtension2(struct soap*, tt__SystemCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__SystemCapabilitiesExtension2
#define soap_read_PointerTott__SystemCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SystemCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SystemCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SystemCapabilitiesExtension (1144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilitiesExtension(struct soap*, const char *, int, tt__SystemCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilitiesExtension(struct soap*, const char*, tt__SystemCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SystemCapabilitiesExtension
#define soap_write_PointerTott__SystemCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SystemCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__SystemCapabilitiesExtension(soap, data, "tt:SystemCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilitiesExtension(struct soap*, tt__SystemCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SystemCapabilitiesExtension
#define soap_read_PointerTott__SystemCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SystemCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__OnvifVersion
#define SOAP_TYPE_PointerTott__OnvifVersion (1142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__OnvifVersion(struct soap*, const char *, int, tt__OnvifVersion *const*, const char *);
SOAP_FMAC3 tt__OnvifVersion ** SOAP_FMAC4 soap_in_PointerTott__OnvifVersion(struct soap*, const char*, tt__OnvifVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion *const*, const char*, const char*);

#ifndef soap_write_PointerTott__OnvifVersion
#define soap_write_PointerTott__OnvifVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__OnvifVersion(soap, data), 0) || soap_put_PointerTott__OnvifVersion(soap, data, "tt:OnvifVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__OnvifVersion ** SOAP_FMAC4 soap_get_PointerTott__OnvifVersion(struct soap*, tt__OnvifVersion **, const char*, const char*);

#ifndef soap_read_PointerTott__OnvifVersion
#define soap_read_PointerTott__OnvifVersion(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__OnvifVersion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension2 (1141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilitiesExtension2(struct soap*, const char *, int, tt__SecurityCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilitiesExtension2(struct soap*, const char*, tt__SecurityCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SecurityCapabilitiesExtension2
#define soap_write_PointerTott__SecurityCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SecurityCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTott__SecurityCapabilitiesExtension2(soap, data, "tt:SecurityCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SecurityCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilitiesExtension2(struct soap*, tt__SecurityCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__SecurityCapabilitiesExtension2
#define soap_read_PointerTott__SecurityCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SecurityCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension
#define SOAP_TYPE_PointerTott__SecurityCapabilitiesExtension (1140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilitiesExtension(struct soap*, const char *, int, tt__SecurityCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilitiesExtension(struct soap*, const char*, tt__SecurityCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SecurityCapabilitiesExtension
#define soap_write_PointerTott__SecurityCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SecurityCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__SecurityCapabilitiesExtension(soap, data, "tt:SecurityCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SecurityCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilitiesExtension(struct soap*, tt__SecurityCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__SecurityCapabilitiesExtension
#define soap_read_PointerTott__SecurityCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SecurityCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension2 (1139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilitiesExtension2(struct soap*, const char *, int, tt__NetworkCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilitiesExtension2(struct soap*, const char*, tt__NetworkCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkCapabilitiesExtension2
#define soap_write_PointerTott__NetworkCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTott__NetworkCapabilitiesExtension2(soap, data, "tt:NetworkCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilitiesExtension2(struct soap*, tt__NetworkCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkCapabilitiesExtension2
#define soap_read_PointerTott__NetworkCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension
#define SOAP_TYPE_PointerTott__NetworkCapabilitiesExtension (1138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilitiesExtension(struct soap*, const char *, int, tt__NetworkCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilitiesExtension(struct soap*, const char*, tt__NetworkCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkCapabilitiesExtension
#define soap_write_PointerTott__NetworkCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__NetworkCapabilitiesExtension(soap, data, "tt:NetworkCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilitiesExtension(struct soap*, tt__NetworkCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkCapabilitiesExtension
#define soap_read_PointerTott__NetworkCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilitiesExtension (1137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, const char *, int, tt__RealTimeStreamingCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, const char*, tt__RealTimeStreamingCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RealTimeStreamingCapabilitiesExtension
#define soap_write_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, data, "tt:RealTimeStreamingCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RealTimeStreamingCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__RealTimeStreamingCapabilitiesExtension(struct soap*, tt__RealTimeStreamingCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RealTimeStreamingCapabilitiesExtension
#define soap_read_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RealTimeStreamingCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ProfileCapabilities
#define SOAP_TYPE_PointerTott__ProfileCapabilities (1136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileCapabilities(struct soap*, const char *, int, tt__ProfileCapabilities *const*, const char *);
SOAP_FMAC3 tt__ProfileCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ProfileCapabilities(struct soap*, const char*, tt__ProfileCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ProfileCapabilities
#define soap_write_PointerTott__ProfileCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ProfileCapabilities(soap, data), 0) || soap_put_PointerTott__ProfileCapabilities(soap, data, "tt:ProfileCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ProfileCapabilities(struct soap*, tt__ProfileCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__ProfileCapabilities
#define soap_read_PointerTott__ProfileCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ProfileCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MediaCapabilitiesExtension
#define SOAP_TYPE_PointerTott__MediaCapabilitiesExtension (1135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaCapabilitiesExtension(struct soap*, const char *, int, tt__MediaCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__MediaCapabilitiesExtension(struct soap*, const char*, tt__MediaCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MediaCapabilitiesExtension
#define soap_write_PointerTott__MediaCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MediaCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__MediaCapabilitiesExtension(soap, data, "tt:MediaCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MediaCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__MediaCapabilitiesExtension(struct soap*, tt__MediaCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__MediaCapabilitiesExtension
#define soap_read_PointerTott__MediaCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MediaCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities
#define SOAP_TYPE_PointerTott__RealTimeStreamingCapabilities (1134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RealTimeStreamingCapabilities(struct soap*, const char *, int, tt__RealTimeStreamingCapabilities *const*, const char *);
SOAP_FMAC3 tt__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__RealTimeStreamingCapabilities(struct soap*, const char*, tt__RealTimeStreamingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RealTimeStreamingCapabilities
#define soap_write_PointerTott__RealTimeStreamingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RealTimeStreamingCapabilities(soap, data), 0) || soap_put_PointerTott__RealTimeStreamingCapabilities(soap, data, "tt:RealTimeStreamingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RealTimeStreamingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__RealTimeStreamingCapabilities(struct soap*, tt__RealTimeStreamingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__RealTimeStreamingCapabilities
#define soap_read_PointerTott__RealTimeStreamingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RealTimeStreamingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension2
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension2 (1133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilitiesExtension2(struct soap*, const char *, int, tt__IOCapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilitiesExtension2(struct soap*, const char*, tt__IOCapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IOCapabilitiesExtension2
#define soap_write_PointerTott__IOCapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IOCapabilitiesExtension2(soap, data), 0) || soap_put_PointerTott__IOCapabilitiesExtension2(soap, data, "tt:IOCapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IOCapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilitiesExtension2(struct soap*, tt__IOCapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__IOCapabilitiesExtension2
#define soap_read_PointerTott__IOCapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IOCapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IOCapabilitiesExtension
#define SOAP_TYPE_PointerTott__IOCapabilitiesExtension (1131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilitiesExtension(struct soap*, const char *, int, tt__IOCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__IOCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilitiesExtension(struct soap*, const char*, tt__IOCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IOCapabilitiesExtension
#define soap_write_PointerTott__IOCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IOCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__IOCapabilitiesExtension(soap, data, "tt:IOCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IOCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilitiesExtension(struct soap*, tt__IOCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__IOCapabilitiesExtension
#define soap_read_PointerTott__IOCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IOCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension
#define SOAP_TYPE_PointerTott__DeviceCapabilitiesExtension (1130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceCapabilitiesExtension(struct soap*, const char *, int, tt__DeviceCapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__DeviceCapabilitiesExtension(struct soap*, const char*, tt__DeviceCapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DeviceCapabilitiesExtension
#define soap_write_PointerTott__DeviceCapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DeviceCapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__DeviceCapabilitiesExtension(soap, data, "tt:DeviceCapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceCapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__DeviceCapabilitiesExtension(struct soap*, tt__DeviceCapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__DeviceCapabilitiesExtension
#define soap_read_PointerTott__DeviceCapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DeviceCapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SecurityCapabilities
#define SOAP_TYPE_PointerTott__SecurityCapabilities (1129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SecurityCapabilities(struct soap*, const char *, int, tt__SecurityCapabilities *const*, const char *);
SOAP_FMAC3 tt__SecurityCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SecurityCapabilities(struct soap*, const char*, tt__SecurityCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SecurityCapabilities
#define soap_write_PointerTott__SecurityCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SecurityCapabilities(soap, data), 0) || soap_put_PointerTott__SecurityCapabilities(soap, data, "tt:SecurityCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SecurityCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SecurityCapabilities(struct soap*, tt__SecurityCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__SecurityCapabilities
#define soap_read_PointerTott__SecurityCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SecurityCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IOCapabilities
#define SOAP_TYPE_PointerTott__IOCapabilities (1128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IOCapabilities(struct soap*, const char *, int, tt__IOCapabilities *const*, const char *);
SOAP_FMAC3 tt__IOCapabilities ** SOAP_FMAC4 soap_in_PointerTott__IOCapabilities(struct soap*, const char*, tt__IOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IOCapabilities
#define soap_write_PointerTott__IOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IOCapabilities(soap, data), 0) || soap_put_PointerTott__IOCapabilities(soap, data, "tt:IOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IOCapabilities ** SOAP_FMAC4 soap_get_PointerTott__IOCapabilities(struct soap*, tt__IOCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__IOCapabilities
#define soap_read_PointerTott__IOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SystemCapabilities
#define SOAP_TYPE_PointerTott__SystemCapabilities (1127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SystemCapabilities(struct soap*, const char *, int, tt__SystemCapabilities *const*, const char *);
SOAP_FMAC3 tt__SystemCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SystemCapabilities(struct soap*, const char*, tt__SystemCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SystemCapabilities
#define soap_write_PointerTott__SystemCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SystemCapabilities(soap, data), 0) || soap_put_PointerTott__SystemCapabilities(soap, data, "tt:SystemCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SystemCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SystemCapabilities(struct soap*, tt__SystemCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__SystemCapabilities
#define soap_read_PointerTott__SystemCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SystemCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkCapabilities
#define SOAP_TYPE_PointerTott__NetworkCapabilities (1126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkCapabilities(struct soap*, const char *, int, tt__NetworkCapabilities *const*, const char *);
SOAP_FMAC3 tt__NetworkCapabilities ** SOAP_FMAC4 soap_in_PointerTott__NetworkCapabilities(struct soap*, const char*, tt__NetworkCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkCapabilities
#define soap_write_PointerTott__NetworkCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkCapabilities(soap, data), 0) || soap_put_PointerTott__NetworkCapabilities(soap, data, "tt:NetworkCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkCapabilities ** SOAP_FMAC4 soap_get_PointerTott__NetworkCapabilities(struct soap*, tt__NetworkCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkCapabilities
#define soap_read_PointerTott__NetworkCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension2
#define SOAP_TYPE_PointerTott__CapabilitiesExtension2 (1125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CapabilitiesExtension2(struct soap*, const char *, int, tt__CapabilitiesExtension2 *const*, const char *);
SOAP_FMAC3 tt__CapabilitiesExtension2 ** SOAP_FMAC4 soap_in_PointerTott__CapabilitiesExtension2(struct soap*, const char*, tt__CapabilitiesExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__CapabilitiesExtension2
#define soap_write_PointerTott__CapabilitiesExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__CapabilitiesExtension2(soap, data), 0) || soap_put_PointerTott__CapabilitiesExtension2(soap, data, "tt:CapabilitiesExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CapabilitiesExtension2 ** SOAP_FMAC4 soap_get_PointerTott__CapabilitiesExtension2(struct soap*, tt__CapabilitiesExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__CapabilitiesExtension2
#define soap_read_PointerTott__CapabilitiesExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__CapabilitiesExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsDeviceCapabilities (1124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsDeviceCapabilities(struct soap*, const char *, int, tt__AnalyticsDeviceCapabilities *const*, const char *);
SOAP_FMAC3 tt__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsDeviceCapabilities(struct soap*, const char*, tt__AnalyticsDeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsDeviceCapabilities
#define soap_write_PointerTott__AnalyticsDeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsDeviceCapabilities(soap, data), 0) || soap_put_PointerTott__AnalyticsDeviceCapabilities(soap, data, "tt:AnalyticsDeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsDeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsDeviceCapabilities(struct soap*, tt__AnalyticsDeviceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsDeviceCapabilities
#define soap_read_PointerTott__AnalyticsDeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsDeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ReceiverCapabilities
#define SOAP_TYPE_PointerTott__ReceiverCapabilities (1123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReceiverCapabilities(struct soap*, const char *, int, tt__ReceiverCapabilities *const*, const char *);
SOAP_FMAC3 tt__ReceiverCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ReceiverCapabilities(struct soap*, const char*, tt__ReceiverCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ReceiverCapabilities
#define soap_write_PointerTott__ReceiverCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ReceiverCapabilities(soap, data), 0) || soap_put_PointerTott__ReceiverCapabilities(soap, data, "tt:ReceiverCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReceiverCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ReceiverCapabilities(struct soap*, tt__ReceiverCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__ReceiverCapabilities
#define soap_read_PointerTott__ReceiverCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ReceiverCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ReplayCapabilities
#define SOAP_TYPE_PointerTott__ReplayCapabilities (1122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReplayCapabilities(struct soap*, const char *, int, tt__ReplayCapabilities *const*, const char *);
SOAP_FMAC3 tt__ReplayCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ReplayCapabilities(struct soap*, const char*, tt__ReplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ReplayCapabilities
#define soap_write_PointerTott__ReplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ReplayCapabilities(soap, data), 0) || soap_put_PointerTott__ReplayCapabilities(soap, data, "tt:ReplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ReplayCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ReplayCapabilities(struct soap*, tt__ReplayCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__ReplayCapabilities
#define soap_read_PointerTott__ReplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ReplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SearchCapabilities
#define SOAP_TYPE_PointerTott__SearchCapabilities (1121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SearchCapabilities(struct soap*, const char *, int, tt__SearchCapabilities *const*, const char *);
SOAP_FMAC3 tt__SearchCapabilities ** SOAP_FMAC4 soap_in_PointerTott__SearchCapabilities(struct soap*, const char*, tt__SearchCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SearchCapabilities
#define soap_write_PointerTott__SearchCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SearchCapabilities(soap, data), 0) || soap_put_PointerTott__SearchCapabilities(soap, data, "tt:SearchCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SearchCapabilities ** SOAP_FMAC4 soap_get_PointerTott__SearchCapabilities(struct soap*, tt__SearchCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__SearchCapabilities
#define soap_read_PointerTott__SearchCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SearchCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RecordingCapabilities
#define SOAP_TYPE_PointerTott__RecordingCapabilities (1120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RecordingCapabilities(struct soap*, const char *, int, tt__RecordingCapabilities *const*, const char *);
SOAP_FMAC3 tt__RecordingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__RecordingCapabilities(struct soap*, const char*, tt__RecordingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RecordingCapabilities
#define soap_write_PointerTott__RecordingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RecordingCapabilities(soap, data), 0) || soap_put_PointerTott__RecordingCapabilities(soap, data, "tt:RecordingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RecordingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__RecordingCapabilities(struct soap*, tt__RecordingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__RecordingCapabilities
#define soap_read_PointerTott__RecordingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RecordingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DisplayCapabilities
#define SOAP_TYPE_PointerTott__DisplayCapabilities (1119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DisplayCapabilities(struct soap*, const char *, int, tt__DisplayCapabilities *const*, const char *);
SOAP_FMAC3 tt__DisplayCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DisplayCapabilities(struct soap*, const char*, tt__DisplayCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DisplayCapabilities
#define soap_write_PointerTott__DisplayCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DisplayCapabilities(soap, data), 0) || soap_put_PointerTott__DisplayCapabilities(soap, data, "tt:DisplayCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DisplayCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DisplayCapabilities(struct soap*, tt__DisplayCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__DisplayCapabilities
#define soap_read_PointerTott__DisplayCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DisplayCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DeviceIOCapabilities
#define SOAP_TYPE_PointerTott__DeviceIOCapabilities (1118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceIOCapabilities(struct soap*, const char *, int, tt__DeviceIOCapabilities *const*, const char *);
SOAP_FMAC3 tt__DeviceIOCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DeviceIOCapabilities(struct soap*, const char*, tt__DeviceIOCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DeviceIOCapabilities
#define soap_write_PointerTott__DeviceIOCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DeviceIOCapabilities(soap, data), 0) || soap_put_PointerTott__DeviceIOCapabilities(soap, data, "tt:DeviceIOCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceIOCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DeviceIOCapabilities(struct soap*, tt__DeviceIOCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__DeviceIOCapabilities
#define soap_read_PointerTott__DeviceIOCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DeviceIOCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__CapabilitiesExtension
#define SOAP_TYPE_PointerTott__CapabilitiesExtension (1117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__CapabilitiesExtension(struct soap*, const char *, int, tt__CapabilitiesExtension *const*, const char *);
SOAP_FMAC3 tt__CapabilitiesExtension ** SOAP_FMAC4 soap_in_PointerTott__CapabilitiesExtension(struct soap*, const char*, tt__CapabilitiesExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__CapabilitiesExtension
#define soap_write_PointerTott__CapabilitiesExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__CapabilitiesExtension(soap, data), 0) || soap_put_PointerTott__CapabilitiesExtension(soap, data, "tt:CapabilitiesExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__CapabilitiesExtension ** SOAP_FMAC4 soap_get_PointerTott__CapabilitiesExtension(struct soap*, tt__CapabilitiesExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__CapabilitiesExtension
#define soap_read_PointerTott__CapabilitiesExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__CapabilitiesExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZCapabilities
#define SOAP_TYPE_PointerTott__PTZCapabilities (1116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZCapabilities(struct soap*, const char *, int, tt__PTZCapabilities *const*, const char *);
SOAP_FMAC3 tt__PTZCapabilities ** SOAP_FMAC4 soap_in_PointerTott__PTZCapabilities(struct soap*, const char*, tt__PTZCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZCapabilities
#define soap_write_PointerTott__PTZCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZCapabilities(soap, data), 0) || soap_put_PointerTott__PTZCapabilities(soap, data, "tt:PTZCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZCapabilities ** SOAP_FMAC4 soap_get_PointerTott__PTZCapabilities(struct soap*, tt__PTZCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZCapabilities
#define soap_read_PointerTott__PTZCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MediaCapabilities
#define SOAP_TYPE_PointerTott__MediaCapabilities (1115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MediaCapabilities(struct soap*, const char *, int, tt__MediaCapabilities *const*, const char *);
SOAP_FMAC3 tt__MediaCapabilities ** SOAP_FMAC4 soap_in_PointerTott__MediaCapabilities(struct soap*, const char*, tt__MediaCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MediaCapabilities
#define soap_write_PointerTott__MediaCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MediaCapabilities(soap, data), 0) || soap_put_PointerTott__MediaCapabilities(soap, data, "tt:MediaCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MediaCapabilities ** SOAP_FMAC4 soap_get_PointerTott__MediaCapabilities(struct soap*, tt__MediaCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__MediaCapabilities
#define soap_read_PointerTott__MediaCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MediaCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingCapabilities
#define SOAP_TYPE_PointerTott__ImagingCapabilities (1114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingCapabilities(struct soap*, const char *, int, tt__ImagingCapabilities *const*, const char *);
SOAP_FMAC3 tt__ImagingCapabilities ** SOAP_FMAC4 soap_in_PointerTott__ImagingCapabilities(struct soap*, const char*, tt__ImagingCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingCapabilities
#define soap_write_PointerTott__ImagingCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingCapabilities(soap, data), 0) || soap_put_PointerTott__ImagingCapabilities(soap, data, "tt:ImagingCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingCapabilities ** SOAP_FMAC4 soap_get_PointerTott__ImagingCapabilities(struct soap*, tt__ImagingCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingCapabilities
#define soap_read_PointerTott__ImagingCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__EventCapabilities
#define SOAP_TYPE_PointerTott__EventCapabilities (1113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__EventCapabilities(struct soap*, const char *, int, tt__EventCapabilities *const*, const char *);
SOAP_FMAC3 tt__EventCapabilities ** SOAP_FMAC4 soap_in_PointerTott__EventCapabilities(struct soap*, const char*, tt__EventCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__EventCapabilities
#define soap_write_PointerTott__EventCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__EventCapabilities(soap, data), 0) || soap_put_PointerTott__EventCapabilities(soap, data, "tt:EventCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__EventCapabilities ** SOAP_FMAC4 soap_get_PointerTott__EventCapabilities(struct soap*, tt__EventCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__EventCapabilities
#define soap_read_PointerTott__EventCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__EventCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DeviceCapabilities
#define SOAP_TYPE_PointerTott__DeviceCapabilities (1112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DeviceCapabilities(struct soap*, const char *, int, tt__DeviceCapabilities *const*, const char *);
SOAP_FMAC3 tt__DeviceCapabilities ** SOAP_FMAC4 soap_in_PointerTott__DeviceCapabilities(struct soap*, const char*, tt__DeviceCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DeviceCapabilities
#define soap_write_PointerTott__DeviceCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DeviceCapabilities(soap, data), 0) || soap_put_PointerTott__DeviceCapabilities(soap, data, "tt:DeviceCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DeviceCapabilities ** SOAP_FMAC4 soap_get_PointerTott__DeviceCapabilities(struct soap*, tt__DeviceCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__DeviceCapabilities
#define soap_read_PointerTott__DeviceCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DeviceCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AnalyticsCapabilities
#define SOAP_TYPE_PointerTott__AnalyticsCapabilities (1111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AnalyticsCapabilities(struct soap*, const char *, int, tt__AnalyticsCapabilities *const*, const char *);
SOAP_FMAC3 tt__AnalyticsCapabilities ** SOAP_FMAC4 soap_in_PointerTott__AnalyticsCapabilities(struct soap*, const char*, tt__AnalyticsCapabilities **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AnalyticsCapabilities
#define soap_write_PointerTott__AnalyticsCapabilities(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AnalyticsCapabilities(soap, data), 0) || soap_put_PointerTott__AnalyticsCapabilities(soap, data, "tt:AnalyticsCapabilities", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AnalyticsCapabilities ** SOAP_FMAC4 soap_get_PointerTott__AnalyticsCapabilities(struct soap*, tt__AnalyticsCapabilities **, const char*, const char*);

#ifndef soap_read_PointerTott__AnalyticsCapabilities
#define soap_read_PointerTott__AnalyticsCapabilities(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AnalyticsCapabilities(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension
#define SOAP_TYPE_PointerTott__Dot11AvailableNetworksExtension (1110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11AvailableNetworksExtension(struct soap*, const char *, int, tt__Dot11AvailableNetworksExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11AvailableNetworksExtension(struct soap*, const char*, tt__Dot11AvailableNetworksExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11AvailableNetworksExtension
#define soap_write_PointerTott__Dot11AvailableNetworksExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11AvailableNetworksExtension(soap, data), 0) || soap_put_PointerTott__Dot11AvailableNetworksExtension(soap, data, "tt:Dot11AvailableNetworksExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11AvailableNetworksExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11AvailableNetworksExtension(struct soap*, tt__Dot11AvailableNetworksExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11AvailableNetworksExtension
#define soap_read_PointerTott__Dot11AvailableNetworksExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11AvailableNetworksExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11SignalStrength
#define SOAP_TYPE_PointerTott__Dot11SignalStrength (1107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SignalStrength(struct soap*, const char *, int, enum tt__Dot11SignalStrength *const*, const char *);
SOAP_FMAC3 enum tt__Dot11SignalStrength ** SOAP_FMAC4 soap_in_PointerTott__Dot11SignalStrength(struct soap*, const char*, enum tt__Dot11SignalStrength **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11SignalStrength
#define soap_write_PointerTott__Dot11SignalStrength(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11SignalStrength(soap, data), 0) || soap_put_PointerTott__Dot11SignalStrength(soap, data, "tt:Dot11SignalStrength", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11SignalStrength ** SOAP_FMAC4 soap_get_PointerTott__Dot11SignalStrength(struct soap*, enum tt__Dot11SignalStrength **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11SignalStrength
#define soap_read_PointerTott__Dot11SignalStrength(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11SignalStrength(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11PSKSetExtension
#define SOAP_TYPE_PointerTott__Dot11PSKSetExtension (1106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKSetExtension(struct soap*, const char *, int, tt__Dot11PSKSetExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11PSKSetExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKSetExtension(struct soap*, const char*, tt__Dot11PSKSetExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11PSKSetExtension
#define soap_write_PointerTott__Dot11PSKSetExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11PSKSetExtension(soap, data), 0) || soap_put_PointerTott__Dot11PSKSetExtension(soap, data, "tt:Dot11PSKSetExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11PSKSetExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKSetExtension(struct soap*, tt__Dot11PSKSetExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11PSKSetExtension
#define soap_read_PointerTott__Dot11PSKSetExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11PSKSetExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11PSKPassphrase
#define SOAP_TYPE_PointerTott__Dot11PSKPassphrase (1105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKPassphrase(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKPassphrase(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKPassphrase(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKPassphrase(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11PSKPassphrase
#define soap_write_PointerTott__Dot11PSKPassphrase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11PSKPassphrase(soap, data), 0) || soap_put_PointerTott__Dot11PSKPassphrase(soap, data, "tt:Dot11PSKPassphrase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKPassphrase(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11PSKPassphrase
#define soap_read_PointerTott__Dot11PSKPassphrase(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11PSKPassphrase(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11PSK
#define SOAP_TYPE_PointerTott__Dot11PSK (1104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSK(struct soap*, const char *, int, xsd__hexBinary *const*, const char *);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSK(struct soap*, const char*, xsd__hexBinary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11PSK
#define soap_write_PointerTott__Dot11PSK(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11PSK(soap, data), 0) || soap_put_PointerTott__Dot11PSK(soap, data, "tt:Dot11PSK", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSK(struct soap*, xsd__hexBinary **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11PSK
#define soap_read_PointerTott__Dot11PSK(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11PSK(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_PointerTott__Dot11SecurityConfigurationExtension (1103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, const char *, int, tt__Dot11SecurityConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, const char*, tt__Dot11SecurityConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11SecurityConfigurationExtension
#define soap_write_PointerTott__Dot11SecurityConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11SecurityConfigurationExtension(soap, data), 0) || soap_put_PointerTott__Dot11SecurityConfigurationExtension(soap, data, "tt:Dot11SecurityConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SecurityConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__Dot11SecurityConfigurationExtension(struct soap*, tt__Dot11SecurityConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11SecurityConfigurationExtension
#define soap_read_PointerTott__Dot11SecurityConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11SecurityConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ReferenceToken
#define SOAP_TYPE_PointerTott__ReferenceToken (1102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ReferenceToken(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ReferenceToken(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__ReferenceToken(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ReferenceToken(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ReferenceToken
#define soap_write_PointerTott__ReferenceToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ReferenceToken(soap, data), 0) || soap_put_PointerTott__ReferenceToken(soap, data, "tt:ReferenceToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__ReferenceToken(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__ReferenceToken
#define soap_read_PointerTott__ReferenceToken(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ReferenceToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11PSKSet
#define SOAP_TYPE_PointerTott__Dot11PSKSet (1101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11PSKSet(struct soap*, const char *, int, tt__Dot11PSKSet *const*, const char *);
SOAP_FMAC3 tt__Dot11PSKSet ** SOAP_FMAC4 soap_in_PointerTott__Dot11PSKSet(struct soap*, const char*, tt__Dot11PSKSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11PSKSet
#define soap_write_PointerTott__Dot11PSKSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11PSKSet(soap, data), 0) || soap_put_PointerTott__Dot11PSKSet(soap, data, "tt:Dot11PSKSet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11PSKSet ** SOAP_FMAC4 soap_get_PointerTott__Dot11PSKSet(struct soap*, tt__Dot11PSKSet **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11PSKSet
#define soap_read_PointerTott__Dot11PSKSet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11PSKSet(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11Cipher
#define SOAP_TYPE_PointerTott__Dot11Cipher (1100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Cipher(struct soap*, const char *, int, enum tt__Dot11Cipher *const*, const char *);
SOAP_FMAC3 enum tt__Dot11Cipher ** SOAP_FMAC4 soap_in_PointerTott__Dot11Cipher(struct soap*, const char*, enum tt__Dot11Cipher **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11Cipher
#define soap_write_PointerTott__Dot11Cipher(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11Cipher(soap, data), 0) || soap_put_PointerTott__Dot11Cipher(soap, data, "tt:Dot11Cipher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__Dot11Cipher ** SOAP_FMAC4 soap_get_PointerTott__Dot11Cipher(struct soap*, enum tt__Dot11Cipher **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11Cipher
#define soap_read_PointerTott__Dot11Cipher(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11Cipher(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11SecurityConfiguration
#define SOAP_TYPE_PointerTott__Dot11SecurityConfiguration (1099)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11SecurityConfiguration(struct soap*, const char *, int, tt__Dot11SecurityConfiguration *const*, const char *);
SOAP_FMAC3 tt__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_in_PointerTott__Dot11SecurityConfiguration(struct soap*, const char*, tt__Dot11SecurityConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11SecurityConfiguration
#define soap_write_PointerTott__Dot11SecurityConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11SecurityConfiguration(soap, data), 0) || soap_put_PointerTott__Dot11SecurityConfiguration(soap, data, "tt:Dot11SecurityConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11SecurityConfiguration ** SOAP_FMAC4 soap_get_PointerTott__Dot11SecurityConfiguration(struct soap*, tt__Dot11SecurityConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11SecurityConfiguration
#define soap_read_PointerTott__Dot11SecurityConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11SecurityConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPAddressFilterExtension
#define SOAP_TYPE_PointerTott__IPAddressFilterExtension (1098)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddressFilterExtension(struct soap*, const char *, int, tt__IPAddressFilterExtension *const*, const char *);
SOAP_FMAC3 tt__IPAddressFilterExtension ** SOAP_FMAC4 soap_in_PointerTott__IPAddressFilterExtension(struct soap*, const char*, tt__IPAddressFilterExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPAddressFilterExtension
#define soap_write_PointerTott__IPAddressFilterExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPAddressFilterExtension(soap, data), 0) || soap_put_PointerTott__IPAddressFilterExtension(soap, data, "tt:IPAddressFilterExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPAddressFilterExtension ** SOAP_FMAC4 soap_get_PointerTott__IPAddressFilterExtension(struct soap*, tt__IPAddressFilterExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__IPAddressFilterExtension
#define soap_read_PointerTott__IPAddressFilterExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPAddressFilterExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension2 (1097)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, const char *, int, tt__NetworkZeroConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, const char*, tt__NetworkZeroConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkZeroConfigurationExtension2
#define soap_write_PointerTott__NetworkZeroConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkZeroConfigurationExtension2(soap, data), 0) || soap_put_PointerTott__NetworkZeroConfigurationExtension2(soap, data, "tt:NetworkZeroConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkZeroConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfigurationExtension2(struct soap*, tt__NetworkZeroConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkZeroConfigurationExtension2
#define soap_read_PointerTott__NetworkZeroConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkZeroConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_PointerTott__NetworkZeroConfiguration (1095)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfiguration(struct soap*, const char *, int, tt__NetworkZeroConfiguration *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfiguration ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfiguration(struct soap*, const char*, tt__NetworkZeroConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkZeroConfiguration
#define soap_write_PointerTott__NetworkZeroConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkZeroConfiguration(soap, data), 0) || soap_put_PointerTott__NetworkZeroConfiguration(soap, data, "tt:NetworkZeroConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkZeroConfiguration ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfiguration(struct soap*, tt__NetworkZeroConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkZeroConfiguration
#define soap_read_PointerTott__NetworkZeroConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkZeroConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkZeroConfigurationExtension (1094)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkZeroConfigurationExtension(struct soap*, const char *, int, tt__NetworkZeroConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkZeroConfigurationExtension(struct soap*, const char*, tt__NetworkZeroConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkZeroConfigurationExtension
#define soap_write_PointerTott__NetworkZeroConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkZeroConfigurationExtension(soap, data), 0) || soap_put_PointerTott__NetworkZeroConfigurationExtension(soap, data, "tt:NetworkZeroConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkZeroConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkZeroConfigurationExtension(struct soap*, tt__NetworkZeroConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkZeroConfigurationExtension
#define soap_read_PointerTott__NetworkZeroConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkZeroConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv6DHCPConfiguration
#define SOAP_TYPE_PointerTott__IPv6DHCPConfiguration (1091)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6DHCPConfiguration(struct soap*, const char *, int, enum tt__IPv6DHCPConfiguration *const*, const char *);
SOAP_FMAC3 enum tt__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv6DHCPConfiguration(struct soap*, const char*, enum tt__IPv6DHCPConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv6DHCPConfiguration
#define soap_write_PointerTott__IPv6DHCPConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv6DHCPConfiguration(soap, data), 0) || soap_put_PointerTott__IPv6DHCPConfiguration(soap, data, "tt:IPv6DHCPConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum tt__IPv6DHCPConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv6DHCPConfiguration(struct soap*, enum tt__IPv6DHCPConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv6DHCPConfiguration
#define soap_read_PointerTott__IPv6DHCPConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv6DHCPConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension2 (1090)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char *, int, tt__NetworkInterfaceSetConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceSetConfigurationExtension2
#define soap_write_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, data, "tt:NetworkInterfaceSetConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension2(struct soap*, tt__NetworkInterfaceSetConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceSetConfigurationExtension2
#define soap_read_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_PointerTott__NetworkInterfaceSetConfigurationExtension (1089)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, const char *, int, tt__NetworkInterfaceSetConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, const char*, tt__NetworkInterfaceSetConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceSetConfigurationExtension
#define soap_write_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, data, "tt:NetworkInterfaceSetConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceSetConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension(struct soap*, tt__NetworkInterfaceSetConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceSetConfigurationExtension
#define soap_read_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceSetConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv6NetworkInterfaceSetConfiguration (1088)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__IPv6NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv6NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv6NetworkInterfaceSetConfiguration
#define soap_write_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, data), 0) || soap_put_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, data, "tt:IPv6NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv6NetworkInterfaceSetConfiguration(struct soap*, tt__IPv6NetworkInterfaceSetConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv6NetworkInterfaceSetConfiguration
#define soap_read_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv6NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_PointerTott__IPv4NetworkInterfaceSetConfiguration (1087)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char *, int, tt__IPv4NetworkInterfaceSetConfiguration *const*, const char *);
SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_in_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, const char*, tt__IPv4NetworkInterfaceSetConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv4NetworkInterfaceSetConfiguration
#define soap_write_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, data), 0) || soap_put_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, data, "tt:IPv4NetworkInterfaceSetConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4NetworkInterfaceSetConfiguration ** SOAP_FMAC4 soap_get_PointerTott__IPv4NetworkInterfaceSetConfiguration(struct soap*, tt__IPv4NetworkInterfaceSetConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv4NetworkInterfaceSetConfiguration
#define soap_read_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv4NetworkInterfaceSetConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DynamicDNSInformationExtension
#define SOAP_TYPE_PointerTott__DynamicDNSInformationExtension (1086)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DynamicDNSInformationExtension(struct soap*, const char *, int, tt__DynamicDNSInformationExtension *const*, const char *);
SOAP_FMAC3 tt__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__DynamicDNSInformationExtension(struct soap*, const char*, tt__DynamicDNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DynamicDNSInformationExtension
#define soap_write_PointerTott__DynamicDNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DynamicDNSInformationExtension(soap, data), 0) || soap_put_PointerTott__DynamicDNSInformationExtension(soap, data, "tt:DynamicDNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DynamicDNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__DynamicDNSInformationExtension(struct soap*, tt__DynamicDNSInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__DynamicDNSInformationExtension
#define soap_read_PointerTott__DynamicDNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DynamicDNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__duration
#define SOAP_TYPE_PointerToxsd__duration (1085)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, LONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__duration
#define soap_write_PointerToxsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__duration(soap, data), 0) || soap_put_PointerToxsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerToxsd__duration
#define soap_read_PointerToxsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NTPInformationExtension
#define SOAP_TYPE_PointerTott__NTPInformationExtension (1084)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NTPInformationExtension(struct soap*, const char *, int, tt__NTPInformationExtension *const*, const char *);
SOAP_FMAC3 tt__NTPInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__NTPInformationExtension(struct soap*, const char*, tt__NTPInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NTPInformationExtension
#define soap_write_PointerTott__NTPInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NTPInformationExtension(soap, data), 0) || soap_put_PointerTott__NTPInformationExtension(soap, data, "tt:NTPInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NTPInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__NTPInformationExtension(struct soap*, tt__NTPInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NTPInformationExtension
#define soap_read_PointerTott__NTPInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NTPInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkHost
#define SOAP_TYPE_PointerTott__NetworkHost (1082)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkHost(struct soap*, tt__NetworkHost *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkHost(struct soap*, const char *, int, tt__NetworkHost *const*, const char *);
SOAP_FMAC3 tt__NetworkHost ** SOAP_FMAC4 soap_in_PointerTott__NetworkHost(struct soap*, const char*, tt__NetworkHost **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkHost(struct soap*, tt__NetworkHost *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkHost
#define soap_write_PointerTott__NetworkHost(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkHost(soap, data), 0) || soap_put_PointerTott__NetworkHost(soap, data, "tt:NetworkHost", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkHost ** SOAP_FMAC4 soap_get_PointerTott__NetworkHost(struct soap*, tt__NetworkHost **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkHost
#define soap_read_PointerTott__NetworkHost(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkHost(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DNSInformationExtension
#define SOAP_TYPE_PointerTott__DNSInformationExtension (1081)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSInformationExtension(struct soap*, const char *, int, tt__DNSInformationExtension *const*, const char *);
SOAP_FMAC3 tt__DNSInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__DNSInformationExtension(struct soap*, const char*, tt__DNSInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DNSInformationExtension
#define soap_write_PointerTott__DNSInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DNSInformationExtension(soap, data), 0) || soap_put_PointerTott__DNSInformationExtension(soap, data, "tt:DNSInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__DNSInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__DNSInformationExtension(struct soap*, tt__DNSInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__DNSInformationExtension
#define soap_read_PointerTott__DNSInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DNSInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__HostnameInformationExtension
#define SOAP_TYPE_PointerTott__HostnameInformationExtension (1078)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__HostnameInformationExtension(struct soap*, const char *, int, tt__HostnameInformationExtension *const*, const char *);
SOAP_FMAC3 tt__HostnameInformationExtension ** SOAP_FMAC4 soap_in_PointerTott__HostnameInformationExtension(struct soap*, const char*, tt__HostnameInformationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__HostnameInformationExtension
#define soap_write_PointerTott__HostnameInformationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__HostnameInformationExtension(soap, data), 0) || soap_put_PointerTott__HostnameInformationExtension(soap, data, "tt:HostnameInformationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__HostnameInformationExtension ** SOAP_FMAC4 soap_get_PointerTott__HostnameInformationExtension(struct soap*, tt__HostnameInformationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__HostnameInformationExtension
#define soap_read_PointerTott__HostnameInformationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__HostnameInformationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__token
#define SOAP_TYPE_PointerToxsd__token (1077)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__token(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__token(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__token(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__token(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__token
#define soap_write_PointerToxsd__token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__token(soap, data), 0) || soap_put_PointerToxsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__token(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__token
#define soap_read_PointerToxsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkHostExtension
#define SOAP_TYPE_PointerTott__NetworkHostExtension (1076)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkHostExtension(struct soap*, const char *, int, tt__NetworkHostExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkHostExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkHostExtension(struct soap*, const char*, tt__NetworkHostExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkHostExtension
#define soap_write_PointerTott__NetworkHostExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkHostExtension(soap, data), 0) || soap_put_PointerTott__NetworkHostExtension(soap, data, "tt:NetworkHostExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkHostExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkHostExtension(struct soap*, tt__NetworkHostExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkHostExtension
#define soap_read_PointerTott__NetworkHostExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkHostExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__DNSName
#define SOAP_TYPE_PointerTott__DNSName (1075)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__DNSName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__DNSName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__DNSName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__DNSName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__DNSName
#define soap_write_PointerTott__DNSName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__DNSName(soap, data), 0) || soap_put_PointerTott__DNSName(soap, data, "tt:DNSName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__DNSName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__DNSName
#define soap_read_PointerTott__DNSName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__DNSName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv6Address
#define SOAP_TYPE_PointerTott__IPv6Address (1074)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv6Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Address(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv6Address
#define soap_write_PointerTott__IPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv6Address(soap, data), 0) || soap_put_PointerTott__IPv6Address(soap, data, "tt:IPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv6Address(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv6Address
#define soap_read_PointerTott__IPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv4Address
#define SOAP_TYPE_PointerTott__IPv4Address (1073)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Address(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Address(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IPv4Address(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Address(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv4Address
#define soap_write_PointerTott__IPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv4Address(soap, data), 0) || soap_put_PointerTott__IPv4Address(soap, data, "tt:IPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IPv4Address(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv4Address
#define soap_read_PointerTott__IPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkProtocolExtension
#define SOAP_TYPE_PointerTott__NetworkProtocolExtension (1072)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkProtocolExtension(struct soap*, const char *, int, tt__NetworkProtocolExtension *const*, const char *);
SOAP_FMAC3 tt__NetworkProtocolExtension ** SOAP_FMAC4 soap_in_PointerTott__NetworkProtocolExtension(struct soap*, const char*, tt__NetworkProtocolExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkProtocolExtension
#define soap_write_PointerTott__NetworkProtocolExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkProtocolExtension(soap, data), 0) || soap_put_PointerTott__NetworkProtocolExtension(soap, data, "tt:NetworkProtocolExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkProtocolExtension ** SOAP_FMAC4 soap_get_PointerTott__NetworkProtocolExtension(struct soap*, tt__NetworkProtocolExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkProtocolExtension
#define soap_read_PointerTott__NetworkProtocolExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkProtocolExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv6ConfigurationExtension
#define SOAP_TYPE_PointerTott__IPv6ConfigurationExtension (1071)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6ConfigurationExtension(struct soap*, const char *, int, tt__IPv6ConfigurationExtension *const*, const char *);
SOAP_FMAC3 tt__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_in_PointerTott__IPv6ConfigurationExtension(struct soap*, const char*, tt__IPv6ConfigurationExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv6ConfigurationExtension
#define soap_write_PointerTott__IPv6ConfigurationExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv6ConfigurationExtension(soap, data), 0) || soap_put_PointerTott__IPv6ConfigurationExtension(soap, data, "tt:IPv6ConfigurationExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6ConfigurationExtension ** SOAP_FMAC4 soap_get_PointerTott__IPv6ConfigurationExtension(struct soap*, tt__IPv6ConfigurationExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv6ConfigurationExtension
#define soap_read_PointerTott__IPv6ConfigurationExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv6ConfigurationExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PrefixedIPv6Address
#define SOAP_TYPE_PointerTott__PrefixedIPv6Address (1069)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PrefixedIPv6Address(struct soap*, const char *, int, tt__PrefixedIPv6Address *const*, const char *);
SOAP_FMAC3 tt__PrefixedIPv6Address ** SOAP_FMAC4 soap_in_PointerTott__PrefixedIPv6Address(struct soap*, const char*, tt__PrefixedIPv6Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PrefixedIPv6Address
#define soap_write_PointerTott__PrefixedIPv6Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PrefixedIPv6Address(soap, data), 0) || soap_put_PointerTott__PrefixedIPv6Address(soap, data, "tt:PrefixedIPv6Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PrefixedIPv6Address ** SOAP_FMAC4 soap_get_PointerTott__PrefixedIPv6Address(struct soap*, tt__PrefixedIPv6Address **, const char*, const char*);

#ifndef soap_read_PointerTott__PrefixedIPv6Address
#define soap_read_PointerTott__PrefixedIPv6Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PrefixedIPv6Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PrefixedIPv4Address
#define SOAP_TYPE_PointerTott__PrefixedIPv4Address (1067)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PrefixedIPv4Address(struct soap*, const char *, int, tt__PrefixedIPv4Address *const*, const char *);
SOAP_FMAC3 tt__PrefixedIPv4Address ** SOAP_FMAC4 soap_in_PointerTott__PrefixedIPv4Address(struct soap*, const char*, tt__PrefixedIPv4Address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PrefixedIPv4Address
#define soap_write_PointerTott__PrefixedIPv4Address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PrefixedIPv4Address(soap, data), 0) || soap_put_PointerTott__PrefixedIPv4Address(soap, data, "tt:PrefixedIPv4Address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PrefixedIPv4Address ** SOAP_FMAC4 soap_get_PointerTott__PrefixedIPv4Address(struct soap*, tt__PrefixedIPv4Address **, const char*, const char*);

#ifndef soap_read_PointerTott__PrefixedIPv4Address
#define soap_read_PointerTott__PrefixedIPv4Address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PrefixedIPv4Address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv4Configuration
#define SOAP_TYPE_PointerTott__IPv4Configuration (1066)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv4Configuration(struct soap*, const char *, int, tt__IPv4Configuration *const*, const char *);
SOAP_FMAC3 tt__IPv4Configuration ** SOAP_FMAC4 soap_in_PointerTott__IPv4Configuration(struct soap*, const char*, tt__IPv4Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv4Configuration
#define soap_write_PointerTott__IPv4Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv4Configuration(soap, data), 0) || soap_put_PointerTott__IPv4Configuration(soap, data, "tt:IPv4Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv4Configuration ** SOAP_FMAC4 soap_get_PointerTott__IPv4Configuration(struct soap*, tt__IPv4Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv4Configuration
#define soap_read_PointerTott__IPv4Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv4Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPv6Configuration
#define SOAP_TYPE_PointerTott__IPv6Configuration (1065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPv6Configuration(struct soap*, const char *, int, tt__IPv6Configuration *const*, const char *);
SOAP_FMAC3 tt__IPv6Configuration ** SOAP_FMAC4 soap_in_PointerTott__IPv6Configuration(struct soap*, const char*, tt__IPv6Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPv6Configuration
#define soap_write_PointerTott__IPv6Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPv6Configuration(soap, data), 0) || soap_put_PointerTott__IPv6Configuration(soap, data, "tt:IPv6Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPv6Configuration ** SOAP_FMAC4 soap_get_PointerTott__IPv6Configuration(struct soap*, tt__IPv6Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__IPv6Configuration
#define soap_read_PointerTott__IPv6Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPv6Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_PointerTott__NetworkInterfaceConnectionSetting (1064)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, const char *, int, tt__NetworkInterfaceConnectionSetting *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, const char*, tt__NetworkInterfaceConnectionSetting **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceConnectionSetting
#define soap_write_PointerTott__NetworkInterfaceConnectionSetting(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceConnectionSetting(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceConnectionSetting(soap, data, "tt:NetworkInterfaceConnectionSetting", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceConnectionSetting ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceConnectionSetting(struct soap*, tt__NetworkInterfaceConnectionSetting **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceConnectionSetting
#define soap_read_PointerTott__NetworkInterfaceConnectionSetting(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceConnectionSetting(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__NetworkInterfaceExtension2
#define SOAP_TYPE_PointerTott__NetworkInterfaceExtension2 (1063)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__NetworkInterfaceExtension2(struct soap*, const char *, int, tt__NetworkInterfaceExtension2 *const*, const char *);
SOAP_FMAC3 tt__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_in_PointerTott__NetworkInterfaceExtension2(struct soap*, const char*, tt__NetworkInterfaceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__NetworkInterfaceExtension2
#define soap_write_PointerTott__NetworkInterfaceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__NetworkInterfaceExtension2(soap, data), 0) || soap_put_PointerTott__NetworkInterfaceExtension2(soap, data, "tt:NetworkInterfaceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__NetworkInterfaceExtension2 ** SOAP_FMAC4 soap_get_PointerTott__NetworkInterfaceExtension2(struct soap*, tt__NetworkInterfaceExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__NetworkInterfaceExtension2
#define soap_read_PointerTott__NetworkInterfaceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__NetworkInterfaceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot11Configuration
#define SOAP_TYPE_PointerTott__Dot11Configuration (1061)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot11Configuration(struct soap*, const char *, int, tt__Dot11Configuration *const*, const char *);
SOAP_FMAC3 tt__Dot11Configuration ** SOAP_FMAC4 soap_in_PointerTott__Dot11Configuration(struct soap*, const char*, tt__Dot11Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot11Configuration
#define soap_write_PointerTott__Dot11Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot11Configuration(soap, data), 0) || soap_put_PointerTott__Dot11Configuration(soap, data, "tt:Dot11Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot11Configuration ** SOAP_FMAC4 soap_get_PointerTott__Dot11Configuration(struct soap*, tt__Dot11Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot11Configuration
#define soap_read_PointerTott__Dot11Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot11Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Dot3Configuration
#define SOAP_TYPE_PointerTott__Dot3Configuration (1059)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Dot3Configuration(struct soap*, const char *, int, tt__Dot3Configuration *const*, const char *);
SOAP_FMAC3 tt__Dot3Configuration ** SOAP_FMAC4 soap_in_PointerTott__Dot3Configuration(struct soap*, const char*, tt__Dot3Configuration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Dot3Configuration
#define soap_write_PointerTott__Dot3Configuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Dot3Configuration(soap, data), 0) || soap_put_PointerTott__Dot3Configuration(soap, data, "tt:Dot3Configuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Dot3Configuration ** SOAP_FMAC4 soap_get_PointerTott__Dot3Configuration(struct soap*, tt__Dot3Configuration **, const char*, const char*);

#ifndef soap_read_PointerTott__Dot3Configuration
#define soap_read_PointerTott__Dot3Configuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Dot3Configuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Transport
#define SOAP_TYPE_PointerTott__Transport (1058)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Transport(struct soap*, tt__Transport *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Transport(struct soap*, const char *, int, tt__Transport *const*, const char *);
SOAP_FMAC3 tt__Transport ** SOAP_FMAC4 soap_in_PointerTott__Transport(struct soap*, const char*, tt__Transport **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Transport(struct soap*, tt__Transport *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Transport
#define soap_write_PointerTott__Transport(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Transport(soap, data), 0) || soap_put_PointerTott__Transport(soap, data, "tt:Transport", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Transport ** SOAP_FMAC4 soap_get_PointerTott__Transport(struct soap*, tt__Transport **, const char*, const char*);

#ifndef soap_read_PointerTott__Transport
#define soap_read_PointerTott__Transport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Transport(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IPAddress
#define SOAP_TYPE_PointerTott__IPAddress (1057)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IPAddress(struct soap*, const char *, int, tt__IPAddress *const*, const char *);
SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_in_PointerTott__IPAddress(struct soap*, const char*, tt__IPAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IPAddress(struct soap*, tt__IPAddress *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IPAddress
#define soap_write_PointerTott__IPAddress(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IPAddress(soap, data), 0) || soap_put_PointerTott__IPAddress(soap, data, "tt:IPAddress", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IPAddress ** SOAP_FMAC4 soap_get_PointerTott__IPAddress(struct soap*, tt__IPAddress **, const char*, const char*);

#ifndef soap_read_PointerTott__IPAddress
#define soap_read_PointerTott__IPAddress(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IPAddress(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__AudioDecoderConfigurationOptionsExtension (1056)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, const char *, int, tt__AudioDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__AudioDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioDecoderConfigurationOptionsExtension
#define soap_write_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, data, "tt:AudioDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfigurationOptionsExtension(struct soap*, tt__AudioDecoderConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioDecoderConfigurationOptionsExtension
#define soap_read_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__G726DecOptions
#define SOAP_TYPE_PointerTott__G726DecOptions (1055)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__G726DecOptions(struct soap*, const char *, int, tt__G726DecOptions *const*, const char *);
SOAP_FMAC3 tt__G726DecOptions ** SOAP_FMAC4 soap_in_PointerTott__G726DecOptions(struct soap*, const char*, tt__G726DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__G726DecOptions
#define soap_write_PointerTott__G726DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__G726DecOptions(soap, data), 0) || soap_put_PointerTott__G726DecOptions(soap, data, "tt:G726DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__G726DecOptions ** SOAP_FMAC4 soap_get_PointerTott__G726DecOptions(struct soap*, tt__G726DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__G726DecOptions
#define soap_read_PointerTott__G726DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__G726DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__G711DecOptions
#define SOAP_TYPE_PointerTott__G711DecOptions (1054)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__G711DecOptions(struct soap*, const char *, int, tt__G711DecOptions *const*, const char *);
SOAP_FMAC3 tt__G711DecOptions ** SOAP_FMAC4 soap_in_PointerTott__G711DecOptions(struct soap*, const char*, tt__G711DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__G711DecOptions
#define soap_write_PointerTott__G711DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__G711DecOptions(soap, data), 0) || soap_put_PointerTott__G711DecOptions(soap, data, "tt:G711DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__G711DecOptions ** SOAP_FMAC4 soap_get_PointerTott__G711DecOptions(struct soap*, tt__G711DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__G711DecOptions
#define soap_read_PointerTott__G711DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__G711DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AACDecOptions
#define SOAP_TYPE_PointerTott__AACDecOptions (1053)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AACDecOptions(struct soap*, const char *, int, tt__AACDecOptions *const*, const char *);
SOAP_FMAC3 tt__AACDecOptions ** SOAP_FMAC4 soap_in_PointerTott__AACDecOptions(struct soap*, const char*, tt__AACDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AACDecOptions
#define soap_write_PointerTott__AACDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AACDecOptions(soap, data), 0) || soap_put_PointerTott__AACDecOptions(soap, data, "tt:AACDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AACDecOptions ** SOAP_FMAC4 soap_get_PointerTott__AACDecOptions(struct soap*, tt__AACDecOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__AACDecOptions
#define soap_read_PointerTott__AACDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AACDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__VideoDecoderConfigurationOptionsExtension (1051)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, const char *, int, tt__VideoDecoderConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, const char*, tt__VideoDecoderConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoDecoderConfigurationOptionsExtension
#define soap_write_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, data, "tt:VideoDecoderConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoDecoderConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoDecoderConfigurationOptionsExtension(struct soap*, tt__VideoDecoderConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoDecoderConfigurationOptionsExtension
#define soap_read_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoDecoderConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Mpeg4DecOptions
#define SOAP_TYPE_PointerTott__Mpeg4DecOptions (1050)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4DecOptions(struct soap*, const char *, int, tt__Mpeg4DecOptions *const*, const char *);
SOAP_FMAC3 tt__Mpeg4DecOptions ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4DecOptions(struct soap*, const char*, tt__Mpeg4DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Mpeg4DecOptions
#define soap_write_PointerTott__Mpeg4DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Mpeg4DecOptions(soap, data), 0) || soap_put_PointerTott__Mpeg4DecOptions(soap, data, "tt:Mpeg4DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4DecOptions ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4DecOptions(struct soap*, tt__Mpeg4DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__Mpeg4DecOptions
#define soap_read_PointerTott__Mpeg4DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Mpeg4DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__H264DecOptions
#define SOAP_TYPE_PointerTott__H264DecOptions (1049)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264DecOptions(struct soap*, tt__H264DecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264DecOptions(struct soap*, const char *, int, tt__H264DecOptions *const*, const char *);
SOAP_FMAC3 tt__H264DecOptions ** SOAP_FMAC4 soap_in_PointerTott__H264DecOptions(struct soap*, const char*, tt__H264DecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264DecOptions(struct soap*, tt__H264DecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__H264DecOptions
#define soap_write_PointerTott__H264DecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__H264DecOptions(soap, data), 0) || soap_put_PointerTott__H264DecOptions(soap, data, "tt:H264DecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264DecOptions ** SOAP_FMAC4 soap_get_PointerTott__H264DecOptions(struct soap*, tt__H264DecOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__H264DecOptions
#define soap_read_PointerTott__H264DecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__H264DecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__JpegDecOptions
#define SOAP_TYPE_PointerTott__JpegDecOptions (1048)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegDecOptions(struct soap*, tt__JpegDecOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegDecOptions(struct soap*, const char *, int, tt__JpegDecOptions *const*, const char *);
SOAP_FMAC3 tt__JpegDecOptions ** SOAP_FMAC4 soap_in_PointerTott__JpegDecOptions(struct soap*, const char*, tt__JpegDecOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegDecOptions(struct soap*, tt__JpegDecOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__JpegDecOptions
#define soap_write_PointerTott__JpegDecOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__JpegDecOptions(soap, data), 0) || soap_put_PointerTott__JpegDecOptions(soap, data, "tt:JpegDecOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JpegDecOptions ** SOAP_FMAC4 soap_get_PointerTott__JpegDecOptions(struct soap*, tt__JpegDecOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__JpegDecOptions
#define soap_read_PointerTott__JpegDecOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__JpegDecOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptionsExtension (1047)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, const char *, int, tt__PTZStatusFilterOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, const char*, tt__PTZStatusFilterOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZStatusFilterOptionsExtension
#define soap_write_PointerTott__PTZStatusFilterOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZStatusFilterOptionsExtension(soap, data), 0) || soap_put_PointerTott__PTZStatusFilterOptionsExtension(soap, data, "tt:PTZStatusFilterOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZStatusFilterOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__PTZStatusFilterOptionsExtension(struct soap*, tt__PTZStatusFilterOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZStatusFilterOptionsExtension
#define soap_read_PointerTott__PTZStatusFilterOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZStatusFilterOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension2 (1046)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, const char *, int, tt__MetadataConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataConfigurationOptionsExtension2
#define soap_write_PointerTott__MetadataConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataConfigurationOptionsExtension2(soap, data), 0) || soap_put_PointerTott__MetadataConfigurationOptionsExtension2(soap, data, "tt:MetadataConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptionsExtension2(struct soap*, tt__MetadataConfigurationOptionsExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataConfigurationOptionsExtension2
#define soap_read_PointerTott__MetadataConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__MetadataConfigurationOptionsExtension (1044)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, const char *, int, tt__MetadataConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, const char*, tt__MetadataConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataConfigurationOptionsExtension
#define soap_write_PointerTott__MetadataConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTott__MetadataConfigurationOptionsExtension(soap, data, "tt:MetadataConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfigurationOptionsExtension(struct soap*, tt__MetadataConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataConfigurationOptionsExtension
#define soap_read_PointerTott__MetadataConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZStatusFilterOptions
#define SOAP_TYPE_PointerTott__PTZStatusFilterOptions (1043)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZStatusFilterOptions(struct soap*, const char *, int, tt__PTZStatusFilterOptions *const*, const char *);
SOAP_FMAC3 tt__PTZStatusFilterOptions ** SOAP_FMAC4 soap_in_PointerTott__PTZStatusFilterOptions(struct soap*, const char*, tt__PTZStatusFilterOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZStatusFilterOptions
#define soap_write_PointerTott__PTZStatusFilterOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZStatusFilterOptions(soap, data), 0) || soap_put_PointerTott__PTZStatusFilterOptions(soap, data, "tt:PTZStatusFilterOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZStatusFilterOptions ** SOAP_FMAC4 soap_get_PointerTott__PTZStatusFilterOptions(struct soap*, tt__PTZStatusFilterOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZStatusFilterOptions
#define soap_read_PointerTott__PTZStatusFilterOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZStatusFilterOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE_PointerTo_tt__EventSubscription_SubscriptionPolicy (1042)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, const char *, int, _tt__EventSubscription_SubscriptionPolicy *const*, const char *);
SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_in_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, const char*, _tt__EventSubscription_SubscriptionPolicy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy *const*, const char*, const char*);

#ifndef soap_write_PointerTo_tt__EventSubscription_SubscriptionPolicy
#define soap_write_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, data), 0) || soap_put_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, data, "tt:EventSubscription-SubscriptionPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _tt__EventSubscription_SubscriptionPolicy ** SOAP_FMAC4 soap_get_PointerTo_tt__EventSubscription_SubscriptionPolicy(struct soap*, _tt__EventSubscription_SubscriptionPolicy **, const char*, const char*);

#ifndef soap_read_PointerTo_tt__EventSubscription_SubscriptionPolicy
#define soap_read_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_tt__EventSubscription_SubscriptionPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsnt__FilterType
#define SOAP_TYPE_PointerTowsnt__FilterType (1040)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsnt__FilterType(struct soap*, const char *, int, wsnt__FilterType *const*, const char *);
SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_in_PointerTowsnt__FilterType(struct soap*, const char*, wsnt__FilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsnt__FilterType
#define soap_write_PointerTowsnt__FilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsnt__FilterType(soap, data), 0) || soap_put_PointerTowsnt__FilterType(soap, data, "wsnt:FilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsnt__FilterType ** SOAP_FMAC4 soap_get_PointerTowsnt__FilterType(struct soap*, wsnt__FilterType **, const char*, const char*);

#ifndef soap_read_PointerTowsnt__FilterType
#define soap_read_PointerTowsnt__FilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsnt__FilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption
#define SOAP_TYPE_PointerTott__AudioEncoderConfigurationOption (1038)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfigurationOption(struct soap*, const char *, int, tt__AudioEncoderConfigurationOption *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, tt__AudioEncoderConfigurationOption **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioEncoderConfigurationOption
#define soap_write_PointerTott__AudioEncoderConfigurationOption(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioEncoderConfigurationOption(soap, data), 0) || soap_put_PointerTott__AudioEncoderConfigurationOption(soap, data, "tt:AudioEncoderConfigurationOption", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoderConfigurationOption ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfigurationOption(struct soap*, tt__AudioEncoderConfigurationOption **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioEncoderConfigurationOption
#define soap_read_PointerTott__AudioEncoderConfigurationOption(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioEncoderConfigurationOption(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioSourceOptionsExtension
#define SOAP_TYPE_PointerTott__AudioSourceOptionsExtension (1037)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceOptionsExtension(struct soap*, const char *, int, tt__AudioSourceOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceOptionsExtension(struct soap*, const char*, tt__AudioSourceOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioSourceOptionsExtension
#define soap_write_PointerTott__AudioSourceOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioSourceOptionsExtension(soap, data), 0) || soap_put_PointerTott__AudioSourceOptionsExtension(soap, data, "tt:AudioSourceOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSourceOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceOptionsExtension(struct soap*, tt__AudioSourceOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioSourceOptionsExtension
#define soap_read_PointerTott__AudioSourceOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioSourceOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__StringAttrList
#define SOAP_TYPE_PointerTott__StringAttrList (1036)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__StringAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__StringAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__StringAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__StringAttrList(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__StringAttrList
#define soap_write_PointerTott__StringAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__StringAttrList(soap, data), 0) || soap_put_PointerTott__StringAttrList(soap, data, "tt:StringAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__StringAttrList(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__StringAttrList
#define soap_read_PointerTott__StringAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__StringAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FloatAttrList
#define SOAP_TYPE_PointerTott__FloatAttrList (1035)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__FloatAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatAttrList(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FloatAttrList
#define soap_write_PointerTott__FloatAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FloatAttrList(soap, data), 0) || soap_put_PointerTott__FloatAttrList(soap, data, "tt:FloatAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__FloatAttrList(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__FloatAttrList
#define soap_read_PointerTott__FloatAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FloatAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IntAttrList
#define SOAP_TYPE_PointerTott__IntAttrList (1034)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntAttrList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntAttrList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTott__IntAttrList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntAttrList(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IntAttrList
#define soap_write_PointerTott__IntAttrList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IntAttrList(soap, data), 0) || soap_put_PointerTott__IntAttrList(soap, data, "tt:IntAttrList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTott__IntAttrList(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTott__IntAttrList
#define soap_read_PointerTott__IntAttrList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IntAttrList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoResolution2
#define SOAP_TYPE_PointerTott__VideoResolution2 (1032)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoResolution2(struct soap*, tt__VideoResolution2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoResolution2(struct soap*, const char *, int, tt__VideoResolution2 *const*, const char *);
SOAP_FMAC3 tt__VideoResolution2 ** SOAP_FMAC4 soap_in_PointerTott__VideoResolution2(struct soap*, const char*, tt__VideoResolution2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoResolution2(struct soap*, tt__VideoResolution2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoResolution2
#define soap_write_PointerTott__VideoResolution2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoResolution2(soap, data), 0) || soap_put_PointerTott__VideoResolution2(soap, data, "tt:VideoResolution2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoResolution2 ** SOAP_FMAC4 soap_get_PointerTott__VideoResolution2(struct soap*, tt__VideoResolution2 **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoResolution2
#define soap_read_PointerTott__VideoResolution2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoResolution2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__FloatRange
#define SOAP_TYPE_PointerTott__FloatRange (1031)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__FloatRange(struct soap*, const char *, int, tt__FloatRange *const*, const char *);
SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_in_PointerTott__FloatRange(struct soap*, const char*, tt__FloatRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__FloatRange(struct soap*, tt__FloatRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__FloatRange
#define soap_write_PointerTott__FloatRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__FloatRange(soap, data), 0) || soap_put_PointerTott__FloatRange(soap, data, "tt:FloatRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__FloatRange ** SOAP_FMAC4 soap_get_PointerTott__FloatRange(struct soap*, tt__FloatRange **, const char*, const char*);

#ifndef soap_read_PointerTott__FloatRange
#define soap_read_PointerTott__FloatRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__FloatRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoResolution
#define SOAP_TYPE_PointerTott__VideoResolution (1027)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoResolution(struct soap*, tt__VideoResolution *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoResolution(struct soap*, const char *, int, tt__VideoResolution *const*, const char *);
SOAP_FMAC3 tt__VideoResolution ** SOAP_FMAC4 soap_in_PointerTott__VideoResolution(struct soap*, const char*, tt__VideoResolution **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoResolution(struct soap*, tt__VideoResolution *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoResolution
#define soap_write_PointerTott__VideoResolution(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoResolution(soap, data), 0) || soap_put_PointerTott__VideoResolution(soap, data, "tt:VideoResolution", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoResolution ** SOAP_FMAC4 soap_get_PointerTott__VideoResolution(struct soap*, tt__VideoResolution **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoResolution
#define soap_read_PointerTott__VideoResolution(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoResolution(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension2 (1026)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderOptionsExtension2(struct soap*, const char *, int, tt__VideoEncoderOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderOptionsExtension2(struct soap*, const char*, tt__VideoEncoderOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoEncoderOptionsExtension2
#define soap_write_PointerTott__VideoEncoderOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoEncoderOptionsExtension2(soap, data), 0) || soap_put_PointerTott__VideoEncoderOptionsExtension2(soap, data, "tt:VideoEncoderOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderOptionsExtension2(struct soap*, tt__VideoEncoderOptionsExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoEncoderOptionsExtension2
#define soap_read_PointerTott__VideoEncoderOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoEncoderOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__H264Options2
#define SOAP_TYPE_PointerTott__H264Options2 (1025)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Options2(struct soap*, tt__H264Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Options2(struct soap*, const char *, int, tt__H264Options2 *const*, const char *);
SOAP_FMAC3 tt__H264Options2 ** SOAP_FMAC4 soap_in_PointerTott__H264Options2(struct soap*, const char*, tt__H264Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Options2(struct soap*, tt__H264Options2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__H264Options2
#define soap_write_PointerTott__H264Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__H264Options2(soap, data), 0) || soap_put_PointerTott__H264Options2(soap, data, "tt:H264Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Options2 ** SOAP_FMAC4 soap_get_PointerTott__H264Options2(struct soap*, tt__H264Options2 **, const char*, const char*);

#ifndef soap_read_PointerTott__H264Options2
#define soap_read_PointerTott__H264Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__H264Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Mpeg4Options2
#define SOAP_TYPE_PointerTott__Mpeg4Options2 (1024)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Options2(struct soap*, const char *, int, tt__Mpeg4Options2 *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Options2 ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Options2(struct soap*, const char*, tt__Mpeg4Options2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Mpeg4Options2
#define soap_write_PointerTott__Mpeg4Options2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Mpeg4Options2(soap, data), 0) || soap_put_PointerTott__Mpeg4Options2(soap, data, "tt:Mpeg4Options2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Options2 ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Options2(struct soap*, tt__Mpeg4Options2 **, const char*, const char*);

#ifndef soap_read_PointerTott__Mpeg4Options2
#define soap_read_PointerTott__Mpeg4Options2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Mpeg4Options2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__JpegOptions2
#define SOAP_TYPE_PointerTott__JpegOptions2 (1023)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegOptions2(struct soap*, const char *, int, tt__JpegOptions2 *const*, const char *);
SOAP_FMAC3 tt__JpegOptions2 ** SOAP_FMAC4 soap_in_PointerTott__JpegOptions2(struct soap*, const char*, tt__JpegOptions2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__JpegOptions2
#define soap_write_PointerTott__JpegOptions2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__JpegOptions2(soap, data), 0) || soap_put_PointerTott__JpegOptions2(soap, data, "tt:JpegOptions2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JpegOptions2 ** SOAP_FMAC4 soap_get_PointerTott__JpegOptions2(struct soap*, tt__JpegOptions2 **, const char*, const char*);

#ifndef soap_read_PointerTott__JpegOptions2
#define soap_read_PointerTott__JpegOptions2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__JpegOptions2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension
#define SOAP_TYPE_PointerTott__VideoEncoderOptionsExtension (1022)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderOptionsExtension(struct soap*, const char *, int, tt__VideoEncoderOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderOptionsExtension(struct soap*, const char*, tt__VideoEncoderOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoEncoderOptionsExtension
#define soap_write_PointerTott__VideoEncoderOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoEncoderOptionsExtension(soap, data), 0) || soap_put_PointerTott__VideoEncoderOptionsExtension(soap, data, "tt:VideoEncoderOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderOptionsExtension(struct soap*, tt__VideoEncoderOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoEncoderOptionsExtension
#define soap_read_PointerTott__VideoEncoderOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoEncoderOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__H264Options
#define SOAP_TYPE_PointerTott__H264Options (1021)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__H264Options(struct soap*, tt__H264Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__H264Options(struct soap*, const char *, int, tt__H264Options *const*, const char *);
SOAP_FMAC3 tt__H264Options ** SOAP_FMAC4 soap_in_PointerTott__H264Options(struct soap*, const char*, tt__H264Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__H264Options(struct soap*, tt__H264Options *const*, const char*, const char*);

#ifndef soap_write_PointerTott__H264Options
#define soap_write_PointerTott__H264Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__H264Options(soap, data), 0) || soap_put_PointerTott__H264Options(soap, data, "tt:H264Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__H264Options ** SOAP_FMAC4 soap_get_PointerTott__H264Options(struct soap*, tt__H264Options **, const char*, const char*);

#ifndef soap_read_PointerTott__H264Options
#define soap_read_PointerTott__H264Options(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__H264Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Mpeg4Options
#define SOAP_TYPE_PointerTott__Mpeg4Options (1020)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Mpeg4Options(struct soap*, const char *, int, tt__Mpeg4Options *const*, const char *);
SOAP_FMAC3 tt__Mpeg4Options ** SOAP_FMAC4 soap_in_PointerTott__Mpeg4Options(struct soap*, const char*, tt__Mpeg4Options **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Mpeg4Options
#define soap_write_PointerTott__Mpeg4Options(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Mpeg4Options(soap, data), 0) || soap_put_PointerTott__Mpeg4Options(soap, data, "tt:Mpeg4Options", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Mpeg4Options ** SOAP_FMAC4 soap_get_PointerTott__Mpeg4Options(struct soap*, tt__Mpeg4Options **, const char*, const char*);

#ifndef soap_read_PointerTott__Mpeg4Options
#define soap_read_PointerTott__Mpeg4Options(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Mpeg4Options(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__JpegOptions
#define SOAP_TYPE_PointerTott__JpegOptions (1019)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__JpegOptions(struct soap*, tt__JpegOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__JpegOptions(struct soap*, const char *, int, tt__JpegOptions *const*, const char *);
SOAP_FMAC3 tt__JpegOptions ** SOAP_FMAC4 soap_in_PointerTott__JpegOptions(struct soap*, const char*, tt__JpegOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__JpegOptions(struct soap*, tt__JpegOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__JpegOptions
#define soap_write_PointerTott__JpegOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__JpegOptions(soap, data), 0) || soap_put_PointerTott__JpegOptions(soap, data, "tt:JpegOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__JpegOptions ** SOAP_FMAC4 soap_get_PointerTott__JpegOptions(struct soap*, tt__JpegOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__JpegOptions
#define soap_read_PointerTott__JpegOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__JpegOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (1018)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data), 0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RotateOptionsExtension
#define SOAP_TYPE_PointerTott__RotateOptionsExtension (1017)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateOptionsExtension(struct soap*, const char *, int, tt__RotateOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__RotateOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__RotateOptionsExtension(struct soap*, const char*, tt__RotateOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RotateOptionsExtension
#define soap_write_PointerTott__RotateOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RotateOptionsExtension(soap, data), 0) || soap_put_PointerTott__RotateOptionsExtension(soap, data, "tt:RotateOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__RotateOptionsExtension(struct soap*, tt__RotateOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RotateOptionsExtension
#define soap_read_PointerTott__RotateOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RotateOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IntItems
#define SOAP_TYPE_PointerTott__IntItems (1016)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntItems(struct soap*, tt__IntItems *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntItems(struct soap*, const char *, int, tt__IntItems *const*, const char *);
SOAP_FMAC3 tt__IntItems ** SOAP_FMAC4 soap_in_PointerTott__IntItems(struct soap*, const char*, tt__IntItems **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntItems(struct soap*, tt__IntItems *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IntItems
#define soap_write_PointerTott__IntItems(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IntItems(soap, data), 0) || soap_put_PointerTott__IntItems(soap, data, "tt:IntItems", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntItems ** SOAP_FMAC4 soap_get_PointerTott__IntItems(struct soap*, tt__IntItems **, const char*, const char*);

#ifndef soap_read_PointerTott__IntItems
#define soap_read_PointerTott__IntItems(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IntItems(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension2 (1013)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, const char *, int, tt__VideoSourceConfigurationOptionsExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceConfigurationOptionsExtension2
#define soap_write_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, data), 0) || soap_put_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, data, "tt:VideoSourceConfigurationOptionsExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptionsExtension2(struct soap*, tt__VideoSourceConfigurationOptionsExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceConfigurationOptionsExtension2
#define soap_read_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceConfigurationOptionsExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RotateOptions
#define SOAP_TYPE_PointerTott__RotateOptions (1012)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateOptions(struct soap*, tt__RotateOptions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateOptions(struct soap*, const char *, int, tt__RotateOptions *const*, const char *);
SOAP_FMAC3 tt__RotateOptions ** SOAP_FMAC4 soap_in_PointerTott__RotateOptions(struct soap*, const char*, tt__RotateOptions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateOptions(struct soap*, tt__RotateOptions *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RotateOptions
#define soap_write_PointerTott__RotateOptions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RotateOptions(soap, data), 0) || soap_put_PointerTott__RotateOptions(soap, data, "tt:RotateOptions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateOptions ** SOAP_FMAC4 soap_get_PointerTott__RotateOptions(struct soap*, tt__RotateOptions **, const char*, const char*);

#ifndef soap_read_PointerTott__RotateOptions
#define soap_read_PointerTott__RotateOptions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RotateOptions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationOptionsExtension (1011)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, const char *, int, tt__VideoSourceConfigurationOptionsExtension *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, const char*, tt__VideoSourceConfigurationOptionsExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceConfigurationOptionsExtension
#define soap_write_PointerTott__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceConfigurationOptionsExtension(soap, data), 0) || soap_put_PointerTott__VideoSourceConfigurationOptionsExtension(soap, data, "tt:VideoSourceConfigurationOptionsExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationOptionsExtension ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationOptionsExtension(struct soap*, tt__VideoSourceConfigurationOptionsExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceConfigurationOptionsExtension
#define soap_read_PointerTott__VideoSourceConfigurationOptionsExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceConfigurationOptionsExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IntRectangleRange
#define SOAP_TYPE_PointerTott__IntRectangleRange (1009)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRectangleRange(struct soap*, const char *, int, tt__IntRectangleRange *const*, const char *);
SOAP_FMAC3 tt__IntRectangleRange ** SOAP_FMAC4 soap_in_PointerTott__IntRectangleRange(struct soap*, const char*, tt__IntRectangleRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IntRectangleRange
#define soap_write_PointerTott__IntRectangleRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IntRectangleRange(soap, data), 0) || soap_put_PointerTott__IntRectangleRange(soap, data, "tt:IntRectangleRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntRectangleRange ** SOAP_FMAC4 soap_get_PointerTott__IntRectangleRange(struct soap*, tt__IntRectangleRange **, const char*, const char*);

#ifndef soap_read_PointerTott__IntRectangleRange
#define soap_read_PointerTott__IntRectangleRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IntRectangleRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LensProjection
#define SOAP_TYPE_PointerTott__LensProjection (1007)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensProjection(struct soap*, tt__LensProjection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensProjection(struct soap*, const char *, int, tt__LensProjection *const*, const char *);
SOAP_FMAC3 tt__LensProjection ** SOAP_FMAC4 soap_in_PointerTott__LensProjection(struct soap*, const char*, tt__LensProjection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensProjection(struct soap*, tt__LensProjection *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LensProjection
#define soap_write_PointerTott__LensProjection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LensProjection(soap, data), 0) || soap_put_PointerTott__LensProjection(soap, data, "tt:LensProjection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LensProjection ** SOAP_FMAC4 soap_get_PointerTott__LensProjection(struct soap*, tt__LensProjection **, const char*, const char*);

#ifndef soap_read_PointerTott__LensProjection
#define soap_read_PointerTott__LensProjection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LensProjection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LensOffset
#define SOAP_TYPE_PointerTott__LensOffset (1006)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensOffset(struct soap*, tt__LensOffset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensOffset(struct soap*, const char *, int, tt__LensOffset *const*, const char *);
SOAP_FMAC3 tt__LensOffset ** SOAP_FMAC4 soap_in_PointerTott__LensOffset(struct soap*, const char*, tt__LensOffset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensOffset(struct soap*, tt__LensOffset *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LensOffset
#define soap_write_PointerTott__LensOffset(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LensOffset(soap, data), 0) || soap_put_PointerTott__LensOffset(soap, data, "tt:LensOffset", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LensOffset ** SOAP_FMAC4 soap_get_PointerTott__LensOffset(struct soap*, tt__LensOffset **, const char*, const char*);

#ifndef soap_read_PointerTott__LensOffset
#define soap_read_PointerTott__LensOffset(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LensOffset(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (1005)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);

#ifndef soap_write_PointerTofloat
#define soap_write_PointerTofloat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofloat(soap, data), 0) || soap_put_PointerTofloat(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);

#ifndef soap_read_PointerTofloat
#define soap_read_PointerTofloat(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofloat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__RotateExtension
#define SOAP_TYPE_PointerTott__RotateExtension (1004)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__RotateExtension(struct soap*, tt__RotateExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__RotateExtension(struct soap*, const char *, int, tt__RotateExtension *const*, const char *);
SOAP_FMAC3 tt__RotateExtension ** SOAP_FMAC4 soap_in_PointerTott__RotateExtension(struct soap*, const char*, tt__RotateExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__RotateExtension(struct soap*, tt__RotateExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__RotateExtension
#define soap_write_PointerTott__RotateExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__RotateExtension(soap, data), 0) || soap_put_PointerTott__RotateExtension(soap, data, "tt:RotateExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__RotateExtension ** SOAP_FMAC4 soap_get_PointerTott__RotateExtension(struct soap*, tt__RotateExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__RotateExtension
#define soap_read_PointerTott__RotateExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__RotateExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__SceneOrientation
#define SOAP_TYPE_PointerTott__SceneOrientation (1003)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__SceneOrientation(struct soap*, tt__SceneOrientation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__SceneOrientation(struct soap*, const char *, int, tt__SceneOrientation *const*, const char *);
SOAP_FMAC3 tt__SceneOrientation ** SOAP_FMAC4 soap_in_PointerTott__SceneOrientation(struct soap*, const char*, tt__SceneOrientation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__SceneOrientation(struct soap*, tt__SceneOrientation *const*, const char*, const char*);

#ifndef soap_write_PointerTott__SceneOrientation
#define soap_write_PointerTott__SceneOrientation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__SceneOrientation(soap, data), 0) || soap_put_PointerTott__SceneOrientation(soap, data, "tt:SceneOrientation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__SceneOrientation ** SOAP_FMAC4 soap_get_PointerTott__SceneOrientation(struct soap*, tt__SceneOrientation **, const char*, const char*);

#ifndef soap_read_PointerTott__SceneOrientation
#define soap_read_PointerTott__SceneOrientation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__SceneOrientation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__LensDescription
#define SOAP_TYPE_PointerTott__LensDescription (1001)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__LensDescription(struct soap*, tt__LensDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__LensDescription(struct soap*, const char *, int, tt__LensDescription *const*, const char *);
SOAP_FMAC3 tt__LensDescription ** SOAP_FMAC4 soap_in_PointerTott__LensDescription(struct soap*, const char*, tt__LensDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__LensDescription(struct soap*, tt__LensDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTott__LensDescription
#define soap_write_PointerTott__LensDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__LensDescription(soap, data), 0) || soap_put_PointerTott__LensDescription(soap, data, "tt:LensDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__LensDescription ** SOAP_FMAC4 soap_get_PointerTott__LensDescription(struct soap*, tt__LensDescription **, const char*, const char*);

#ifndef soap_read_PointerTott__LensDescription
#define soap_read_PointerTott__LensDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__LensDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2
#define SOAP_TYPE_PointerTott__VideoSourceConfigurationExtension2 (1000)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfigurationExtension2(struct soap*, const char *, int, tt__VideoSourceConfigurationExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfigurationExtension2(struct soap*, const char*, tt__VideoSourceConfigurationExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceConfigurationExtension2
#define soap_write_PointerTott__VideoSourceConfigurationExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceConfigurationExtension2(soap, data), 0) || soap_put_PointerTott__VideoSourceConfigurationExtension2(soap, data, "tt:VideoSourceConfigurationExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfigurationExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfigurationExtension2(struct soap*, tt__VideoSourceConfigurationExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceConfigurationExtension2
#define soap_read_PointerTott__VideoSourceConfigurationExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceConfigurationExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__Rotate
#define SOAP_TYPE_PointerTott__Rotate (999)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__Rotate(struct soap*, tt__Rotate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__Rotate(struct soap*, const char *, int, tt__Rotate *const*, const char *);
SOAP_FMAC3 tt__Rotate ** SOAP_FMAC4 soap_in_PointerTott__Rotate(struct soap*, const char*, tt__Rotate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__Rotate(struct soap*, tt__Rotate *const*, const char*, const char*);

#ifndef soap_write_PointerTott__Rotate
#define soap_write_PointerTott__Rotate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__Rotate(soap, data), 0) || soap_put_PointerTott__Rotate(soap, data, "tt:Rotate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__Rotate ** SOAP_FMAC4 soap_get_PointerTott__Rotate(struct soap*, tt__Rotate **, const char*, const char*);

#ifndef soap_read_PointerTott__Rotate
#define soap_read_PointerTott__Rotate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__Rotate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ProfileExtension2
#define SOAP_TYPE_PointerTott__ProfileExtension2 (998)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileExtension2(struct soap*, const char *, int, tt__ProfileExtension2 *const*, const char *);
SOAP_FMAC3 tt__ProfileExtension2 ** SOAP_FMAC4 soap_in_PointerTott__ProfileExtension2(struct soap*, const char*, tt__ProfileExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ProfileExtension2
#define soap_write_PointerTott__ProfileExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ProfileExtension2(soap, data), 0) || soap_put_PointerTott__ProfileExtension2(soap, data, "tt:ProfileExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileExtension2 ** SOAP_FMAC4 soap_get_PointerTott__ProfileExtension2(struct soap*, tt__ProfileExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__ProfileExtension2
#define soap_read_PointerTott__ProfileExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ProfileExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioDecoderConfiguration
#define SOAP_TYPE_PointerTott__AudioDecoderConfiguration (997)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioDecoderConfiguration(struct soap*, const char *, int, tt__AudioDecoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioDecoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioDecoderConfiguration(struct soap*, const char*, tt__AudioDecoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioDecoderConfiguration
#define soap_write_PointerTott__AudioDecoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioDecoderConfiguration(soap, data), 0) || soap_put_PointerTott__AudioDecoderConfiguration(soap, data, "tt:AudioDecoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioDecoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioDecoderConfiguration(struct soap*, tt__AudioDecoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioDecoderConfiguration
#define soap_read_PointerTott__AudioDecoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioDecoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioOutputConfiguration
#define SOAP_TYPE_PointerTott__AudioOutputConfiguration (996)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioOutputConfiguration(struct soap*, const char *, int, tt__AudioOutputConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioOutputConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioOutputConfiguration(struct soap*, const char*, tt__AudioOutputConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioOutputConfiguration
#define soap_write_PointerTott__AudioOutputConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioOutputConfiguration(soap, data), 0) || soap_put_PointerTott__AudioOutputConfiguration(soap, data, "tt:AudioOutputConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioOutputConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioOutputConfiguration(struct soap*, tt__AudioOutputConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioOutputConfiguration
#define soap_read_PointerTott__AudioOutputConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioOutputConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (995)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data), 0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ProfileExtension
#define SOAP_TYPE_PointerTott__ProfileExtension (994)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ProfileExtension(struct soap*, const char *, int, tt__ProfileExtension *const*, const char *);
SOAP_FMAC3 tt__ProfileExtension ** SOAP_FMAC4 soap_in_PointerTott__ProfileExtension(struct soap*, const char*, tt__ProfileExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ProfileExtension
#define soap_write_PointerTott__ProfileExtension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ProfileExtension(soap, data), 0) || soap_put_PointerTott__ProfileExtension(soap, data, "tt:ProfileExtension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ProfileExtension ** SOAP_FMAC4 soap_get_PointerTott__ProfileExtension(struct soap*, tt__ProfileExtension **, const char*, const char*);

#ifndef soap_read_PointerTott__ProfileExtension
#define soap_read_PointerTott__ProfileExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ProfileExtension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__MetadataConfiguration
#define SOAP_TYPE_PointerTott__MetadataConfiguration (993)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__MetadataConfiguration(struct soap*, const char *, int, tt__MetadataConfiguration *const*, const char *);
SOAP_FMAC3 tt__MetadataConfiguration ** SOAP_FMAC4 soap_in_PointerTott__MetadataConfiguration(struct soap*, const char*, tt__MetadataConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__MetadataConfiguration
#define soap_write_PointerTott__MetadataConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__MetadataConfiguration(soap, data), 0) || soap_put_PointerTott__MetadataConfiguration(soap, data, "tt:MetadataConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__MetadataConfiguration ** SOAP_FMAC4 soap_get_PointerTott__MetadataConfiguration(struct soap*, tt__MetadataConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__MetadataConfiguration
#define soap_read_PointerTott__MetadataConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__MetadataConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__PTZConfiguration
#define SOAP_TYPE_PointerTott__PTZConfiguration (992)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__PTZConfiguration(struct soap*, const char *, int, tt__PTZConfiguration *const*, const char *);
SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_in_PointerTott__PTZConfiguration(struct soap*, const char*, tt__PTZConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__PTZConfiguration
#define soap_write_PointerTott__PTZConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__PTZConfiguration(soap, data), 0) || soap_put_PointerTott__PTZConfiguration(soap, data, "tt:PTZConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__PTZConfiguration ** SOAP_FMAC4 soap_get_PointerTott__PTZConfiguration(struct soap*, tt__PTZConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__PTZConfiguration
#define soap_read_PointerTott__PTZConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__PTZConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration
#define SOAP_TYPE_PointerTott__VideoAnalyticsConfiguration (991)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoAnalyticsConfiguration(struct soap*, const char *, int, tt__VideoAnalyticsConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, tt__VideoAnalyticsConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoAnalyticsConfiguration
#define soap_write_PointerTott__VideoAnalyticsConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoAnalyticsConfiguration(soap, data), 0) || soap_put_PointerTott__VideoAnalyticsConfiguration(soap, data, "tt:VideoAnalyticsConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoAnalyticsConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoAnalyticsConfiguration(struct soap*, tt__VideoAnalyticsConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoAnalyticsConfiguration
#define soap_read_PointerTott__VideoAnalyticsConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoAnalyticsConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioEncoderConfiguration
#define SOAP_TYPE_PointerTott__AudioEncoderConfiguration (990)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioEncoderConfiguration(struct soap*, const char *, int, tt__AudioEncoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioEncoderConfiguration(struct soap*, const char*, tt__AudioEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioEncoderConfiguration
#define soap_write_PointerTott__AudioEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioEncoderConfiguration(soap, data), 0) || soap_put_PointerTott__AudioEncoderConfiguration(soap, data, "tt:AudioEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioEncoderConfiguration(struct soap*, tt__AudioEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioEncoderConfiguration
#define soap_read_PointerTott__AudioEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoEncoderConfiguration
#define SOAP_TYPE_PointerTott__VideoEncoderConfiguration (989)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoEncoderConfiguration(struct soap*, const char *, int, tt__VideoEncoderConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoEncoderConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoEncoderConfiguration(struct soap*, const char*, tt__VideoEncoderConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoEncoderConfiguration
#define soap_write_PointerTott__VideoEncoderConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoEncoderConfiguration(soap, data), 0) || soap_put_PointerTott__VideoEncoderConfiguration(soap, data, "tt:VideoEncoderConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoEncoderConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoEncoderConfiguration(struct soap*, tt__VideoEncoderConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoEncoderConfiguration
#define soap_read_PointerTott__VideoEncoderConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoEncoderConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__AudioSourceConfiguration
#define SOAP_TYPE_PointerTott__AudioSourceConfiguration (988)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__AudioSourceConfiguration(struct soap*, const char *, int, tt__AudioSourceConfiguration *const*, const char *);
SOAP_FMAC3 tt__AudioSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTott__AudioSourceConfiguration(struct soap*, const char*, tt__AudioSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__AudioSourceConfiguration
#define soap_write_PointerTott__AudioSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__AudioSourceConfiguration(soap, data), 0) || soap_put_PointerTott__AudioSourceConfiguration(soap, data, "tt:AudioSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__AudioSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTott__AudioSourceConfiguration(struct soap*, tt__AudioSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__AudioSourceConfiguration
#define soap_read_PointerTott__AudioSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__AudioSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceConfiguration
#define SOAP_TYPE_PointerTott__VideoSourceConfiguration (987)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceConfiguration(struct soap*, const char *, int, tt__VideoSourceConfiguration *const*, const char *);
SOAP_FMAC3 tt__VideoSourceConfiguration ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceConfiguration(struct soap*, const char*, tt__VideoSourceConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceConfiguration
#define soap_write_PointerTott__VideoSourceConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceConfiguration(soap, data), 0) || soap_put_PointerTott__VideoSourceConfiguration(soap, data, "tt:VideoSourceConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceConfiguration ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceConfiguration(struct soap*, tt__VideoSourceConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceConfiguration
#define soap_read_PointerTott__VideoSourceConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__VideoSourceExtension2
#define SOAP_TYPE_PointerTott__VideoSourceExtension2 (986)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__VideoSourceExtension2(struct soap*, const char *, int, tt__VideoSourceExtension2 *const*, const char *);
SOAP_FMAC3 tt__VideoSourceExtension2 ** SOAP_FMAC4 soap_in_PointerTott__VideoSourceExtension2(struct soap*, const char*, tt__VideoSourceExtension2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__VideoSourceExtension2
#define soap_write_PointerTott__VideoSourceExtension2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__VideoSourceExtension2(soap, data), 0) || soap_put_PointerTott__VideoSourceExtension2(soap, data, "tt:VideoSourceExtension2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__VideoSourceExtension2 ** SOAP_FMAC4 soap_get_PointerTott__VideoSourceExtension2(struct soap*, tt__VideoSourceExtension2 **, const char*, const char*);

#ifndef soap_read_PointerTott__VideoSourceExtension2
#define soap_read_PointerTott__VideoSourceExtension2(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__VideoSourceExtension2(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__ImagingSettings20
#define SOAP_TYPE_PointerTott__ImagingSettings20 (985)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__ImagingSettings20(struct soap*, const char *, int, tt__ImagingSettings20 *const*, const char *);
SOAP_FMAC3 tt__ImagingSettings20 ** SOAP_FMAC4 soap_in_PointerTott__ImagingSettings20(struct soap*, const char*, tt__ImagingSettings20 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 *const*, const char*, const char*);

#ifndef soap_write_PointerTott__ImagingSettings20
#define soap_write_PointerTott__ImagingSettings20(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__ImagingSettings20(soap, data), 0) || soap_put_PointerTott__ImagingSettings20(soap, data, "tt:ImagingSettings20", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__ImagingSettings20 ** SOAP_FMAC4 soap_get_PointerTott__ImagingSettings20(struct soap*, tt__ImagingSettings20 **, const char*, const char*);

#ifndef soap_read_PointerTott__ImagingSettings20
#define soap_read_PointerTott__ImagingSettings20(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__ImagingSettings20(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTott__IntRange
#define SOAP_TYPE_PointerTott__IntRange (981)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTott__IntRange(struct soap*, tt__IntRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTott__IntRange(struct soap*, const char *, int, tt__IntRange *const*, const char *);
SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_in_PointerTott__IntRange(struct soap*, const char*, tt__IntRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTott__IntRange(struct soap*, tt__IntRange *const*, const char*, const char*);

#ifndef soap_write_PointerTott__IntRange
#define soap_write_PointerTott__IntRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTott__IntRange(soap, data), 0) || soap_put_PointerTott__IntRange(soap, data, "tt:IntRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 tt__IntRange ** SOAP_FMAC4 soap_get_PointerTott__IntRange(struct soap*, tt__IntRange **, const char*, const char*);

#ifndef soap_read_PointerTott__IntRange
#define soap_read_PointerTott__IntRange(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTott__IntRange(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Header
#define SOAP_TYPE_PointerToSOAP_ENV__Header (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Header(struct soap*, const char *, int, struct SOAP_ENV__Header *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Header
#define soap_write_PointerToSOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Header(soap, data), 0) || soap_put_PointerToSOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Header
#define soap_read_PointerToSOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_wsse__Security
#define SOAP_TYPE_PointerTo_wsse__Security (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Security(struct soap*, const char *, int, struct _wsse__Security *const*, const char *);
SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_in_PointerTo_wsse__Security(struct soap*, const char*, struct _wsse__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Security(struct soap*, struct _wsse__Security *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Security
#define soap_write_PointerTo_wsse__Security(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Security(soap, data), 0) || soap_put_PointerTo_wsse__Security(soap, data, "wsse:Security", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Security ** SOAP_FMAC4 soap_get_PointerTo_wsse__Security(struct soap*, struct _wsse__Security **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Security
#define soap_read_PointerTo_wsse__Security(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Security(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__SignatureType
#define SOAP_TYPE_PointerTods__SignatureType (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap*, const char *, int, struct ds__SignatureType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap*, const char*, struct ds__SignatureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap*, struct ds__SignatureType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__SignatureType
#define soap_write_PointerTods__SignatureType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__SignatureType(soap, data), 0) || soap_put_PointerTods__SignatureType(soap, data, "ds:SignatureType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap*, struct ds__SignatureType **, const char*, const char*);

#ifndef soap_read_PointerTods__SignatureType
#define soap_read_PointerTods__SignatureType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__SignatureType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__SecurityContextTokenType(struct soap*, const char *, int, struct wsc__SecurityContextTokenType *const*, const char *);
SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_in_PointerTowsc__SecurityContextTokenType(struct soap*, const char*, struct wsc__SecurityContextTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsc__SecurityContextTokenType
#define soap_write_PointerTowsc__SecurityContextTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsc__SecurityContextTokenType(soap, data), 0) || soap_put_PointerTowsc__SecurityContextTokenType(soap, data, "wsc:SecurityContextTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__SecurityContextTokenType ** SOAP_FMAC4 soap_get_PointerTowsc__SecurityContextTokenType(struct soap*, struct wsc__SecurityContextTokenType **, const char*, const char*);

#ifndef soap_read_PointerTowsc__SecurityContextTokenType
#define soap_read_PointerTowsc__SecurityContextTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsc__SecurityContextTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap*, const char *, int, struct xenc__EncryptedKeyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap*, const char*, struct xenc__EncryptedKeyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptedKeyType
#define soap_write_PointerToxenc__EncryptedKeyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptedKeyType(soap, data), 0) || soap_put_PointerToxenc__EncryptedKeyType(soap, data, "xenc:EncryptedKeyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap*, struct xenc__EncryptedKeyType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptedKeyType
#define soap_read_PointerToxenc__EncryptedKeyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptedKeyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap*, const char *, int, struct _wsse__BinarySecurityToken *const*, const char *);
SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap*, const char*, struct _wsse__BinarySecurityToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__BinarySecurityToken
#define soap_write_PointerTo_wsse__BinarySecurityToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__BinarySecurityToken(soap, data), 0) || soap_put_PointerTo_wsse__BinarySecurityToken(soap, data, "wsse:BinarySecurityToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap*, struct _wsse__BinarySecurityToken **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__BinarySecurityToken
#define soap_read_PointerTo_wsse__BinarySecurityToken(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__BinarySecurityToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken
#define SOAP_TYPE_PointerTo_wsse__UsernameToken (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap*, const char *, int, struct _wsse__UsernameToken *const*, const char *);
SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap*, const char*, struct _wsse__UsernameToken **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__UsernameToken
#define soap_write_PointerTo_wsse__UsernameToken(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__UsernameToken(soap, data), 0) || soap_put_PointerTo_wsse__UsernameToken(soap, data, "wsse:UsernameToken", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap*, struct _wsse__UsernameToken **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__UsernameToken
#define soap_read_PointerTo_wsse__UsernameToken(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__UsernameToken(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp
#define SOAP_TYPE_PointerTo_wsu__Timestamp (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap*, const char *, int, struct _wsu__Timestamp *const*, const char *);
SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap*, const char*, struct _wsu__Timestamp **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsu__Timestamp
#define soap_write_PointerTo_wsu__Timestamp(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsu__Timestamp(soap, data), 0) || soap_put_PointerTo_wsu__Timestamp(soap, data, "wsu:Timestamp", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap*, struct _wsu__Timestamp **, const char*, const char*);

#ifndef soap_read_PointerTo_wsu__Timestamp
#define soap_read_PointerTo_wsu__Timestamp(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsu__Timestamp(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char *, int, struct __wsc__DerivedKeyTokenType_sequence *const*, const char *);
SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, const char*, struct __wsc__DerivedKeyTokenType_sequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence *const*, const char*, const char*);

#ifndef soap_write_PointerTo__wsc__DerivedKeyTokenType_sequence
#define soap_write_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data), 0) || soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data, "-wsc:DerivedKeyTokenType-sequence", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap*, struct __wsc__DerivedKeyTokenType_sequence **, const char*, const char*);

#ifndef soap_read_PointerTo__wsc__DerivedKeyTokenType_sequence
#define soap_read_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedLONG64
#define SOAP_TYPE_PointerTounsignedLONG64 (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedLONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedLONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerTounsignedLONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedLONG64(struct soap*, ULONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedLONG64
#define soap_write_PointerTounsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedLONG64(soap, data), 0) || soap_put_PointerTounsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerTounsignedLONG64(struct soap*, ULONG64 **, const char*, const char*);

#ifndef soap_read_PointerTounsignedLONG64
#define soap_read_PointerTounsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsc__PropertiesType
#define SOAP_TYPE_PointerTowsc__PropertiesType (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap*, const char *, int, struct wsc__PropertiesType *const*, const char *);
SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap*, const char*, struct wsc__PropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsc__PropertiesType
#define soap_write_PointerTowsc__PropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsc__PropertiesType(soap, data), 0) || soap_put_PointerTowsc__PropertiesType(soap, data, "wsc:PropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap*, struct wsc__PropertiesType **, const char*, const char*);

#ifndef soap_read_PointerTowsc__PropertiesType
#define soap_read_PointerTowsc__PropertiesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsc__PropertiesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType (130)
#endif

#define soap_default_wsc__FaultCodeOpenEnumType(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_wsc__FaultCodeOpenEnumType
#define soap_write_wsc__FaultCodeOpenEnumType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsc__FaultCodeOpenEnumType(soap, data), 0) || soap_put_wsc__FaultCodeOpenEnumType(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap*, char **, const char*, const char*);

#ifndef soap_read_wsc__FaultCodeOpenEnumType
#define soap_read_wsc__FaultCodeOpenEnumType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsc__FaultCodeOpenEnumType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList
#define SOAP_TYPE_PointerTo_xenc__ReferenceList (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap*, const char *, int, struct _xenc__ReferenceList *const*, const char *);
SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap*, const char*, struct _xenc__ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xenc__ReferenceList
#define soap_write_PointerTo_xenc__ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xenc__ReferenceList(soap, data), 0) || soap_put_PointerTo_xenc__ReferenceList(soap, data, "xenc:ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap*, struct _xenc__ReferenceList **, const char*, const char*);

#ifndef soap_read_PointerTo_xenc__ReferenceList
#define soap_read_PointerTo_xenc__ReferenceList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xenc__ReferenceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap*, const char *, int, struct __xenc__union_ReferenceList *const*, const char *);
SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap*, const char*, struct __xenc__union_ReferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList *const*, const char*, const char*);

#ifndef soap_write_PointerTo__xenc__union_ReferenceList
#define soap_write_PointerTo__xenc__union_ReferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo__xenc__union_ReferenceList(soap, data), 0) || soap_put_PointerTo__xenc__union_ReferenceList(soap, data, "-xenc:union-ReferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap*, struct __xenc__union_ReferenceList **, const char*, const char*);

#ifndef soap_read_PointerTo__xenc__union_ReferenceList
#define soap_read_PointerTo__xenc__union_ReferenceList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__xenc__union_ReferenceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__ReferenceType
#define SOAP_TYPE_PointerToxenc__ReferenceType (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap*, const char *, int, struct xenc__ReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap*, const char*, struct xenc__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__ReferenceType
#define soap_write_PointerToxenc__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__ReferenceType(soap, data), 0) || soap_put_PointerToxenc__ReferenceType(soap, data, "xenc:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap*, struct xenc__ReferenceType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__ReferenceType
#define soap_read_PointerToxenc__ReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap*, const char *, int, struct xenc__EncryptionPropertyType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap*, const char*, struct xenc__EncryptionPropertyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptionPropertyType
#define soap_write_PointerToxenc__EncryptionPropertyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptionPropertyType(soap, data), 0) || soap_put_PointerToxenc__EncryptionPropertyType(soap, data, "xenc:EncryptionPropertyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap*, struct xenc__EncryptionPropertyType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptionPropertyType
#define soap_read_PointerToxenc__EncryptionPropertyType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptionPropertyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__TransformsType
#define SOAP_TYPE_PointerToxenc__TransformsType (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap*, const char *, int, struct xenc__TransformsType *const*, const char *);
SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap*, const char*, struct xenc__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__TransformsType
#define soap_write_PointerToxenc__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__TransformsType(soap, data), 0) || soap_put_PointerToxenc__TransformsType(soap, data, "xenc:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap*, struct xenc__TransformsType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__TransformsType
#define soap_read_PointerToxenc__TransformsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__TransformsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType
#define SOAP_TYPE_PointerToxenc__CipherReferenceType (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap*, const char *, int, struct xenc__CipherReferenceType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap*, const char*, struct xenc__CipherReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__CipherReferenceType
#define soap_write_PointerToxenc__CipherReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__CipherReferenceType(soap, data), 0) || soap_put_PointerToxenc__CipherReferenceType(soap, data, "xenc:CipherReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap*, struct xenc__CipherReferenceType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__CipherReferenceType
#define soap_read_PointerToxenc__CipherReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__CipherReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap*, const char *, int, struct xenc__EncryptionPropertiesType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap*, const char*, struct xenc__EncryptionPropertiesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptionPropertiesType
#define soap_write_PointerToxenc__EncryptionPropertiesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, data), 0) || soap_put_PointerToxenc__EncryptionPropertiesType(soap, data, "xenc:EncryptionPropertiesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap*, struct xenc__EncryptionPropertiesType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptionPropertiesType
#define soap_read_PointerToxenc__EncryptionPropertiesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptionPropertiesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__CipherDataType
#define SOAP_TYPE_PointerToxenc__CipherDataType (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap*, const char *, int, struct xenc__CipherDataType *const*, const char *);
SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap*, const char*, struct xenc__CipherDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__CipherDataType
#define soap_write_PointerToxenc__CipherDataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__CipherDataType(soap, data), 0) || soap_put_PointerToxenc__CipherDataType(soap, data, "xenc:CipherDataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap*, struct xenc__CipherDataType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__CipherDataType
#define soap_read_PointerToxenc__CipherDataType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__CipherDataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo
#define SOAP_TYPE_PointerTo_ds__KeyInfo (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ds__KeyInfo
#define soap_write_PointerTo_ds__KeyInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ds__KeyInfo(soap, data), 0) || soap_put_PointerTo_ds__KeyInfo(soap, data, "ds:KeyInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap*, struct ds__KeyInfoType **, const char*, const char*);

#ifndef soap_read_PointerTo_ds__KeyInfo
#define soap_read_PointerTo_ds__KeyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ds__KeyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap*, const char *, int, struct xenc__EncryptionMethodType *const*, const char *);
SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap*, const char*, struct xenc__EncryptionMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerToxenc__EncryptionMethodType
#define soap_write_PointerToxenc__EncryptionMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxenc__EncryptionMethodType(soap, data), 0) || soap_put_PointerToxenc__EncryptionMethodType(soap, data, "xenc:EncryptionMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap*, struct xenc__EncryptionMethodType **, const char*, const char*);

#ifndef soap_read_PointerToxenc__EncryptionMethodType
#define soap_read_PointerToxenc__EncryptionMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxenc__EncryptionMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType
#define SOAP_TYPE_PointerTods__X509IssuerSerialType (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap*, const char *, int, struct ds__X509IssuerSerialType *const*, const char *);
SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap*, const char*, struct ds__X509IssuerSerialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__X509IssuerSerialType
#define soap_write_PointerTods__X509IssuerSerialType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__X509IssuerSerialType(soap, data), 0) || soap_put_PointerTods__X509IssuerSerialType(soap, data, "ds:X509IssuerSerialType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap*, struct ds__X509IssuerSerialType **, const char*, const char*);

#ifndef soap_read_PointerTods__X509IssuerSerialType
#define soap_read_PointerTods__X509IssuerSerialType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__X509IssuerSerialType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType
#define SOAP_TYPE_PointerTods__RSAKeyValueType (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap*, const char *, int, struct ds__RSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap*, const char*, struct ds__RSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__RSAKeyValueType
#define soap_write_PointerTods__RSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__RSAKeyValueType(soap, data), 0) || soap_put_PointerTods__RSAKeyValueType(soap, data, "ds:RSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap*, struct ds__RSAKeyValueType **, const char*, const char*);

#ifndef soap_read_PointerTods__RSAKeyValueType
#define soap_read_PointerTods__RSAKeyValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__RSAKeyValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType
#define SOAP_TYPE_PointerTods__DSAKeyValueType (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap*, const char *, int, struct ds__DSAKeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap*, const char*, struct ds__DSAKeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__DSAKeyValueType
#define soap_write_PointerTods__DSAKeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__DSAKeyValueType(soap, data), 0) || soap_put_PointerTods__DSAKeyValueType(soap, data, "ds:DSAKeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap*, struct ds__DSAKeyValueType **, const char*, const char*);

#ifndef soap_read_PointerTods__DSAKeyValueType
#define soap_read_PointerTods__DSAKeyValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__DSAKeyValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__TransformType
#define SOAP_TYPE_PointerTods__TransformType (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap*, const char *, int, struct ds__TransformType *const*, const char *);
SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap*, const char*, struct ds__TransformType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap*, struct ds__TransformType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__TransformType
#define soap_write_PointerTods__TransformType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__TransformType(soap, data), 0) || soap_put_PointerTods__TransformType(soap, data, "ds:TransformType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap*, struct ds__TransformType **, const char*, const char*);

#ifndef soap_read_PointerTods__TransformType
#define soap_read_PointerTods__TransformType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__TransformType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__DigestMethodType
#define SOAP_TYPE_PointerTods__DigestMethodType (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap*, const char *, int, struct ds__DigestMethodType *const*, const char *);
SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap*, const char*, struct ds__DigestMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__DigestMethodType
#define soap_write_PointerTods__DigestMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__DigestMethodType(soap, data), 0) || soap_put_PointerTods__DigestMethodType(soap, data, "ds:DigestMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap*, struct ds__DigestMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__DigestMethodType
#define soap_read_PointerTods__DigestMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__DigestMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__TransformsType
#define SOAP_TYPE_PointerTods__TransformsType (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap*, const char *, int, struct ds__TransformsType *const*, const char *);
SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap*, const char*, struct ds__TransformsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap*, struct ds__TransformsType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__TransformsType
#define soap_write_PointerTods__TransformsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__TransformsType(soap, data), 0) || soap_put_PointerTods__TransformsType(soap, data, "ds:TransformsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap*, struct ds__TransformsType **, const char*, const char*);

#ifndef soap_read_PointerTods__TransformsType
#define soap_read_PointerTods__TransformsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__TransformsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType
#define SOAP_TYPE_PointerToPointerTods__ReferenceType (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType **const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **const*, const char*, const char*);

#ifndef soap_write_PointerToPointerTods__ReferenceType
#define soap_write_PointerToPointerTods__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToPointerTods__ReferenceType(soap, data), 0) || soap_put_PointerToPointerTods__ReferenceType(soap, data, "ds:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__ReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTods__ReferenceType(struct soap*, struct ds__ReferenceType ***, const char*, const char*);

#ifndef soap_read_PointerToPointerTods__ReferenceType
#define soap_read_PointerToPointerTods__ReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToPointerTods__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__ReferenceType
#define SOAP_TYPE_PointerTods__ReferenceType (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap*, const char *, int, struct ds__ReferenceType *const*, const char *);
SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap*, const char*, struct ds__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__ReferenceType
#define soap_write_PointerTods__ReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__ReferenceType(soap, data), 0) || soap_put_PointerTods__ReferenceType(soap, data, "ds:ReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap*, struct ds__ReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTods__ReferenceType
#define soap_read_PointerTods__ReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__SignatureMethodType
#define SOAP_TYPE_PointerTods__SignatureMethodType (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap*, const char *, int, struct ds__SignatureMethodType *const*, const char *);
SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap*, const char*, struct ds__SignatureMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__SignatureMethodType
#define soap_write_PointerTods__SignatureMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__SignatureMethodType(soap, data), 0) || soap_put_PointerTods__SignatureMethodType(soap, data, "ds:SignatureMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap*, struct ds__SignatureMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__SignatureMethodType
#define soap_read_PointerTods__SignatureMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__SignatureMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap*, const char *, int, struct ds__CanonicalizationMethodType *const*, const char *);
SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap*, const char*, struct ds__CanonicalizationMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__CanonicalizationMethodType
#define soap_write_PointerTods__CanonicalizationMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__CanonicalizationMethodType(soap, data), 0) || soap_put_PointerTods__CanonicalizationMethodType(soap, data, "ds:CanonicalizationMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap*, struct ds__CanonicalizationMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__CanonicalizationMethodType
#define soap_read_PointerTods__CanonicalizationMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__CanonicalizationMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap*, const char *, int, struct _wsse__SecurityTokenReference *const*, const char *);
SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap*, const char*, struct _wsse__SecurityTokenReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__SecurityTokenReference
#define soap_write_PointerTo_wsse__SecurityTokenReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__SecurityTokenReference(soap, data), 0) || soap_put_PointerTo_wsse__SecurityTokenReference(soap, data, "wsse:SecurityTokenReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap*, struct _wsse__SecurityTokenReference **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__SecurityTokenReference
#define soap_read_PointerTo_wsse__SecurityTokenReference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__SecurityTokenReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType
#define SOAP_TYPE_PointerTods__RetrievalMethodType (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap*, const char *, int, struct ds__RetrievalMethodType *const*, const char *);
SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap*, const char*, struct ds__RetrievalMethodType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__RetrievalMethodType
#define soap_write_PointerTods__RetrievalMethodType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__RetrievalMethodType(soap, data), 0) || soap_put_PointerTods__RetrievalMethodType(soap, data, "ds:RetrievalMethodType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap*, struct ds__RetrievalMethodType **, const char*, const char*);

#ifndef soap_read_PointerTods__RetrievalMethodType
#define soap_read_PointerTods__RetrievalMethodType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__RetrievalMethodType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__KeyValueType
#define SOAP_TYPE_PointerTods__KeyValueType (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap*, const char *, int, struct ds__KeyValueType *const*, const char *);
SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap*, const char*, struct ds__KeyValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__KeyValueType
#define soap_write_PointerTods__KeyValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__KeyValueType(soap, data), 0) || soap_put_PointerTods__KeyValueType(soap, data, "ds:KeyValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap*, struct ds__KeyValueType **, const char*, const char*);

#ifndef soap_read_PointerTods__KeyValueType
#define soap_read_PointerTods__KeyValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__KeyValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char *, int, struct _c14n__InclusiveNamespaces *const*, const char *);
SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap*, const char*, struct _c14n__InclusiveNamespaces **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces *const*, const char*, const char*);

#ifndef soap_write_PointerTo_c14n__InclusiveNamespaces
#define soap_write_PointerTo_c14n__InclusiveNamespaces(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_c14n__InclusiveNamespaces(soap, data), 0) || soap_put_PointerTo_c14n__InclusiveNamespaces(soap, data, "c14n:InclusiveNamespaces", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap*, struct _c14n__InclusiveNamespaces **, const char*, const char*);

#ifndef soap_read_PointerTo_c14n__InclusiveNamespaces
#define soap_read_PointerTo_c14n__InclusiveNamespaces(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_c14n__InclusiveNamespaces(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__KeyInfoType
#define SOAP_TYPE_PointerTods__KeyInfoType (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap*, const char *, int, struct ds__KeyInfoType *const*, const char *);
SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap*, const char*, struct ds__KeyInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__KeyInfoType
#define soap_write_PointerTods__KeyInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__KeyInfoType(soap, data), 0) || soap_put_PointerTods__KeyInfoType(soap, data, "ds:KeyInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap*, struct ds__KeyInfoType **, const char*, const char*);

#ifndef soap_read_PointerTods__KeyInfoType
#define soap_read_PointerTods__KeyInfoType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__KeyInfoType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__SignedInfoType
#define SOAP_TYPE_PointerTods__SignedInfoType (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap*, const char *, int, struct ds__SignedInfoType *const*, const char *);
SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap*, const char*, struct ds__SignedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__SignedInfoType
#define soap_write_PointerTods__SignedInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__SignedInfoType(soap, data), 0) || soap_put_PointerTods__SignedInfoType(soap, data, "ds:SignedInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap*, struct ds__SignedInfoType **, const char*, const char*);

#ifndef soap_read_PointerTods__SignedInfoType
#define soap_read_PointerTods__SignedInfoType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__SignedInfoType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTods__X509DataType
#define SOAP_TYPE_PointerTods__X509DataType (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap*, const char *, int, struct ds__X509DataType *const*, const char *);
SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap*, const char*, struct ds__X509DataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap*, struct ds__X509DataType *const*, const char*, const char*);

#ifndef soap_write_PointerTods__X509DataType
#define soap_write_PointerTods__X509DataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTods__X509DataType(soap, data), 0) || soap_put_PointerTods__X509DataType(soap, data, "ds:X509DataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap*, struct ds__X509DataType **, const char*, const char*);

#ifndef soap_read_PointerTods__X509DataType
#define soap_read_PointerTods__X509DataType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTods__X509DataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Embedded
#define SOAP_TYPE_PointerTo_wsse__Embedded (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap*, const char *, int, struct _wsse__Embedded *const*, const char *);
SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap*, const char*, struct _wsse__Embedded **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Embedded
#define soap_write_PointerTo_wsse__Embedded(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Embedded(soap, data), 0) || soap_put_PointerTo_wsse__Embedded(soap, data, "wsse:Embedded", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap*, struct _wsse__Embedded **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Embedded
#define soap_read_PointerTo_wsse__Embedded(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Embedded(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap*, const char *, int, struct _wsse__KeyIdentifier *const*, const char *);
SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap*, const char*, struct _wsse__KeyIdentifier **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__KeyIdentifier
#define soap_write_PointerTo_wsse__KeyIdentifier(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__KeyIdentifier(soap, data), 0) || soap_put_PointerTo_wsse__KeyIdentifier(soap, data, "wsse:KeyIdentifier", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap*, struct _wsse__KeyIdentifier **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__KeyIdentifier
#define soap_read_PointerTo_wsse__KeyIdentifier(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__KeyIdentifier(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Reference
#define SOAP_TYPE_PointerTo_wsse__Reference (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap*, const char *, int, struct _wsse__Reference *const*, const char *);
SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap*, const char*, struct _wsse__Reference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Reference
#define soap_write_PointerTo_wsse__Reference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Reference(soap, data), 0) || soap_put_PointerTo_wsse__Reference(soap, data, "wsse:Reference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap*, struct _wsse__Reference **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Reference
#define soap_read_PointerTo_wsse__Reference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Reference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsse__Password
#define SOAP_TYPE_PointerTo_wsse__Password (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap*, const char *, int, struct _wsse__Password *const*, const char *);
SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap*, const char*, struct _wsse__Password **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap*, struct _wsse__Password *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsse__Password
#define soap_write_PointerTo_wsse__Password(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsse__Password(soap, data), 0) || soap_put_PointerTo_wsse__Password(soap, data, "wsse:Password", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap*, struct _wsse__Password **, const char*, const char*);

#ifndef soap_read_PointerTo_wsse__Password
#define soap_read_PointerTo_wsse__Password(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsse__Password(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType
#define SOAP_TYPE_PointerTochan__ChannelInstanceType (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);

#ifndef soap_write_PointerTochan__ChannelInstanceType
#define soap_write_PointerTochan__ChannelInstanceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTochan__ChannelInstanceType(soap, data), 0) || soap_put_PointerTochan__ChannelInstanceType(soap, data, "chan:ChannelInstanceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);

#ifndef soap_read_PointerTochan__ChannelInstanceType
#define soap_read_PointerTochan__ChannelInstanceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTochan__ChannelInstanceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo
#define SOAP_TYPE_PointerTo_wsa5__FaultTo (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__FaultTo
#define soap_write_PointerTo_wsa5__FaultTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__FaultTo(soap, data), 0) || soap_put_PointerTo_wsa5__FaultTo(soap, data, "wsa5:FaultTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__FaultTo
#define soap_read_PointerTo_wsa5__FaultTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__FaultTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__ReplyTo
#define soap_write_PointerTo_wsa5__ReplyTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__ReplyTo(soap, data), 0) || soap_put_PointerTo_wsa5__ReplyTo(soap, data, "wsa5:ReplyTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__ReplyTo
#define soap_read_PointerTo_wsa5__ReplyTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__ReplyTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__From
#define SOAP_TYPE_PointerTo_wsa5__From (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__From
#define soap_write_PointerTo_wsa5__From(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__From(soap, data), 0) || soap_put_PointerTo_wsa5__From(soap, data, "wsa5:From", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__From
#define soap_read_PointerTo_wsa5__From(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__From(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_wsa5__RelatesTo
#define soap_write_PointerTo_wsa5__RelatesTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_wsa5__RelatesTo(soap, data), 0) || soap_put_PointerTo_wsa5__RelatesTo(soap, data, "wsa5:RelatesTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);

#ifndef soap_read_PointerTo_wsa5__RelatesTo
#define soap_read_PointerTo_wsa5__RelatesTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_wsa5__RelatesTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _wsa5__ProblemIRI is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
#endif

#define soap_default__wsa5__ProblemIRI(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_put__wsa5__ProblemIRI soap_put_string


#define soap_get__wsa5__ProblemIRI soap_get_string


#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
#endif

#define soap_default__wsa5__ProblemHeaderQName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsa5__ProblemHeaderQName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__ProblemHeaderQName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__wsa5__ProblemHeaderQName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemHeaderQName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__wsa5__ProblemHeaderQName
#define soap_write__wsa5__ProblemHeaderQName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__wsa5__ProblemHeaderQName(soap, data), 0) || soap_put__wsa5__ProblemHeaderQName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__wsa5__ProblemHeaderQName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__wsa5__ProblemHeaderQName
#define soap_read__wsa5__ProblemHeaderQName(soap, data) ( soap_begin_recv(soap) || !soap_get__wsa5__ProblemHeaderQName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


/* _wsa5__Action is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
#endif

#define soap_default__wsa5__Action(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap_out__wsa5__Action soap_out_string


#define soap_in__wsa5__Action soap_in_string


#define soap_put__wsa5__Action soap_put_string


#define soap_get__wsa5__Action soap_get_string


/* _wsa5__To is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
#endif

#define soap_default__wsa5__To(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__To soap_serialize_string


#define soap_out__wsa5__To soap_out_string


#define soap_in__wsa5__To soap_in_string


#define soap_put__wsa5__To soap_put_string


#define soap_get__wsa5__To soap_get_string


/* _wsa5__MessageID is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
#endif

#define soap_default__wsa5__MessageID(soap, a) soap_default_string(soap, a)


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap_out__wsa5__MessageID soap_out_string


#define soap_in__wsa5__MessageID soap_in_string


#define soap_put__wsa5__MessageID soap_put_string


#define soap_get__wsa5__MessageID soap_get_string


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa5__MetadataType
#define SOAP_TYPE_PointerTowsa5__MetadataType (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa5__MetadataType
#define soap_write_PointerTowsa5__MetadataType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa5__MetadataType(soap, data), 0) || soap_put_PointerTowsa5__MetadataType(soap, data, "wsa5:MetadataType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);

#ifndef soap_read_PointerTowsa5__MetadataType
#define soap_read_PointerTowsa5__MetadataType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa5__MetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa5__ReferenceParametersType
#define soap_write_PointerTowsa5__ReferenceParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa5__ReferenceParametersType(soap, data), 0) || soap_put_PointerTowsa5__ReferenceParametersType(soap, data, "wsa5:ReferenceParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);

#ifndef soap_read_PointerTowsa5__ReferenceParametersType
#define soap_read_PointerTowsa5__ReferenceParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa5__ReferenceParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
#endif

#define soap_default_wsa5__FaultCodesOpenEnumType(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_wsa5__FaultCodesOpenEnumType
#define soap_write_wsa5__FaultCodesOpenEnumType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__FaultCodesOpenEnumType(soap, data), 0) || soap_put_wsa5__FaultCodesOpenEnumType(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

#ifndef soap_read_wsa5__FaultCodesOpenEnumType
#define soap_read_wsa5__FaultCodesOpenEnumType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__FaultCodesOpenEnumType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
#endif

#define soap_default_wsa5__RelationshipTypeOpenEnum(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_wsa5__RelationshipTypeOpenEnum
#define soap_write_wsa5__RelationshipTypeOpenEnum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_wsa5__RelationshipTypeOpenEnum(soap, data), 0) || soap_put_wsa5__RelationshipTypeOpenEnum(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

#ifndef soap_read_wsa5__RelationshipTypeOpenEnum
#define soap_read_wsa5__RelationshipTypeOpenEnum(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa5__RelationshipTypeOpenEnum(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data), 0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic (1537)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, std::vector<_wstop__TopicNamespaceType_Topic >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const std::vector<_wstop__TopicNamespaceType_Topic >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, int, const std::vector<_wstop__TopicNamespaceType_Topic >*, const char*);
SOAP_FMAC3 std::vector<_wstop__TopicNamespaceType_Topic >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, const char*, std::vector<_wstop__TopicNamespaceType_Topic >*, const char*);
SOAP_FMAC1 std::vector<_wstop__TopicNamespaceType_Topic > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wstop__TopicNamespaceType_Topic > * soap_new_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap *soap, std::vector<_wstop__TopicNamespaceType_Topic >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_wstop__TopicNamespaceType_Topic(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowstop__TopicType (1534)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, std::vector<wstop__TopicType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const std::vector<wstop__TopicType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, int, const std::vector<wstop__TopicType * >*, const char*);
SOAP_FMAC3 std::vector<wstop__TopicType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, const char*, std::vector<wstop__TopicType * >*, const char*);
SOAP_FMAC1 std::vector<wstop__TopicType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wstop__TopicType * > * soap_new_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowstop__TopicType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowstop__TopicType(struct soap *soap, std::vector<wstop__TopicType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowstop__TopicType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__QName
#define SOAP_TYPE_std__vectorTemplateOfxsd__QName (1530)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__QName(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__QName(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__QName(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__QName(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__QName(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__QName(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__Mask
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__Mask (1493)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Mask(struct soap*, std::vector<ns1__Mask * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Mask(struct soap*, const std::vector<ns1__Mask * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Mask(struct soap*, const char*, int, const std::vector<ns1__Mask * >*, const char*);
SOAP_FMAC3 std::vector<ns1__Mask * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Mask(struct soap*, const char*, std::vector<ns1__Mask * >*, const char*);
SOAP_FMAC1 std::vector<ns1__Mask * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__Mask(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__Mask * > * soap_new_std__vectorTemplateOfPointerTons1__Mask(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__Mask(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__Mask(struct soap *soap, std::vector<ns1__Mask * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__Mask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OSDConfiguration (1490)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, std::vector<tt__OSDConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const std::vector<tt__OSDConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const char*, int, const std::vector<tt__OSDConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__OSDConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, const char*, std::vector<tt__OSDConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__OSDConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OSDConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__OSDConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap *soap, std::vector<tt__OSDConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__OSDConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__VideoSourceMode
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__VideoSourceMode (1488)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, std::vector<ns1__VideoSourceMode * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, const std::vector<ns1__VideoSourceMode * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, const char*, int, const std::vector<ns1__VideoSourceMode * >*, const char*);
SOAP_FMAC3 std::vector<ns1__VideoSourceMode * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, const char*, std::vector<ns1__VideoSourceMode * >*, const char*);
SOAP_FMAC1 std::vector<ns1__VideoSourceMode * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__VideoSourceMode * > * soap_new_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__VideoSourceMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap *soap, std::vector<ns1__VideoSourceMode * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__VideoSourceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions (1483)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap*, std::vector<tt__AudioEncoder2ConfigurationOptions * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap*, const std::vector<tt__AudioEncoder2ConfigurationOptions * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap*, const char*, int, const std::vector<tt__AudioEncoder2ConfigurationOptions * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoder2ConfigurationOptions * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap*, const char*, std::vector<tt__AudioEncoder2ConfigurationOptions * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoder2ConfigurationOptions * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoder2ConfigurationOptions * > * soap_new_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap *soap, std::vector<tt__AudioEncoder2ConfigurationOptions * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioEncoder2ConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions (1480)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap*, std::vector<tt__VideoEncoder2ConfigurationOptions * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap*, const std::vector<tt__VideoEncoder2ConfigurationOptions * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap*, const char*, int, const std::vector<tt__VideoEncoder2ConfigurationOptions * >*, const char*);
SOAP_FMAC3 std::vector<tt__VideoEncoder2ConfigurationOptions * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap*, const char*, std::vector<tt__VideoEncoder2ConfigurationOptions * >*, const char*);
SOAP_FMAC1 std::vector<tt__VideoEncoder2ConfigurationOptions * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoEncoder2ConfigurationOptions * > * soap_new_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap *soap, std::vector<tt__VideoEncoder2ConfigurationOptions * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__VideoEncoder2ConfigurationOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration (1477)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, std::vector<tt__AudioDecoderConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const std::vector<tt__AudioDecoderConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioDecoderConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioDecoderConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, const char*, std::vector<tt__AudioDecoderConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioDecoderConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioDecoderConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap *soap, std::vector<tt__AudioDecoderConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioDecoderConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioOutputConfiguration (1476)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, std::vector<tt__AudioOutputConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const std::vector<tt__AudioOutputConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioOutputConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioOutputConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, const char*, std::vector<tt__AudioOutputConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioOutputConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioOutputConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap *soap, std::vector<tt__AudioOutputConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioOutputConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__MetadataConfiguration (1475)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, std::vector<tt__MetadataConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const std::vector<tt__MetadataConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const char*, int, const std::vector<tt__MetadataConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__MetadataConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, const char*, std::vector<tt__MetadataConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__MetadataConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__MetadataConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__MetadataConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap *soap, std::vector<tt__MetadataConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__MetadataConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration (1474)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, std::vector<tt__VideoAnalyticsConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const std::vector<tt__VideoAnalyticsConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoAnalyticsConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__VideoAnalyticsConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, const char*, std::vector<tt__VideoAnalyticsConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__VideoAnalyticsConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoAnalyticsConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap *soap, std::vector<tt__VideoAnalyticsConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__VideoAnalyticsConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioSourceConfiguration (1473)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, std::vector<tt__AudioSourceConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const std::vector<tt__AudioSourceConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const char*, int, const std::vector<tt__AudioSourceConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioSourceConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, const char*, std::vector<tt__AudioSourceConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioSourceConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioSourceConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap *soap, std::vector<tt__AudioSourceConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration (1472)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap*, std::vector<tt__AudioEncoder2Configuration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap*, const std::vector<tt__AudioEncoder2Configuration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap*, const char*, int, const std::vector<tt__AudioEncoder2Configuration * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoder2Configuration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap*, const char*, std::vector<tt__AudioEncoder2Configuration * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoder2Configuration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoder2Configuration * > * soap_new_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap *soap, std::vector<tt__AudioEncoder2Configuration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioEncoder2Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoSourceConfiguration (1471)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, std::vector<tt__VideoSourceConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const std::vector<tt__VideoSourceConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const char*, int, const std::vector<tt__VideoSourceConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__VideoSourceConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, const char*, std::vector<tt__VideoSourceConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__VideoSourceConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoSourceConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap *soap, std::vector<tt__VideoSourceConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__VideoSourceConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration (1470)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap*, std::vector<tt__VideoEncoder2Configuration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap*, const std::vector<tt__VideoEncoder2Configuration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap*, const char*, int, const std::vector<tt__VideoEncoder2Configuration * >*, const char*);
SOAP_FMAC3 std::vector<tt__VideoEncoder2Configuration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap*, const char*, std::vector<tt__VideoEncoder2Configuration * >*, const char*);
SOAP_FMAC1 std::vector<tt__VideoEncoder2Configuration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoEncoder2Configuration * > * soap_new_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap *soap, std::vector<tt__VideoEncoder2Configuration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__VideoEncoder2Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__MediaProfile
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__MediaProfile (1469)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap*, std::vector<ns1__MediaProfile * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap*, const std::vector<ns1__MediaProfile * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap*, const char*, int, const std::vector<ns1__MediaProfile * >*, const char*);
SOAP_FMAC3 std::vector<ns1__MediaProfile * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap*, const char*, std::vector<ns1__MediaProfile * >*, const char*);
SOAP_FMAC1 std::vector<ns1__MediaProfile * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__MediaProfile * > * soap_new_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__MediaProfile(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap *soap, std::vector<ns1__MediaProfile * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__MediaProfile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__ConfigurationRef
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__ConfigurationRef (1467)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap*, std::vector<ns1__ConfigurationRef * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap*, const std::vector<ns1__ConfigurationRef * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap*, const char*, int, const std::vector<ns1__ConfigurationRef * >*, const char*);
SOAP_FMAC3 std::vector<ns1__ConfigurationRef * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap*, const char*, std::vector<ns1__ConfigurationRef * >*, const char*);
SOAP_FMAC1 std::vector<ns1__ConfigurationRef * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__ConfigurationRef * > * soap_new_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__ConfigurationRef(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap *soap, std::vector<ns1__ConfigurationRef * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__ConfigurationRef(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__EncoderInstance
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__EncoderInstance (1463)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap*, std::vector<ns1__EncoderInstance * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap*, const std::vector<ns1__EncoderInstance * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap*, const char*, int, const std::vector<ns1__EncoderInstance * >*, const char*);
SOAP_FMAC3 std::vector<ns1__EncoderInstance * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap*, const char*, std::vector<ns1__EncoderInstance * >*, const char*);
SOAP_FMAC1 std::vector<ns1__EncoderInstance * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EncoderInstance * > * soap_new_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__EncoderInstance(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap *soap, std::vector<ns1__EncoderInstance * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__EncoderInstance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description (1452)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, std::vector<_wsrfbf__BaseFaultType_Description >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const std::vector<_wsrfbf__BaseFaultType_Description >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, int, const std::vector<_wsrfbf__BaseFaultType_Description >*, const char*);
SOAP_FMAC3 std::vector<_wsrfbf__BaseFaultType_Description >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, const char*, std::vector<_wsrfbf__BaseFaultType_Description >*, const char*);
SOAP_FMAC1 std::vector<_wsrfbf__BaseFaultType_Description > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_wsrfbf__BaseFaultType_Description > * soap_new_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap *soap, std::vector<_wsrfbf__BaseFaultType_Description >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_wsrfbf__BaseFaultType_Description(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType (1443)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, std::vector<wsnt__NotificationMessageHolderType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const std::vector<wsnt__NotificationMessageHolderType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, int, const std::vector<wsnt__NotificationMessageHolderType * >*, const char*);
SOAP_FMAC3 std::vector<wsnt__NotificationMessageHolderType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, const char*, std::vector<wsnt__NotificationMessageHolderType * >*, const char*);
SOAP_FMAC1 std::vector<wsnt__NotificationMessageHolderType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__NotificationMessageHolderType * > * soap_new_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap *soap, std::vector<wsnt__NotificationMessageHolderType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsnt__NotificationMessageHolderType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsnt__TopicExpressionType (1440)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, std::vector<wsnt__TopicExpressionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const std::vector<wsnt__TopicExpressionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, int, const std::vector<wsnt__TopicExpressionType * >*, const char*);
SOAP_FMAC3 std::vector<wsnt__TopicExpressionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, const char*, std::vector<wsnt__TopicExpressionType * >*, const char*);
SOAP_FMAC1 std::vector<wsnt__TopicExpressionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsnt__TopicExpressionType * > * soap_new_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap *soap, std::vector<wsnt__TopicExpressionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsnt__TopicExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster (1426)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, std::vector<_tt__ColorDescriptor_ColorCluster >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const std::vector<_tt__ColorDescriptor_ColorCluster >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char*, int, const std::vector<_tt__ColorDescriptor_ColorCluster >*, const char*);
SOAP_FMAC3 std::vector<_tt__ColorDescriptor_ColorCluster >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, const char*, std::vector<_tt__ColorDescriptor_ColorCluster >*, const char*);
SOAP_FMAC1 std::vector<_tt__ColorDescriptor_ColorCluster > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ColorDescriptor_ColorCluster > * soap_new_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap *soap, std::vector<_tt__ColorDescriptor_ColorCluster >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_tt__ColorDescriptor_ColorCluster(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FileProgress (1418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, std::vector<tt__FileProgress * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, const std::vector<tt__FileProgress * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, const char*, int, const std::vector<tt__FileProgress * >*, const char*);
SOAP_FMAC3 std::vector<tt__FileProgress * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, const char*, std::vector<tt__FileProgress * >*, const char*);
SOAP_FMAC1 std::vector<tt__FileProgress * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FileProgress * > * soap_new_std__vectorTemplateOfPointerTott__FileProgress(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__FileProgress(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__FileProgress(struct soap *soap, std::vector<tt__FileProgress * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__FileProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__OSDType
#define SOAP_TYPE_std__vectorTemplateOftt__OSDType (1413)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__OSDType(struct soap*, std::vector<enum tt__OSDType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__OSDType(struct soap*, const std::vector<enum tt__OSDType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__OSDType(struct soap*, const char*, int, const std::vector<enum tt__OSDType >*, const char*);
SOAP_FMAC3 std::vector<enum tt__OSDType >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__OSDType(struct soap*, const char*, std::vector<enum tt__OSDType >*, const char*);
SOAP_FMAC1 std::vector<enum tt__OSDType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__OSDType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__OSDType > * soap_new_std__vectorTemplateOftt__OSDType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__OSDType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__OSDType(struct soap *soap, std::vector<enum tt__OSDType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__OSDType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ColorspaceRange (1404)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, std::vector<tt__ColorspaceRange * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const std::vector<tt__ColorspaceRange * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, int, const std::vector<tt__ColorspaceRange * >*, const char*);
SOAP_FMAC3 std::vector<tt__ColorspaceRange * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, const char*, std::vector<tt__ColorspaceRange * >*, const char*);
SOAP_FMAC1 std::vector<tt__ColorspaceRange * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ColorspaceRange * > * soap_new_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__ColorspaceRange(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap *soap, std::vector<tt__ColorspaceRange * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__ColorspaceRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Color
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Color (1401)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Color(struct soap*, std::vector<tt__Color * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Color(struct soap*, const std::vector<tt__Color * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Color(struct soap*, const char*, int, const std::vector<tt__Color * >*, const char*);
SOAP_FMAC3 std::vector<tt__Color * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Color(struct soap*, const char*, std::vector<tt__Color * >*, const char*);
SOAP_FMAC1 std::vector<tt__Color * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Color(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Color * > * soap_new_std__vectorTemplateOfPointerTott__Color(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Color(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Color(struct soap *soap, std::vector<tt__Color * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Color(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ActiveConnection (1394)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, std::vector<tt__ActiveConnection * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, const std::vector<tt__ActiveConnection * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, const char*, int, const std::vector<tt__ActiveConnection * >*, const char*);
SOAP_FMAC3 std::vector<tt__ActiveConnection * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, const char*, std::vector<tt__ActiveConnection * >*, const char*);
SOAP_FMAC1 std::vector<tt__ActiveConnection * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ActiveConnection * > * soap_new_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__ActiveConnection(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap *soap, std::vector<tt__ActiveConnection * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__ActiveConnection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioClassCandidate (1391)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, std::vector<tt__AudioClassCandidate * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, const std::vector<tt__AudioClassCandidate * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, const char*, int, const std::vector<tt__AudioClassCandidate * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioClassCandidate * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, const char*, std::vector<tt__AudioClassCandidate * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioClassCandidate * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioClassCandidate * > * soap_new_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioClassCandidate(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap *soap, std::vector<tt__AudioClassCandidate * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioClassCandidate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__EngineConfiguration (1380)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, std::vector<tt__EngineConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, const std::vector<tt__EngineConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, const char*, int, const std::vector<tt__EngineConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__EngineConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, const char*, std::vector<tt__EngineConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__EngineConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__EngineConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__EngineConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap *soap, std::vector<tt__EngineConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__EngineConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateTrack (1377)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, std::vector<tt__RecordingJobStateTrack * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, const std::vector<tt__RecordingJobStateTrack * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, const char*, int, const std::vector<tt__RecordingJobStateTrack * >*, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobStateTrack * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, const char*, std::vector<tt__RecordingJobStateTrack * >*, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobStateTrack * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobStateTrack * > * soap_new_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap *soap, std::vector<tt__RecordingJobStateTrack * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__RecordingJobStateTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobStateSource (1373)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, std::vector<tt__RecordingJobStateSource * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, const std::vector<tt__RecordingJobStateSource * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, const char*, int, const std::vector<tt__RecordingJobStateSource * >*, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobStateSource * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, const char*, std::vector<tt__RecordingJobStateSource * >*, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobStateSource * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobStateSource * > * soap_new_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobStateSource(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap *soap, std::vector<tt__RecordingJobStateSource * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__RecordingJobStateSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobTrack (1370)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, std::vector<tt__RecordingJobTrack * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, const std::vector<tt__RecordingJobTrack * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, const char*, int, const std::vector<tt__RecordingJobTrack * >*, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobTrack * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, const char*, std::vector<tt__RecordingJobTrack * >*, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobTrack * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobTrack * > * soap_new_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobTrack(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap *soap, std::vector<tt__RecordingJobTrack * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__RecordingJobTrack(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingJobSource (1367)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, std::vector<tt__RecordingJobSource * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, const std::vector<tt__RecordingJobSource * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, const char*, int, const std::vector<tt__RecordingJobSource * >*, const char*);
SOAP_FMAC3 std::vector<tt__RecordingJobSource * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, const char*, std::vector<tt__RecordingJobSource * >*, const char*);
SOAP_FMAC1 std::vector<tt__RecordingJobSource * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingJobSource * > * soap_new_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingJobSource(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap *soap, std::vector<tt__RecordingJobSource * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__RecordingJobSource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__GetTracksResponseItem (1364)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, std::vector<tt__GetTracksResponseItem * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, const std::vector<tt__GetTracksResponseItem * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, const char*, int, const std::vector<tt__GetTracksResponseItem * >*, const char*);
SOAP_FMAC3 std::vector<tt__GetTracksResponseItem * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, const char*, std::vector<tt__GetTracksResponseItem * >*, const char*);
SOAP_FMAC1 std::vector<tt__GetTracksResponseItem * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__GetTracksResponseItem * > * soap_new_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__GetTracksResponseItem(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap *soap, std::vector<tt__GetTracksResponseItem * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__GetTracksResponseItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackAttributes (1356)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, std::vector<tt__TrackAttributes * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, const std::vector<tt__TrackAttributes * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, const char*, int, const std::vector<tt__TrackAttributes * >*, const char*);
SOAP_FMAC3 std::vector<tt__TrackAttributes * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, const char*, std::vector<tt__TrackAttributes * >*, const char*);
SOAP_FMAC1 std::vector<tt__TrackAttributes * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__TrackAttributes * > * soap_new_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__TrackAttributes(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap *soap, std::vector<tt__TrackAttributes * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__TrackAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__TrackInformation (1354)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, std::vector<tt__TrackInformation * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, const std::vector<tt__TrackInformation * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, const char*, int, const std::vector<tt__TrackInformation * >*, const char*);
SOAP_FMAC3 std::vector<tt__TrackInformation * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, const char*, std::vector<tt__TrackInformation * >*, const char*);
SOAP_FMAC1 std::vector<tt__TrackInformation * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__TrackInformation * > * soap_new_std__vectorTemplateOfPointerTott__TrackInformation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__TrackInformation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__TrackInformation(struct soap *soap, std::vector<tt__TrackInformation * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__TrackInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindMetadataResult (1350)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, std::vector<tt__FindMetadataResult * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, const std::vector<tt__FindMetadataResult * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, const char*, int, const std::vector<tt__FindMetadataResult * >*, const char*);
SOAP_FMAC3 std::vector<tt__FindMetadataResult * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, const char*, std::vector<tt__FindMetadataResult * >*, const char*);
SOAP_FMAC1 std::vector<tt__FindMetadataResult * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FindMetadataResult * > * soap_new_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__FindMetadataResult(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap *soap, std::vector<tt__FindMetadataResult * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__FindMetadataResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindPTZPositionResult (1348)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, std::vector<tt__FindPTZPositionResult * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, const std::vector<tt__FindPTZPositionResult * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, const char*, int, const std::vector<tt__FindPTZPositionResult * >*, const char*);
SOAP_FMAC3 std::vector<tt__FindPTZPositionResult * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, const char*, std::vector<tt__FindPTZPositionResult * >*, const char*);
SOAP_FMAC1 std::vector<tt__FindPTZPositionResult * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FindPTZPositionResult * > * soap_new_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__FindPTZPositionResult(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap *soap, std::vector<tt__FindPTZPositionResult * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__FindPTZPositionResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__FindEventResult (1345)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, std::vector<tt__FindEventResult * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, const std::vector<tt__FindEventResult * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, const char*, int, const std::vector<tt__FindEventResult * >*, const char*);
SOAP_FMAC3 std::vector<tt__FindEventResult * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, const char*, std::vector<tt__FindEventResult * >*, const char*);
SOAP_FMAC1 std::vector<tt__FindEventResult * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__FindEventResult * > * soap_new_std__vectorTemplateOfPointerTott__FindEventResult(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__FindEventResult(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__FindEventResult(struct soap *soap, std::vector<tt__FindEventResult * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__FindEventResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__RecordingInformation (1343)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, std::vector<tt__RecordingInformation * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, const std::vector<tt__RecordingInformation * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, const char*, int, const std::vector<tt__RecordingInformation * >*, const char*);
SOAP_FMAC3 std::vector<tt__RecordingInformation * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, const char*, std::vector<tt__RecordingInformation * >*, const char*);
SOAP_FMAC1 std::vector<tt__RecordingInformation * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__RecordingInformation * > * soap_new_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__RecordingInformation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap *soap, std::vector<tt__RecordingInformation * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__RecordingInformation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__RecordingReference
#define SOAP_TYPE_std__vectorTemplateOftt__RecordingReference (1339)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__RecordingReference(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__RecordingReference(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__RecordingReference(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__RecordingReference(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__RecordingReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOftt__RecordingReference(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__RecordingReference(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__RecordingReference(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__RecordingReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SourceReference (1338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, std::vector<tt__SourceReference * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, const std::vector<tt__SourceReference * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, const char*, int, const std::vector<tt__SourceReference * >*, const char*);
SOAP_FMAC3 std::vector<tt__SourceReference * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, const char*, std::vector<tt__SourceReference * >*, const char*);
SOAP_FMAC1 std::vector<tt__SourceReference * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__SourceReference * > * soap_new_std__vectorTemplateOfPointerTott__SourceReference(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__SourceReference(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__SourceReference(struct soap *soap, std::vector<tt__SourceReference * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__SourceReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Rectangle (1333)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, std::vector<tt__Rectangle * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, const std::vector<tt__Rectangle * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, const char*, int, const std::vector<tt__Rectangle * >*, const char*);
SOAP_FMAC3 std::vector<tt__Rectangle * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, const char*, std::vector<tt__Rectangle * >*, const char*);
SOAP_FMAC1 std::vector<tt__Rectangle * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Rectangle * > * soap_new_std__vectorTemplateOfPointerTott__Rectangle(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Rectangle(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Rectangle(struct soap *soap, std::vector<tt__Rectangle * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Rectangle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayoutOptions (1331)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, std::vector<tt__PaneLayoutOptions * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, const std::vector<tt__PaneLayoutOptions * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, const char*, int, const std::vector<tt__PaneLayoutOptions * >*, const char*);
SOAP_FMAC3 std::vector<tt__PaneLayoutOptions * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, const char*, std::vector<tt__PaneLayoutOptions * >*, const char*);
SOAP_FMAC1 std::vector<tt__PaneLayoutOptions * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PaneLayoutOptions * > * soap_new_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayoutOptions(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap *soap, std::vector<tt__PaneLayoutOptions * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__PaneLayoutOptions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PaneLayout (1325)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, std::vector<tt__PaneLayout * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, const std::vector<tt__PaneLayout * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, const char*, int, const std::vector<tt__PaneLayout * >*, const char*);
SOAP_FMAC3 std::vector<tt__PaneLayout * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, const char*, std::vector<tt__PaneLayout * >*, const char*);
SOAP_FMAC1 std::vector<tt__PaneLayout * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PaneLayout * > * soap_new_std__vectorTemplateOfPointerTott__PaneLayout(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__PaneLayout(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__PaneLayout(struct soap *soap, std::vector<tt__PaneLayout * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__PaneLayout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Polyline (1319)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Polyline(struct soap*, std::vector<tt__Polyline * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Polyline(struct soap*, const std::vector<tt__Polyline * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Polyline(struct soap*, const char*, int, const std::vector<tt__Polyline * >*, const char*);
SOAP_FMAC3 std::vector<tt__Polyline * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Polyline(struct soap*, const char*, std::vector<tt__Polyline * >*, const char*);
SOAP_FMAC1 std::vector<tt__Polyline * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Polyline(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Polyline * > * soap_new_std__vectorTemplateOfPointerTott__Polyline(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Polyline(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Polyline(struct soap *soap, std::vector<tt__Polyline * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Polyline(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__ConfigDescription (1314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, std::vector<tt__ConfigDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, const std::vector<tt__ConfigDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, const char*, int, const std::vector<tt__ConfigDescription * >*, const char*);
SOAP_FMAC3 std::vector<tt__ConfigDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, const char*, std::vector<tt__ConfigDescription * >*, const char*);
SOAP_FMAC1 std::vector<tt__ConfigDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__ConfigDescription * > * soap_new_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__ConfigDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap *soap, std::vector<tt__ConfigDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__ConfigDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages
#define SOAP_TYPE_std__vectorTemplateOf_tt__ConfigDescription_Messages (1309)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, std::vector<_tt__ConfigDescription_Messages >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const std::vector<_tt__ConfigDescription_Messages >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char*, int, const std::vector<_tt__ConfigDescription_Messages >*, const char*);
SOAP_FMAC3 std::vector<_tt__ConfigDescription_Messages >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, const char*, std::vector<_tt__ConfigDescription_Messages >*, const char*);
SOAP_FMAC1 std::vector<_tt__ConfigDescription_Messages > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ConfigDescription_Messages > * soap_new_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_tt__ConfigDescription_Messages(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap *soap, std::vector<_tt__ConfigDescription_Messages >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_tt__ConfigDescription_Messages(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Config
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Config (1304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Config(struct soap*, std::vector<tt__Config * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Config(struct soap*, const std::vector<tt__Config * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Config(struct soap*, const char*, int, const std::vector<tt__Config * >*, const char*);
SOAP_FMAC3 std::vector<tt__Config * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Config(struct soap*, const char*, std::vector<tt__Config * >*, const char*);
SOAP_FMAC1 std::vector<tt__Config * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Config(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Config * > * soap_new_std__vectorTemplateOfPointerTott__Config(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Config(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Config(struct soap *soap, std::vector<tt__Config * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Config(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Vector (1302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Vector(struct soap*, std::vector<tt__Vector * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Vector(struct soap*, const std::vector<tt__Vector * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Vector(struct soap*, const char*, int, const std::vector<tt__Vector * >*, const char*);
SOAP_FMAC3 std::vector<tt__Vector * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Vector(struct soap*, const char*, std::vector<tt__Vector * >*, const char*);
SOAP_FMAC1 std::vector<tt__Vector * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Vector(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Vector * > * soap_new_std__vectorTemplateOfPointerTott__Vector(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Vector(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Vector(struct soap *soap, std::vector<tt__Vector * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Vector(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription (1298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, std::vector<_tt__ItemListDescription_ElementItemDescription >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const std::vector<_tt__ItemListDescription_ElementItemDescription >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, int, const std::vector<_tt__ItemListDescription_ElementItemDescription >*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_ElementItemDescription >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_ElementItemDescription >*, const char*);
SOAP_FMAC1 std::vector<_tt__ItemListDescription_ElementItemDescription > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemListDescription_ElementItemDescription > * soap_new_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap *soap, std::vector<_tt__ItemListDescription_ElementItemDescription >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_tt__ItemListDescription_ElementItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription (1295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, std::vector<_tt__ItemListDescription_SimpleItemDescription >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const std::vector<_tt__ItemListDescription_SimpleItemDescription >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, int, const std::vector<_tt__ItemListDescription_SimpleItemDescription >*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemListDescription_SimpleItemDescription >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, const char*, std::vector<_tt__ItemListDescription_SimpleItemDescription >*, const char*);
SOAP_FMAC1 std::vector<_tt__ItemListDescription_SimpleItemDescription > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemListDescription_SimpleItemDescription > * soap_new_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap *soap, std::vector<_tt__ItemListDescription_SimpleItemDescription >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_tt__ItemListDescription_SimpleItemDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_ElementItem (1289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, std::vector<_tt__ItemList_ElementItem >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const std::vector<_tt__ItemList_ElementItem >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, int, const std::vector<_tt__ItemList_ElementItem >*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_ElementItem >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, const char*, std::vector<_tt__ItemList_ElementItem >*, const char*);
SOAP_FMAC1 std::vector<_tt__ItemList_ElementItem > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemList_ElementItem > * soap_new_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_tt__ItemList_ElementItem(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap *soap, std::vector<_tt__ItemList_ElementItem >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_tt__ItemList_ElementItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem
#define SOAP_TYPE_std__vectorTemplateOf_tt__ItemList_SimpleItem (1286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, std::vector<_tt__ItemList_SimpleItem >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const std::vector<_tt__ItemList_SimpleItem >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, int, const std::vector<_tt__ItemList_SimpleItem >*, const char*);
SOAP_FMAC3 std::vector<_tt__ItemList_SimpleItem >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, const char*, std::vector<_tt__ItemList_SimpleItem >*, const char*);
SOAP_FMAC1 std::vector<_tt__ItemList_SimpleItem > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_tt__ItemList_SimpleItem > * soap_new_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_tt__ItemList_SimpleItem(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap *soap, std::vector<_tt__ItemList_SimpleItem >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_tt__ItemList_SimpleItem(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode
#define SOAP_TYPE_std__vectorTemplateOftt__BacklightCompensationMode (1279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, std::vector<enum tt__BacklightCompensationMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, const std::vector<enum tt__BacklightCompensationMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, const char*, int, const std::vector<enum tt__BacklightCompensationMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__BacklightCompensationMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, const char*, std::vector<enum tt__BacklightCompensationMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__BacklightCompensationMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__BacklightCompensationMode > * soap_new_std__vectorTemplateOftt__BacklightCompensationMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__BacklightCompensationMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__BacklightCompensationMode(struct soap *soap, std::vector<enum tt__BacklightCompensationMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__BacklightCompensationMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode
#define SOAP_TYPE_std__vectorTemplateOftt__ImageStabilizationMode (1276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, std::vector<enum tt__ImageStabilizationMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, const std::vector<enum tt__ImageStabilizationMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, const char*, int, const std::vector<enum tt__ImageStabilizationMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__ImageStabilizationMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, const char*, std::vector<enum tt__ImageStabilizationMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__ImageStabilizationMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ImageStabilizationMode > * soap_new_std__vectorTemplateOftt__ImageStabilizationMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__ImageStabilizationMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__ImageStabilizationMode(struct soap *soap, std::vector<enum tt__ImageStabilizationMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__ImageStabilizationMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment (1251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, std::vector<tt__IrCutFilterAutoAdjustment * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const std::vector<tt__IrCutFilterAutoAdjustment * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, int, const std::vector<tt__IrCutFilterAutoAdjustment * >*, const char*);
SOAP_FMAC3 std::vector<tt__IrCutFilterAutoAdjustment * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, const char*, std::vector<tt__IrCutFilterAutoAdjustment * >*, const char*);
SOAP_FMAC1 std::vector<tt__IrCutFilterAutoAdjustment * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__IrCutFilterAutoAdjustment * > * soap_new_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap *soap, std::vector<tt__IrCutFilterAutoAdjustment * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__IrCutFilterAutoAdjustment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode
#define SOAP_TYPE_std__vectorTemplateOftt__WhiteBalanceMode (1232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, std::vector<enum tt__WhiteBalanceMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, const std::vector<enum tt__WhiteBalanceMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, const char*, int, const std::vector<enum tt__WhiteBalanceMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__WhiteBalanceMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, const char*, std::vector<enum tt__WhiteBalanceMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__WhiteBalanceMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__WhiteBalanceMode > * soap_new_std__vectorTemplateOftt__WhiteBalanceMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__WhiteBalanceMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__WhiteBalanceMode(struct soap *soap, std::vector<enum tt__WhiteBalanceMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__WhiteBalanceMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority
#define SOAP_TYPE_std__vectorTemplateOftt__ExposurePriority (1231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ExposurePriority(struct soap*, std::vector<enum tt__ExposurePriority >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ExposurePriority(struct soap*, const std::vector<enum tt__ExposurePriority >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ExposurePriority(struct soap*, const char*, int, const std::vector<enum tt__ExposurePriority >*, const char*);
SOAP_FMAC3 std::vector<enum tt__ExposurePriority >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ExposurePriority(struct soap*, const char*, std::vector<enum tt__ExposurePriority >*, const char*);
SOAP_FMAC1 std::vector<enum tt__ExposurePriority > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ExposurePriority(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ExposurePriority > * soap_new_std__vectorTemplateOftt__ExposurePriority(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__ExposurePriority(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__ExposurePriority(struct soap *soap, std::vector<enum tt__ExposurePriority >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__ExposurePriority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ExposureMode
#define SOAP_TYPE_std__vectorTemplateOftt__ExposureMode (1230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ExposureMode(struct soap*, std::vector<enum tt__ExposureMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ExposureMode(struct soap*, const std::vector<enum tt__ExposureMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ExposureMode(struct soap*, const char*, int, const std::vector<enum tt__ExposureMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__ExposureMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ExposureMode(struct soap*, const char*, std::vector<enum tt__ExposureMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__ExposureMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ExposureMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ExposureMode > * soap_new_std__vectorTemplateOftt__ExposureMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__ExposureMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__ExposureMode(struct soap *soap, std::vector<enum tt__ExposureMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__ExposureMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode
#define SOAP_TYPE_std__vectorTemplateOftt__AutoFocusMode (1229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AutoFocusMode(struct soap*, std::vector<enum tt__AutoFocusMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AutoFocusMode(struct soap*, const std::vector<enum tt__AutoFocusMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AutoFocusMode(struct soap*, const char*, int, const std::vector<enum tt__AutoFocusMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__AutoFocusMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AutoFocusMode(struct soap*, const char*, std::vector<enum tt__AutoFocusMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__AutoFocusMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AutoFocusMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__AutoFocusMode > * soap_new_std__vectorTemplateOftt__AutoFocusMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__AutoFocusMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__AutoFocusMode(struct soap *soap, std::vector<enum tt__AutoFocusMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__AutoFocusMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode
#define SOAP_TYPE_std__vectorTemplateOftt__WideDynamicMode (1228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__WideDynamicMode(struct soap*, std::vector<enum tt__WideDynamicMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__WideDynamicMode(struct soap*, const std::vector<enum tt__WideDynamicMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__WideDynamicMode(struct soap*, const char*, int, const std::vector<enum tt__WideDynamicMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__WideDynamicMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__WideDynamicMode(struct soap*, const char*, std::vector<enum tt__WideDynamicMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__WideDynamicMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__WideDynamicMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__WideDynamicMode > * soap_new_std__vectorTemplateOftt__WideDynamicMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__WideDynamicMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__WideDynamicMode(struct soap *soap, std::vector<enum tt__WideDynamicMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__WideDynamicMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode
#define SOAP_TYPE_std__vectorTemplateOftt__IrCutFilterMode (1225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, std::vector<enum tt__IrCutFilterMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, const std::vector<enum tt__IrCutFilterMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, const char*, int, const std::vector<enum tt__IrCutFilterMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__IrCutFilterMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, const char*, std::vector<enum tt__IrCutFilterMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__IrCutFilterMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__IrCutFilterMode > * soap_new_std__vectorTemplateOftt__IrCutFilterMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__IrCutFilterMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__IrCutFilterMode(struct soap *soap, std::vector<enum tt__IrCutFilterMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__IrCutFilterMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourDirection (1211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, std::vector<enum tt__PTZPresetTourDirection >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const std::vector<enum tt__PTZPresetTourDirection >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourDirection >*, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourDirection >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, const char*, std::vector<enum tt__PTZPresetTourDirection >*, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourDirection > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourDirection > * soap_new_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourDirection(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap *soap, std::vector<enum tt__PTZPresetTourDirection >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__PTZPresetTourDirection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PTZPresetTourSpot (1197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, std::vector<tt__PTZPresetTourSpot * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const std::vector<tt__PTZPresetTourSpot * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, int, const std::vector<tt__PTZPresetTourSpot * >*, const char*);
SOAP_FMAC3 std::vector<tt__PTZPresetTourSpot * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, const char*, std::vector<tt__PTZPresetTourSpot * >*, const char*);
SOAP_FMAC1 std::vector<tt__PTZPresetTourSpot * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PTZPresetTourSpot * > * soap_new_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap *soap, std::vector<tt__PTZPresetTourSpot * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__PTZPresetTourSpot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space1DDescription (1188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, std::vector<tt__Space1DDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const std::vector<tt__Space1DDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, int, const std::vector<tt__Space1DDescription * >*, const char*);
SOAP_FMAC3 std::vector<tt__Space1DDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, const char*, std::vector<tt__Space1DDescription * >*, const char*);
SOAP_FMAC1 std::vector<tt__Space1DDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space1DDescription * > * soap_new_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Space1DDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap *soap, std::vector<tt__Space1DDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Space1DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Space2DDescription (1187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, std::vector<tt__Space2DDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const std::vector<tt__Space2DDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, int, const std::vector<tt__Space2DDescription * >*, const char*);
SOAP_FMAC3 std::vector<tt__Space2DDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, const char*, std::vector<tt__Space2DDescription * >*, const char*);
SOAP_FMAC1 std::vector<tt__Space2DDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Space2DDescription * > * soap_new_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Space2DDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap *soap, std::vector<tt__Space2DDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Space2DDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReverseMode
#define SOAP_TYPE_std__vectorTemplateOftt__ReverseMode (1183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReverseMode(struct soap*, std::vector<enum tt__ReverseMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReverseMode(struct soap*, const std::vector<enum tt__ReverseMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, int, const std::vector<enum tt__ReverseMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__ReverseMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReverseMode(struct soap*, const char*, std::vector<enum tt__ReverseMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__ReverseMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReverseMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__ReverseMode > * soap_new_std__vectorTemplateOftt__ReverseMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__ReverseMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__ReverseMode(struct soap *soap, std::vector<enum tt__ReverseMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__ReverseMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__EFlipMode
#define SOAP_TYPE_std__vectorTemplateOftt__EFlipMode (1181)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__EFlipMode(struct soap*, std::vector<enum tt__EFlipMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__EFlipMode(struct soap*, const std::vector<enum tt__EFlipMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, int, const std::vector<enum tt__EFlipMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__EFlipMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__EFlipMode(struct soap*, const char*, std::vector<enum tt__EFlipMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__EFlipMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__EFlipMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__EFlipMode > * soap_new_std__vectorTemplateOftt__EFlipMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__EFlipMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__EFlipMode(struct soap *soap, std::vector<enum tt__EFlipMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__EFlipMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation
#define SOAP_TYPE_std__vectorTemplateOftt__PTZPresetTourOperation (1167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, std::vector<enum tt__PTZPresetTourOperation >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const std::vector<enum tt__PTZPresetTourOperation >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, int, const std::vector<enum tt__PTZPresetTourOperation >*, const char*);
SOAP_FMAC3 std::vector<enum tt__PTZPresetTourOperation >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, const char*, std::vector<enum tt__PTZPresetTourOperation >*, const char*);
SOAP_FMAC1 std::vector<enum tt__PTZPresetTourOperation > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__PTZPresetTourOperation > * soap_new_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__PTZPresetTourOperation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap *soap, std::vector<enum tt__PTZPresetTourOperation >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__PTZPresetTourOperation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__SystemLogUri (1149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, std::vector<tt__SystemLogUri * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const std::vector<tt__SystemLogUri * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const char*, int, const std::vector<tt__SystemLogUri * >*, const char*);
SOAP_FMAC3 std::vector<tt__SystemLogUri * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, const char*, std::vector<tt__SystemLogUri * >*, const char*);
SOAP_FMAC1 std::vector<tt__SystemLogUri * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__SystemLogUri * > * soap_new_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__SystemLogUri(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap *soap, std::vector<tt__SystemLogUri * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__SystemLogUri(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__OnvifVersion (1143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, std::vector<tt__OnvifVersion * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const std::vector<tt__OnvifVersion * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const char*, int, const std::vector<tt__OnvifVersion * >*, const char*);
SOAP_FMAC3 std::vector<tt__OnvifVersion * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, const char*, std::vector<tt__OnvifVersion * >*, const char*);
SOAP_FMAC1 std::vector<tt__OnvifVersion * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__OnvifVersion * > * soap_new_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__OnvifVersion(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap *soap, std::vector<tt__OnvifVersion * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__OnvifVersion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData
#define SOAP_TYPE_std__vectorTemplateOftt__AuxiliaryData (1132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__AuxiliaryData(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__AuxiliaryData(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__AuxiliaryData(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__AuxiliaryData(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__AuxiliaryData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11Cipher (1109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Dot11Cipher(struct soap*, std::vector<enum tt__Dot11Cipher >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const std::vector<enum tt__Dot11Cipher >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const char*, int, const std::vector<enum tt__Dot11Cipher >*, const char*);
SOAP_FMAC3 std::vector<enum tt__Dot11Cipher >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Dot11Cipher(struct soap*, const char*, std::vector<enum tt__Dot11Cipher >*, const char*);
SOAP_FMAC1 std::vector<enum tt__Dot11Cipher > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Dot11Cipher > * soap_new_std__vectorTemplateOftt__Dot11Cipher(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__Dot11Cipher(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__Dot11Cipher(struct soap *soap, std::vector<enum tt__Dot11Cipher >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__Dot11Cipher(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_std__vectorTemplateOftt__Dot11AuthAndMangementSuite (1108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, std::vector<enum tt__Dot11AuthAndMangementSuite >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const std::vector<enum tt__Dot11AuthAndMangementSuite >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const char*, int, const std::vector<enum tt__Dot11AuthAndMangementSuite >*, const char*);
SOAP_FMAC3 std::vector<enum tt__Dot11AuthAndMangementSuite >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, const char*, std::vector<enum tt__Dot11AuthAndMangementSuite >*, const char*);
SOAP_FMAC1 std::vector<enum tt__Dot11AuthAndMangementSuite > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Dot11AuthAndMangementSuite > * soap_new_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap *soap, std::vector<enum tt__Dot11AuthAndMangementSuite >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__Dot11AuthAndMangementSuite(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration (1096)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, std::vector<tt__NetworkZeroConfiguration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const std::vector<tt__NetworkZeroConfiguration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const char*, int, const std::vector<tt__NetworkZeroConfiguration * >*, const char*);
SOAP_FMAC3 std::vector<tt__NetworkZeroConfiguration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, const char*, std::vector<tt__NetworkZeroConfiguration * >*, const char*);
SOAP_FMAC1 std::vector<tt__NetworkZeroConfiguration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkZeroConfiguration * > * soap_new_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap *soap, std::vector<tt__NetworkZeroConfiguration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__NetworkZeroConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv6Address
#define SOAP_TYPE_std__vectorTemplateOftt__IPv6Address (1093)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IPv6Address(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IPv6Address(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IPv6Address(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IPv6Address(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOftt__IPv6Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__IPv6Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__IPv6Address(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__IPv6Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__IPv4Address
#define SOAP_TYPE_std__vectorTemplateOftt__IPv4Address (1092)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__IPv4Address(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__IPv4Address(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__IPv4Address(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__IPv4Address(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__IPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOftt__IPv4Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__IPv4Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__IPv4Address(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__IPv4Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__NetworkHost (1083)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, std::vector<tt__NetworkHost * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const std::vector<tt__NetworkHost * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const char*, int, const std::vector<tt__NetworkHost * >*, const char*);
SOAP_FMAC3 std::vector<tt__NetworkHost * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, const char*, std::vector<tt__NetworkHost * >*, const char*);
SOAP_FMAC1 std::vector<tt__NetworkHost * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__NetworkHost * > * soap_new_std__vectorTemplateOfPointerTott__NetworkHost(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__NetworkHost(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__NetworkHost(struct soap *soap, std::vector<tt__NetworkHost * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__NetworkHost(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__IPAddress (1080)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, std::vector<tt__IPAddress * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const std::vector<tt__IPAddress * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const char*, int, const std::vector<tt__IPAddress * >*, const char*);
SOAP_FMAC3 std::vector<tt__IPAddress * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, const char*, std::vector<tt__IPAddress * >*, const char*);
SOAP_FMAC1 std::vector<tt__IPAddress * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__IPAddress * > * soap_new_std__vectorTemplateOfPointerTott__IPAddress(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__IPAddress(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__IPAddress(struct soap *soap, std::vector<tt__IPAddress * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__IPAddress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__token
#define SOAP_TYPE_std__vectorTemplateOfxsd__token (1079)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__token(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__token(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__token(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__token(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__token(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__token(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__token(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__token(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__token(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv6Address (1070)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, std::vector<tt__PrefixedIPv6Address * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const std::vector<tt__PrefixedIPv6Address * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const char*, int, const std::vector<tt__PrefixedIPv6Address * >*, const char*);
SOAP_FMAC3 std::vector<tt__PrefixedIPv6Address * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, const char*, std::vector<tt__PrefixedIPv6Address * >*, const char*);
SOAP_FMAC1 std::vector<tt__PrefixedIPv6Address * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PrefixedIPv6Address * > * soap_new_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap *soap, std::vector<tt__PrefixedIPv6Address * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__PrefixedIPv6Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__PrefixedIPv4Address (1068)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, std::vector<tt__PrefixedIPv4Address * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const std::vector<tt__PrefixedIPv4Address * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const char*, int, const std::vector<tt__PrefixedIPv4Address * >*, const char*);
SOAP_FMAC3 std::vector<tt__PrefixedIPv4Address * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, const char*, std::vector<tt__PrefixedIPv4Address * >*, const char*);
SOAP_FMAC1 std::vector<tt__PrefixedIPv4Address * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__PrefixedIPv4Address * > * soap_new_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap *soap, std::vector<tt__PrefixedIPv4Address * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__PrefixedIPv4Address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot11Configuration (1062)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, std::vector<tt__Dot11Configuration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const std::vector<tt__Dot11Configuration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const char*, int, const std::vector<tt__Dot11Configuration * >*, const char*);
SOAP_FMAC3 std::vector<tt__Dot11Configuration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, const char*, std::vector<tt__Dot11Configuration * >*, const char*);
SOAP_FMAC1 std::vector<tt__Dot11Configuration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot11Configuration * > * soap_new_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Dot11Configuration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap *soap, std::vector<tt__Dot11Configuration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Dot11Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__Dot3Configuration (1060)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, std::vector<tt__Dot3Configuration * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const std::vector<tt__Dot3Configuration * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const char*, int, const std::vector<tt__Dot3Configuration * >*, const char*);
SOAP_FMAC3 std::vector<tt__Dot3Configuration * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, const char*, std::vector<tt__Dot3Configuration * >*, const char*);
SOAP_FMAC1 std::vector<tt__Dot3Configuration * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__Dot3Configuration * > * soap_new_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__Dot3Configuration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap *soap, std::vector<tt__Dot3Configuration * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__Dot3Configuration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (1052)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__anyURI(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__anyURI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (1045)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption (1039)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, std::vector<tt__AudioEncoderConfigurationOption * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const std::vector<tt__AudioEncoderConfigurationOption * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, int, const std::vector<tt__AudioEncoderConfigurationOption * >*, const char*);
SOAP_FMAC3 std::vector<tt__AudioEncoderConfigurationOption * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, const char*, std::vector<tt__AudioEncoderConfigurationOption * >*, const char*);
SOAP_FMAC1 std::vector<tt__AudioEncoderConfigurationOption * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__AudioEncoderConfigurationOption * > * soap_new_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap *soap, std::vector<tt__AudioEncoderConfigurationOption * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__AudioEncoderConfigurationOption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution2 (1033)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, std::vector<tt__VideoResolution2 * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, const std::vector<tt__VideoResolution2 * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, const char*, int, const std::vector<tt__VideoResolution2 * >*, const char*);
SOAP_FMAC3 std::vector<tt__VideoResolution2 * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, const char*, std::vector<tt__VideoResolution2 * >*, const char*);
SOAP_FMAC1 std::vector<tt__VideoResolution2 * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoResolution2 * > * soap_new_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution2(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap *soap, std::vector<tt__VideoResolution2 * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__VideoResolution2(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__H264Profile
#define SOAP_TYPE_std__vectorTemplateOftt__H264Profile (1030)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__H264Profile(struct soap*, std::vector<enum tt__H264Profile >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__H264Profile(struct soap*, const std::vector<enum tt__H264Profile >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__H264Profile(struct soap*, const char*, int, const std::vector<enum tt__H264Profile >*, const char*);
SOAP_FMAC3 std::vector<enum tt__H264Profile >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__H264Profile(struct soap*, const char*, std::vector<enum tt__H264Profile >*, const char*);
SOAP_FMAC1 std::vector<enum tt__H264Profile > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__H264Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__H264Profile > * soap_new_std__vectorTemplateOftt__H264Profile(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__H264Profile(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__H264Profile(struct soap *soap, std::vector<enum tt__H264Profile >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__H264Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile
#define SOAP_TYPE_std__vectorTemplateOftt__Mpeg4Profile (1029)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, std::vector<enum tt__Mpeg4Profile >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const std::vector<enum tt__Mpeg4Profile >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const char*, int, const std::vector<enum tt__Mpeg4Profile >*, const char*);
SOAP_FMAC3 std::vector<enum tt__Mpeg4Profile >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, const char*, std::vector<enum tt__Mpeg4Profile >*, const char*);
SOAP_FMAC1 std::vector<enum tt__Mpeg4Profile > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__Mpeg4Profile > * soap_new_std__vectorTemplateOftt__Mpeg4Profile(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__Mpeg4Profile(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__Mpeg4Profile(struct soap *soap, std::vector<enum tt__Mpeg4Profile >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__Mpeg4Profile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__VideoResolution (1028)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, std::vector<tt__VideoResolution * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const std::vector<tt__VideoResolution * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const char*, int, const std::vector<tt__VideoResolution * >*, const char*);
SOAP_FMAC3 std::vector<tt__VideoResolution * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, const char*, std::vector<tt__VideoResolution * >*, const char*);
SOAP_FMAC1 std::vector<tt__VideoResolution * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__VideoResolution * > * soap_new_std__vectorTemplateOfPointerTott__VideoResolution(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__VideoResolution(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__VideoResolution(struct soap *soap, std::vector<tt__VideoResolution * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__VideoResolution(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__RotateMode
#define SOAP_TYPE_std__vectorTemplateOftt__RotateMode (1015)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__RotateMode(struct soap*, std::vector<enum tt__RotateMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__RotateMode(struct soap*, const std::vector<enum tt__RotateMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__RotateMode(struct soap*, const char*, int, const std::vector<enum tt__RotateMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__RotateMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__RotateMode(struct soap*, const char*, std::vector<enum tt__RotateMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__RotateMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__RotateMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__RotateMode > * soap_new_std__vectorTemplateOftt__RotateMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__RotateMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__RotateMode(struct soap *soap, std::vector<enum tt__RotateMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__RotateMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode
#define SOAP_TYPE_std__vectorTemplateOftt__SceneOrientationMode (1014)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, std::vector<enum tt__SceneOrientationMode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, const std::vector<enum tt__SceneOrientationMode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, const char*, int, const std::vector<enum tt__SceneOrientationMode >*, const char*);
SOAP_FMAC3 std::vector<enum tt__SceneOrientationMode >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, const char*, std::vector<enum tt__SceneOrientationMode >*, const char*);
SOAP_FMAC1 std::vector<enum tt__SceneOrientationMode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<enum tt__SceneOrientationMode > * soap_new_std__vectorTemplateOftt__SceneOrientationMode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__SceneOrientationMode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__SceneOrientationMode(struct soap *soap, std::vector<enum tt__SceneOrientationMode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__SceneOrientationMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken
#define SOAP_TYPE_std__vectorTemplateOftt__ReferenceToken (1010)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOftt__ReferenceToken(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOftt__ReferenceToken(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOftt__ReferenceToken(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOftt__ReferenceToken(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOftt__ReferenceToken(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOftt__ReferenceToken(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensProjection (1008)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, std::vector<tt__LensProjection * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const std::vector<tt__LensProjection * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const char*, int, const std::vector<tt__LensProjection * >*, const char*);
SOAP_FMAC3 std::vector<tt__LensProjection * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, const char*, std::vector<tt__LensProjection * >*, const char*);
SOAP_FMAC1 std::vector<tt__LensProjection * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LensProjection * > * soap_new_std__vectorTemplateOfPointerTott__LensProjection(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__LensProjection(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__LensProjection(struct soap *soap, std::vector<tt__LensProjection * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__LensProjection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription
#define SOAP_TYPE_std__vectorTemplateOfPointerTott__LensDescription (1002)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, std::vector<tt__LensDescription * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const std::vector<tt__LensDescription * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const char*, int, const std::vector<tt__LensDescription * >*, const char*);
SOAP_FMAC3 std::vector<tt__LensDescription * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, const char*, std::vector<tt__LensDescription * >*, const char*);
SOAP_FMAC1 std::vector<tt__LensDescription * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<tt__LensDescription * > * soap_new_std__vectorTemplateOfPointerTott__LensDescription(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTott__LensDescription(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTott__LensDescription(struct soap *soap, std::vector<tt__LensDescription * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTott__LensDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (984)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOffloat
#define SOAP_TYPE_std__vectorTemplateOffloat (983)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOffloat(struct soap*, std::vector<float >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOffloat(struct soap*, const std::vector<float >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOffloat(struct soap*, const char*, int, const std::vector<float >*, const char*);
SOAP_FMAC3 std::vector<float >* SOAP_FMAC4 soap_in_std__vectorTemplateOffloat(struct soap*, const char*, std::vector<float >*, const char*);
SOAP_FMAC1 std::vector<float > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOffloat(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<float > * soap_new_std__vectorTemplateOffloat(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOffloat(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOffloat(struct soap *soap, std::vector<float >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOffloat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (982)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int >*, const char*);
SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int >*, const char*);
SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int > * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of onvifmediaH.h */
