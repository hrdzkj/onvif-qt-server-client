// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* ./include/onvif.h
   Generated by wsdl2h 2.8.22 from ./wsdl/onvif.xsd ./wsdl/devicemgmt.wsdl and ./../../typemap.dat
   2020-01-23 05:00:54 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on ./include/onvif.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"
#import "xop.h"	// xop = <http://www.w3.org/2004/08/xop/include>
#import "wsa5.h"	// wsa5 = <http://www.w3.org/2005/08/addressing>
#import "wsse.h"
/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tt = "http://www.onvif.org/ver10/schema"
wsnt = "http://docs.oasis-open.org/wsn/b-2"
wsrfbf = "http://docs.oasis-open.org/wsrf/bf-2"
wstop = "http://docs.oasis-open.org/wsn/t-1"
tds = "http://www.onvif.org/ver10/device/wsdl"

*/

#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
//gsoap tt    schema namespace:	http://www.onvif.org/ver10/schema
//gsoap tt    schema elementForm:	qualified
//gsoap tt    schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
//gsoap wsnt  schema namespace:	http://docs.oasis-open.org/wsn/b-2
//gsoap wsnt  schema elementForm:	qualified
//gsoap wsnt  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
//gsoap wsrfbf schema namespace:	http://docs.oasis-open.org/wsrf/bf-2
//gsoap wsrfbf schema elementForm:	qualified
//gsoap wsrfbf schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
//gsoap wstop schema namespace:	http://docs.oasis-open.org/wsn/t-1
//gsoap wstop schema elementForm:	qualified
//gsoap wstop schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
//gsoap tds   schema namespace:	http://www.onvif.org/ver10/device/wsdl
//gsoap tds   schema elementForm:	qualified
//gsoap tds   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:anyType".
class xsd__anyType { _XML __item; struct soap *soap; };

/// Built-in XSD type "SOAP-ENV:Envelope".
struct SOAP_ENV__Envelope { struct SOAP_ENV__Header *SOAP_ENV__Header; _XML SOAP_ENV__Body; };

/// Built-in XSD type "xs:QName".
typedef std::string xsd__QName;

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIMEM/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in XSD type "xs:duration".
#import "custom/duration.h"

/// Built-in XSD type "xs:hexBinary".
class xsd__hexBinary { unsigned char *__ptr; int __size; };

// Imported XSD type ""http://www.w3.org/2005/08/addressing":EndpointReferenceType" defined by wsa5__EndpointReferenceType.
/// Primitive built-in type "xs:NCName".
typedef std::string xsd__NCName;

/// Class wrapper for built-in type "xs:NCName" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__NCName_ to check runtime type (see soapStub.h).
class xsd__NCName_ : public xsd__anyType
{ public:
    xsd__NCName                          __item;                       
};

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__QName_ to check runtime type (see soapStub.h).
class xsd__QName_ : public xsd__anyType
{ public:
    xsd__QName                           __item;                       
};

/// Primitive built-in type "xs:anySimpleType".
typedef std::string xsd__anySimpleType;

/// Class wrapper for built-in type "xs:anySimpleType" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__anySimpleType_ to check runtime type (see soapStub.h).
class xsd__anySimpleType_ : public xsd__anyType
{ public:
    xsd__anySimpleType                   __item;                       
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h).
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h).
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h).
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h).
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h).
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h).
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h).
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:hexBinary" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__hexBinary_ to check runtime type (see soapStub.h).
class xsd__hexBinary_ : public xsd__anyType
{ public:
    xsd__hexBinary                       __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h).
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Class wrapper for built-in type "xs:integer" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__integer_ to check runtime type (see soapStub.h).
class xsd__integer_ : public xsd__anyType
{ public:
    xsd__integer                         __item;                       
};

/// Primitive built-in type "xs:nonNegativeInteger".
typedef std::string xsd__nonNegativeInteger;

/// Class wrapper for built-in type "xs:nonNegativeInteger" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__nonNegativeInteger_ to check runtime type (see soapStub.h).
class xsd__nonNegativeInteger_ : public xsd__anyType
{ public:
    xsd__nonNegativeInteger              __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h).
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Primitive built-in type "xs:token".
typedef std::string xsd__token;

/// Class wrapper for built-in type "xs:token" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__token_ to check runtime type (see soapStub.h).
class xsd__token_ : public xsd__anyType
{ public:
    xsd__token                           __item;                       
};

// Imported element ""http://www.w3.org/2004/08/xop/include":Include" declared as _xop__Include.
/// Built-in attribute "xml:lang".
typedef std::string _xml__lang;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class tt__DeviceEntity.
class tt__DeviceEntity;

//  Forward declaration of class tt__IntRectangle.
class tt__IntRectangle;

//  Forward declaration of class tt__IntRectangleRange.
class tt__IntRectangleRange;

//  Forward declaration of class tt__FloatRange.
class tt__FloatRange;

//  Forward declaration of class tt__DurationRange.
class tt__DurationRange;

//  Forward declaration of class tt__IntItems.
class tt__IntItems;

//  Forward declaration of class tt__FloatItems.
class tt__FloatItems;

//  Forward declaration of class tt__AnyHolder.
class tt__AnyHolder;

//  Forward declaration of class tt__VideoSource.
class tt__VideoSource;

//  Forward declaration of class tt__VideoSourceExtension.
class tt__VideoSourceExtension;

//  Forward declaration of class tt__VideoSourceExtension2.
class tt__VideoSourceExtension2;

//  Forward declaration of class tt__AudioSource.
class tt__AudioSource;

//  Forward declaration of class tt__Profile.
class tt__Profile;

//  Forward declaration of class tt__ProfileExtension.
class tt__ProfileExtension;

//  Forward declaration of class tt__ProfileExtension2.
class tt__ProfileExtension2;

//  Forward declaration of class tt__ConfigurationEntity.
class tt__ConfigurationEntity;

//  Forward declaration of class tt__VideoSourceConfiguration.
class tt__VideoSourceConfiguration;

//  Forward declaration of class tt__VideoSourceConfigurationExtension.
class tt__VideoSourceConfigurationExtension;

//  Forward declaration of class tt__VideoSourceConfigurationExtension2.
class tt__VideoSourceConfigurationExtension2;

//  Forward declaration of class tt__Rotate.
class tt__Rotate;

//  Forward declaration of class tt__RotateExtension.
class tt__RotateExtension;

//  Forward declaration of class tt__LensProjection.
class tt__LensProjection;

//  Forward declaration of class tt__LensOffset.
class tt__LensOffset;

//  Forward declaration of class tt__LensDescription.
class tt__LensDescription;

//  Forward declaration of class tt__VideoSourceConfigurationOptions.
class tt__VideoSourceConfigurationOptions;

//  Forward declaration of class tt__VideoSourceConfigurationOptionsExtension.
class tt__VideoSourceConfigurationOptionsExtension;

//  Forward declaration of class tt__VideoSourceConfigurationOptionsExtension2.
class tt__VideoSourceConfigurationOptionsExtension2;

//  Forward declaration of class tt__RotateOptions.
class tt__RotateOptions;

//  Forward declaration of class tt__RotateOptionsExtension.
class tt__RotateOptionsExtension;

//  Forward declaration of class tt__SceneOrientation.
class tt__SceneOrientation;

//  Forward declaration of class tt__VideoEncoderConfiguration.
class tt__VideoEncoderConfiguration;

//  Forward declaration of class tt__VideoResolution.
class tt__VideoResolution;

//  Forward declaration of class tt__VideoRateControl.
class tt__VideoRateControl;

//  Forward declaration of class tt__Mpeg4Configuration.
class tt__Mpeg4Configuration;

//  Forward declaration of class tt__H264Configuration.
class tt__H264Configuration;

//  Forward declaration of class tt__VideoEncoderConfigurationOptions.
class tt__VideoEncoderConfigurationOptions;

//  Forward declaration of class tt__VideoEncoderOptionsExtension.
class tt__VideoEncoderOptionsExtension;

//  Forward declaration of class tt__VideoEncoderOptionsExtension2.
class tt__VideoEncoderOptionsExtension2;

//  Forward declaration of class tt__JpegOptions.
class tt__JpegOptions;

//  Forward declaration of class tt__JpegOptions2.
class tt__JpegOptions2;

//  Forward declaration of class tt__Mpeg4Options.
class tt__Mpeg4Options;

//  Forward declaration of class tt__Mpeg4Options2.
class tt__Mpeg4Options2;

//  Forward declaration of class tt__H264Options.
class tt__H264Options;

//  Forward declaration of class tt__H264Options2.
class tt__H264Options2;

//  Forward declaration of class tt__VideoEncoder2Configuration.
class tt__VideoEncoder2Configuration;

//  Forward declaration of class tt__VideoResolution2.
class tt__VideoResolution2;

//  Forward declaration of class tt__VideoRateControl2.
class tt__VideoRateControl2;

//  Forward declaration of class tt__VideoEncoder2ConfigurationOptions.
class tt__VideoEncoder2ConfigurationOptions;

//  Forward declaration of class tt__AudioSourceConfiguration.
class tt__AudioSourceConfiguration;

//  Forward declaration of class tt__AudioSourceConfigurationOptions.
class tt__AudioSourceConfigurationOptions;

//  Forward declaration of class tt__AudioSourceOptionsExtension.
class tt__AudioSourceOptionsExtension;

//  Forward declaration of class tt__AudioEncoderConfiguration.
class tt__AudioEncoderConfiguration;

//  Forward declaration of class tt__AudioEncoderConfigurationOptions.
class tt__AudioEncoderConfigurationOptions;

//  Forward declaration of class tt__AudioEncoderConfigurationOption.
class tt__AudioEncoderConfigurationOption;

//  Forward declaration of class tt__AudioEncoder2Configuration.
class tt__AudioEncoder2Configuration;

//  Forward declaration of class tt__AudioEncoder2ConfigurationOptions.
class tt__AudioEncoder2ConfigurationOptions;

//  Forward declaration of class tt__VideoAnalyticsConfiguration.
class tt__VideoAnalyticsConfiguration;

//  Forward declaration of class tt__MetadataConfiguration.
class tt__MetadataConfiguration;

//  Forward declaration of class tt__MetadataConfigurationExtension.
class tt__MetadataConfigurationExtension;

//  Forward declaration of class tt__PTZFilter.
class tt__PTZFilter;

//  Forward declaration of class tt__EventSubscription.
class tt__EventSubscription;

//  Forward declaration of class tt__MetadataConfigurationOptions.
class tt__MetadataConfigurationOptions;

//  Forward declaration of class tt__MetadataConfigurationOptionsExtension.
class tt__MetadataConfigurationOptionsExtension;

//  Forward declaration of class tt__MetadataConfigurationOptionsExtension2.
class tt__MetadataConfigurationOptionsExtension2;

//  Forward declaration of class tt__PTZStatusFilterOptions.
class tt__PTZStatusFilterOptions;

//  Forward declaration of class tt__PTZStatusFilterOptionsExtension.
class tt__PTZStatusFilterOptionsExtension;

//  Forward declaration of class tt__VideoOutput.
class tt__VideoOutput;

//  Forward declaration of class tt__VideoOutputExtension.
class tt__VideoOutputExtension;

//  Forward declaration of class tt__VideoOutputConfiguration.
class tt__VideoOutputConfiguration;

//  Forward declaration of class tt__VideoOutputConfigurationOptions.
class tt__VideoOutputConfigurationOptions;

//  Forward declaration of class tt__VideoDecoderConfigurationOptions.
class tt__VideoDecoderConfigurationOptions;

//  Forward declaration of class tt__H264DecOptions.
class tt__H264DecOptions;

//  Forward declaration of class tt__JpegDecOptions.
class tt__JpegDecOptions;

//  Forward declaration of class tt__Mpeg4DecOptions.
class tt__Mpeg4DecOptions;

//  Forward declaration of class tt__VideoDecoderConfigurationOptionsExtension.
class tt__VideoDecoderConfigurationOptionsExtension;

//  Forward declaration of class tt__AudioOutput.
class tt__AudioOutput;

//  Forward declaration of class tt__AudioOutputConfiguration.
class tt__AudioOutputConfiguration;

//  Forward declaration of class tt__AudioOutputConfigurationOptions.
class tt__AudioOutputConfigurationOptions;

//  Forward declaration of class tt__AudioDecoderConfiguration.
class tt__AudioDecoderConfiguration;

//  Forward declaration of class tt__AudioDecoderConfigurationOptions.
class tt__AudioDecoderConfigurationOptions;

//  Forward declaration of class tt__G711DecOptions.
class tt__G711DecOptions;

//  Forward declaration of class tt__AACDecOptions.
class tt__AACDecOptions;

//  Forward declaration of class tt__G726DecOptions.
class tt__G726DecOptions;

//  Forward declaration of class tt__AudioDecoderConfigurationOptionsExtension.
class tt__AudioDecoderConfigurationOptionsExtension;

//  Forward declaration of class tt__MulticastConfiguration.
class tt__MulticastConfiguration;

//  Forward declaration of class tt__StreamSetup.
class tt__StreamSetup;

//  Forward declaration of class tt__Transport.
class tt__Transport;

//  Forward declaration of class tt__MediaUri.
class tt__MediaUri;

//  Forward declaration of class tt__Scope.
class tt__Scope;

//  Forward declaration of class tt__NetworkInterface.
class tt__NetworkInterface;

//  Forward declaration of class tt__NetworkInterfaceExtension.
class tt__NetworkInterfaceExtension;

//  Forward declaration of class tt__Dot3Configuration.
class tt__Dot3Configuration;

//  Forward declaration of class tt__NetworkInterfaceExtension2.
class tt__NetworkInterfaceExtension2;

//  Forward declaration of class tt__NetworkInterfaceLink.
class tt__NetworkInterfaceLink;

//  Forward declaration of class tt__NetworkInterfaceConnectionSetting.
class tt__NetworkInterfaceConnectionSetting;

//  Forward declaration of class tt__NetworkInterfaceInfo.
class tt__NetworkInterfaceInfo;

//  Forward declaration of class tt__IPv6NetworkInterface.
class tt__IPv6NetworkInterface;

//  Forward declaration of class tt__IPv4NetworkInterface.
class tt__IPv4NetworkInterface;

//  Forward declaration of class tt__IPv4Configuration.
class tt__IPv4Configuration;

//  Forward declaration of class tt__IPv6Configuration.
class tt__IPv6Configuration;

//  Forward declaration of class tt__IPv6ConfigurationExtension.
class tt__IPv6ConfigurationExtension;

//  Forward declaration of class tt__NetworkProtocol.
class tt__NetworkProtocol;

//  Forward declaration of class tt__NetworkProtocolExtension.
class tt__NetworkProtocolExtension;

//  Forward declaration of class tt__NetworkHost.
class tt__NetworkHost;

//  Forward declaration of class tt__NetworkHostExtension.
class tt__NetworkHostExtension;

//  Forward declaration of class tt__IPAddress.
class tt__IPAddress;

//  Forward declaration of class tt__PrefixedIPv4Address.
class tt__PrefixedIPv4Address;

//  Forward declaration of class tt__PrefixedIPv6Address.
class tt__PrefixedIPv6Address;

//  Forward declaration of class tt__HostnameInformation.
class tt__HostnameInformation;

//  Forward declaration of class tt__HostnameInformationExtension.
class tt__HostnameInformationExtension;

//  Forward declaration of class tt__DNSInformation.
class tt__DNSInformation;

//  Forward declaration of class tt__DNSInformationExtension.
class tt__DNSInformationExtension;

//  Forward declaration of class tt__NTPInformation.
class tt__NTPInformation;

//  Forward declaration of class tt__NTPInformationExtension.
class tt__NTPInformationExtension;

//  Forward declaration of class tt__DynamicDNSInformation.
class tt__DynamicDNSInformation;

//  Forward declaration of class tt__DynamicDNSInformationExtension.
class tt__DynamicDNSInformationExtension;

//  Forward declaration of class tt__NetworkInterfaceSetConfiguration.
class tt__NetworkInterfaceSetConfiguration;

//  Forward declaration of class tt__NetworkInterfaceSetConfigurationExtension.
class tt__NetworkInterfaceSetConfigurationExtension;

//  Forward declaration of class tt__IPv6NetworkInterfaceSetConfiguration.
class tt__IPv6NetworkInterfaceSetConfiguration;

//  Forward declaration of class tt__IPv4NetworkInterfaceSetConfiguration.
class tt__IPv4NetworkInterfaceSetConfiguration;

//  Forward declaration of class tt__NetworkGateway.
class tt__NetworkGateway;

//  Forward declaration of class tt__NetworkZeroConfiguration.
class tt__NetworkZeroConfiguration;

//  Forward declaration of class tt__NetworkZeroConfigurationExtension.
class tt__NetworkZeroConfigurationExtension;

//  Forward declaration of class tt__NetworkZeroConfigurationExtension2.
class tt__NetworkZeroConfigurationExtension2;

//  Forward declaration of class tt__IPAddressFilter.
class tt__IPAddressFilter;

//  Forward declaration of class tt__IPAddressFilterExtension.
class tt__IPAddressFilterExtension;

//  Forward declaration of class tt__Dot11Configuration.
class tt__Dot11Configuration;

//  Forward declaration of class tt__Dot11SecurityConfiguration.
class tt__Dot11SecurityConfiguration;

//  Forward declaration of class tt__Dot11SecurityConfigurationExtension.
class tt__Dot11SecurityConfigurationExtension;

//  Forward declaration of class tt__Dot11PSKSet.
class tt__Dot11PSKSet;

//  Forward declaration of class tt__Dot11PSKSetExtension.
class tt__Dot11PSKSetExtension;

//  Forward declaration of class tt__NetworkInterfaceSetConfigurationExtension2.
class tt__NetworkInterfaceSetConfigurationExtension2;

//  Forward declaration of class tt__Dot11Capabilities.
class tt__Dot11Capabilities;

//  Forward declaration of class tt__Dot11Status.
class tt__Dot11Status;

//  Forward declaration of class tt__Dot11AvailableNetworks.
class tt__Dot11AvailableNetworks;

//  Forward declaration of class tt__Dot11AvailableNetworksExtension.
class tt__Dot11AvailableNetworksExtension;

//  Forward declaration of class tt__Capabilities.
class tt__Capabilities;

//  Forward declaration of class tt__CapabilitiesExtension.
class tt__CapabilitiesExtension;

//  Forward declaration of class tt__CapabilitiesExtension2.
class tt__CapabilitiesExtension2;

//  Forward declaration of class tt__AnalyticsCapabilities.
class tt__AnalyticsCapabilities;

//  Forward declaration of class tt__DeviceCapabilities.
class tt__DeviceCapabilities;

//  Forward declaration of class tt__DeviceCapabilitiesExtension.
class tt__DeviceCapabilitiesExtension;

//  Forward declaration of class tt__EventCapabilities.
class tt__EventCapabilities;

//  Forward declaration of class tt__IOCapabilities.
class tt__IOCapabilities;

//  Forward declaration of class tt__IOCapabilitiesExtension.
class tt__IOCapabilitiesExtension;

//  Forward declaration of class tt__IOCapabilitiesExtension2.
class tt__IOCapabilitiesExtension2;

//  Forward declaration of class tt__MediaCapabilities.
class tt__MediaCapabilities;

//  Forward declaration of class tt__MediaCapabilitiesExtension.
class tt__MediaCapabilitiesExtension;

//  Forward declaration of class tt__RealTimeStreamingCapabilities.
class tt__RealTimeStreamingCapabilities;

//  Forward declaration of class tt__RealTimeStreamingCapabilitiesExtension.
class tt__RealTimeStreamingCapabilitiesExtension;

//  Forward declaration of class tt__ProfileCapabilities.
class tt__ProfileCapabilities;

//  Forward declaration of class tt__NetworkCapabilities.
class tt__NetworkCapabilities;

//  Forward declaration of class tt__NetworkCapabilitiesExtension.
class tt__NetworkCapabilitiesExtension;

//  Forward declaration of class tt__NetworkCapabilitiesExtension2.
class tt__NetworkCapabilitiesExtension2;

//  Forward declaration of class tt__SecurityCapabilities.
class tt__SecurityCapabilities;

//  Forward declaration of class tt__SecurityCapabilitiesExtension.
class tt__SecurityCapabilitiesExtension;

//  Forward declaration of class tt__SecurityCapabilitiesExtension2.
class tt__SecurityCapabilitiesExtension2;

//  Forward declaration of class tt__SystemCapabilities.
class tt__SystemCapabilities;

//  Forward declaration of class tt__SystemCapabilitiesExtension.
class tt__SystemCapabilitiesExtension;

//  Forward declaration of class tt__SystemCapabilitiesExtension2.
class tt__SystemCapabilitiesExtension2;

//  Forward declaration of class tt__OnvifVersion.
class tt__OnvifVersion;

//  Forward declaration of class tt__ImagingCapabilities.
class tt__ImagingCapabilities;

//  Forward declaration of class tt__PTZCapabilities.
class tt__PTZCapabilities;

//  Forward declaration of class tt__DeviceIOCapabilities.
class tt__DeviceIOCapabilities;

//  Forward declaration of class tt__DisplayCapabilities.
class tt__DisplayCapabilities;

//  Forward declaration of class tt__RecordingCapabilities.
class tt__RecordingCapabilities;

//  Forward declaration of class tt__SearchCapabilities.
class tt__SearchCapabilities;

//  Forward declaration of class tt__ReplayCapabilities.
class tt__ReplayCapabilities;

//  Forward declaration of class tt__ReceiverCapabilities.
class tt__ReceiverCapabilities;

//  Forward declaration of class tt__AnalyticsDeviceCapabilities.
class tt__AnalyticsDeviceCapabilities;

//  Forward declaration of class tt__AnalyticsDeviceExtension.
class tt__AnalyticsDeviceExtension;

//  Forward declaration of class tt__SystemLog.
class tt__SystemLog;

//  Forward declaration of class tt__SupportInformation.
class tt__SupportInformation;

//  Forward declaration of class tt__BinaryData.
class tt__BinaryData;

//  Forward declaration of class tt__AttachmentData.
class tt__AttachmentData;

//  Forward declaration of class tt__BackupFile.
class tt__BackupFile;

//  Forward declaration of class tt__SystemLogUriList.
class tt__SystemLogUriList;

//  Forward declaration of class tt__SystemLogUri.
class tt__SystemLogUri;

//  Forward declaration of class tt__SystemDateTime.
class tt__SystemDateTime;

//  Forward declaration of class tt__SystemDateTimeExtension.
class tt__SystemDateTimeExtension;

//  Forward declaration of class tt__DateTime.
class tt__DateTime;

//  Forward declaration of class tt__Date.
class tt__Date;

//  Forward declaration of class tt__Time.
class tt__Time;

//  Forward declaration of class tt__TimeZone.
class tt__TimeZone;

//  Forward declaration of class tt__RemoteUser.
class tt__RemoteUser;

//  Forward declaration of class tt__User.
class tt__User;

//  Forward declaration of class tt__UserExtension.
class tt__UserExtension;

//  Forward declaration of class tt__CertificateGenerationParameters.
class tt__CertificateGenerationParameters;

//  Forward declaration of class tt__CertificateGenerationParametersExtension.
class tt__CertificateGenerationParametersExtension;

//  Forward declaration of class tt__Certificate.
class tt__Certificate;

//  Forward declaration of class tt__CertificateStatus.
class tt__CertificateStatus;

//  Forward declaration of class tt__CertificateWithPrivateKey.
class tt__CertificateWithPrivateKey;

//  Forward declaration of class tt__CertificateInformation.
class tt__CertificateInformation;

//  Forward declaration of class tt__CertificateUsage.
class tt__CertificateUsage;

//  Forward declaration of class tt__CertificateInformationExtension.
class tt__CertificateInformationExtension;

//  Forward declaration of class tt__Dot1XConfiguration.
class tt__Dot1XConfiguration;

//  Forward declaration of class tt__Dot1XConfigurationExtension.
class tt__Dot1XConfigurationExtension;

//  Forward declaration of class tt__EAPMethodConfiguration.
class tt__EAPMethodConfiguration;

//  Forward declaration of class tt__EapMethodExtension.
class tt__EapMethodExtension;

//  Forward declaration of class tt__TLSConfiguration.
class tt__TLSConfiguration;

//  Forward declaration of class tt__GenericEapPwdConfigurationExtension.
class tt__GenericEapPwdConfigurationExtension;

//  Forward declaration of class tt__RelayOutputSettings.
class tt__RelayOutputSettings;

//  Forward declaration of class tt__RelayOutput.
class tt__RelayOutput;

//  Forward declaration of class tt__DigitalInput.
class tt__DigitalInput;

//  Forward declaration of class tt__PTZNode.
class tt__PTZNode;

//  Forward declaration of class tt__PTZNodeExtension.
class tt__PTZNodeExtension;

//  Forward declaration of class tt__PTZNodeExtension2.
class tt__PTZNodeExtension2;

//  Forward declaration of class tt__PTZPresetTourSupported.
class tt__PTZPresetTourSupported;

//  Forward declaration of class tt__PTZPresetTourSupportedExtension.
class tt__PTZPresetTourSupportedExtension;

//  Forward declaration of class tt__PTZConfiguration.
class tt__PTZConfiguration;

//  Forward declaration of class tt__PTZConfigurationExtension.
class tt__PTZConfigurationExtension;

//  Forward declaration of class tt__PTZConfigurationExtension2.
class tt__PTZConfigurationExtension2;

//  Forward declaration of class tt__PTControlDirection.
class tt__PTControlDirection;

//  Forward declaration of class tt__PTControlDirectionExtension.
class tt__PTControlDirectionExtension;

//  Forward declaration of class tt__EFlip.
class tt__EFlip;

//  Forward declaration of class tt__Reverse.
class tt__Reverse;

//  Forward declaration of class tt__PTZConfigurationOptions.
class tt__PTZConfigurationOptions;

//  Forward declaration of class tt__PTZConfigurationOptions2.
class tt__PTZConfigurationOptions2;

//  Forward declaration of class tt__PTControlDirectionOptions.
class tt__PTControlDirectionOptions;

//  Forward declaration of class tt__PTControlDirectionOptionsExtension.
class tt__PTControlDirectionOptionsExtension;

//  Forward declaration of class tt__EFlipOptions.
class tt__EFlipOptions;

//  Forward declaration of class tt__EFlipOptionsExtension.
class tt__EFlipOptionsExtension;

//  Forward declaration of class tt__ReverseOptions.
class tt__ReverseOptions;

//  Forward declaration of class tt__ReverseOptionsExtension.
class tt__ReverseOptionsExtension;

//  Forward declaration of class tt__PanTiltLimits.
class tt__PanTiltLimits;

//  Forward declaration of class tt__ZoomLimits.
class tt__ZoomLimits;

//  Forward declaration of class tt__PTZSpaces.
class tt__PTZSpaces;

//  Forward declaration of class tt__PTZSpacesExtension.
class tt__PTZSpacesExtension;

//  Forward declaration of class tt__Space2DDescription.
class tt__Space2DDescription;

//  Forward declaration of class tt__Space1DDescription.
class tt__Space1DDescription;

//  Forward declaration of class tt__PTZSpeed.
class tt__PTZSpeed;

//  Forward declaration of class tt__PTZPreset.
class tt__PTZPreset;

//  Forward declaration of class tt__PresetTour.
class tt__PresetTour;

//  Forward declaration of class tt__PTZPresetTourExtension.
class tt__PTZPresetTourExtension;

//  Forward declaration of class tt__PTZPresetTourSpot.
class tt__PTZPresetTourSpot;

//  Forward declaration of class tt__PTZPresetTourSpotExtension.
class tt__PTZPresetTourSpotExtension;

//  Forward declaration of class tt__PTZPresetTourPresetDetail.
class tt__PTZPresetTourPresetDetail;

//  Forward declaration of class tt__PTZPresetTourTypeExtension.
class tt__PTZPresetTourTypeExtension;

//  Forward declaration of class tt__PTZPresetTourStatus.
class tt__PTZPresetTourStatus;

//  Forward declaration of class tt__PTZPresetTourStatusExtension.
class tt__PTZPresetTourStatusExtension;

//  Forward declaration of class tt__PTZPresetTourStartingCondition.
class tt__PTZPresetTourStartingCondition;

//  Forward declaration of class tt__PTZPresetTourStartingConditionExtension.
class tt__PTZPresetTourStartingConditionExtension;

//  Forward declaration of class tt__PTZPresetTourOptions.
class tt__PTZPresetTourOptions;

//  Forward declaration of class tt__PTZPresetTourSpotOptions.
class tt__PTZPresetTourSpotOptions;

//  Forward declaration of class tt__PTZPresetTourPresetDetailOptions.
class tt__PTZPresetTourPresetDetailOptions;

//  Forward declaration of class tt__PTZPresetTourPresetDetailOptionsExtension.
class tt__PTZPresetTourPresetDetailOptionsExtension;

//  Forward declaration of class tt__PTZPresetTourStartingConditionOptions.
class tt__PTZPresetTourStartingConditionOptions;

//  Forward declaration of class tt__PTZPresetTourStartingConditionOptionsExtension.
class tt__PTZPresetTourStartingConditionOptionsExtension;

//  Forward declaration of class tt__ImagingStatus.
class tt__ImagingStatus;

//  Forward declaration of class tt__FocusStatus.
class tt__FocusStatus;

//  Forward declaration of class tt__FocusConfiguration.
class tt__FocusConfiguration;

//  Forward declaration of class tt__ImagingSettings.
class tt__ImagingSettings;

//  Forward declaration of class tt__ImagingSettingsExtension.
class tt__ImagingSettingsExtension;

//  Forward declaration of class tt__Exposure.
class tt__Exposure;

//  Forward declaration of class tt__WideDynamicRange.
class tt__WideDynamicRange;

//  Forward declaration of class tt__BacklightCompensation.
class tt__BacklightCompensation;

//  Forward declaration of class tt__ImagingOptions.
class tt__ImagingOptions;

//  Forward declaration of class tt__WideDynamicRangeOptions.
class tt__WideDynamicRangeOptions;

//  Forward declaration of class tt__BacklightCompensationOptions.
class tt__BacklightCompensationOptions;

//  Forward declaration of class tt__FocusOptions.
class tt__FocusOptions;

//  Forward declaration of class tt__ExposureOptions.
class tt__ExposureOptions;

//  Forward declaration of class tt__WhiteBalanceOptions.
class tt__WhiteBalanceOptions;

//  Forward declaration of class tt__FocusMove.
class tt__FocusMove;

//  Forward declaration of class tt__AbsoluteFocus.
class tt__AbsoluteFocus;

//  Forward declaration of class tt__RelativeFocus.
class tt__RelativeFocus;

//  Forward declaration of class tt__ContinuousFocus.
class tt__ContinuousFocus;

//  Forward declaration of class tt__MoveOptions.
class tt__MoveOptions;

//  Forward declaration of class tt__AbsoluteFocusOptions.
class tt__AbsoluteFocusOptions;

//  Forward declaration of class tt__RelativeFocusOptions.
class tt__RelativeFocusOptions;

//  Forward declaration of class tt__ContinuousFocusOptions.
class tt__ContinuousFocusOptions;

//  Forward declaration of class tt__WhiteBalance.
class tt__WhiteBalance;

//  Forward declaration of class tt__ImagingStatus20.
class tt__ImagingStatus20;

//  Forward declaration of class tt__ImagingStatus20Extension.
class tt__ImagingStatus20Extension;

//  Forward declaration of class tt__FocusStatus20.
class tt__FocusStatus20;

//  Forward declaration of class tt__FocusStatus20Extension.
class tt__FocusStatus20Extension;

//  Forward declaration of class tt__ImagingSettings20.
class tt__ImagingSettings20;

//  Forward declaration of class tt__ImagingSettingsExtension20.
class tt__ImagingSettingsExtension20;

//  Forward declaration of class tt__ImagingSettingsExtension202.
class tt__ImagingSettingsExtension202;

//  Forward declaration of class tt__ImagingSettingsExtension203.
class tt__ImagingSettingsExtension203;

//  Forward declaration of class tt__ImagingSettingsExtension204.
class tt__ImagingSettingsExtension204;

//  Forward declaration of class tt__ImageStabilization.
class tt__ImageStabilization;

//  Forward declaration of class tt__ImageStabilizationExtension.
class tt__ImageStabilizationExtension;

//  Forward declaration of class tt__IrCutFilterAutoAdjustment.
class tt__IrCutFilterAutoAdjustment;

//  Forward declaration of class tt__IrCutFilterAutoAdjustmentExtension.
class tt__IrCutFilterAutoAdjustmentExtension;

//  Forward declaration of class tt__WideDynamicRange20.
class tt__WideDynamicRange20;

//  Forward declaration of class tt__BacklightCompensation20.
class tt__BacklightCompensation20;

//  Forward declaration of class tt__Exposure20.
class tt__Exposure20;

//  Forward declaration of class tt__ToneCompensation.
class tt__ToneCompensation;

//  Forward declaration of class tt__ToneCompensationExtension.
class tt__ToneCompensationExtension;

//  Forward declaration of class tt__Defogging.
class tt__Defogging;

//  Forward declaration of class tt__DefoggingExtension.
class tt__DefoggingExtension;

//  Forward declaration of class tt__NoiseReduction.
class tt__NoiseReduction;

//  Forward declaration of class tt__ImagingOptions20.
class tt__ImagingOptions20;

//  Forward declaration of class tt__ImagingOptions20Extension.
class tt__ImagingOptions20Extension;

//  Forward declaration of class tt__ImagingOptions20Extension2.
class tt__ImagingOptions20Extension2;

//  Forward declaration of class tt__ImagingOptions20Extension3.
class tt__ImagingOptions20Extension3;

//  Forward declaration of class tt__ImagingOptions20Extension4.
class tt__ImagingOptions20Extension4;

//  Forward declaration of class tt__ImageStabilizationOptions.
class tt__ImageStabilizationOptions;

//  Forward declaration of class tt__ImageStabilizationOptionsExtension.
class tt__ImageStabilizationOptionsExtension;

//  Forward declaration of class tt__IrCutFilterAutoAdjustmentOptions.
class tt__IrCutFilterAutoAdjustmentOptions;

//  Forward declaration of class tt__IrCutFilterAutoAdjustmentOptionsExtension.
class tt__IrCutFilterAutoAdjustmentOptionsExtension;

//  Forward declaration of class tt__WideDynamicRangeOptions20.
class tt__WideDynamicRangeOptions20;

//  Forward declaration of class tt__BacklightCompensationOptions20.
class tt__BacklightCompensationOptions20;

//  Forward declaration of class tt__ExposureOptions20.
class tt__ExposureOptions20;

//  Forward declaration of class tt__MoveOptions20.
class tt__MoveOptions20;

//  Forward declaration of class tt__RelativeFocusOptions20.
class tt__RelativeFocusOptions20;

//  Forward declaration of class tt__WhiteBalance20.
class tt__WhiteBalance20;

//  Forward declaration of class tt__WhiteBalance20Extension.
class tt__WhiteBalance20Extension;

//  Forward declaration of class tt__FocusConfiguration20.
class tt__FocusConfiguration20;

//  Forward declaration of class tt__FocusConfiguration20Extension.
class tt__FocusConfiguration20Extension;

//  Forward declaration of class tt__WhiteBalanceOptions20.
class tt__WhiteBalanceOptions20;

//  Forward declaration of class tt__WhiteBalanceOptions20Extension.
class tt__WhiteBalanceOptions20Extension;

//  Forward declaration of class tt__FocusOptions20.
class tt__FocusOptions20;

//  Forward declaration of class tt__FocusOptions20Extension.
class tt__FocusOptions20Extension;

//  Forward declaration of class tt__ToneCompensationOptions.
class tt__ToneCompensationOptions;

//  Forward declaration of class tt__DefoggingOptions.
class tt__DefoggingOptions;

//  Forward declaration of class tt__NoiseReductionOptions.
class tt__NoiseReductionOptions;

//  Forward declaration of class tt__MessageExtension.
class tt__MessageExtension;

//  Forward declaration of class tt__ItemList.
class tt__ItemList;

//  Forward declaration of class tt__ItemListExtension.
class tt__ItemListExtension;

//  Forward declaration of class tt__MessageDescription.
class tt__MessageDescription;

//  Forward declaration of class tt__MessageDescriptionExtension.
class tt__MessageDescriptionExtension;

//  Forward declaration of class tt__ItemListDescription.
class tt__ItemListDescription;

//  Forward declaration of class tt__ItemListDescriptionExtension.
class tt__ItemListDescriptionExtension;

//  Forward declaration of class tt__Polyline.
class tt__Polyline;

//  Forward declaration of class tt__AnalyticsEngineConfiguration.
class tt__AnalyticsEngineConfiguration;

//  Forward declaration of class tt__AnalyticsEngineConfigurationExtension.
class tt__AnalyticsEngineConfigurationExtension;

//  Forward declaration of class tt__RuleEngineConfiguration.
class tt__RuleEngineConfiguration;

//  Forward declaration of class tt__RuleEngineConfigurationExtension.
class tt__RuleEngineConfigurationExtension;

//  Forward declaration of class tt__Config.
class tt__Config;

//  Forward declaration of class tt__ConfigDescription.
class tt__ConfigDescription;

//  Forward declaration of class tt__ConfigDescriptionExtension.
class tt__ConfigDescriptionExtension;

//  Forward declaration of class tt__SupportedRules.
class tt__SupportedRules;

//  Forward declaration of class tt__SupportedRulesExtension.
class tt__SupportedRulesExtension;

//  Forward declaration of class tt__SupportedAnalyticsModules.
class tt__SupportedAnalyticsModules;

//  Forward declaration of class tt__SupportedAnalyticsModulesExtension.
class tt__SupportedAnalyticsModulesExtension;

//  Forward declaration of class tt__PolygonConfiguration.
class tt__PolygonConfiguration;

//  Forward declaration of class tt__PolylineArray.
class tt__PolylineArray;

//  Forward declaration of class tt__PolylineArrayExtension.
class tt__PolylineArrayExtension;

//  Forward declaration of class tt__PolylineArrayConfiguration.
class tt__PolylineArrayConfiguration;

//  Forward declaration of class tt__MotionExpression.
class tt__MotionExpression;

//  Forward declaration of class tt__MotionExpressionConfiguration.
class tt__MotionExpressionConfiguration;

//  Forward declaration of class tt__CellLayout.
class tt__CellLayout;

//  Forward declaration of class tt__PaneConfiguration.
class tt__PaneConfiguration;

//  Forward declaration of class tt__PaneLayout.
class tt__PaneLayout;

//  Forward declaration of class tt__Layout.
class tt__Layout;

//  Forward declaration of class tt__LayoutExtension.
class tt__LayoutExtension;

//  Forward declaration of class tt__CodingCapabilities.
class tt__CodingCapabilities;

//  Forward declaration of class tt__LayoutOptions.
class tt__LayoutOptions;

//  Forward declaration of class tt__LayoutOptionsExtension.
class tt__LayoutOptionsExtension;

//  Forward declaration of class tt__PaneLayoutOptions.
class tt__PaneLayoutOptions;

//  Forward declaration of class tt__PaneOptionExtension.
class tt__PaneOptionExtension;

//  Forward declaration of class tt__Receiver.
class tt__Receiver;

//  Forward declaration of class tt__ReceiverConfiguration.
class tt__ReceiverConfiguration;

//  Forward declaration of class tt__ReceiverStateInformation.
class tt__ReceiverStateInformation;

//  Forward declaration of class tt__SourceReference.
class tt__SourceReference;

//  Forward declaration of class tt__DateTimeRange.
class tt__DateTimeRange;

//  Forward declaration of class tt__RecordingSummary.
class tt__RecordingSummary;

//  Forward declaration of class tt__SearchScope.
class tt__SearchScope;

//  Forward declaration of class tt__SearchScopeExtension.
class tt__SearchScopeExtension;

//  Forward declaration of class tt__EventFilter.
class tt__EventFilter;

//  Forward declaration of class tt__PTZPositionFilter.
class tt__PTZPositionFilter;

//  Forward declaration of class tt__MetadataFilter.
class tt__MetadataFilter;

//  Forward declaration of class tt__FindRecordingResultList.
class tt__FindRecordingResultList;

//  Forward declaration of class tt__FindEventResultList.
class tt__FindEventResultList;

//  Forward declaration of class tt__FindEventResult.
class tt__FindEventResult;

//  Forward declaration of class tt__FindPTZPositionResultList.
class tt__FindPTZPositionResultList;

//  Forward declaration of class tt__FindPTZPositionResult.
class tt__FindPTZPositionResult;

//  Forward declaration of class tt__FindMetadataResultList.
class tt__FindMetadataResultList;

//  Forward declaration of class tt__FindMetadataResult.
class tt__FindMetadataResult;

//  Forward declaration of class tt__RecordingInformation.
class tt__RecordingInformation;

//  Forward declaration of class tt__RecordingSourceInformation.
class tt__RecordingSourceInformation;

//  Forward declaration of class tt__TrackInformation.
class tt__TrackInformation;

//  Forward declaration of class tt__MediaAttributes.
class tt__MediaAttributes;

//  Forward declaration of class tt__TrackAttributes.
class tt__TrackAttributes;

//  Forward declaration of class tt__TrackAttributesExtension.
class tt__TrackAttributesExtension;

//  Forward declaration of class tt__VideoAttributes.
class tt__VideoAttributes;

//  Forward declaration of class tt__AudioAttributes.
class tt__AudioAttributes;

//  Forward declaration of class tt__MetadataAttributes.
class tt__MetadataAttributes;

//  Forward declaration of class tt__RecordingConfiguration.
class tt__RecordingConfiguration;

//  Forward declaration of class tt__TrackConfiguration.
class tt__TrackConfiguration;

//  Forward declaration of class tt__GetRecordingsResponseItem.
class tt__GetRecordingsResponseItem;

//  Forward declaration of class tt__GetTracksResponseList.
class tt__GetTracksResponseList;

//  Forward declaration of class tt__GetTracksResponseItem.
class tt__GetTracksResponseItem;

//  Forward declaration of class tt__RecordingJobConfiguration.
class tt__RecordingJobConfiguration;

//  Forward declaration of class tt__RecordingJobConfigurationExtension.
class tt__RecordingJobConfigurationExtension;

//  Forward declaration of class tt__RecordingJobSource.
class tt__RecordingJobSource;

//  Forward declaration of class tt__RecordingJobSourceExtension.
class tt__RecordingJobSourceExtension;

//  Forward declaration of class tt__RecordingJobTrack.
class tt__RecordingJobTrack;

//  Forward declaration of class tt__RecordingJobStateInformation.
class tt__RecordingJobStateInformation;

//  Forward declaration of class tt__RecordingJobStateInformationExtension.
class tt__RecordingJobStateInformationExtension;

//  Forward declaration of class tt__RecordingJobStateSource.
class tt__RecordingJobStateSource;

//  Forward declaration of class tt__RecordingJobStateTracks.
class tt__RecordingJobStateTracks;

//  Forward declaration of class tt__RecordingJobStateTrack.
class tt__RecordingJobStateTrack;

//  Forward declaration of class tt__GetRecordingJobsResponseItem.
class tt__GetRecordingJobsResponseItem;

//  Forward declaration of class tt__ReplayConfiguration.
class tt__ReplayConfiguration;

//  Forward declaration of class tt__AnalyticsEngine.
class tt__AnalyticsEngine;

//  Forward declaration of class tt__AnalyticsDeviceEngineConfiguration.
class tt__AnalyticsDeviceEngineConfiguration;

//  Forward declaration of class tt__AnalyticsDeviceEngineConfigurationExtension.
class tt__AnalyticsDeviceEngineConfigurationExtension;

//  Forward declaration of class tt__EngineConfiguration.
class tt__EngineConfiguration;

//  Forward declaration of class tt__AnalyticsEngineInputInfo.
class tt__AnalyticsEngineInputInfo;

//  Forward declaration of class tt__AnalyticsEngineInputInfoExtension.
class tt__AnalyticsEngineInputInfoExtension;

//  Forward declaration of class tt__AnalyticsEngineInput.
class tt__AnalyticsEngineInput;

//  Forward declaration of class tt__SourceIdentification.
class tt__SourceIdentification;

//  Forward declaration of class tt__SourceIdentificationExtension.
class tt__SourceIdentificationExtension;

//  Forward declaration of class tt__MetadataInput.
class tt__MetadataInput;

//  Forward declaration of class tt__MetadataInputExtension.
class tt__MetadataInputExtension;

//  Forward declaration of class tt__AnalyticsEngineControl.
class tt__AnalyticsEngineControl;

//  Forward declaration of class tt__AnalyticsStateInformation.
class tt__AnalyticsStateInformation;

//  Forward declaration of class tt__AnalyticsState.
class tt__AnalyticsState;

//  Forward declaration of class tt__ActionEngineEventPayload.
class tt__ActionEngineEventPayload;

//  Forward declaration of class tt__ActionEngineEventPayloadExtension.
class tt__ActionEngineEventPayloadExtension;

//  Forward declaration of class tt__AudioClassCandidate.
class tt__AudioClassCandidate;

//  Forward declaration of class tt__AudioClassDescriptor.
class tt__AudioClassDescriptor;

//  Forward declaration of class tt__AudioClassDescriptorExtension.
class tt__AudioClassDescriptorExtension;

//  Forward declaration of class tt__ActiveConnection.
class tt__ActiveConnection;

//  Forward declaration of class tt__ProfileStatus.
class tt__ProfileStatus;

//  Forward declaration of class tt__ProfileStatusExtension.
class tt__ProfileStatusExtension;

//  Forward declaration of class tt__OSDReference.
class tt__OSDReference;

//  Forward declaration of class tt__OSDPosConfiguration.
class tt__OSDPosConfiguration;

//  Forward declaration of class tt__OSDPosConfigurationExtension.
class tt__OSDPosConfigurationExtension;

//  Forward declaration of class tt__OSDColor.
class tt__OSDColor;

//  Forward declaration of class tt__OSDTextConfiguration.
class tt__OSDTextConfiguration;

//  Forward declaration of class tt__OSDTextConfigurationExtension.
class tt__OSDTextConfigurationExtension;

//  Forward declaration of class tt__OSDImgConfiguration.
class tt__OSDImgConfiguration;

//  Forward declaration of class tt__OSDImgConfigurationExtension.
class tt__OSDImgConfigurationExtension;

//  Forward declaration of class tt__ColorspaceRange.
class tt__ColorspaceRange;

//  Forward declaration of class tt__ColorOptions.
class tt__ColorOptions;

//  Forward declaration of class tt__OSDColorOptions.
class tt__OSDColorOptions;

//  Forward declaration of class tt__OSDColorOptionsExtension.
class tt__OSDColorOptionsExtension;

//  Forward declaration of class tt__OSDTextOptions.
class tt__OSDTextOptions;

//  Forward declaration of class tt__OSDTextOptionsExtension.
class tt__OSDTextOptionsExtension;

//  Forward declaration of class tt__OSDImgOptions.
class tt__OSDImgOptions;

//  Forward declaration of class tt__OSDImgOptionsExtension.
class tt__OSDImgOptionsExtension;

//  Forward declaration of class tt__OSDConfiguration.
class tt__OSDConfiguration;

//  Forward declaration of class tt__OSDConfigurationExtension.
class tt__OSDConfigurationExtension;

//  Forward declaration of class tt__MaximumNumberOfOSDs.
class tt__MaximumNumberOfOSDs;

//  Forward declaration of class tt__OSDConfigurationOptions.
class tt__OSDConfigurationOptions;

//  Forward declaration of class tt__OSDConfigurationOptionsExtension.
class tt__OSDConfigurationOptionsExtension;

//  Forward declaration of class tt__FileProgress.
class tt__FileProgress;

//  Forward declaration of class tt__ArrayOfFileProgress.
class tt__ArrayOfFileProgress;

//  Forward declaration of class tt__ArrayOfFileProgressExtension.
class tt__ArrayOfFileProgressExtension;

//  Forward declaration of class tt__StorageReferencePath.
class tt__StorageReferencePath;

//  Forward declaration of class tt__StorageReferencePathExtension.
class tt__StorageReferencePathExtension;

//  Forward declaration of class tt__IntRange.
class tt__IntRange;

//  Forward declaration of class tt__Vector2D.
class tt__Vector2D;

//  Forward declaration of class tt__Vector1D.
class tt__Vector1D;

//  Forward declaration of class tt__PTZVector.
class tt__PTZVector;

//  Forward declaration of class tt__PTZStatus.
class tt__PTZStatus;

//  Forward declaration of class tt__PTZMoveStatus.
class tt__PTZMoveStatus;

//  Forward declaration of class tt__Vector.
class tt__Vector;

//  Forward declaration of class tt__Rectangle.
class tt__Rectangle;

//  Forward declaration of class tt__Polygon.
class tt__Polygon;

//  Forward declaration of class tt__Color.
class tt__Color;

//  Forward declaration of class tt__ColorCovariance.
class tt__ColorCovariance;

//  Forward declaration of class tt__ColorDescriptor.
class tt__ColorDescriptor;

//  Forward declaration of class tt__Transformation.
class tt__Transformation;

//  Forward declaration of class tt__TransformationExtension.
class tt__TransformationExtension;

//  Forward declaration of class tt__GeoLocation.
class tt__GeoLocation;

//  Forward declaration of class tt__GeoOrientation.
class tt__GeoOrientation;

//  Forward declaration of class tt__LocalLocation.
class tt__LocalLocation;

//  Forward declaration of class tt__LocalOrientation.
class tt__LocalOrientation;

//  Forward declaration of class tt__LocationEntity.
class tt__LocationEntity;

//  Forward declaration of class _tt__StringItems.
class _tt__StringItems;

//  Forward declaration of class _tt__Message.
class _tt__Message;

//  Forward declaration of class wsnt__QueryExpressionType.
class wsnt__QueryExpressionType;

//  Forward declaration of class wsnt__TopicExpressionType.
class wsnt__TopicExpressionType;

//  Forward declaration of class wsnt__FilterType.
class wsnt__FilterType;

//  Forward declaration of class wsnt__SubscriptionPolicyType.
class wsnt__SubscriptionPolicyType;

//  Forward declaration of class wsnt__NotificationMessageHolderType.
class wsnt__NotificationMessageHolderType;

//  Forward declaration of class wsnt__SubscribeCreationFailedFaultType.
class wsnt__SubscribeCreationFailedFaultType;

//  Forward declaration of class wsnt__InvalidFilterFaultType.
class wsnt__InvalidFilterFaultType;

//  Forward declaration of class wsnt__TopicExpressionDialectUnknownFaultType.
class wsnt__TopicExpressionDialectUnknownFaultType;

//  Forward declaration of class wsnt__InvalidTopicExpressionFaultType.
class wsnt__InvalidTopicExpressionFaultType;

//  Forward declaration of class wsnt__TopicNotSupportedFaultType.
class wsnt__TopicNotSupportedFaultType;

//  Forward declaration of class wsnt__MultipleTopicsSpecifiedFaultType.
class wsnt__MultipleTopicsSpecifiedFaultType;

//  Forward declaration of class wsnt__InvalidProducerPropertiesExpressionFaultType.
class wsnt__InvalidProducerPropertiesExpressionFaultType;

//  Forward declaration of class wsnt__InvalidMessageContentExpressionFaultType.
class wsnt__InvalidMessageContentExpressionFaultType;

//  Forward declaration of class wsnt__UnrecognizedPolicyRequestFaultType.
class wsnt__UnrecognizedPolicyRequestFaultType;

//  Forward declaration of class wsnt__UnsupportedPolicyRequestFaultType.
class wsnt__UnsupportedPolicyRequestFaultType;

//  Forward declaration of class wsnt__NotifyMessageNotSupportedFaultType.
class wsnt__NotifyMessageNotSupportedFaultType;

//  Forward declaration of class wsnt__UnacceptableInitialTerminationTimeFaultType.
class wsnt__UnacceptableInitialTerminationTimeFaultType;

//  Forward declaration of class wsnt__NoCurrentMessageOnTopicFaultType.
class wsnt__NoCurrentMessageOnTopicFaultType;

//  Forward declaration of class wsnt__UnableToGetMessagesFaultType.
class wsnt__UnableToGetMessagesFaultType;

//  Forward declaration of class wsnt__UnableToDestroyPullPointFaultType.
class wsnt__UnableToDestroyPullPointFaultType;

//  Forward declaration of class wsnt__UnableToCreatePullPointFaultType.
class wsnt__UnableToCreatePullPointFaultType;

//  Forward declaration of class wsnt__UnacceptableTerminationTimeFaultType.
class wsnt__UnacceptableTerminationTimeFaultType;

//  Forward declaration of class wsnt__UnableToDestroySubscriptionFaultType.
class wsnt__UnableToDestroySubscriptionFaultType;

//  Forward declaration of class wsnt__PauseFailedFaultType.
class wsnt__PauseFailedFaultType;

//  Forward declaration of class wsnt__ResumeFailedFaultType.
class wsnt__ResumeFailedFaultType;

//  Forward declaration of class _wsnt__NotificationProducerRP.
class _wsnt__NotificationProducerRP;

//  Forward declaration of class _wsnt__SubscriptionManagerRP.
class _wsnt__SubscriptionManagerRP;

//  Forward declaration of class _wsnt__Notify.
class _wsnt__Notify;

//  Forward declaration of class _wsnt__UseRaw.
class _wsnt__UseRaw;

//  Forward declaration of class _wsnt__Subscribe.
class _wsnt__Subscribe;

//  Forward declaration of class _wsnt__SubscribeResponse.
class _wsnt__SubscribeResponse;

//  Forward declaration of class _wsnt__GetCurrentMessage.
class _wsnt__GetCurrentMessage;

//  Forward declaration of class _wsnt__GetCurrentMessageResponse.
class _wsnt__GetCurrentMessageResponse;

//  Forward declaration of class _wsnt__GetMessages.
class _wsnt__GetMessages;

//  Forward declaration of class _wsnt__GetMessagesResponse.
class _wsnt__GetMessagesResponse;

//  Forward declaration of class _wsnt__DestroyPullPoint.
class _wsnt__DestroyPullPoint;

//  Forward declaration of class _wsnt__DestroyPullPointResponse.
class _wsnt__DestroyPullPointResponse;

//  Forward declaration of class _wsnt__CreatePullPoint.
class _wsnt__CreatePullPoint;

//  Forward declaration of class _wsnt__CreatePullPointResponse.
class _wsnt__CreatePullPointResponse;

//  Forward declaration of class _wsnt__Renew.
class _wsnt__Renew;

//  Forward declaration of class _wsnt__RenewResponse.
class _wsnt__RenewResponse;

//  Forward declaration of class _wsnt__Unsubscribe.
class _wsnt__Unsubscribe;

//  Forward declaration of class _wsnt__UnsubscribeResponse.
class _wsnt__UnsubscribeResponse;

//  Forward declaration of class _wsnt__PauseSubscription.
class _wsnt__PauseSubscription;

//  Forward declaration of class _wsnt__PauseSubscriptionResponse.
class _wsnt__PauseSubscriptionResponse;

//  Forward declaration of class _wsnt__ResumeSubscription.
class _wsnt__ResumeSubscription;

//  Forward declaration of class _wsnt__ResumeSubscriptionResponse.
class _wsnt__ResumeSubscriptionResponse;

//  Forward declaration of class wsrfbf__BaseFaultType.
class wsrfbf__BaseFaultType;

//  Forward declaration of class wstop__Documentation.
class wstop__Documentation;

//  Forward declaration of class wstop__ExtensibleDocumented.
class wstop__ExtensibleDocumented;

//  Forward declaration of class wstop__QueryExpressionType.
class wstop__QueryExpressionType;

//  Forward declaration of class wstop__TopicNamespaceType.
class wstop__TopicNamespaceType;

//  Forward declaration of class wstop__TopicType.
class wstop__TopicType;

//  Forward declaration of class wstop__TopicSetType.
class wstop__TopicSetType;

//  Forward declaration of class tds__Service.
class tds__Service;

//  Forward declaration of class tds__DeviceServiceCapabilities.
class tds__DeviceServiceCapabilities;

//  Forward declaration of class tds__NetworkCapabilities.
class tds__NetworkCapabilities;

//  Forward declaration of class tds__SecurityCapabilities.
class tds__SecurityCapabilities;

//  Forward declaration of class tds__SystemCapabilities.
class tds__SystemCapabilities;

//  Forward declaration of class tds__MiscCapabilities.
class tds__MiscCapabilities;

//  Forward declaration of class tds__UserCredential.
class tds__UserCredential;

//  Forward declaration of class tds__StorageConfigurationData.
class tds__StorageConfigurationData;

//  Forward declaration of class tds__StorageConfiguration.
class tds__StorageConfiguration;

//  Forward declaration of class _tds__GetServices.
class _tds__GetServices;

//  Forward declaration of class _tds__GetServicesResponse.
class _tds__GetServicesResponse;

//  Forward declaration of class _tds__GetServiceCapabilities.
class _tds__GetServiceCapabilities;

//  Forward declaration of class _tds__GetServiceCapabilitiesResponse.
class _tds__GetServiceCapabilitiesResponse;

//  Forward declaration of class _tds__GetDeviceInformation.
class _tds__GetDeviceInformation;

//  Forward declaration of class _tds__GetDeviceInformationResponse.
class _tds__GetDeviceInformationResponse;

//  Forward declaration of class _tds__SetSystemDateAndTime.
class _tds__SetSystemDateAndTime;

//  Forward declaration of class _tds__SetSystemDateAndTimeResponse.
class _tds__SetSystemDateAndTimeResponse;

//  Forward declaration of class _tds__GetSystemDateAndTime.
class _tds__GetSystemDateAndTime;

//  Forward declaration of class _tds__GetSystemDateAndTimeResponse.
class _tds__GetSystemDateAndTimeResponse;

//  Forward declaration of class _tds__SetSystemFactoryDefault.
class _tds__SetSystemFactoryDefault;

//  Forward declaration of class _tds__SetSystemFactoryDefaultResponse.
class _tds__SetSystemFactoryDefaultResponse;

//  Forward declaration of class _tds__UpgradeSystemFirmware.
class _tds__UpgradeSystemFirmware;

//  Forward declaration of class _tds__UpgradeSystemFirmwareResponse.
class _tds__UpgradeSystemFirmwareResponse;

//  Forward declaration of class _tds__SystemReboot.
class _tds__SystemReboot;

//  Forward declaration of class _tds__SystemRebootResponse.
class _tds__SystemRebootResponse;

//  Forward declaration of class _tds__RestoreSystem.
class _tds__RestoreSystem;

//  Forward declaration of class _tds__RestoreSystemResponse.
class _tds__RestoreSystemResponse;

//  Forward declaration of class _tds__GetSystemBackup.
class _tds__GetSystemBackup;

//  Forward declaration of class _tds__GetSystemBackupResponse.
class _tds__GetSystemBackupResponse;

//  Forward declaration of class _tds__GetSystemSupportInformation.
class _tds__GetSystemSupportInformation;

//  Forward declaration of class _tds__GetSystemSupportInformationResponse.
class _tds__GetSystemSupportInformationResponse;

//  Forward declaration of class _tds__GetSystemLog.
class _tds__GetSystemLog;

//  Forward declaration of class _tds__GetSystemLogResponse.
class _tds__GetSystemLogResponse;

//  Forward declaration of class _tds__GetScopes.
class _tds__GetScopes;

//  Forward declaration of class _tds__GetScopesResponse.
class _tds__GetScopesResponse;

//  Forward declaration of class _tds__SetScopes.
class _tds__SetScopes;

//  Forward declaration of class _tds__SetScopesResponse.
class _tds__SetScopesResponse;

//  Forward declaration of class _tds__AddScopes.
class _tds__AddScopes;

//  Forward declaration of class _tds__AddScopesResponse.
class _tds__AddScopesResponse;

//  Forward declaration of class _tds__RemoveScopes.
class _tds__RemoveScopes;

//  Forward declaration of class _tds__RemoveScopesResponse.
class _tds__RemoveScopesResponse;

//  Forward declaration of class _tds__GetDiscoveryMode.
class _tds__GetDiscoveryMode;

//  Forward declaration of class _tds__GetDiscoveryModeResponse.
class _tds__GetDiscoveryModeResponse;

//  Forward declaration of class _tds__SetDiscoveryMode.
class _tds__SetDiscoveryMode;

//  Forward declaration of class _tds__SetDiscoveryModeResponse.
class _tds__SetDiscoveryModeResponse;

//  Forward declaration of class _tds__GetRemoteDiscoveryMode.
class _tds__GetRemoteDiscoveryMode;

//  Forward declaration of class _tds__GetRemoteDiscoveryModeResponse.
class _tds__GetRemoteDiscoveryModeResponse;

//  Forward declaration of class _tds__SetRemoteDiscoveryMode.
class _tds__SetRemoteDiscoveryMode;

//  Forward declaration of class _tds__SetRemoteDiscoveryModeResponse.
class _tds__SetRemoteDiscoveryModeResponse;

//  Forward declaration of class _tds__GetDPAddresses.
class _tds__GetDPAddresses;

//  Forward declaration of class _tds__GetDPAddressesResponse.
class _tds__GetDPAddressesResponse;

//  Forward declaration of class _tds__SetDPAddresses.
class _tds__SetDPAddresses;

//  Forward declaration of class _tds__SetDPAddressesResponse.
class _tds__SetDPAddressesResponse;

//  Forward declaration of class _tds__GetEndpointReference.
class _tds__GetEndpointReference;

//  Forward declaration of class _tds__GetEndpointReferenceResponse.
class _tds__GetEndpointReferenceResponse;

//  Forward declaration of class _tds__GetRemoteUser.
class _tds__GetRemoteUser;

//  Forward declaration of class _tds__GetRemoteUserResponse.
class _tds__GetRemoteUserResponse;

//  Forward declaration of class _tds__SetRemoteUser.
class _tds__SetRemoteUser;

//  Forward declaration of class _tds__SetRemoteUserResponse.
class _tds__SetRemoteUserResponse;

//  Forward declaration of class _tds__GetUsers.
class _tds__GetUsers;

//  Forward declaration of class _tds__GetUsersResponse.
class _tds__GetUsersResponse;

//  Forward declaration of class _tds__CreateUsers.
class _tds__CreateUsers;

//  Forward declaration of class _tds__CreateUsersResponse.
class _tds__CreateUsersResponse;

//  Forward declaration of class _tds__DeleteUsers.
class _tds__DeleteUsers;

//  Forward declaration of class _tds__DeleteUsersResponse.
class _tds__DeleteUsersResponse;

//  Forward declaration of class _tds__SetUser.
class _tds__SetUser;

//  Forward declaration of class _tds__SetUserResponse.
class _tds__SetUserResponse;

//  Forward declaration of class _tds__GetWsdlUrl.
class _tds__GetWsdlUrl;

//  Forward declaration of class _tds__GetWsdlUrlResponse.
class _tds__GetWsdlUrlResponse;

//  Forward declaration of class _tds__GetCapabilities.
class _tds__GetCapabilities;

//  Forward declaration of class _tds__GetCapabilitiesResponse.
class _tds__GetCapabilitiesResponse;

//  Forward declaration of class _tds__GetHostname.
class _tds__GetHostname;

//  Forward declaration of class _tds__GetHostnameResponse.
class _tds__GetHostnameResponse;

//  Forward declaration of class _tds__SetHostname.
class _tds__SetHostname;

//  Forward declaration of class _tds__SetHostnameResponse.
class _tds__SetHostnameResponse;

//  Forward declaration of class _tds__SetHostnameFromDHCP.
class _tds__SetHostnameFromDHCP;

//  Forward declaration of class _tds__SetHostnameFromDHCPResponse.
class _tds__SetHostnameFromDHCPResponse;

//  Forward declaration of class _tds__GetDNS.
class _tds__GetDNS;

//  Forward declaration of class _tds__GetDNSResponse.
class _tds__GetDNSResponse;

//  Forward declaration of class _tds__SetDNS.
class _tds__SetDNS;

//  Forward declaration of class _tds__SetDNSResponse.
class _tds__SetDNSResponse;

//  Forward declaration of class _tds__GetNTP.
class _tds__GetNTP;

//  Forward declaration of class _tds__GetNTPResponse.
class _tds__GetNTPResponse;

//  Forward declaration of class _tds__SetNTP.
class _tds__SetNTP;

//  Forward declaration of class _tds__SetNTPResponse.
class _tds__SetNTPResponse;

//  Forward declaration of class _tds__GetDynamicDNS.
class _tds__GetDynamicDNS;

//  Forward declaration of class _tds__GetDynamicDNSResponse.
class _tds__GetDynamicDNSResponse;

//  Forward declaration of class _tds__SetDynamicDNS.
class _tds__SetDynamicDNS;

//  Forward declaration of class _tds__SetDynamicDNSResponse.
class _tds__SetDynamicDNSResponse;

//  Forward declaration of class _tds__GetNetworkInterfaces.
class _tds__GetNetworkInterfaces;

//  Forward declaration of class _tds__GetNetworkInterfacesResponse.
class _tds__GetNetworkInterfacesResponse;

//  Forward declaration of class _tds__SetNetworkInterfaces.
class _tds__SetNetworkInterfaces;

//  Forward declaration of class _tds__SetNetworkInterfacesResponse.
class _tds__SetNetworkInterfacesResponse;

//  Forward declaration of class _tds__GetNetworkProtocols.
class _tds__GetNetworkProtocols;

//  Forward declaration of class _tds__GetNetworkProtocolsResponse.
class _tds__GetNetworkProtocolsResponse;

//  Forward declaration of class _tds__SetNetworkProtocols.
class _tds__SetNetworkProtocols;

//  Forward declaration of class _tds__SetNetworkProtocolsResponse.
class _tds__SetNetworkProtocolsResponse;

//  Forward declaration of class _tds__GetNetworkDefaultGateway.
class _tds__GetNetworkDefaultGateway;

//  Forward declaration of class _tds__GetNetworkDefaultGatewayResponse.
class _tds__GetNetworkDefaultGatewayResponse;

//  Forward declaration of class _tds__SetNetworkDefaultGateway.
class _tds__SetNetworkDefaultGateway;

//  Forward declaration of class _tds__SetNetworkDefaultGatewayResponse.
class _tds__SetNetworkDefaultGatewayResponse;

//  Forward declaration of class _tds__GetZeroConfiguration.
class _tds__GetZeroConfiguration;

//  Forward declaration of class _tds__GetZeroConfigurationResponse.
class _tds__GetZeroConfigurationResponse;

//  Forward declaration of class _tds__SetZeroConfiguration.
class _tds__SetZeroConfiguration;

//  Forward declaration of class _tds__SetZeroConfigurationResponse.
class _tds__SetZeroConfigurationResponse;

//  Forward declaration of class _tds__GetIPAddressFilter.
class _tds__GetIPAddressFilter;

//  Forward declaration of class _tds__GetIPAddressFilterResponse.
class _tds__GetIPAddressFilterResponse;

//  Forward declaration of class _tds__SetIPAddressFilter.
class _tds__SetIPAddressFilter;

//  Forward declaration of class _tds__SetIPAddressFilterResponse.
class _tds__SetIPAddressFilterResponse;

//  Forward declaration of class _tds__AddIPAddressFilter.
class _tds__AddIPAddressFilter;

//  Forward declaration of class _tds__AddIPAddressFilterResponse.
class _tds__AddIPAddressFilterResponse;

//  Forward declaration of class _tds__RemoveIPAddressFilter.
class _tds__RemoveIPAddressFilter;

//  Forward declaration of class _tds__RemoveIPAddressFilterResponse.
class _tds__RemoveIPAddressFilterResponse;

//  Forward declaration of class _tds__GetAccessPolicy.
class _tds__GetAccessPolicy;

//  Forward declaration of class _tds__GetAccessPolicyResponse.
class _tds__GetAccessPolicyResponse;

//  Forward declaration of class _tds__SetAccessPolicy.
class _tds__SetAccessPolicy;

//  Forward declaration of class _tds__SetAccessPolicyResponse.
class _tds__SetAccessPolicyResponse;

//  Forward declaration of class _tds__CreateCertificate.
class _tds__CreateCertificate;

//  Forward declaration of class _tds__CreateCertificateResponse.
class _tds__CreateCertificateResponse;

//  Forward declaration of class _tds__GetCertificates.
class _tds__GetCertificates;

//  Forward declaration of class _tds__GetCertificatesResponse.
class _tds__GetCertificatesResponse;

//  Forward declaration of class _tds__GetCertificatesStatus.
class _tds__GetCertificatesStatus;

//  Forward declaration of class _tds__GetCertificatesStatusResponse.
class _tds__GetCertificatesStatusResponse;

//  Forward declaration of class _tds__SetCertificatesStatus.
class _tds__SetCertificatesStatus;

//  Forward declaration of class _tds__SetCertificatesStatusResponse.
class _tds__SetCertificatesStatusResponse;

//  Forward declaration of class _tds__DeleteCertificates.
class _tds__DeleteCertificates;

//  Forward declaration of class _tds__DeleteCertificatesResponse.
class _tds__DeleteCertificatesResponse;

//  Forward declaration of class _tds__GetPkcs10Request.
class _tds__GetPkcs10Request;

//  Forward declaration of class _tds__GetPkcs10RequestResponse.
class _tds__GetPkcs10RequestResponse;

//  Forward declaration of class _tds__LoadCertificates.
class _tds__LoadCertificates;

//  Forward declaration of class _tds__LoadCertificatesResponse.
class _tds__LoadCertificatesResponse;

//  Forward declaration of class _tds__GetClientCertificateMode.
class _tds__GetClientCertificateMode;

//  Forward declaration of class _tds__GetClientCertificateModeResponse.
class _tds__GetClientCertificateModeResponse;

//  Forward declaration of class _tds__SetClientCertificateMode.
class _tds__SetClientCertificateMode;

//  Forward declaration of class _tds__SetClientCertificateModeResponse.
class _tds__SetClientCertificateModeResponse;

//  Forward declaration of class _tds__GetCACertificates.
class _tds__GetCACertificates;

//  Forward declaration of class _tds__GetCACertificatesResponse.
class _tds__GetCACertificatesResponse;

//  Forward declaration of class _tds__LoadCertificateWithPrivateKey.
class _tds__LoadCertificateWithPrivateKey;

//  Forward declaration of class _tds__LoadCertificateWithPrivateKeyResponse.
class _tds__LoadCertificateWithPrivateKeyResponse;

//  Forward declaration of class _tds__GetCertificateInformation.
class _tds__GetCertificateInformation;

//  Forward declaration of class _tds__GetCertificateInformationResponse.
class _tds__GetCertificateInformationResponse;

//  Forward declaration of class _tds__LoadCACertificates.
class _tds__LoadCACertificates;

//  Forward declaration of class _tds__LoadCACertificatesResponse.
class _tds__LoadCACertificatesResponse;

//  Forward declaration of class _tds__CreateDot1XConfiguration.
class _tds__CreateDot1XConfiguration;

//  Forward declaration of class _tds__CreateDot1XConfigurationResponse.
class _tds__CreateDot1XConfigurationResponse;

//  Forward declaration of class _tds__SetDot1XConfiguration.
class _tds__SetDot1XConfiguration;

//  Forward declaration of class _tds__SetDot1XConfigurationResponse.
class _tds__SetDot1XConfigurationResponse;

//  Forward declaration of class _tds__GetDot1XConfiguration.
class _tds__GetDot1XConfiguration;

//  Forward declaration of class _tds__GetDot1XConfigurationResponse.
class _tds__GetDot1XConfigurationResponse;

//  Forward declaration of class _tds__GetDot1XConfigurations.
class _tds__GetDot1XConfigurations;

//  Forward declaration of class _tds__GetDot1XConfigurationsResponse.
class _tds__GetDot1XConfigurationsResponse;

//  Forward declaration of class _tds__DeleteDot1XConfiguration.
class _tds__DeleteDot1XConfiguration;

//  Forward declaration of class _tds__DeleteDot1XConfigurationResponse.
class _tds__DeleteDot1XConfigurationResponse;

//  Forward declaration of class _tds__GetRelayOutputs.
class _tds__GetRelayOutputs;

//  Forward declaration of class _tds__GetRelayOutputsResponse.
class _tds__GetRelayOutputsResponse;

//  Forward declaration of class _tds__SetRelayOutputSettings.
class _tds__SetRelayOutputSettings;

//  Forward declaration of class _tds__SetRelayOutputSettingsResponse.
class _tds__SetRelayOutputSettingsResponse;

//  Forward declaration of class _tds__SetRelayOutputState.
class _tds__SetRelayOutputState;

//  Forward declaration of class _tds__SetRelayOutputStateResponse.
class _tds__SetRelayOutputStateResponse;

//  Forward declaration of class _tds__SendAuxiliaryCommand.
class _tds__SendAuxiliaryCommand;

//  Forward declaration of class _tds__SendAuxiliaryCommandResponse.
class _tds__SendAuxiliaryCommandResponse;

//  Forward declaration of class _tds__GetDot11Capabilities.
class _tds__GetDot11Capabilities;

//  Forward declaration of class _tds__GetDot11CapabilitiesResponse.
class _tds__GetDot11CapabilitiesResponse;

//  Forward declaration of class _tds__GetDot11Status.
class _tds__GetDot11Status;

//  Forward declaration of class _tds__GetDot11StatusResponse.
class _tds__GetDot11StatusResponse;

//  Forward declaration of class _tds__ScanAvailableDot11Networks.
class _tds__ScanAvailableDot11Networks;

//  Forward declaration of class _tds__ScanAvailableDot11NetworksResponse.
class _tds__ScanAvailableDot11NetworksResponse;

//  Forward declaration of class _tds__GetSystemUris.
class _tds__GetSystemUris;

//  Forward declaration of class _tds__GetSystemUrisResponse.
class _tds__GetSystemUrisResponse;

//  Forward declaration of class _tds__StartFirmwareUpgrade.
class _tds__StartFirmwareUpgrade;

//  Forward declaration of class _tds__StartFirmwareUpgradeResponse.
class _tds__StartFirmwareUpgradeResponse;

//  Forward declaration of class _tds__StartSystemRestore.
class _tds__StartSystemRestore;

//  Forward declaration of class _tds__StartSystemRestoreResponse.
class _tds__StartSystemRestoreResponse;

//  Forward declaration of class _tds__GetStorageConfigurations.
class _tds__GetStorageConfigurations;

//  Forward declaration of class _tds__GetStorageConfigurationsResponse.
class _tds__GetStorageConfigurationsResponse;

//  Forward declaration of class _tds__CreateStorageConfiguration.
class _tds__CreateStorageConfiguration;

//  Forward declaration of class _tds__CreateStorageConfigurationResponse.
class _tds__CreateStorageConfigurationResponse;

//  Forward declaration of class _tds__GetStorageConfiguration.
class _tds__GetStorageConfiguration;

//  Forward declaration of class _tds__GetStorageConfigurationResponse.
class _tds__GetStorageConfigurationResponse;

//  Forward declaration of class _tds__SetStorageConfiguration.
class _tds__SetStorageConfiguration;

//  Forward declaration of class _tds__SetStorageConfigurationResponse.
class _tds__SetStorageConfigurationResponse;

//  Forward declaration of class _tds__DeleteStorageConfiguration.
class _tds__DeleteStorageConfiguration;

//  Forward declaration of class _tds__DeleteStorageConfigurationResponse.
class _tds__DeleteStorageConfigurationResponse;

//  Forward declaration of class _tds__GetGeoLocation.
class _tds__GetGeoLocation;

//  Forward declaration of class _tds__GetGeoLocationResponse.
class _tds__GetGeoLocationResponse;

//  Forward declaration of class _tds__SetGeoLocation.
class _tds__SetGeoLocation;

//  Forward declaration of class _tds__SetGeoLocationResponse.
class _tds__SetGeoLocationResponse;

//  Forward declaration of class _tds__DeleteGeoLocation.
class _tds__DeleteGeoLocation;

//  Forward declaration of class _tds__DeleteGeoLocationResponse.
class _tds__DeleteGeoLocationResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/schema":IntAttrList is a simpleType containing a whitespace separated list of xs:int.
///
typedef std::string tt__IntAttrList;

/// @brief "http://www.onvif.org/ver10/schema":FloatAttrList is a simpleType containing a whitespace separated list of xs:float.
///
typedef std::string tt__FloatAttrList;

/// @brief "http://www.onvif.org/ver10/schema":StringAttrList is a simpleType containing a whitespace separated list of xs:string.
///
typedef std::string tt__StringAttrList;

/// @brief "http://www.onvif.org/ver10/schema":StringList is a simpleType containing a whitespace separated list of xs:string.
///
typedef std::string tt__StringList;

/// @brief "http://www.onvif.org/ver10/schema":ReferenceTokenList is a simpleType containing a whitespace separated list of "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef std::string tt__ReferenceTokenList;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Union of values from member types "xsd:dateTime xsd:duration".
typedef std::string wsnt__AbsoluteOrRelativeTimeType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/device/wsdl":EAPMethodTypes is a simpleType containing a whitespace separated list of xs:int.
///
typedef std::string tds__EAPMethodTypes;

/// @brief "http://www.onvif.org/ver10/schema":Name is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..64.
typedef std::string tt__Name:64;

/// @brief A class wrapper.
///
class tt__Name__ : public xsd__anyType
{ public:
    tt__Name                             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RotateMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__RotateMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__RotateMode
{
/// <PRE><BLOCKQUOTE>
///   Enable the Rotate feature. Degree of rotation is specified Degree parameter.
/// </BLOCKQUOTE></PRE>
	tt__RotateMode__OFF,	///< xs:string value="OFF"
/// <PRE><BLOCKQUOTE>
///   Disable the Rotate feature.
/// </BLOCKQUOTE></PRE>
	tt__RotateMode__ON,	///< xs:string value="ON"
/// <PRE><BLOCKQUOTE>
///   Rotate feature is automatically activated by the device.
/// </BLOCKQUOTE></PRE>
	tt__RotateMode__AUTO,	///< xs:string value="AUTO"
};

/// @brief A class wrapper.
///
class tt__RotateMode_ : public xsd__anyType
{ public:
    enum tt__RotateMode                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientationMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__SceneOrientationMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__SceneOrientationMode
{
	tt__SceneOrientationMode__MANUAL,	///< xs:string value="MANUAL"
	tt__SceneOrientationMode__AUTO,	///< xs:string value="AUTO"
};

/// @brief A class wrapper.
///
class tt__SceneOrientationMode_ : public xsd__anyType
{ public:
    enum tt__SceneOrientationMode        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientationOption is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Defines the acceptable values for the Orientation element of the SceneOrientation type
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__SceneOrientationOption__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__SceneOrientationOption
{
	tt__SceneOrientationOption__Below,	///< xs:string value="Below"
	tt__SceneOrientationOption__Horizon,	///< xs:string value="Horizon"
	tt__SceneOrientationOption__Above,	///< xs:string value="Above"
};

/// @brief A class wrapper.
///
class tt__SceneOrientationOption_ : public xsd__anyType
{ public:
    enum tt__SceneOrientationOption      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ViewModes is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Source view modes supported by device.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__ViewModes__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ViewModes
{
/// <PRE><BLOCKQUOTE>
///   Undewarped viewmode from device supporting fisheye lens.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003aFisheye,	///< xs:string value="tt:Fisheye"
/// <PRE><BLOCKQUOTE>
///   360 degree panoramic view.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003a360Panorama,	///< xs:string value="tt:360Panorama"
/// <PRE><BLOCKQUOTE>
///   180 degree panoramic view.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003a180Panorama,	///< xs:string value="tt:180Panorama"
/// <PRE><BLOCKQUOTE>
///   View mode combining four streams in single Quad, eg., applicable for devices supporting four heads.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003aQuad,	///< xs:string value="tt:Quad"
/// <PRE><BLOCKQUOTE>
///   Unaltered view from the sensor.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003aOriginal,	///< xs:string value="tt:Original"
/// <PRE><BLOCKQUOTE>
///   Viewmode combining the left side sensors, applicable for devices supporting multiple sensors.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003aLeftHalf,	///< xs:string value="tt:LeftHalf"
/// <PRE><BLOCKQUOTE>
///   Viewmode combining the right side sensors, applicable for devices supporting multiple sensors.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003aRightHalf,	///< xs:string value="tt:RightHalf"
/// <PRE><BLOCKQUOTE>
///   Dewarped view mode for device supporting fisheye lens.
/// </BLOCKQUOTE></PRE>
	tt__ViewModes__tt_x003aDewarp,	///< xs:string value="tt:Dewarp"
};

/// @brief A class wrapper.
///
class tt__ViewModes_ : public xsd__anyType
{ public:
    enum tt__ViewModes                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoding is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__VideoEncoding__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__VideoEncoding
{
	tt__VideoEncoding__JPEG,	///< xs:string value="JPEG"
	tt__VideoEncoding__MPEG4,	///< xs:string value="MPEG4"
	tt__VideoEncoding__H264,	///< xs:string value="H264"
};

/// @brief A class wrapper.
///
class tt__VideoEncoding_ : public xsd__anyType
{ public:
    enum tt__VideoEncoding               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Profile is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Mpeg4Profile__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Mpeg4Profile
{
	tt__Mpeg4Profile__SP,	///< xs:string value="SP"
	tt__Mpeg4Profile__ASP,	///< xs:string value="ASP"
};

/// @brief A class wrapper.
///
class tt__Mpeg4Profile_ : public xsd__anyType
{ public:
    enum tt__Mpeg4Profile                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":H264Profile is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__H264Profile__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__H264Profile
{
	tt__H264Profile__Baseline,	///< xs:string value="Baseline"
	tt__H264Profile__Main,	///< xs:string value="Main"
	tt__H264Profile__Extended,	///< xs:string value="Extended"
	tt__H264Profile__High,	///< xs:string value="High"
};

/// @brief A class wrapper.
///
class tt__H264Profile_ : public xsd__anyType
{ public:
    enum tt__H264Profile                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncodingMimeNames is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Video Media Subtypes as referenced by IANA (without the leading "video/" Video Media Type). See also <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__VideoEncodingMimeNames__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__VideoEncodingMimeNames
{
	tt__VideoEncodingMimeNames__JPEG,	///< xs:string value="JPEG"
	tt__VideoEncodingMimeNames__MPV4_ES,	///< xs:string value="MPV4-ES"
	tt__VideoEncodingMimeNames__H264,	///< xs:string value="H264"
	tt__VideoEncodingMimeNames__H265,	///< xs:string value="H265"
};

/// @brief A class wrapper.
///
class tt__VideoEncodingMimeNames_ : public xsd__anyType
{ public:
    enum tt__VideoEncodingMimeNames      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncodingProfiles is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__VideoEncodingProfiles__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__VideoEncodingProfiles
{
	tt__VideoEncodingProfiles__Simple,	///< xs:string value="Simple"
	tt__VideoEncodingProfiles__AdvancedSimple,	///< xs:string value="AdvancedSimple"
	tt__VideoEncodingProfiles__Baseline,	///< xs:string value="Baseline"
	tt__VideoEncodingProfiles__Main,	///< xs:string value="Main"
	tt__VideoEncodingProfiles__Main10,	///< xs:string value="Main10"
	tt__VideoEncodingProfiles__Extended,	///< xs:string value="Extended"
	tt__VideoEncodingProfiles__High,	///< xs:string value="High"
};

/// @brief A class wrapper.
///
class tt__VideoEncodingProfiles_ : public xsd__anyType
{ public:
    enum tt__VideoEncodingProfiles       __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoding is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__AudioEncoding__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__AudioEncoding
{
	tt__AudioEncoding__G711,	///< xs:string value="G711"
	tt__AudioEncoding__G726,	///< xs:string value="G726"
	tt__AudioEncoding__AAC,	///< xs:string value="AAC"
};

/// @brief A class wrapper.
///
class tt__AudioEncoding_ : public xsd__anyType
{ public:
    enum tt__AudioEncoding               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncodingMimeNames is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Audio Media Subtypes as referenced by IANA (without the leading "audio/" Audio Media Type). See also <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__AudioEncodingMimeNames__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__AudioEncodingMimeNames
{
	tt__AudioEncodingMimeNames__PCMU,	///< xs:string value="PCMU"
	tt__AudioEncodingMimeNames__G726,	///< xs:string value="G726"
	tt__AudioEncodingMimeNames__MP4A_LATM,	///< xs:string value="MP4A-LATM"
	tt__AudioEncodingMimeNames__mpeg4_generic,	///< xs:string value="mpeg4-generic"
};

/// @brief A class wrapper.
///
class tt__AudioEncodingMimeNames_ : public xsd__anyType
{ public:
    enum tt__AudioEncodingMimeNames      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataCompressionType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__MetadataCompressionType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__MetadataCompressionType
{
	tt__MetadataCompressionType__None,	///< xs:string value="None"
	tt__MetadataCompressionType__GZIP,	///< xs:string value="GZIP"
	tt__MetadataCompressionType__EXI,	///< xs:string value="EXI"
};

/// @brief A class wrapper.
///
class tt__MetadataCompressionType_ : public xsd__anyType
{ public:
    enum tt__MetadataCompressionType     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":StreamType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__StreamType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__StreamType
{
	tt__StreamType__RTP_Unicast,	///< xs:string value="RTP-Unicast"
	tt__StreamType__RTP_Multicast,	///< xs:string value="RTP-Multicast"
};

/// @brief A class wrapper.
///
class tt__StreamType_ : public xsd__anyType
{ public:
    enum tt__StreamType                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TransportProtocol is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__TransportProtocol__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__TransportProtocol
{
	tt__TransportProtocol__UDP,	///< xs:string value="UDP"
/// <PRE><BLOCKQUOTE>
///   This value is deprecated.
/// </BLOCKQUOTE></PRE>
	tt__TransportProtocol__TCP,	///< xs:string value="TCP"
	tt__TransportProtocol__RTSP,	///< xs:string value="RTSP"
	tt__TransportProtocol__HTTP,	///< xs:string value="HTTP"
};

/// @brief A class wrapper.
///
class tt__TransportProtocol_ : public xsd__anyType
{ public:
    enum tt__TransportProtocol           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ScopeDefinition is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ScopeDefinition__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ScopeDefinition
{
	tt__ScopeDefinition__Fixed,	///< xs:string value="Fixed"
	tt__ScopeDefinition__Configurable,	///< xs:string value="Configurable"
};

/// @brief A class wrapper.
///
class tt__ScopeDefinition_ : public xsd__anyType
{ public:
    enum tt__ScopeDefinition             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DiscoveryMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__DiscoveryMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__DiscoveryMode
{
	tt__DiscoveryMode__Discoverable,	///< xs:string value="Discoverable"
	tt__DiscoveryMode__NonDiscoverable,	///< xs:string value="NonDiscoverable"
};

/// @brief A class wrapper.
///
class tt__DiscoveryMode_ : public xsd__anyType
{ public:
    enum tt__DiscoveryMode               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority is a simpleType restriction of XSD type xs:integer.
///
/// Value range is [0..31].
typedef xsd__integer tt__NetworkInterfaceConfigPriority;

/// @brief A class wrapper.
///
class tt__NetworkInterfaceConfigPriority__ : public xsd__anyType
{ public:
    tt__NetworkInterfaceConfigPriority   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Duplex is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Duplex__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Duplex
{
	tt__Duplex__Full,	///< xs:string value="Full"
	tt__Duplex__Half,	///< xs:string value="Half"
};

/// @brief A class wrapper.
///
class tt__Duplex_ : public xsd__anyType
{ public:
    enum tt__Duplex                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IANA-IfTypes is a simpleType restriction of XSD type xs:int.
///
/// <PRE><BLOCKQUOTE>
///   For valid numbers, please refer to http://www.iana.org/assignments/ianaiftype-mib.
/// </BLOCKQUOTE></PRE>
typedef int tt__IANA_IfTypes;

/// @brief A class wrapper.
///
class tt__IANA_IfTypes__ : public xsd__anyType
{ public:
    tt__IANA_IfTypes                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__IPv6DHCPConfiguration__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__IPv6DHCPConfiguration
{
	tt__IPv6DHCPConfiguration__Auto,	///< xs:string value="Auto"
	tt__IPv6DHCPConfiguration__Stateful,	///< xs:string value="Stateful"
	tt__IPv6DHCPConfiguration__Stateless,	///< xs:string value="Stateless"
	tt__IPv6DHCPConfiguration__Off,	///< xs:string value="Off"
};

/// @brief A class wrapper.
///
class tt__IPv6DHCPConfiguration_ : public xsd__anyType
{ public:
    enum tt__IPv6DHCPConfiguration       __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocolType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__NetworkProtocolType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__NetworkProtocolType
{
	tt__NetworkProtocolType__HTTP,	///< xs:string value="HTTP"
	tt__NetworkProtocolType__HTTPS,	///< xs:string value="HTTPS"
	tt__NetworkProtocolType__RTSP,	///< xs:string value="RTSP"
};

/// @brief A class wrapper.
///
class tt__NetworkProtocolType_ : public xsd__anyType
{ public:
    enum tt__NetworkProtocolType         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHostType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__NetworkHostType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__NetworkHostType
{
	tt__NetworkHostType__IPv4,	///< xs:string value="IPv4"
	tt__NetworkHostType__IPv6,	///< xs:string value="IPv6"
	tt__NetworkHostType__DNS,	///< xs:string value="DNS"
};

/// @brief A class wrapper.
///
class tt__NetworkHostType_ : public xsd__anyType
{ public:
    enum tt__NetworkHostType             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4Address is a simpleType restriction of XSD type xs:token.
///
typedef xsd__token tt__IPv4Address;

/// @brief A class wrapper.
///
class tt__IPv4Address__ : public xsd__anyType
{ public:
    tt__IPv4Address                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6Address is a simpleType restriction of XSD type xs:token.
///
typedef xsd__token tt__IPv6Address;

/// @brief A class wrapper.
///
class tt__IPv6Address__ : public xsd__anyType
{ public:
    tt__IPv6Address                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":HwAddress is a simpleType restriction of XSD type xs:token.
///
typedef xsd__token tt__HwAddress;

/// @brief A class wrapper.
///
class tt__HwAddress__ : public xsd__anyType
{ public:
    tt__HwAddress                        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__IPType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__IPType
{
	tt__IPType__IPv4,	///< xs:string value="IPv4"
	tt__IPType__IPv6,	///< xs:string value="IPv6"
};

/// @brief A class wrapper.
///
class tt__IPType_ : public xsd__anyType
{ public:
    enum tt__IPType                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DNSName is a simpleType restriction of XSD type xs:token.
///
typedef xsd__token tt__DNSName;

/// @brief A class wrapper.
///
class tt__DNSName__ : public xsd__anyType
{ public:
    tt__DNSName                          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Domain is a simpleType restriction of XSD type xs:token.
///
typedef xsd__token tt__Domain;

/// @brief A class wrapper.
///
class tt__Domain__ : public xsd__anyType
{ public:
    tt__Domain                           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilterType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__IPAddressFilterType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__IPAddressFilterType
{
	tt__IPAddressFilterType__Allow,	///< xs:string value="Allow"
	tt__IPAddressFilterType__Deny,	///< xs:string value="Deny"
};

/// @brief A class wrapper.
///
class tt__IPAddressFilterType_ : public xsd__anyType
{ public:
    enum tt__IPAddressFilterType         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__DynamicDNSType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__DynamicDNSType
{
	tt__DynamicDNSType__NoUpdate,	///< xs:string value="NoUpdate"
	tt__DynamicDNSType__ClientUpdates,	///< xs:string value="ClientUpdates"
	tt__DynamicDNSType__ServerUpdates,	///< xs:string value="ServerUpdates"
};

/// @brief A class wrapper.
///
class tt__DynamicDNSType_ : public xsd__anyType
{ public:
    enum tt__DynamicDNSType              __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SSIDType is a simpleType restriction of XSD type xs:hexBinary.
///
/// Length of this string is 1..32.
typedef xsd__hexBinary tt__Dot11SSIDType 1:32;

/// @brief A class wrapper.
///
class tt__Dot11SSIDType__ : public xsd__anyType
{ public:
    tt__Dot11SSIDType                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11StationMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Dot11StationMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Dot11StationMode
{
	tt__Dot11StationMode__Ad_hoc,	///< xs:string value="Ad-hoc"
	tt__Dot11StationMode__Infrastructure,	///< xs:string value="Infrastructure"
	tt__Dot11StationMode__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__Dot11StationMode_ : public xsd__anyType
{ public:
    enum tt__Dot11StationMode            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Dot11SecurityMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Dot11SecurityMode
{
	tt__Dot11SecurityMode__None,	///< xs:string value="None"
	tt__Dot11SecurityMode__WEP,	///< xs:string value="WEP"
	tt__Dot11SecurityMode__PSK,	///< xs:string value="PSK"
	tt__Dot11SecurityMode__Dot1X,	///< xs:string value="Dot1X"
	tt__Dot11SecurityMode__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__Dot11SecurityMode_ : public xsd__anyType
{ public:
    enum tt__Dot11SecurityMode           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Cipher is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Dot11Cipher__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Dot11Cipher
{
	tt__Dot11Cipher__CCMP,	///< xs:string value="CCMP"
	tt__Dot11Cipher__TKIP,	///< xs:string value="TKIP"
	tt__Dot11Cipher__Any,	///< xs:string value="Any"
	tt__Dot11Cipher__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__Dot11Cipher_ : public xsd__anyType
{ public:
    enum tt__Dot11Cipher                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSK is a simpleType restriction of XSD type xs:hexBinary.
///
/// Length of this string is 32.
typedef xsd__hexBinary tt__Dot11PSK;

/// @brief A class wrapper.
///
class tt__Dot11PSK__ : public xsd__anyType
{ public:
    tt__Dot11PSK                         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[ -~]{8,63}".
typedef std::string tt__Dot11PSKPassphrase "[ -~]{8,63}";

/// @brief A class wrapper.
///
class tt__Dot11PSKPassphrase__ : public xsd__anyType
{ public:
    tt__Dot11PSKPassphrase               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SignalStrength is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Dot11SignalStrength__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Dot11SignalStrength
{
	tt__Dot11SignalStrength__None,	///< xs:string value="None"
	tt__Dot11SignalStrength__Very_x0020Bad,	///< xs:string value="Very Bad"
	tt__Dot11SignalStrength__Bad,	///< xs:string value="Bad"
	tt__Dot11SignalStrength__Good,	///< xs:string value="Good"
	tt__Dot11SignalStrength__Very_x0020Good,	///< xs:string value="Very Good"
	tt__Dot11SignalStrength__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__Dot11SignalStrength_ : public xsd__anyType
{ public:
    enum tt__Dot11SignalStrength         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AuthAndMangementSuite is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Dot11AuthAndMangementSuite__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Dot11AuthAndMangementSuite
{
	tt__Dot11AuthAndMangementSuite__None,	///< xs:string value="None"
	tt__Dot11AuthAndMangementSuite__Dot1X,	///< xs:string value="Dot1X"
	tt__Dot11AuthAndMangementSuite__PSK,	///< xs:string value="PSK"
	tt__Dot11AuthAndMangementSuite__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__Dot11AuthAndMangementSuite_ : public xsd__anyType
{ public:
    enum tt__Dot11AuthAndMangementSuite  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilityCategory is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__CapabilityCategory__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__CapabilityCategory
{
	tt__CapabilityCategory__All,	///< xs:string value="All"
	tt__CapabilityCategory__Analytics,	///< xs:string value="Analytics"
	tt__CapabilityCategory__Device,	///< xs:string value="Device"
	tt__CapabilityCategory__Events,	///< xs:string value="Events"
	tt__CapabilityCategory__Imaging,	///< xs:string value="Imaging"
	tt__CapabilityCategory__Media,	///< xs:string value="Media"
	tt__CapabilityCategory__PTZ,	///< xs:string value="PTZ"
};

/// @brief A class wrapper.
///
class tt__CapabilityCategory_ : public xsd__anyType
{ public:
    enum tt__CapabilityCategory          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration describing the available system log modes.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__SystemLogType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__SystemLogType
{
/// <PRE><BLOCKQUOTE>
///   Indicates that a system log is requested.
/// </BLOCKQUOTE></PRE>
	tt__SystemLogType__System,	///< xs:string value="System"
/// <PRE><BLOCKQUOTE>
///   Indicates that a access log is requested.
/// </BLOCKQUOTE></PRE>
	tt__SystemLogType__Access,	///< xs:string value="Access"
};

/// @brief A class wrapper.
///
class tt__SystemLogType_ : public xsd__anyType
{ public:
    enum tt__SystemLogType               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":FactoryDefaultType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration describing the available factory default modes.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__FactoryDefaultType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__FactoryDefaultType
{
/// <PRE><BLOCKQUOTE>
///   Indicates that a hard factory default is requested.
/// </BLOCKQUOTE></PRE>
	tt__FactoryDefaultType__Hard,	///< xs:string value="Hard"
/// <PRE><BLOCKQUOTE>
///   Indicates that a soft factory default is requested.
/// </BLOCKQUOTE></PRE>
	tt__FactoryDefaultType__Soft,	///< xs:string value="Soft"
};

/// @brief A class wrapper.
///
class tt__FactoryDefaultType_ : public xsd__anyType
{ public:
    enum tt__FactoryDefaultType          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SetDateTimeType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__SetDateTimeType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__SetDateTimeType
{
/// <PRE><BLOCKQUOTE>
///   Indicates that the date and time are set manually.
/// </BLOCKQUOTE></PRE>
	tt__SetDateTimeType__Manual,	///< xs:string value="Manual"
/// <PRE><BLOCKQUOTE>
///   Indicates that the date and time are set through NTP
/// </BLOCKQUOTE></PRE>
	tt__SetDateTimeType__NTP,	///< xs:string value="NTP"
};

/// @brief A class wrapper.
///
class tt__SetDateTimeType_ : public xsd__anyType
{ public:
    enum tt__SetDateTimeType             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":UserLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__UserLevel__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__UserLevel
{
	tt__UserLevel__Administrator,	///< xs:string value="Administrator"
	tt__UserLevel__Operator,	///< xs:string value="Operator"
	tt__UserLevel__User,	///< xs:string value="User"
	tt__UserLevel__Anonymous,	///< xs:string value="Anonymous"
	tt__UserLevel__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__UserLevel_ : public xsd__anyType
{ public:
    enum tt__UserLevel                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RelayLogicalState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__RelayLogicalState__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__RelayLogicalState
{
	tt__RelayLogicalState__active,	///< xs:string value="active"
	tt__RelayLogicalState__inactive,	///< xs:string value="inactive"
};

/// @brief A class wrapper.
///
class tt__RelayLogicalState_ : public xsd__anyType
{ public:
    enum tt__RelayLogicalState           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RelayIdleState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__RelayIdleState__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__RelayIdleState
{
	tt__RelayIdleState__closed,	///< xs:string value="closed"
	tt__RelayIdleState__open,	///< xs:string value="open"
};

/// @brief A class wrapper.
///
class tt__RelayIdleState_ : public xsd__anyType
{ public:
    enum tt__RelayIdleState              __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RelayMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__RelayMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__RelayMode
{
	tt__RelayMode__Monostable,	///< xs:string value="Monostable"
	tt__RelayMode__Bistable,	///< xs:string value="Bistable"
};

/// @brief A class wrapper.
///
class tt__RelayMode_ : public xsd__anyType
{ public:
    enum tt__RelayMode                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DigitalIdleState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__DigitalIdleState__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__DigitalIdleState
{
	tt__DigitalIdleState__closed,	///< xs:string value="closed"
	tt__DigitalIdleState__open,	///< xs:string value="open"
};

/// @brief A class wrapper.
///
class tt__DigitalIdleState_ : public xsd__anyType
{ public:
    enum tt__DigitalIdleState            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__EFlipMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__EFlipMode
{
	tt__EFlipMode__OFF,	///< xs:string value="OFF"
	tt__EFlipMode__ON,	///< xs:string value="ON"
	tt__EFlipMode__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__EFlipMode_ : public xsd__anyType
{ public:
    enum tt__EFlipMode                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ReverseMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ReverseMode
{
	tt__ReverseMode__OFF,	///< xs:string value="OFF"
	tt__ReverseMode__ON,	///< xs:string value="ON"
	tt__ReverseMode__AUTO,	///< xs:string value="AUTO"
	tt__ReverseMode__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__ReverseMode_ : public xsd__anyType
{ public:
    enum tt__ReverseMode                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AuxiliaryData is a simpleType restriction of XSD type xs:string.
///
/// Length of this string is 0..128.
typedef std::string tt__AuxiliaryData:128;

/// @brief A class wrapper.
///
class tt__AuxiliaryData__ : public xsd__anyType
{ public:
    tt__AuxiliaryData                    __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__PTZPresetTourState__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__PTZPresetTourState
{
	tt__PTZPresetTourState__Idle,	///< xs:string value="Idle"
	tt__PTZPresetTourState__Touring,	///< xs:string value="Touring"
	tt__PTZPresetTourState__Paused,	///< xs:string value="Paused"
	tt__PTZPresetTourState__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__PTZPresetTourState_ : public xsd__anyType
{ public:
    enum tt__PTZPresetTourState          __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourDirection is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__PTZPresetTourDirection__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__PTZPresetTourDirection
{
	tt__PTZPresetTourDirection__Forward,	///< xs:string value="Forward"
	tt__PTZPresetTourDirection__Backward,	///< xs:string value="Backward"
	tt__PTZPresetTourDirection__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__PTZPresetTourDirection_ : public xsd__anyType
{ public:
    enum tt__PTZPresetTourDirection      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourOperation is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__PTZPresetTourOperation__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__PTZPresetTourOperation
{
	tt__PTZPresetTourOperation__Start,	///< xs:string value="Start"
	tt__PTZPresetTourOperation__Stop,	///< xs:string value="Stop"
	tt__PTZPresetTourOperation__Pause,	///< xs:string value="Pause"
	tt__PTZPresetTourOperation__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__PTZPresetTourOperation_ : public xsd__anyType
{ public:
    enum tt__PTZPresetTourOperation      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AutoFocusMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__AutoFocusMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__AutoFocusMode
{
	tt__AutoFocusMode__AUTO,	///< xs:string value="AUTO"
	tt__AutoFocusMode__MANUAL,	///< xs:string value="MANUAL"
};

/// @brief A class wrapper.
///
class tt__AutoFocusMode_ : public xsd__anyType
{ public:
    enum tt__AutoFocusMode               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AFModes is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__AFModes__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__AFModes
{
/// <PRE><BLOCKQUOTE>
///   Focus of a moving camera is updated only once after stopping a pan, tilt or zoom movement.
/// </BLOCKQUOTE></PRE>
	tt__AFModes__OnceAfterMove,	///< xs:string value="OnceAfterMove"
};

/// @brief A class wrapper.
///
class tt__AFModes_ : public xsd__anyType
{ public:
    enum tt__AFModes                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__WideDynamicMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__WideDynamicMode
{
	tt__WideDynamicMode__OFF,	///< xs:string value="OFF"
	tt__WideDynamicMode__ON,	///< xs:string value="ON"
};

/// @brief A class wrapper.
///
class tt__WideDynamicMode_ : public xsd__anyType
{ public:
    enum tt__WideDynamicMode             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensationMode is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Enumeration describing the available backlight compenstation modes.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__BacklightCompensationMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__BacklightCompensationMode
{
/// <PRE><BLOCKQUOTE>
///   Backlight compensation is disabled.
/// </BLOCKQUOTE></PRE>
	tt__BacklightCompensationMode__OFF,	///< xs:string value="OFF"
/// <PRE><BLOCKQUOTE>
///   Backlight compensation is enabled.
/// </BLOCKQUOTE></PRE>
	tt__BacklightCompensationMode__ON,	///< xs:string value="ON"
};

/// @brief A class wrapper.
///
class tt__BacklightCompensationMode_ : public xsd__anyType
{ public:
    enum tt__BacklightCompensationMode   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ExposurePriority is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ExposurePriority__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ExposurePriority
{
	tt__ExposurePriority__LowNoise,	///< xs:string value="LowNoise"
	tt__ExposurePriority__FrameRate,	///< xs:string value="FrameRate"
};

/// @brief A class wrapper.
///
class tt__ExposurePriority_ : public xsd__anyType
{ public:
    enum tt__ExposurePriority            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ExposureMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ExposureMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ExposureMode
{
	tt__ExposureMode__AUTO,	///< xs:string value="AUTO"
	tt__ExposureMode__MANUAL,	///< xs:string value="MANUAL"
};

/// @brief A class wrapper.
///
class tt__ExposureMode_ : public xsd__anyType
{ public:
    enum tt__ExposureMode                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Enabled is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Enabled__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Enabled
{
	tt__Enabled__ENABLED,	///< xs:string value="ENABLED"
	tt__Enabled__DISABLED,	///< xs:string value="DISABLED"
};

/// @brief A class wrapper.
///
class tt__Enabled_ : public xsd__anyType
{ public:
    enum tt__Enabled                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__WhiteBalanceMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__WhiteBalanceMode
{
	tt__WhiteBalanceMode__AUTO,	///< xs:string value="AUTO"
	tt__WhiteBalanceMode__MANUAL,	///< xs:string value="MANUAL"
};

/// @brief A class wrapper.
///
class tt__WhiteBalanceMode_ : public xsd__anyType
{ public:
    enum tt__WhiteBalanceMode            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__IrCutFilterMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__IrCutFilterMode
{
	tt__IrCutFilterMode__ON,	///< xs:string value="ON"
	tt__IrCutFilterMode__OFF,	///< xs:string value="OFF"
	tt__IrCutFilterMode__AUTO,	///< xs:string value="AUTO"
};

/// @brief A class wrapper.
///
class tt__IrCutFilterMode_ : public xsd__anyType
{ public:
    enum tt__IrCutFilterMode             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ImageStabilizationMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ImageStabilizationMode
{
	tt__ImageStabilizationMode__OFF,	///< xs:string value="OFF"
	tt__ImageStabilizationMode__ON,	///< xs:string value="ON"
	tt__ImageStabilizationMode__AUTO,	///< xs:string value="AUTO"
	tt__ImageStabilizationMode__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__ImageStabilizationMode_ : public xsd__anyType
{ public:
    enum tt__ImageStabilizationMode      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoBoundaryType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__IrCutFilterAutoBoundaryType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__IrCutFilterAutoBoundaryType
{
	tt__IrCutFilterAutoBoundaryType__Common,	///< xs:string value="Common"
	tt__IrCutFilterAutoBoundaryType__ToOn,	///< xs:string value="ToOn"
	tt__IrCutFilterAutoBoundaryType__ToOff,	///< xs:string value="ToOff"
	tt__IrCutFilterAutoBoundaryType__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__IrCutFilterAutoBoundaryType_ : public xsd__anyType
{ public:
    enum tt__IrCutFilterAutoBoundaryType  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ToneCompensationMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ToneCompensationMode
{
	tt__ToneCompensationMode__OFF,	///< xs:string value="OFF"
	tt__ToneCompensationMode__ON,	///< xs:string value="ON"
	tt__ToneCompensationMode__AUTO,	///< xs:string value="AUTO"
};

/// @brief A class wrapper.
///
class tt__ToneCompensationMode_ : public xsd__anyType
{ public:
    enum tt__ToneCompensationMode        __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingMode is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__DefoggingMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__DefoggingMode
{
	tt__DefoggingMode__OFF,	///< xs:string value="OFF"
	tt__DefoggingMode__ON,	///< xs:string value="ON"
	tt__DefoggingMode__AUTO,	///< xs:string value="AUTO"
};

/// @brief A class wrapper.
///
class tt__DefoggingMode_ : public xsd__anyType
{ public:
    enum tt__DefoggingMode               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ImageSendingType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ImageSendingType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ImageSendingType
{
	tt__ImageSendingType__Embedded,	///< xs:string value="Embedded"
	tt__ImageSendingType__LocalStorage,	///< xs:string value="LocalStorage"
	tt__ImageSendingType__RemoteStorage,	///< xs:string value="RemoteStorage"
};

/// @brief A class wrapper.
///
class tt__ImageSendingType_ : public xsd__anyType
{ public:
    enum tt__ImageSendingType            __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":PropertyOperation is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__PropertyOperation__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__PropertyOperation
{
	tt__PropertyOperation__Initialized,	///< xs:string value="Initialized"
	tt__PropertyOperation__Deleted,	///< xs:string value="Deleted"
	tt__PropertyOperation__Changed,	///< xs:string value="Changed"
};

/// @brief A class wrapper.
///
class tt__PropertyOperation_ : public xsd__anyType
{ public:
    enum tt__PropertyOperation           __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Direction is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Direction__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Direction
{
	tt__Direction__Left,	///< xs:string value="Left"
	tt__Direction__Right,	///< xs:string value="Right"
	tt__Direction__Any,	///< xs:string value="Any"
};

/// @brief A class wrapper.
///
class tt__Direction_ : public xsd__anyType
{ public:
    enum tt__Direction                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverMode is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specifies a receiver connection mode.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__ReceiverMode__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ReceiverMode
{
/// <PRE><BLOCKQUOTE>
///   The receiver connects on demand, as required by consumers of the media streams.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverMode__AutoConnect,	///< xs:string value="AutoConnect"
/// <PRE><BLOCKQUOTE>
///   The receiver attempts to maintain a persistent connection to the configured endpoint.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverMode__AlwaysConnect,	///< xs:string value="AlwaysConnect"
/// <PRE><BLOCKQUOTE>
///   The receiver does not attempt to connect.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverMode__NeverConnect,	///< xs:string value="NeverConnect"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverMode__Unknown,	///< xs:string value="Unknown"
};

/// @brief A class wrapper.
///
class tt__ReceiverMode_ : public xsd__anyType
{ public:
    enum tt__ReceiverMode                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverState is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specifies the current connection state of the receiver.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "tt__ReceiverState__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ReceiverState
{
/// <PRE><BLOCKQUOTE>
///   The receiver is not connected.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverState__NotConnected,	///< xs:string value="NotConnected"
/// <PRE><BLOCKQUOTE>
///   The receiver is attempting to connect.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverState__Connecting,	///< xs:string value="Connecting"
/// <PRE><BLOCKQUOTE>
///   The receiver is connected.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverState__Connected,	///< xs:string value="Connected"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
	tt__ReceiverState__Unknown,	///< xs:string value="Unknown"
};

/// @brief A class wrapper.
///
class tt__ReceiverState_ : public xsd__anyType
{ public:
    enum tt__ReceiverState               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Description is a simpleType restriction of XSD type xs:string.
///
typedef std::string tt__Description;

/// @brief A class wrapper.
///
class tt__Description__ : public xsd__anyType
{ public:
    tt__Description                      __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":XPathExpression is a simpleType restriction of XSD type xs:string.
///
typedef std::string tt__XPathExpression;

/// @brief A class wrapper.
///
class tt__XPathExpression__ : public xsd__anyType
{ public:
    tt__XPathExpression                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":SearchState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__SearchState__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__SearchState
{
/// <PRE><BLOCKQUOTE>
///   The search is queued and not yet started.
/// </BLOCKQUOTE></PRE>
	tt__SearchState__Queued,	///< xs:string value="Queued"
/// <PRE><BLOCKQUOTE>
///   The search is underway and not yet completed.
/// </BLOCKQUOTE></PRE>
	tt__SearchState__Searching,	///< xs:string value="Searching"
/// <PRE><BLOCKQUOTE>
///   The search has been completed and no new results will be found.
/// </BLOCKQUOTE></PRE>
	tt__SearchState__Completed,	///< xs:string value="Completed"
/// <PRE><BLOCKQUOTE>
///   The state of the search is unknown. (This is not a valid response from GetSearchState.)
/// </BLOCKQUOTE></PRE>
	tt__SearchState__Unknown,	///< xs:string value="Unknown"
};

/// @brief A class wrapper.
///
class tt__SearchState_ : public xsd__anyType
{ public:
    enum tt__SearchState                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__RecordingStatus__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__RecordingStatus
{
	tt__RecordingStatus__Initiated,	///< xs:string value="Initiated"
	tt__RecordingStatus__Recording,	///< xs:string value="Recording"
	tt__RecordingStatus__Stopped,	///< xs:string value="Stopped"
	tt__RecordingStatus__Removing,	///< xs:string value="Removing"
	tt__RecordingStatus__Removed,	///< xs:string value="Removed"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
	tt__RecordingStatus__Unknown,	///< xs:string value="Unknown"
};

/// @brief A class wrapper.
///
class tt__RecordingStatus_ : public xsd__anyType
{ public:
    enum tt__RecordingStatus             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TrackType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__TrackType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__TrackType
{
	tt__TrackType__Video,	///< xs:string value="Video"
	tt__TrackType__Audio,	///< xs:string value="Audio"
	tt__TrackType__Metadata,	///< xs:string value="Metadata"
/// <PRE><BLOCKQUOTE>
///   Placeholder for future extension.
/// </BLOCKQUOTE></PRE>
	tt__TrackType__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__TrackType_ : public xsd__anyType
{ public:
    enum tt__TrackType                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobMode is a simpleType restriction of XSD type xs:string.
///
typedef std::string tt__RecordingJobMode;

/// @brief A class wrapper.
///
class tt__RecordingJobMode__ : public xsd__anyType
{ public:
    tt__RecordingJobMode                 __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobState is a simpleType restriction of XSD type xs:string.
///
typedef std::string tt__RecordingJobState;

/// @brief A class wrapper.
///
class tt__RecordingJobState__ : public xsd__anyType
{ public:
    tt__RecordingJobState                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ModeOfOperation is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__ModeOfOperation__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__ModeOfOperation
{
	tt__ModeOfOperation__Idle,	///< xs:string value="Idle"
	tt__ModeOfOperation__Active,	///< xs:string value="Active"
/// <PRE><BLOCKQUOTE>
///   This case should never happen.
/// </BLOCKQUOTE></PRE>
	tt__ModeOfOperation__Unknown,	///< xs:string value="Unknown"
};

/// @brief A class wrapper.
///
class tt__ModeOfOperation_ : public xsd__anyType
{ public:
    enum tt__ModeOfOperation             __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   AudioClassType acceptable values are;
///   gun_shot, scream, glass_breaking, tire_screech
/// </BLOCKQUOTE></PRE>
typedef std::string tt__AudioClassType;

/// @brief A class wrapper.
///
class tt__AudioClassType__ : public xsd__anyType
{ public:
    tt__AudioClassType                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":OSDType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__OSDType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__OSDType
{
	tt__OSDType__Text,	///< xs:string value="Text"
	tt__OSDType__Image,	///< xs:string value="Image"
	tt__OSDType__Extended,	///< xs:string value="Extended"
};

/// @brief A class wrapper.
///
class tt__OSDType_ : public xsd__anyType
{ public:
    enum tt__OSDType                     __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReferenceToken is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Unique identifier for a physical or logical resource.
///   Tokens should be assigned such that they are unique within a device. Tokens must be at least unique within its class.
///   Length up to 64 characters. Token may be extended by intermediate terminal with adding prefix to make it global unique.
///   The length should be within 36 characters for generating at local device. See "Remote Token" section in Resource Query specification.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..64.
typedef std::string tt__ReferenceToken:64;

/// @brief A class wrapper.
///
class tt__ReferenceToken__ : public xsd__anyType
{ public:
    tt__ReferenceToken                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":MoveStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__MoveStatus__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__MoveStatus
{
	tt__MoveStatus__IDLE,	///< xs:string value="IDLE"
	tt__MoveStatus__MOVING,	///< xs:string value="MOVING"
	tt__MoveStatus__UNKNOWN,	///< xs:string value="UNKNOWN"
};

/// @brief A class wrapper.
///
class tt__MoveStatus_ : public xsd__anyType
{ public:
    enum tt__MoveStatus                  __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":Entity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tt__Entity__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tt__Entity
{
	tt__Entity__Device,	///< xs:string value="Device"
	tt__Entity__VideoSource,	///< xs:string value="VideoSource"
	tt__Entity__AudioSource,	///< xs:string value="AudioSource"
};

/// @brief A class wrapper.
///
class tt__Entity_ : public xsd__anyType
{ public:
    enum tt__Entity                      __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsn/t-1":FullTopicExpression is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   TopicPathExpression ::= TopicPath ( '|' TopicPath )* TopicPath ::= RootTopic ChildTopicExpression* RootTopic ::= NamespacePrefix? ('//')? (NCName | '*') NamespacePrefix ::= NCName ':' ChildTopicExpression ::= '/' '/'? (QName | NCName | '*'| '.')
/// </BLOCKQUOTE></PRE>
/// Content pattern is "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*".
typedef xsd__token wstop__FullTopicExpression "([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*(\\|([\\i-[:]][\\c-[:]]*:)?(//)?([\\i-[:]][\\c-[:]]*|\\*)((/|//)(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*|\\*|[.]))*)*";

/// @brief A class wrapper.
///
class wstop__FullTopicExpression__ : public xsd__anyType
{ public:
    wstop__FullTopicExpression           __item;                       
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":ConcreteTopicExpression is a simpleType restriction of XSD type xs:token.
///
/// <PRE><BLOCKQUOTE>
///   The pattern allows strings matching the following EBNF:
///   ConcreteTopicPath ::= RootTopic ChildTopic* RootTopic ::= QName ChildTopic ::= '/' (QName | NCName)
/// </BLOCKQUOTE></PRE>
/// Content pattern is "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*".
typedef xsd__token wstop__ConcreteTopicExpression "(([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)(/([\\i-[:]][\\c-[:]]*:)?[\\i-[:]][\\c-[:]]*)*";

/// @brief A class wrapper.
///
class wstop__ConcreteTopicExpression__ : public xsd__anyType
{ public:
    wstop__ConcreteTopicExpression       __item;                       
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":SimpleTopicExpression is a simpleType restriction of XSD type xs:QName.
///
/// <PRE><BLOCKQUOTE>
///   The pattern allows strings matching the following EBNF:
///   RootTopic ::= QName
/// </BLOCKQUOTE></PRE>
typedef xsd__QName wstop__SimpleTopicExpression;

/// @brief A class wrapper.
///
class wstop__SimpleTopicExpression__ : public xsd__anyType
{ public:
    wstop__SimpleTopicExpression         __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/device/wsdl":AutoGeoModes is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tds__AutoGeoModes__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tds__AutoGeoModes
{
/// <PRE><BLOCKQUOTE>
///   Automatic adjustment of the device location.
/// </BLOCKQUOTE></PRE>
	tds__AutoGeoModes__Location,	///< xs:string value="Location"
/// <PRE><BLOCKQUOTE>
///   Automatic adjustment of the device orientation relative to the compass also called yaw.
/// </BLOCKQUOTE></PRE>
	tds__AutoGeoModes__Heading,	///< xs:string value="Heading"
/// <PRE><BLOCKQUOTE>
///   Automatic adjustment of the deviation from the horizon also called pitch and roll.
/// </BLOCKQUOTE></PRE>
	tds__AutoGeoModes__Leveling,	///< xs:string value="Leveling"
};

/// @brief A class wrapper.
///
class tds__AutoGeoModes_ : public xsd__anyType
{ public:
    enum tds__AutoGeoModes               __item;                       
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":StorageType is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "tds__StorageType__" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tds__StorageType
{
/// <PRE><BLOCKQUOTE>
///   NFS protocol
/// </BLOCKQUOTE></PRE>
	tds__StorageType__NFS,	///< xs:string value="NFS"
/// <PRE><BLOCKQUOTE>
///   CIFS protocol
/// </BLOCKQUOTE></PRE>
	tds__StorageType__CIFS,	///< xs:string value="CIFS"
/// <PRE><BLOCKQUOTE>
///   CDMI protocol
/// </BLOCKQUOTE></PRE>
	tds__StorageType__CDMI,	///< xs:string value="CDMI"
/// <PRE><BLOCKQUOTE>
///   FTP protocol
/// </BLOCKQUOTE></PRE>
	tds__StorageType__FTP,	///< xs:string value="FTP"
};

/// @brief A class wrapper.
///
class tds__StorageType_ : public xsd__anyType
{ public:
    enum tds__StorageType                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverReference is a simpleType restriction of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__ReceiverReference;

/// @brief A class wrapper.
///
class tt__ReceiverReference__ : public xsd__anyType
{ public:
    tt__ReceiverReference                __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingReference is a simpleType restriction of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__RecordingReference;

/// @brief A class wrapper.
///
class tt__RecordingReference__ : public xsd__anyType
{ public:
    tt__RecordingReference               __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":TrackReference is a simpleType restriction of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__TrackReference;

/// @brief A class wrapper.
///
class tt__TrackReference__ : public xsd__anyType
{ public:
    tt__TrackReference                   __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":JobToken is a simpleType restriction of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__JobToken;

/// @brief A class wrapper.
///
class tt__JobToken__ : public xsd__anyType
{ public:
    tt__JobToken                         __item;                       
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobReference is a simpleType restriction of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
///
typedef tt__ReferenceToken tt__RecordingJobReference;

/// @brief A class wrapper.
///
class tt__RecordingJobReference__ : public xsd__anyType
{ public:
    tt__RecordingJobReference            __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/schema":DeviceEntity is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Base class for physical entities like inputs and outputs.
/// </BLOCKQUOTE></PRE>
/// class tt__DeviceEntity operations:
/// - soap_new_tt__DeviceEntity(soap*) allocate
/// - soap_new_tt__DeviceEntity(soap*, int num) allocate array
/// - soap_new_req_tt__DeviceEntity(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DeviceEntity(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DeviceEntity(soap*, tt__DeviceEntity*) deserialize from a stream
/// - int soap_write_tt__DeviceEntity(soap, tt__DeviceEntity*) serialize to a stream
class tt__DeviceEntity : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":IntRectangle is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Rectangle defined by lower left corner position and size. Units are pixel.
/// </BLOCKQUOTE></PRE>
/// class tt__IntRectangle operations:
/// - soap_new_tt__IntRectangle(soap*) allocate
/// - soap_new_tt__IntRectangle(soap*, int num) allocate array
/// - soap_new_req_tt__IntRectangle(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IntRectangle(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IntRectangle(soap*, tt__IntRectangle*) deserialize from a stream
/// - int soap_write_tt__IntRectangle(soap, tt__IntRectangle*) serialize to a stream
class tt__IntRectangle : public xsd__anyType
{ public:
/// Attribute "x" of XSD type xs:int.
   @int                                  x                              1;	///< Required attribute.
/// Attribute "y" of XSD type xs:int.
   @int                                  y                              1;	///< Required attribute.
/// Attribute "width" of XSD type xs:int.
   @int                                  width                          1;	///< Required attribute.
/// Attribute "height" of XSD type xs:int.
   @int                                  height                         1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":IntRectangleRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of a rectangle. The rectangle itself is defined by lower left corner position and size. Units are pixel.
/// </BLOCKQUOTE></PRE>
/// class tt__IntRectangleRange operations:
/// - soap_new_tt__IntRectangleRange(soap*) allocate
/// - soap_new_tt__IntRectangleRange(soap*, int num) allocate array
/// - soap_new_req_tt__IntRectangleRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IntRectangleRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IntRectangleRange(soap*, tt__IntRectangleRange*) deserialize from a stream
/// - int soap_write_tt__IntRectangleRange(soap, tt__IntRectangleRange*) serialize to a stream
class tt__IntRectangleRange : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Range of X-axis.
/// </BLOCKQUOTE></PRE>
/// Element "XRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        XRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of Y-axis.
/// </BLOCKQUOTE></PRE>
/// Element "YRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        YRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of width.
/// </BLOCKQUOTE></PRE>
/// Element "WidthRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        WidthRange                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of height.
/// </BLOCKQUOTE></PRE>
/// Element "HeightRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        HeightRange                    1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":FloatRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of values greater equal Min value and less equal Max value.
/// </BLOCKQUOTE></PRE>
/// class tt__FloatRange operations:
/// - soap_new_tt__FloatRange(soap*) allocate
/// - soap_new_tt__FloatRange(soap*, int num) allocate array
/// - soap_new_req_tt__FloatRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FloatRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FloatRange(soap*, tt__FloatRange*) deserialize from a stream
/// - int soap_write_tt__FloatRange(soap, tt__FloatRange*) serialize to a stream
class tt__FloatRange : public xsd__anyType
{ public:
/// Element "Min" of XSD type xs:float.
    float                                Min                            1;	///< Required element.
/// Element "Max" of XSD type xs:float.
    float                                Max                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":DurationRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of duration greater equal Min duration and less equal Max duration.
/// </BLOCKQUOTE></PRE>
/// class tt__DurationRange operations:
/// - soap_new_tt__DurationRange(soap*) allocate
/// - soap_new_tt__DurationRange(soap*, int num) allocate array
/// - soap_new_req_tt__DurationRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DurationRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DurationRange(soap*, tt__DurationRange*) deserialize from a stream
/// - int soap_write_tt__DurationRange(soap, tt__DurationRange*) serialize to a stream
class tt__DurationRange : public xsd__anyType
{ public:
/// Element "Min" of XSD type xs:duration.
    xsd__duration                        Min                            1;	///< Required element.
/// Element "Max" of XSD type xs:duration.
    xsd__duration                        Max                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":IntItems is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   List of values.
/// </BLOCKQUOTE></PRE>
/// class tt__IntItems operations:
/// - soap_new_tt__IntItems(soap*) allocate
/// - soap_new_tt__IntItems(soap*, int num) allocate array
/// - soap_new_req_tt__IntItems(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IntItems(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IntItems(soap*, tt__IntItems*) deserialize from a stream
/// - int soap_write_tt__IntItems(soap, tt__IntItems*) serialize to a stream
class tt__IntItems : public xsd__anyType
{ public:
/// Vector of int of length 0..unbounded.
    std::vector<int                    > Items                          0;
};

/// @brief "http://www.onvif.org/ver10/schema":FloatItems is a complexType.
///
/// class tt__FloatItems operations:
/// - soap_new_tt__FloatItems(soap*) allocate
/// - soap_new_tt__FloatItems(soap*, int num) allocate array
/// - soap_new_req_tt__FloatItems(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FloatItems(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FloatItems(soap*, tt__FloatItems*) deserialize from a stream
/// - int soap_write_tt__FloatItems(soap, tt__FloatItems*) serialize to a stream
class tt__FloatItems : public xsd__anyType
{ public:
/// Vector of float of length 0..unbounded.
    std::vector<float                  > Items                          0;
};

/// @brief "http://www.onvif.org/ver10/schema":AnyHolder is a complexType.
///
/// class tt__AnyHolder operations:
/// - soap_new_tt__AnyHolder(soap*) allocate
/// - soap_new_tt__AnyHolder(soap*, int num) allocate array
/// - soap_new_req_tt__AnyHolder(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnyHolder(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnyHolder(soap*, tt__AnyHolder*) deserialize from a stream
/// - int soap_write_tt__AnyHolder(soap, tt__AnyHolder*) serialize to a stream
class tt__AnyHolder : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceExtension is a complexType.
///
/// class tt__VideoSourceExtension operations:
/// - soap_new_tt__VideoSourceExtension(soap*) allocate
/// - soap_new_tt__VideoSourceExtension(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceExtension(soap*, tt__VideoSourceExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceExtension(soap, tt__VideoSourceExtension*) serialize to a stream
class tt__VideoSourceExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the image sensor. To be used if imaging service 2.00 is supported.
/// </BLOCKQUOTE></PRE>
/// Element "Imaging" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettings20.
    tt__ImagingSettings20*               Imaging                        0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceExtension2.
    tt__VideoSourceExtension2*           Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceExtension2 is a complexType.
///
/// class tt__VideoSourceExtension2 operations:
/// - soap_new_tt__VideoSourceExtension2(soap*) allocate
/// - soap_new_tt__VideoSourceExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceExtension2(soap*, tt__VideoSourceExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceExtension2(soap, tt__VideoSourceExtension2*) serialize to a stream
class tt__VideoSourceExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Profile is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A media profile consists of a set of media configurations. Media profiles are used by a client
///   to configure properties of a media stream from an NVT.<br/>
///   An NVT shall provide at least one media profile at boot. An NVT should provide ready to use
///   profiles for the most common media configurations that the device offers.<br/>
///   A profile consists of a set of interconnected configuration entities. Configurations are provided
///   by the NVT and can be either static or created dynamically by the NVT. For example, the
///   dynamic configurations can be created by the NVT depending on current available encoding
///   resources.
/// </BLOCKQUOTE></PRE>
/// class tt__Profile operations:
/// - soap_new_tt__Profile(soap*) allocate
/// - soap_new_tt__Profile(soap*, int num) allocate array
/// - soap_new_req_tt__Profile(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Profile(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Profile(soap*, tt__Profile*) deserialize from a stream
/// - int soap_write_tt__Profile(soap, tt__Profile*) serialize to a stream
class tt__Profile : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User readable name of the profile.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Video input.
/// </BLOCKQUOTE></PRE>
/// Element "VideoSourceConfiguration" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
    tt__VideoSourceConfiguration*        VideoSourceConfiguration       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio input.
/// </BLOCKQUOTE></PRE>
/// Element "AudioSourceConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
    tt__AudioSourceConfiguration*        AudioSourceConfiguration       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Video encoder.
/// </BLOCKQUOTE></PRE>
/// Element "VideoEncoderConfiguration" of XSD type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    tt__VideoEncoderConfiguration*       VideoEncoderConfiguration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio encoder.
/// </BLOCKQUOTE></PRE>
/// Element "AudioEncoderConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    tt__AudioEncoderConfiguration*       AudioEncoderConfiguration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the video analytics module and rule engine.
/// </BLOCKQUOTE></PRE>
/// Element "VideoAnalyticsConfiguration" of XSD type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    tt__VideoAnalyticsConfiguration*     VideoAnalyticsConfiguration    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the pan tilt zoom unit.
/// </BLOCKQUOTE></PRE>
/// Element "PTZConfiguration" of XSD type "http://www.onvif.org/ver10/schema":PTZConfiguration.
    tt__PTZConfiguration*                PTZConfiguration               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the metadata stream.
/// </BLOCKQUOTE></PRE>
/// Element "MetadataConfiguration" of XSD type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
    tt__MetadataConfiguration*           MetadataConfiguration          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extensions defined in ONVIF 2.0
/// </BLOCKQUOTE></PRE>
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ProfileExtension.
    tt__ProfileExtension*                Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of the profile.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   A value of true signals that the profile cannot be deleted. Default is false.
/// </BLOCKQUOTE></PRE>
/// Attribute "fixed" of XSD type xs:boolean.
   @bool*                                fixed                          0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileExtension is a complexType.
///
/// class tt__ProfileExtension operations:
/// - soap_new_tt__ProfileExtension(soap*) allocate
/// - soap_new_tt__ProfileExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ProfileExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ProfileExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ProfileExtension(soap*, tt__ProfileExtension*) deserialize from a stream
/// - int soap_write_tt__ProfileExtension(soap, tt__ProfileExtension*) serialize to a stream
class tt__ProfileExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio output.
/// </BLOCKQUOTE></PRE>
/// Element "AudioOutputConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
    tt__AudioOutputConfiguration*        AudioOutputConfiguration       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the Audio decoder.
/// </BLOCKQUOTE></PRE>
/// Element "AudioDecoderConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
    tt__AudioDecoderConfiguration*       AudioDecoderConfiguration      0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ProfileExtension2.
    tt__ProfileExtension2*               Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileExtension2 is a complexType.
///
/// class tt__ProfileExtension2 operations:
/// - soap_new_tt__ProfileExtension2(soap*) allocate
/// - soap_new_tt__ProfileExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__ProfileExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ProfileExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ProfileExtension2(soap*, tt__ProfileExtension2*) deserialize from a stream
/// - int soap_write_tt__ProfileExtension2(soap, tt__ProfileExtension2*) serialize to a stream
class tt__ProfileExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ConfigurationEntity is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Base type defining the common properties of a configuration.
/// </BLOCKQUOTE></PRE>
/// class tt__ConfigurationEntity operations:
/// - soap_new_tt__ConfigurationEntity(soap*) allocate
/// - soap_new_tt__ConfigurationEntity(soap*, int num) allocate array
/// - soap_new_req_tt__ConfigurationEntity(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ConfigurationEntity(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ConfigurationEntity(soap*, tt__ConfigurationEntity*) deserialize from a stream
/// - int soap_write_tt__ConfigurationEntity(soap, tt__ConfigurationEntity*) serialize to a stream
class tt__ConfigurationEntity : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension is a complexType.
///
/// class tt__VideoSourceConfigurationExtension operations:
/// - soap_new_tt__VideoSourceConfigurationExtension(soap*) allocate
/// - soap_new_tt__VideoSourceConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceConfigurationExtension(soap*, tt__VideoSourceConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationExtension(soap, tt__VideoSourceConfigurationExtension*) serialize to a stream
class tt__VideoSourceConfigurationExtension : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure rotation of captured image.
///   What resolutions a device supports shall be unaffected by the Rotate parameters.<br/>
///   If a device is configured with Rotate=AUTO, the device shall take control over the Degree parameter and automatically update it so that a client can query current rotation.<br/>
///   The device shall automatically apply the same rotation to its pan/tilt control direction depending on the following condition: if Reverse=AUTO in PTControlDirection or if the device doesnt support Reverse in PTControlDirection
/// </BLOCKQUOTE></PRE>
/// Element "Rotate" of XSD type "http://www.onvif.org/ver10/schema":Rotate.
    tt__Rotate*                          Rotate                         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension2.
    tt__VideoSourceConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension2 is a complexType.
///
/// class tt__VideoSourceConfigurationExtension2 operations:
/// - soap_new_tt__VideoSourceConfigurationExtension2(soap*) allocate
/// - soap_new_tt__VideoSourceConfigurationExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceConfigurationExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceConfigurationExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceConfigurationExtension2(soap*, tt__VideoSourceConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationExtension2(soap, tt__VideoSourceConfigurationExtension2*) serialize to a stream
class tt__VideoSourceConfigurationExtension2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element describing the geometric lens distortion. Multiple instances for future variable lens support.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__LensDescription* of length 0..unbounded.
    std::vector<tt__LensDescription*   > LensDescription                0;
/// <PRE><BLOCKQUOTE>
///   Optional element describing the scene orientation in the cameras field of view.
/// </BLOCKQUOTE></PRE>
/// Element "SceneOrientation" of XSD type "http://www.onvif.org/ver10/schema":SceneOrientation.
    tt__SceneOrientation*                SceneOrientation               0;	///< Optional element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Rotate is a complexType.
///
/// class tt__Rotate operations:
/// - soap_new_tt__Rotate(soap*) allocate
/// - soap_new_tt__Rotate(soap*, int num) allocate array
/// - soap_new_req_tt__Rotate(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Rotate(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Rotate(soap*, tt__Rotate*) deserialize from a stream
/// - int soap_write_tt__Rotate(soap, tt__Rotate*) serialize to a stream
class tt__Rotate : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Rotation feature.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":RotateMode.
    enum tt__RotateMode                  Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to configure how much degree of clockwise rotation of image for On mode. Omitting this parameter for On mode means 180 degree rotation.
/// </BLOCKQUOTE></PRE>
/// Element "Degree" of XSD type xs:int.
    int*                                 Degree                         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RotateExtension.
    tt__RotateExtension*                 Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RotateExtension is a complexType.
///
/// class tt__RotateExtension operations:
/// - soap_new_tt__RotateExtension(soap*) allocate
/// - soap_new_tt__RotateExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RotateExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RotateExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RotateExtension(soap*, tt__RotateExtension*) deserialize from a stream
/// - int soap_write_tt__RotateExtension(soap, tt__RotateExtension*) serialize to a stream
class tt__RotateExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":LensProjection is a complexType.
///
/// class tt__LensProjection operations:
/// - soap_new_tt__LensProjection(soap*) allocate
/// - soap_new_tt__LensProjection(soap*, int num) allocate array
/// - soap_new_req_tt__LensProjection(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LensProjection(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LensProjection(soap*, tt__LensProjection*) deserialize from a stream
/// - int soap_write_tt__LensProjection(soap, tt__LensProjection*) serialize to a stream
class tt__LensProjection : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Angle of incidence.
/// </BLOCKQUOTE></PRE>
/// Element "Angle" of XSD type xs:float.
    float                                Angle                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Mapping radius as a consequence of the emergent angle.
/// </BLOCKQUOTE></PRE>
/// Element "Radius" of XSD type xs:float.
    float                                Radius                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional ray absorption at the given angle due to vignetting. A value of one means no absorption.
/// </BLOCKQUOTE></PRE>
/// Element "Transmittance" of XSD type xs:float.
    float*                               Transmittance                  0;	///< Optional element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LensOffset is a complexType.
///
/// class tt__LensOffset operations:
/// - soap_new_tt__LensOffset(soap*) allocate
/// - soap_new_tt__LensOffset(soap*, int num) allocate array
/// - soap_new_req_tt__LensOffset(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LensOffset(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LensOffset(soap*, tt__LensOffset*) deserialize from a stream
/// - int soap_write_tt__LensOffset(soap, tt__LensOffset*) serialize to a stream
class tt__LensOffset : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional horizontal offset of the lens center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
/// Attribute "x" of XSD type xs:float.
   @float*                               x                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional vertical offset of the lens center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
/// Attribute "y" of XSD type xs:float.
   @float*                               y                              0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LensDescription is a complexType.
///
/// class tt__LensDescription operations:
/// - soap_new_tt__LensDescription(soap*) allocate
/// - soap_new_tt__LensDescription(soap*, int num) allocate array
/// - soap_new_req_tt__LensDescription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LensDescription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LensDescription(soap*, tt__LensDescription*) deserialize from a stream
/// - int soap_write_tt__LensDescription(soap, tt__LensDescription*) serialize to a stream
class tt__LensDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Offset of the lens center to the imager center in normalized coordinates.
/// </BLOCKQUOTE></PRE>
/// Element "Offset" of XSD type "http://www.onvif.org/ver10/schema":LensOffset.
    tt__LensOffset*                      Offset                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Radial description of the projection characteristics. The resulting curve is defined by the B-Spline interpolation over the given elements. The element for Radius zero shall not be provided. The projection points shall be ordered with ascending Radius. Items outside the last projection Radius shall be assumed to be invisible (black).
/// </BLOCKQUOTE></PRE>
/// Vector of tt__LensProjection* of length 1..unbounded.
    std::vector<tt__LensProjection*    > Projection                     1;
/// <PRE><BLOCKQUOTE>
///   Compensation of the x coordinate needed for the ONVIF normalized coordinate system.
/// </BLOCKQUOTE></PRE>
/// Element "XFactor" of XSD type xs:float.
    float                                XFactor                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional focal length of the optical system.
/// </BLOCKQUOTE></PRE>
/// Attribute "FocalLength" of XSD type xs:float.
   @float*                               FocalLength                    0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptions is a complexType.
///
/// class tt__VideoSourceConfigurationOptions operations:
/// - soap_new_tt__VideoSourceConfigurationOptions(soap*) allocate
/// - soap_new_tt__VideoSourceConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceConfigurationOptions(soap*, tt__VideoSourceConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptions(soap, tt__VideoSourceConfigurationOptions*) serialize to a stream
class tt__VideoSourceConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported range for the capturing area.
///   Device that does not support cropped streaming shall express BoundsRange option as mentioned below
///   BoundsRange->XRange and BoundsRange->YRange with same Min/Max values HeightRange and WidthRange Min/Max values same as VideoSource Height and Width Limits.
/// </BLOCKQUOTE></PRE>
/// Element "BoundsRange" of XSD type "http://www.onvif.org/ver10/schema":IntRectangleRange.
    tt__IntRectangleRange*               BoundsRange                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of physical inputs.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > VideoSourceTokensAvailable     1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension.
    tt__VideoSourceConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaximumNumberOfProfiles" of XSD type xs:int.
   @int*                                 MaximumNumberOfProfiles        0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension is a complexType.
///
/// class tt__VideoSourceConfigurationOptionsExtension operations:
/// - soap_new_tt__VideoSourceConfigurationOptionsExtension(soap*) allocate
/// - soap_new_tt__VideoSourceConfigurationOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceConfigurationOptionsExtension(soap*, tt__VideoSourceConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptionsExtension(soap, tt__VideoSourceConfigurationOptionsExtension*) serialize to a stream
class tt__VideoSourceConfigurationOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Rotation feature.
/// </BLOCKQUOTE></PRE>
/// Element "Rotate" of XSD type "http://www.onvif.org/ver10/schema":RotateOptions.
    tt__RotateOptions*                   Rotate                         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension2.
    tt__VideoSourceConfigurationOptionsExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfigurationOptionsExtension2 is a complexType.
///
/// class tt__VideoSourceConfigurationOptionsExtension2 operations:
/// - soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap*) allocate
/// - soap_new_tt__VideoSourceConfigurationOptionsExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceConfigurationOptionsExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceConfigurationOptionsExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceConfigurationOptionsExtension2(soap*, tt__VideoSourceConfigurationOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfigurationOptionsExtension2(soap, tt__VideoSourceConfigurationOptionsExtension2*) serialize to a stream
class tt__VideoSourceConfigurationOptionsExtension2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Scene orientation modes supported by the device for this configuration.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__SceneOrientationMode of length 0..unbounded.
    std::vector<enum tt__SceneOrientationMode> SceneOrientationMode           0;
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":RotateOptions is a complexType.
///
/// class tt__RotateOptions operations:
/// - soap_new_tt__RotateOptions(soap*) allocate
/// - soap_new_tt__RotateOptions(soap*, int num) allocate array
/// - soap_new_req_tt__RotateOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RotateOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RotateOptions(soap*, tt__RotateOptions*) deserialize from a stream
/// - int soap_write_tt__RotateOptions(soap, tt__RotateOptions*) serialize to a stream
class tt__RotateOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of Rotate mode parameter.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__RotateMode of length 1..unbounded.
    std::vector<enum tt__RotateMode    > Mode                           1;
/// <PRE><BLOCKQUOTE>
///   List of supported degree value for rotation.
/// </BLOCKQUOTE></PRE>
/// Element "DegreeList" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        DegreeList                     0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RotateOptionsExtension.
    tt__RotateOptionsExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   After setting the rotation, if a device starts to reboot this value is true.
///   If a device can handle rotation setting without rebooting this value is false.
/// </BLOCKQUOTE></PRE>
/// Attribute "Reboot" of XSD type xs:boolean.
   @bool*                                Reboot                         0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RotateOptionsExtension is a complexType.
///
/// class tt__RotateOptionsExtension operations:
/// - soap_new_tt__RotateOptionsExtension(soap*) allocate
/// - soap_new_tt__RotateOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RotateOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RotateOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RotateOptionsExtension(soap*, tt__RotateOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__RotateOptionsExtension(soap, tt__RotateOptionsExtension*) serialize to a stream
class tt__RotateOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SceneOrientation is a complexType.
///
/// class tt__SceneOrientation operations:
/// - soap_new_tt__SceneOrientation(soap*) allocate
/// - soap_new_tt__SceneOrientation(soap*, int num) allocate array
/// - soap_new_req_tt__SceneOrientation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SceneOrientation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SceneOrientation(soap*, tt__SceneOrientation*) deserialize from a stream
/// - int soap_write_tt__SceneOrientation(soap, tt__SceneOrientation*) serialize to a stream
class tt__SceneOrientation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to assign the way the camera determines the scene orientation.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":SceneOrientationMode.
    enum tt__SceneOrientationMode        Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Assigned or determined scene orientation based on the Mode. When assigning the Mode to AUTO, this field is optional and will be ignored by the device. When assigning the Mode to MANUAL, this field is required and the device will return an InvalidArgs fault if missing.
/// </BLOCKQUOTE></PRE>
/// Element "Orientation" of XSD type xs:string.
    std::string*                         Orientation                    0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoResolution is a complexType.
///
/// class tt__VideoResolution operations:
/// - soap_new_tt__VideoResolution(soap*) allocate
/// - soap_new_tt__VideoResolution(soap*, int num) allocate array
/// - soap_new_req_tt__VideoResolution(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoResolution(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoResolution(soap*, tt__VideoResolution*) deserialize from a stream
/// - int soap_write_tt__VideoResolution(soap, tt__VideoResolution*) serialize to a stream
class tt__VideoResolution : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of the columns of the Video image.
/// </BLOCKQUOTE></PRE>
/// Element "Width" of XSD type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of the lines of the Video image.
/// </BLOCKQUOTE></PRE>
/// Element "Height" of XSD type xs:int.
    int                                  Height                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoRateControl is a complexType.
///
/// class tt__VideoRateControl operations:
/// - soap_new_tt__VideoRateControl(soap*) allocate
/// - soap_new_tt__VideoRateControl(soap*, int num) allocate array
/// - soap_new_req_tt__VideoRateControl(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoRateControl(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoRateControl(soap*, tt__VideoRateControl*) deserialize from a stream
/// - int soap_write_tt__VideoRateControl(soap, tt__VideoRateControl*) serialize to a stream
class tt__VideoRateControl : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum output framerate in fps. If an EncodingInterval is provided the resulting encoded framerate will be reduced by the given factor.
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateLimit" of XSD type xs:int.
    int                                  FrameRateLimit                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Interval at which images are encoded and transmitted. (A value of 1 means that every frame is encoded, a value of 2 means that every 2nd frame is encoded ...)
/// </BLOCKQUOTE></PRE>
/// Element "EncodingInterval" of XSD type xs:int.
    int                                  EncodingInterval               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the maximum output bitrate in kbps
/// </BLOCKQUOTE></PRE>
/// Element "BitrateLimit" of XSD type xs:int.
    int                                  BitrateLimit                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Configuration is a complexType.
///
/// class tt__Mpeg4Configuration operations:
/// - soap_new_tt__Mpeg4Configuration(soap*) allocate
/// - soap_new_tt__Mpeg4Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__Mpeg4Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Mpeg4Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Mpeg4Configuration(soap*, tt__Mpeg4Configuration*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Configuration(soap, tt__Mpeg4Configuration*) serialize to a stream
class tt__Mpeg4Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Determines the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
/// Element "GovLength" of XSD type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the Mpeg4 profile, either simple profile (SP) or advanced simple profile (ASP)
/// </BLOCKQUOTE></PRE>
/// Element "Mpeg4Profile" of XSD type "http://www.onvif.org/ver10/schema":Mpeg4Profile.
    enum tt__Mpeg4Profile                Mpeg4Profile                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":H264Configuration is a complexType.
///
/// class tt__H264Configuration operations:
/// - soap_new_tt__H264Configuration(soap*) allocate
/// - soap_new_tt__H264Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__H264Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__H264Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__H264Configuration(soap*, tt__H264Configuration*) deserialize from a stream
/// - int soap_write_tt__H264Configuration(soap, tt__H264Configuration*) serialize to a stream
class tt__H264Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
/// Element "GovLength" of XSD type xs:int.
    int                                  GovLength                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the H.264 profile, either baseline, main, extended or high
/// </BLOCKQUOTE></PRE>
/// Element "H264Profile" of XSD type "http://www.onvif.org/ver10/schema":H264Profile.
    enum tt__H264Profile                 H264Profile                    1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderConfigurationOptions is a complexType.
///
/// class tt__VideoEncoderConfigurationOptions operations:
/// - soap_new_tt__VideoEncoderConfigurationOptions(soap*) allocate
/// - soap_new_tt__VideoEncoderConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__VideoEncoderConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoEncoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoEncoderConfigurationOptions(soap*, tt__VideoEncoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderConfigurationOptions(soap, tt__VideoEncoderConfigurationOptions*) serialize to a stream
class tt__VideoEncoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Range of the quality values. A high value means higher quality.
/// </BLOCKQUOTE></PRE>
/// Element "QualityRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        QualityRange                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional JPEG encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
/// Element "JPEG" of XSD type "http://www.onvif.org/ver10/schema":JpegOptions.
    tt__JpegOptions*                     JPEG                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional MPEG-4 encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
/// Element "MPEG4" of XSD type "http://www.onvif.org/ver10/schema":Mpeg4Options.
    tt__Mpeg4Options*                    MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional H.264 encoder settings ranges (See also Extension element).
/// </BLOCKQUOTE></PRE>
/// Element "H264" of XSD type "http://www.onvif.org/ver10/schema":H264Options.
    tt__H264Options*                     H264                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension.
    tt__VideoEncoderOptionsExtension*    Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the support for the GuaranteedFrameRate attribute on the VideoEncoderConfiguration element.
/// </BLOCKQUOTE></PRE>
/// Attribute "GuaranteedFrameRateSupported" of XSD type xs:boolean.
   @bool*                                GuaranteedFrameRateSupported   0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension is a complexType.
///
/// class tt__VideoEncoderOptionsExtension operations:
/// - soap_new_tt__VideoEncoderOptionsExtension(soap*) allocate
/// - soap_new_tt__VideoEncoderOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__VideoEncoderOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoEncoderOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoEncoderOptionsExtension(soap*, tt__VideoEncoderOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderOptionsExtension(soap, tt__VideoEncoderOptionsExtension*) serialize to a stream
class tt__VideoEncoderOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional JPEG encoder settings ranges.
/// </BLOCKQUOTE></PRE>
/// Element "JPEG" of XSD type "http://www.onvif.org/ver10/schema":JpegOptions2.
    tt__JpegOptions2*                    JPEG                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional MPEG-4 encoder settings ranges.
/// </BLOCKQUOTE></PRE>
/// Element "MPEG4" of XSD type "http://www.onvif.org/ver10/schema":Mpeg4Options2.
    tt__Mpeg4Options2*                   MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional H.264 encoder settings ranges.
/// </BLOCKQUOTE></PRE>
/// Element "H264" of XSD type "http://www.onvif.org/ver10/schema":H264Options2.
    tt__H264Options2*                    H264                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2.
    tt__VideoEncoderOptionsExtension2*   Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderOptionsExtension2 is a complexType.
///
/// class tt__VideoEncoderOptionsExtension2 operations:
/// - soap_new_tt__VideoEncoderOptionsExtension2(soap*) allocate
/// - soap_new_tt__VideoEncoderOptionsExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__VideoEncoderOptionsExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoEncoderOptionsExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoEncoderOptionsExtension2(soap*, tt__VideoEncoderOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderOptionsExtension2(soap, tt__VideoEncoderOptionsExtension2*) serialize to a stream
class tt__VideoEncoderOptionsExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":JpegOptions is a complexType.
///
/// class tt__JpegOptions operations:
/// - soap_new_tt__JpegOptions(soap*) allocate
/// - soap_new_tt__JpegOptions(soap*, int num) allocate array
/// - soap_new_req_tt__JpegOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__JpegOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__JpegOptions(soap*, tt__JpegOptions*) deserialize from a stream
/// - int soap_write_tt__JpegOptions(soap, tt__JpegOptions*) serialize to a stream
class tt__JpegOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
/// Element "EncodingIntervalRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Options is a complexType.
///
/// class tt__Mpeg4Options operations:
/// - soap_new_tt__Mpeg4Options(soap*) allocate
/// - soap_new_tt__Mpeg4Options(soap*, int num) allocate array
/// - soap_new_req_tt__Mpeg4Options(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Mpeg4Options(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Mpeg4Options(soap*, tt__Mpeg4Options*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Options(soap, tt__Mpeg4Options*) serialize to a stream
class tt__Mpeg4Options : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
/// Element "GovLengthRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
/// Element "EncodingIntervalRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported MPEG-4 profiles.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__Mpeg4Profile of length 1..unbounded.
    std::vector<enum tt__Mpeg4Profile  > Mpeg4ProfilesSupported         1;
};

/// @brief "http://www.onvif.org/ver10/schema":H264Options is a complexType.
///
/// class tt__H264Options operations:
/// - soap_new_tt__H264Options(soap*) allocate
/// - soap_new_tt__H264Options(soap*, int num) allocate array
/// - soap_new_req_tt__H264Options(soap*, ...) allocate, set required members
/// - soap_new_set_tt__H264Options(soap*, ...) allocate, set all public members
/// - int soap_read_tt__H264Options(soap*, tt__H264Options*) deserialize from a stream
/// - int soap_write_tt__H264Options(soap, tt__H264Options*) serialize to a stream
class tt__H264Options : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
/// Element "GovLengthRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
/// Element "EncodingIntervalRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 profiles.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__H264Profile of length 1..unbounded.
    std::vector<enum tt__H264Profile   > H264ProfilesSupported          1;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoResolution2 is a complexType.
///
/// class tt__VideoResolution2 operations:
/// - soap_new_tt__VideoResolution2(soap*) allocate
/// - soap_new_tt__VideoResolution2(soap*, int num) allocate array
/// - soap_new_req_tt__VideoResolution2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoResolution2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoResolution2(soap*, tt__VideoResolution2*) deserialize from a stream
/// - int soap_write_tt__VideoResolution2(soap, tt__VideoResolution2*) serialize to a stream
class tt__VideoResolution2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of the columns of the Video image.
/// </BLOCKQUOTE></PRE>
/// Element "Width" of XSD type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of the lines of the Video image.
/// </BLOCKQUOTE></PRE>
/// Element "Height" of XSD type xs:int.
    int                                  Height                         1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoRateControl2 is a complexType.
///
/// class tt__VideoRateControl2 operations:
/// - soap_new_tt__VideoRateControl2(soap*) allocate
/// - soap_new_tt__VideoRateControl2(soap*, int num) allocate array
/// - soap_new_req_tt__VideoRateControl2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoRateControl2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoRateControl2(soap*, tt__VideoRateControl2*) deserialize from a stream
/// - int soap_write_tt__VideoRateControl2(soap, tt__VideoRateControl2*) serialize to a stream
class tt__VideoRateControl2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Desired frame rate in fps. The actual rate may be lower due to e.g. performance limitations.
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateLimit" of XSD type xs:float.
    float                                FrameRateLimit                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the maximum output bitrate in kbps
/// </BLOCKQUOTE></PRE>
/// Element "BitrateLimit" of XSD type xs:int.
    int                                  BitrateLimit                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Enforce constant bitrate.
/// </BLOCKQUOTE></PRE>
/// Attribute "ConstantBitRate" of XSD type xs:boolean.
   @bool*                                ConstantBitRate                0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoder2ConfigurationOptions is a complexType.
///
/// class tt__VideoEncoder2ConfigurationOptions operations:
/// - soap_new_tt__VideoEncoder2ConfigurationOptions(soap*) allocate
/// - soap_new_tt__VideoEncoder2ConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__VideoEncoder2ConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoEncoder2ConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoEncoder2ConfigurationOptions(soap*, tt__VideoEncoder2ConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoEncoder2ConfigurationOptions(soap, tt__VideoEncoder2ConfigurationOptions*) serialize to a stream
class tt__VideoEncoder2ConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Video Media Subtype for the video format. For definitions see tt:VideoEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range of the quality values. A high value means higher quality.
/// </BLOCKQUOTE></PRE>
/// Element "QualityRange" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      QualityRange                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution2* of length 1..unbounded.
    std::vector<tt__VideoResolution2*  > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "BitrateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Exactly two values, which define the Lower and Upper bounds for the supported group of Video frames length. These values typically correspond to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
/// Attribute "GovLengthRange" of XSD type "http://www.onvif.org/ver10/schema":IntAttrList.
   @tt__IntAttrList*                     GovLengthRange                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   List of supported target frame rates in fps (frames per second). The list shall be sorted with highest values first.
/// </BLOCKQUOTE></PRE>
/// Attribute "FrameRatesSupported" of XSD type "http://www.onvif.org/ver10/schema":FloatAttrList.
   @tt__FloatAttrList*                   FrameRatesSupported            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   List of supported encoder profiles as defined in tt::VideoEncodingProfiles.
/// </BLOCKQUOTE></PRE>
/// Attribute "ProfilesSupported" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  ProfilesSupported              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Signal whether enforcing constant bitrate is supported.
/// </BLOCKQUOTE></PRE>
/// Attribute "ConstantBitRateSupported" of XSD type xs:boolean.
   @bool*                                ConstantBitRateSupported       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the support for the GuaranteedFrameRate attribute on the VideoEncoder2Configuration element.
/// </BLOCKQUOTE></PRE>
/// Attribute "GuaranteedFrameRateSupported" of XSD type xs:boolean.
   @bool*                                GuaranteedFrameRateSupported   0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceConfigurationOptions is a complexType.
///
/// class tt__AudioSourceConfigurationOptions operations:
/// - soap_new_tt__AudioSourceConfigurationOptions(soap*) allocate
/// - soap_new_tt__AudioSourceConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AudioSourceConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioSourceConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioSourceConfigurationOptions(soap*, tt__AudioSourceConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioSourceConfigurationOptions(soap, tt__AudioSourceConfigurationOptions*) serialize to a stream
class tt__AudioSourceConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Tokens of the audio source the configuration can be used for.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > InputTokensAvailable           1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension.
    tt__AudioSourceOptionsExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceOptionsExtension is a complexType.
///
/// class tt__AudioSourceOptionsExtension operations:
/// - soap_new_tt__AudioSourceOptionsExtension(soap*) allocate
/// - soap_new_tt__AudioSourceOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AudioSourceOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioSourceOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioSourceOptionsExtension(soap*, tt__AudioSourceOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__AudioSourceOptionsExtension(soap, tt__AudioSourceOptionsExtension*) serialize to a stream
class tt__AudioSourceOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions is a complexType.
///
/// class tt__AudioEncoderConfigurationOptions operations:
/// - soap_new_tt__AudioEncoderConfigurationOptions(soap*) allocate
/// - soap_new_tt__AudioEncoderConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AudioEncoderConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioEncoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioEncoderConfigurationOptions(soap*, tt__AudioEncoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfigurationOptions(soap, tt__AudioEncoderConfigurationOptions*) serialize to a stream
class tt__AudioEncoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   list of supported AudioEncoderConfigurations
/// </BLOCKQUOTE></PRE>
/// Vector of tt__AudioEncoderConfigurationOption* of length 0..unbounded.
    std::vector<tt__AudioEncoderConfigurationOption*> Options                        0;
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOption is a complexType.
///
/// class tt__AudioEncoderConfigurationOption operations:
/// - soap_new_tt__AudioEncoderConfigurationOption(soap*) allocate
/// - soap_new_tt__AudioEncoderConfigurationOption(soap*, int num) allocate array
/// - soap_new_req_tt__AudioEncoderConfigurationOption(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioEncoderConfigurationOption(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioEncoderConfigurationOption(soap*, tt__AudioEncoderConfigurationOption*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfigurationOption(soap, tt__AudioEncoderConfigurationOption*) serialize to a stream
class tt__AudioEncoderConfigurationOption : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The enoding used for audio data (either G.711, G.726 or AAC)
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type "http://www.onvif.org/ver10/schema":AudioEncoding.
    enum tt__AudioEncoding               Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps for the specified Encoding
/// </BLOCKQUOTE></PRE>
/// Element "BitrateList" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        BitrateList                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported Sample Rates in kHz for the specified Encoding
/// </BLOCKQUOTE></PRE>
/// Element "SampleRateList" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateList                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoder2ConfigurationOptions is a complexType.
///
/// class tt__AudioEncoder2ConfigurationOptions operations:
/// - soap_new_tt__AudioEncoder2ConfigurationOptions(soap*) allocate
/// - soap_new_tt__AudioEncoder2ConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AudioEncoder2ConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioEncoder2ConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioEncoder2ConfigurationOptions(soap*, tt__AudioEncoder2ConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioEncoder2ConfigurationOptions(soap, tt__AudioEncoder2ConfigurationOptions*) serialize to a stream
class tt__AudioEncoder2ConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Audio Media Subtype for the audio format. For definitions see tt:AudioEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps for the specified Encoding
/// </BLOCKQUOTE></PRE>
/// Element "BitrateList" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        BitrateList                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported Sample Rates in kHz for the specified Encoding
/// </BLOCKQUOTE></PRE>
/// Element "SampleRateList" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateList                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationExtension is a complexType.
///
/// class tt__MetadataConfigurationExtension operations:
/// - soap_new_tt__MetadataConfigurationExtension(soap*) allocate
/// - soap_new_tt__MetadataConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataConfigurationExtension(soap*, tt__MetadataConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationExtension(soap, tt__MetadataConfigurationExtension*) serialize to a stream
class tt__MetadataConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZFilter is a complexType.
///
/// class tt__PTZFilter operations:
/// - soap_new_tt__PTZFilter(soap*) allocate
/// - soap_new_tt__PTZFilter(soap*, int num) allocate array
/// - soap_new_req_tt__PTZFilter(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZFilter(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZFilter(soap*, tt__PTZFilter*) deserialize from a stream
/// - int soap_write_tt__PTZFilter(soap, tt__PTZFilter*) serialize to a stream
class tt__PTZFilter : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the metadata stream shall contain the PTZ status (IDLE, MOVING or UNKNOWN)
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:boolean.
    bool                                 Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   True if the metadata stream shall contain the PTZ position
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type xs:boolean.
    bool                                 Position                       1;	///< Required element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":EventSubscription is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Subcription handling in the same way as base notification subscription.
/// </BLOCKQUOTE></PRE>
/// class tt__EventSubscription operations:
/// - soap_new_tt__EventSubscription(soap*) allocate
/// - soap_new_tt__EventSubscription(soap*, int num) allocate array
/// - soap_new_req_tt__EventSubscription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EventSubscription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EventSubscription(soap*, tt__EventSubscription*) deserialize from a stream
/// - int soap_write_tt__EventSubscription(soap, tt__EventSubscription*) serialize to a stream
class tt__EventSubscription : public xsd__anyType
{ public:
/// Element "Filter" of XSD type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// class _tt__EventSubscription_SubscriptionPolicy operations:
/// - soap_new__tt__EventSubscription_SubscriptionPolicy(soap*) allocate
/// - soap_new__tt__EventSubscription_SubscriptionPolicy(soap*, int num) allocate array
/// - soap_new_req__tt__EventSubscription_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - soap_new_set__tt__EventSubscription_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - int soap_read__tt__EventSubscription_SubscriptionPolicy(soap*, _tt__EventSubscription_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__tt__EventSubscription_SubscriptionPolicy(soap, _tt__EventSubscription_SubscriptionPolicy*) serialize to a stream
    class _tt__EventSubscription_SubscriptionPolicy
    {
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptions is a complexType.
///
/// class tt__MetadataConfigurationOptions operations:
/// - soap_new_tt__MetadataConfigurationOptions(soap*) allocate
/// - soap_new_tt__MetadataConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataConfigurationOptions(soap*, tt__MetadataConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptions(soap, tt__MetadataConfigurationOptions*) serialize to a stream
class tt__MetadataConfigurationOptions : public xsd__anyType
{ public:
/// Element "PTZStatusFilterOptions" of XSD type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions.
    tt__PTZStatusFilterOptions*          PTZStatusFilterOptions         1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension.
    tt__MetadataConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream the Geo Located positions of each target.
/// </BLOCKQUOTE></PRE>
/// Attribute "GeoLocation" of XSD type xs:boolean.
   @bool*                                GeoLocation                    0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension is a complexType.
///
/// class tt__MetadataConfigurationOptionsExtension operations:
/// - soap_new_tt__MetadataConfigurationOptionsExtension(soap*) allocate
/// - soap_new_tt__MetadataConfigurationOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataConfigurationOptionsExtension(soap*, tt__MetadataConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptionsExtension(soap, tt__MetadataConfigurationOptionsExtension*) serialize to a stream
class tt__MetadataConfigurationOptionsExtension : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported metadata compression type. Its options shall be chosen from tt:MetadataCompressionType.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > CompressionType                0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension2.
    tt__MetadataConfigurationOptionsExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfigurationOptionsExtension2 is a complexType.
///
/// class tt__MetadataConfigurationOptionsExtension2 operations:
/// - soap_new_tt__MetadataConfigurationOptionsExtension2(soap*) allocate
/// - soap_new_tt__MetadataConfigurationOptionsExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataConfigurationOptionsExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataConfigurationOptionsExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataConfigurationOptionsExtension2(soap*, tt__MetadataConfigurationOptionsExtension2*) deserialize from a stream
/// - int soap_write_tt__MetadataConfigurationOptionsExtension2(soap, tt__MetadataConfigurationOptionsExtension2*) serialize to a stream
class tt__MetadataConfigurationOptionsExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatusFilterOptions is a complexType.
///
/// class tt__PTZStatusFilterOptions operations:
/// - soap_new_tt__PTZStatusFilterOptions(soap*) allocate
/// - soap_new_tt__PTZStatusFilterOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTZStatusFilterOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZStatusFilterOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZStatusFilterOptions(soap*, tt__PTZStatusFilterOptions*) deserialize from a stream
/// - int soap_write_tt__PTZStatusFilterOptions(soap, tt__PTZStatusFilterOptions*) serialize to a stream
class tt__PTZStatusFilterOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream pan or tilt status information.
/// </BLOCKQUOTE></PRE>
/// Element "PanTiltStatusSupported" of XSD type xs:boolean.
    bool                                 PanTiltStatusSupported         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream zoom status inforamtion.
/// </BLOCKQUOTE></PRE>
/// Element "ZoomStatusSupported" of XSD type xs:boolean.
    bool                                 ZoomStatusSupported            1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream the pan or tilt position.
/// </BLOCKQUOTE></PRE>
/// Element "PanTiltPositionSupported" of XSD type xs:boolean.
    bool*                                PanTiltPositionSupported       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   True if the device is able to stream zoom position information.
/// </BLOCKQUOTE></PRE>
/// Element "ZoomPositionSupported" of XSD type xs:boolean.
    bool*                                ZoomPositionSupported          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension.
    tt__PTZStatusFilterOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatusFilterOptionsExtension is a complexType.
///
/// class tt__PTZStatusFilterOptionsExtension operations:
/// - soap_new_tt__PTZStatusFilterOptionsExtension(soap*) allocate
/// - soap_new_tt__PTZStatusFilterOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZStatusFilterOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZStatusFilterOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZStatusFilterOptionsExtension(soap*, tt__PTZStatusFilterOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZStatusFilterOptionsExtension(soap, tt__PTZStatusFilterOptionsExtension*) serialize to a stream
class tt__PTZStatusFilterOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutputExtension is a complexType.
///
/// class tt__VideoOutputExtension operations:
/// - soap_new_tt__VideoOutputExtension(soap*) allocate
/// - soap_new_tt__VideoOutputExtension(soap*, int num) allocate array
/// - soap_new_req_tt__VideoOutputExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoOutputExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoOutputExtension(soap*, tt__VideoOutputExtension*) deserialize from a stream
/// - int soap_write_tt__VideoOutputExtension(soap, tt__VideoOutputExtension*) serialize to a stream
class tt__VideoOutputExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutputConfigurationOptions is a complexType.
///
/// class tt__VideoOutputConfigurationOptions operations:
/// - soap_new_tt__VideoOutputConfigurationOptions(soap*) allocate
/// - soap_new_tt__VideoOutputConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__VideoOutputConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoOutputConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoOutputConfigurationOptions(soap*, tt__VideoOutputConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoOutputConfigurationOptions(soap, tt__VideoOutputConfigurationOptions*) serialize to a stream
class tt__VideoOutputConfigurationOptions : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions is a complexType.
///
/// class tt__VideoDecoderConfigurationOptions operations:
/// - soap_new_tt__VideoDecoderConfigurationOptions(soap*) allocate
/// - soap_new_tt__VideoDecoderConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__VideoDecoderConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoDecoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoDecoderConfigurationOptions(soap*, tt__VideoDecoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__VideoDecoderConfigurationOptions(soap, tt__VideoDecoderConfigurationOptions*) serialize to a stream
class tt__VideoDecoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode Jpeg streams this element describes the supported codecs and configurations
/// </BLOCKQUOTE></PRE>
/// Element "JpegDecOptions" of XSD type "http://www.onvif.org/ver10/schema":JpegDecOptions.
    tt__JpegDecOptions*                  JpegDecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode H.264 streams this element describes the supported codecs and configurations
/// </BLOCKQUOTE></PRE>
/// Element "H264DecOptions" of XSD type "http://www.onvif.org/ver10/schema":H264DecOptions.
    tt__H264DecOptions*                  H264DecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode Mpeg4 streams this element describes the supported codecs and configurations
/// </BLOCKQUOTE></PRE>
/// Element "Mpeg4DecOptions" of XSD type "http://www.onvif.org/ver10/schema":Mpeg4DecOptions.
    tt__Mpeg4DecOptions*                 Mpeg4DecOptions                0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension.
    tt__VideoDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":H264DecOptions is a complexType.
///
/// class tt__H264DecOptions operations:
/// - soap_new_tt__H264DecOptions(soap*) allocate
/// - soap_new_tt__H264DecOptions(soap*, int num) allocate array
/// - soap_new_req_tt__H264DecOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__H264DecOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__H264DecOptions(soap*, tt__H264DecOptions*) deserialize from a stream
/// - int soap_write_tt__H264DecOptions(soap, tt__H264DecOptions*) serialize to a stream
class tt__H264DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 Video Resolutions
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   List of supported H264 Profiles (either baseline, main, extended or high)
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__H264Profile of length 1..unbounded.
    std::vector<enum tt__H264Profile   > SupportedH264Profiles          1;
/// <PRE><BLOCKQUOTE>
///   Supported H.264 bitrate range in kbps
/// </BLOCKQUOTE></PRE>
/// Element "SupportedInputBitrate" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedInputBitrate          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported H.264 framerate range in fps
/// </BLOCKQUOTE></PRE>
/// Element "SupportedFrameRate" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedFrameRate             1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":JpegDecOptions is a complexType.
///
/// class tt__JpegDecOptions operations:
/// - soap_new_tt__JpegDecOptions(soap*) allocate
/// - soap_new_tt__JpegDecOptions(soap*, int num) allocate array
/// - soap_new_req_tt__JpegDecOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__JpegDecOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__JpegDecOptions(soap*, tt__JpegDecOptions*) deserialize from a stream
/// - int soap_write_tt__JpegDecOptions(soap, tt__JpegDecOptions*) serialize to a stream
class tt__JpegDecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported Jpeg Video Resolutions
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported Jpeg bitrate range in kbps
/// </BLOCKQUOTE></PRE>
/// Element "SupportedInputBitrate" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedInputBitrate          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported Jpeg framerate range in fps
/// </BLOCKQUOTE></PRE>
/// Element "SupportedFrameRate" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedFrameRate             1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4DecOptions is a complexType.
///
/// class tt__Mpeg4DecOptions operations:
/// - soap_new_tt__Mpeg4DecOptions(soap*) allocate
/// - soap_new_tt__Mpeg4DecOptions(soap*, int num) allocate array
/// - soap_new_req_tt__Mpeg4DecOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Mpeg4DecOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Mpeg4DecOptions(soap*, tt__Mpeg4DecOptions*) deserialize from a stream
/// - int soap_write_tt__Mpeg4DecOptions(soap, tt__Mpeg4DecOptions*) serialize to a stream
class tt__Mpeg4DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported Mpeg4 Video Resolutions
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   List of supported Mpeg4 Profiles (either SP or ASP)
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__Mpeg4Profile of length 1..unbounded.
    std::vector<enum tt__Mpeg4Profile  > SupportedMpeg4Profiles         1;
/// <PRE><BLOCKQUOTE>
///   Supported Mpeg4 bitrate range in kbps
/// </BLOCKQUOTE></PRE>
/// Element "SupportedInputBitrate" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedInputBitrate          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported Mpeg4 framerate range in fps
/// </BLOCKQUOTE></PRE>
/// Element "SupportedFrameRate" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        SupportedFrameRate             1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptionsExtension is a complexType.
///
/// class tt__VideoDecoderConfigurationOptionsExtension operations:
/// - soap_new_tt__VideoDecoderConfigurationOptionsExtension(soap*) allocate
/// - soap_new_tt__VideoDecoderConfigurationOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__VideoDecoderConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoDecoderConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoDecoderConfigurationOptionsExtension(soap*, tt__VideoDecoderConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__VideoDecoderConfigurationOptionsExtension(soap, tt__VideoDecoderConfigurationOptionsExtension*) serialize to a stream
class tt__VideoDecoderConfigurationOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioOutputConfigurationOptions is a complexType.
///
/// class tt__AudioOutputConfigurationOptions operations:
/// - soap_new_tt__AudioOutputConfigurationOptions(soap*) allocate
/// - soap_new_tt__AudioOutputConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AudioOutputConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioOutputConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioOutputConfigurationOptions(soap*, tt__AudioOutputConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioOutputConfigurationOptions(soap, tt__AudioOutputConfigurationOptions*) serialize to a stream
class tt__AudioOutputConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Tokens of the physical Audio outputs (typically one).
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > OutputTokensAvailable          1;
/// <PRE><BLOCKQUOTE>
///   An <b>audio</b> channel MAY support different types of audio transmission. While for full duplex
///   operation no special handling is required, in half duplex operation the transmission direction
///   needs to be switched.
///   The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
///   direction is currently active. An NVC can switch between different modes by setting the
///   AudioOutputConfiguration.<br/>
///   The following modes for the Send-Primacy are defined:<ul>
///   <li>www.onvif.org/ver20/HalfDuplex/Server
///   The server is allowed to send audio data to the client. The client shall not send
///   audio data via the backchannel to the NVT in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Client
///   The client is allowed to send audio data via the backchannel to the server. The
///   NVT shall not send audio data to the client in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Auto
///   It is up to the device how to deal with sending and receiving audio data.</li>
///   </ul>
///   Acoustic echo cancellation is out of ONVIF scope.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > SendPrimacyOptions             0;
/// <PRE><BLOCKQUOTE>
///   Minimum and maximum level range supported for this Output.
/// </BLOCKQUOTE></PRE>
/// Element "OutputLevelRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        OutputLevelRange               1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions is a complexType.
///
/// class tt__AudioDecoderConfigurationOptions operations:
/// - soap_new_tt__AudioDecoderConfigurationOptions(soap*) allocate
/// - soap_new_tt__AudioDecoderConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AudioDecoderConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioDecoderConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioDecoderConfigurationOptions(soap*, tt__AudioDecoderConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfigurationOptions(soap, tt__AudioDecoderConfigurationOptions*) serialize to a stream
class tt__AudioDecoderConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode AAC encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
/// Element "AACDecOptions" of XSD type "http://www.onvif.org/ver10/schema":AACDecOptions.
    tt__AACDecOptions*                   AACDecOptions                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode G711 encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
/// Element "G711DecOptions" of XSD type "http://www.onvif.org/ver10/schema":G711DecOptions.
    tt__G711DecOptions*                  G711DecOptions                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device is able to decode G726 encoded audio this section describes the supported configurations
/// </BLOCKQUOTE></PRE>
/// Element "G726DecOptions" of XSD type "http://www.onvif.org/ver10/schema":G726DecOptions.
    tt__G726DecOptions*                  G726DecOptions                 0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension.
    tt__AudioDecoderConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":G711DecOptions is a complexType.
///
/// class tt__G711DecOptions operations:
/// - soap_new_tt__G711DecOptions(soap*) allocate
/// - soap_new_tt__G711DecOptions(soap*, int num) allocate array
/// - soap_new_req_tt__G711DecOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__G711DecOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__G711DecOptions(soap*, tt__G711DecOptions*) deserialize from a stream
/// - int soap_write_tt__G711DecOptions(soap, tt__G711DecOptions*) serialize to a stream
class tt__G711DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
/// Element "SampleRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateRange                1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AACDecOptions is a complexType.
///
/// class tt__AACDecOptions operations:
/// - soap_new_tt__AACDecOptions(soap*) allocate
/// - soap_new_tt__AACDecOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AACDecOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AACDecOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AACDecOptions(soap*, tt__AACDecOptions*) deserialize from a stream
/// - int soap_write_tt__AACDecOptions(soap, tt__AACDecOptions*) serialize to a stream
class tt__AACDecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
/// Element "SampleRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateRange                1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":G726DecOptions is a complexType.
///
/// class tt__G726DecOptions operations:
/// - soap_new_tt__G726DecOptions(soap*) allocate
/// - soap_new_tt__G726DecOptions(soap*, int num) allocate array
/// - soap_new_req_tt__G726DecOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__G726DecOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__G726DecOptions(soap*, tt__G726DecOptions*) deserialize from a stream
/// - int soap_write_tt__G726DecOptions(soap, tt__G726DecOptions*) serialize to a stream
class tt__G726DecOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported bitrates in kbps
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported sample rates in kHz
/// </BLOCKQUOTE></PRE>
/// Element "SampleRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntItems.
    tt__IntItems*                        SampleRateRange                1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptionsExtension is a complexType.
///
/// class tt__AudioDecoderConfigurationOptionsExtension operations:
/// - soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap*) allocate
/// - soap_new_tt__AudioDecoderConfigurationOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AudioDecoderConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioDecoderConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioDecoderConfigurationOptionsExtension(soap*, tt__AudioDecoderConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfigurationOptionsExtension(soap, tt__AudioDecoderConfigurationOptionsExtension*) serialize to a stream
class tt__AudioDecoderConfigurationOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":MulticastConfiguration is a complexType.
///
/// class tt__MulticastConfiguration operations:
/// - soap_new_tt__MulticastConfiguration(soap*) allocate
/// - soap_new_tt__MulticastConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__MulticastConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MulticastConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MulticastConfiguration(soap*, tt__MulticastConfiguration*) deserialize from a stream
/// - int soap_write_tt__MulticastConfiguration(soap, tt__MulticastConfiguration*) serialize to a stream
class tt__MulticastConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The multicast address (if this address is set to 0 no multicast streaming is enaled)
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.onvif.org/ver10/schema":IPAddress.
    tt__IPAddress*                       Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The RTP mutlicast destination port. A device may support RTCP. In this case the port value shall be even to allow the corresponding RTCP stream to be mapped to the next higher (odd) destination port number as defined in the RTSP specification.
/// </BLOCKQUOTE></PRE>
/// Element "Port" of XSD type xs:int.
    int                                  Port                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   In case of IPv6 the TTL value is assumed as the hop limit. Note that for IPV6 and administratively scoped IPv4 multicast the primary use for hop limit / TTL is to prevent packets from (endlessly) circulating and not limiting scope. In these cases the address contains the scope.
/// </BLOCKQUOTE></PRE>
/// Element "TTL" of XSD type xs:int.
    int                                  TTL                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Read only property signalling that streaming is persistant. Use the methods StartMulticastStreaming and StopMulticastStreaming to switch its state.
/// </BLOCKQUOTE></PRE>
/// Element "AutoStart" of XSD type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":StreamSetup is a complexType.
///
/// class tt__StreamSetup operations:
/// - soap_new_tt__StreamSetup(soap*) allocate
/// - soap_new_tt__StreamSetup(soap*, int num) allocate array
/// - soap_new_req_tt__StreamSetup(soap*, ...) allocate, set required members
/// - soap_new_set_tt__StreamSetup(soap*, ...) allocate, set all public members
/// - int soap_read_tt__StreamSetup(soap*, tt__StreamSetup*) deserialize from a stream
/// - int soap_write_tt__StreamSetup(soap, tt__StreamSetup*) serialize to a stream
class tt__StreamSetup : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines if a multicast or unicast stream is requested
/// </BLOCKQUOTE></PRE>
/// Element "Stream" of XSD type "http://www.onvif.org/ver10/schema":StreamType.
    enum tt__StreamType                  Stream                         1;	///< Required element.
/// Element "Transport" of XSD type "http://www.onvif.org/ver10/schema":Transport.
    tt__Transport*                       Transport                      1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Transport is a complexType.
///
/// class tt__Transport operations:
/// - soap_new_tt__Transport(soap*) allocate
/// - soap_new_tt__Transport(soap*, int num) allocate array
/// - soap_new_req_tt__Transport(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Transport(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Transport(soap*, tt__Transport*) deserialize from a stream
/// - int soap_write_tt__Transport(soap, tt__Transport*) serialize to a stream
class tt__Transport : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines the network protocol for streaming, either UDP=RTP/UDP, RTSP=RTP/RTSP/TCP or HTTP=RTP/RTSP/HTTP/TCP
/// </BLOCKQUOTE></PRE>
/// Element "Protocol" of XSD type "http://www.onvif.org/ver10/schema":TransportProtocol.
    enum tt__TransportProtocol           Protocol                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to describe further tunnel options. This element is normally not needed
/// </BLOCKQUOTE></PRE>
/// Element "Tunnel" of XSD type "http://www.onvif.org/ver10/schema":Transport.
    tt__Transport*                       Tunnel                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaUri is a complexType.
///
/// class tt__MediaUri operations:
/// - soap_new_tt__MediaUri(soap*) allocate
/// - soap_new_tt__MediaUri(soap*, int num) allocate array
/// - soap_new_req_tt__MediaUri(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MediaUri(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MediaUri(soap*, tt__MediaUri*) deserialize from a stream
/// - int soap_write_tt__MediaUri(soap, tt__MediaUri*) serialize to a stream
class tt__MediaUri : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Stable Uri to be used for requesting the media stream
/// </BLOCKQUOTE></PRE>
/// Element "Uri" of XSD type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Uri is only valid until the connection is established. The value shall be set to "false".
/// </BLOCKQUOTE></PRE>
/// Element "InvalidAfterConnect" of XSD type xs:boolean.
    bool                                 InvalidAfterConnect            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Uri is invalid after a reboot of the device. The value shall be set to "false".
/// </BLOCKQUOTE></PRE>
/// Element "InvalidAfterReboot" of XSD type xs:boolean.
    bool                                 InvalidAfterReboot             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Duration how long the Uri is valid. This parameter shall be set to PT0S to indicate that this stream URI is indefinitely valid even if the profile changes
/// </BLOCKQUOTE></PRE>
/// Element "Timeout" of XSD type xs:duration.
    xsd__duration                        Timeout                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Scope is a complexType.
///
/// class tt__Scope operations:
/// - soap_new_tt__Scope(soap*) allocate
/// - soap_new_tt__Scope(soap*, int num) allocate array
/// - soap_new_req_tt__Scope(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Scope(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Scope(soap*, tt__Scope*) deserialize from a stream
/// - int soap_write_tt__Scope(soap, tt__Scope*) serialize to a stream
class tt__Scope : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the scope is fixed or configurable.
/// </BLOCKQUOTE></PRE>
/// Element "ScopeDef" of XSD type "http://www.onvif.org/ver10/schema":ScopeDefinition.
    enum tt__ScopeDefinition             ScopeDef                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Scope item URI.
/// </BLOCKQUOTE></PRE>
/// Element "ScopeItem" of XSD type xs:anyURI.
    xsd__anyURI                          ScopeItem                      1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension is a complexType.
///
/// class tt__NetworkInterfaceExtension operations:
/// - soap_new_tt__NetworkInterfaceExtension(soap*) allocate
/// - soap_new_tt__NetworkInterfaceExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceExtension(soap*, tt__NetworkInterfaceExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceExtension(soap, tt__NetworkInterfaceExtension*) serialize to a stream
class tt__NetworkInterfaceExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "InterfaceType" of XSD type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    tt__IANA_IfTypes                     InterfaceType                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point prepared for future 802.3 configuration.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Dot3Configuration* of length 0..unbounded.
    std::vector<tt__Dot3Configuration* > Dot3                           0;
/// Vector of tt__Dot11Configuration* of length 0..unbounded.
    std::vector<tt__Dot11Configuration*> Dot11                          0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2.
    tt__NetworkInterfaceExtension2*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot3Configuration is a complexType.
///
/// class tt__Dot3Configuration operations:
/// - soap_new_tt__Dot3Configuration(soap*) allocate
/// - soap_new_tt__Dot3Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__Dot3Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot3Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot3Configuration(soap*, tt__Dot3Configuration*) deserialize from a stream
/// - int soap_write_tt__Dot3Configuration(soap, tt__Dot3Configuration*) serialize to a stream
class tt__Dot3Configuration : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension2 is a complexType.
///
/// class tt__NetworkInterfaceExtension2 operations:
/// - soap_new_tt__NetworkInterfaceExtension2(soap*) allocate
/// - soap_new_tt__NetworkInterfaceExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceExtension2(soap*, tt__NetworkInterfaceExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceExtension2(soap, tt__NetworkInterfaceExtension2*) serialize to a stream
class tt__NetworkInterfaceExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceLink is a complexType.
///
/// class tt__NetworkInterfaceLink operations:
/// - soap_new_tt__NetworkInterfaceLink(soap*) allocate
/// - soap_new_tt__NetworkInterfaceLink(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceLink(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceLink(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceLink(soap*, tt__NetworkInterfaceLink*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceLink(soap, tt__NetworkInterfaceLink*) serialize to a stream
class tt__NetworkInterfaceLink : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Configured link settings.
/// </BLOCKQUOTE></PRE>
/// Element "AdminSettings" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  AdminSettings                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Current active link settings.
/// </BLOCKQUOTE></PRE>
/// Element "OperSettings" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  OperSettings                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Integer indicating interface type, for example: 6 is ethernet.
/// </BLOCKQUOTE></PRE>
/// Element "InterfaceType" of XSD type "http://www.onvif.org/ver10/schema":IANA-IfTypes.
    tt__IANA_IfTypes                     InterfaceType                  1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting is a complexType.
///
/// class tt__NetworkInterfaceConnectionSetting operations:
/// - soap_new_tt__NetworkInterfaceConnectionSetting(soap*) allocate
/// - soap_new_tt__NetworkInterfaceConnectionSetting(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceConnectionSetting(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceConnectionSetting(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceConnectionSetting(soap*, tt__NetworkInterfaceConnectionSetting*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceConnectionSetting(soap, tt__NetworkInterfaceConnectionSetting*) serialize to a stream
class tt__NetworkInterfaceConnectionSetting : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Auto negotiation on/off.
/// </BLOCKQUOTE></PRE>
/// Element "AutoNegotiation" of XSD type xs:boolean.
    bool                                 AutoNegotiation                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type xs:int.
    int                                  Speed                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Duplex type, Half or Full.
/// </BLOCKQUOTE></PRE>
/// Element "Duplex" of XSD type "http://www.onvif.org/ver10/schema":Duplex.
    enum tt__Duplex                      Duplex                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo is a complexType.
///
/// class tt__NetworkInterfaceInfo operations:
/// - soap_new_tt__NetworkInterfaceInfo(soap*) allocate
/// - soap_new_tt__NetworkInterfaceInfo(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceInfo(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceInfo(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceInfo(soap*, tt__NetworkInterfaceInfo*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceInfo(soap, tt__NetworkInterfaceInfo*) serialize to a stream
class tt__NetworkInterfaceInfo : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network interface name, for example eth0.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Network interface MAC address.
/// </BLOCKQUOTE></PRE>
/// Element "HwAddress" of XSD type "http://www.onvif.org/ver10/schema":HwAddress.
    tt__HwAddress                        HwAddress                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum transmission unit.
/// </BLOCKQUOTE></PRE>
/// Element "MTU" of XSD type xs:int.
    int*                                 MTU                            0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6NetworkInterface is a complexType.
///
/// class tt__IPv6NetworkInterface operations:
/// - soap_new_tt__IPv6NetworkInterface(soap*) allocate
/// - soap_new_tt__IPv6NetworkInterface(soap*, int num) allocate array
/// - soap_new_req_tt__IPv6NetworkInterface(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv6NetworkInterface(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv6NetworkInterface(soap*, tt__IPv6NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__IPv6NetworkInterface(soap, tt__IPv6NetworkInterface*) serialize to a stream
class tt__IPv6NetworkInterface : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is enabled.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv6 configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Config" of XSD type "http://www.onvif.org/ver10/schema":IPv6Configuration.
    tt__IPv6Configuration*               Config                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4NetworkInterface is a complexType.
///
/// class tt__IPv4NetworkInterface operations:
/// - soap_new_tt__IPv4NetworkInterface(soap*) allocate
/// - soap_new_tt__IPv4NetworkInterface(soap*, int num) allocate array
/// - soap_new_req_tt__IPv4NetworkInterface(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv4NetworkInterface(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv4NetworkInterface(soap*, tt__IPv4NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__IPv4NetworkInterface(soap, tt__IPv4NetworkInterface*) serialize to a stream
class tt__IPv4NetworkInterface : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv4 is enabled.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Config" of XSD type "http://www.onvif.org/ver10/schema":IPv4Configuration.
    tt__IPv4Configuration*               Config                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4Configuration is a complexType.
///
/// class tt__IPv4Configuration operations:
/// - soap_new_tt__IPv4Configuration(soap*) allocate
/// - soap_new_tt__IPv4Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__IPv4Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv4Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv4Configuration(soap*, tt__IPv4Configuration*) deserialize from a stream
/// - int soap_write_tt__IPv4Configuration(soap, tt__IPv4Configuration*) serialize to a stream
class tt__IPv4Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv4 addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv4Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv4Address*> Manual                         0;
/// <PRE><BLOCKQUOTE>
///   Link local address.
/// </BLOCKQUOTE></PRE>
/// Element "LinkLocal" of XSD type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    tt__PrefixedIPv4Address*             LinkLocal                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address configured by using DHCP.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type "http://www.onvif.org/ver10/schema":PrefixedIPv4Address.
    tt__PrefixedIPv4Address*             FromDHCP                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DHCP is used.
/// </BLOCKQUOTE></PRE>
/// Element "DHCP" of XSD type xs:boolean.
    bool                                 DHCP                           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6Configuration is a complexType.
///
/// class tt__IPv6Configuration operations:
/// - soap_new_tt__IPv6Configuration(soap*) allocate
/// - soap_new_tt__IPv6Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__IPv6Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv6Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv6Configuration(soap*, tt__IPv6Configuration*) deserialize from a stream
/// - int soap_write_tt__IPv6Configuration(soap, tt__IPv6Configuration*) serialize to a stream
class tt__IPv6Configuration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether router advertisment is used.
/// </BLOCKQUOTE></PRE>
/// Element "AcceptRouterAdvert" of XSD type xs:boolean.
    bool*                                AcceptRouterAdvert             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DHCP configuration.
/// </BLOCKQUOTE></PRE>
/// Element "DHCP" of XSD type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    enum tt__IPv6DHCPConfiguration       DHCP                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of manually entered IPv6 addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> Manual                         0;
/// <PRE><BLOCKQUOTE>
///   List of link local IPv6 addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> LinkLocal                      0;
/// <PRE><BLOCKQUOTE>
///   List of IPv6 addresses configured by using DHCP.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> FromDHCP                       0;
/// <PRE><BLOCKQUOTE>
///   List of IPv6 addresses configured by using router advertisment.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> FromRA                         0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension.
    tt__IPv6ConfigurationExtension*      Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6ConfigurationExtension is a complexType.
///
/// class tt__IPv6ConfigurationExtension operations:
/// - soap_new_tt__IPv6ConfigurationExtension(soap*) allocate
/// - soap_new_tt__IPv6ConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__IPv6ConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv6ConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv6ConfigurationExtension(soap*, tt__IPv6ConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__IPv6ConfigurationExtension(soap, tt__IPv6ConfigurationExtension*) serialize to a stream
class tt__IPv6ConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocol is a complexType.
///
/// class tt__NetworkProtocol operations:
/// - soap_new_tt__NetworkProtocol(soap*) allocate
/// - soap_new_tt__NetworkProtocol(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkProtocol(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkProtocol(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkProtocol(soap*, tt__NetworkProtocol*) deserialize from a stream
/// - int soap_write_tt__NetworkProtocol(soap, tt__NetworkProtocol*) serialize to a stream
class tt__NetworkProtocol : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network protocol type string.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":NetworkProtocolType.
    enum tt__NetworkProtocolType         Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the protocol is enabled or not.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The port that is used by the protocol.
/// </BLOCKQUOTE></PRE>
/// Vector of int of length 1..unbounded.
    std::vector<int                    > Port                           1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkProtocolExtension.
    tt__NetworkProtocolExtension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkProtocolExtension is a complexType.
///
/// class tt__NetworkProtocolExtension operations:
/// - soap_new_tt__NetworkProtocolExtension(soap*) allocate
/// - soap_new_tt__NetworkProtocolExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkProtocolExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkProtocolExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkProtocolExtension(soap*, tt__NetworkProtocolExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkProtocolExtension(soap, tt__NetworkProtocolExtension*) serialize to a stream
class tt__NetworkProtocolExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHost is a complexType.
///
/// class tt__NetworkHost operations:
/// - soap_new_tt__NetworkHost(soap*) allocate
/// - soap_new_tt__NetworkHost(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkHost(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkHost(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkHost(soap*, tt__NetworkHost*) deserialize from a stream
/// - int soap_write_tt__NetworkHost(soap, tt__NetworkHost*) serialize to a stream
class tt__NetworkHost : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network host type: IPv4, IPv6 or DNS.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":NetworkHostType.
    enum tt__NetworkHostType             Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address.
/// </BLOCKQUOTE></PRE>
/// Element "IPv4Address" of XSD type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address*                     IPv4Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 address.
/// </BLOCKQUOTE></PRE>
/// Element "IPv6Address" of XSD type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address*                     IPv6Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
/// Element "DNSname" of XSD type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName*                         DNSname                        0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkHostExtension.
    tt__NetworkHostExtension*            Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkHostExtension is a complexType.
///
/// class tt__NetworkHostExtension operations:
/// - soap_new_tt__NetworkHostExtension(soap*) allocate
/// - soap_new_tt__NetworkHostExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkHostExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkHostExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkHostExtension(soap*, tt__NetworkHostExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkHostExtension(soap, tt__NetworkHostExtension*) serialize to a stream
class tt__NetworkHostExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddress is a complexType.
///
/// class tt__IPAddress operations:
/// - soap_new_tt__IPAddress(soap*) allocate
/// - soap_new_tt__IPAddress(soap*, int num) allocate array
/// - soap_new_req_tt__IPAddress(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPAddress(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPAddress(soap*, tt__IPAddress*) deserialize from a stream
/// - int soap_write_tt__IPAddress(soap, tt__IPAddress*) serialize to a stream
class tt__IPAddress : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the address is an IPv4 or IPv6 address.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":IPType.
    enum tt__IPType                      Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   IPv4 address.
/// </BLOCKQUOTE></PRE>
/// Element "IPv4Address" of XSD type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address*                     IPv4Address                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 address
/// </BLOCKQUOTE></PRE>
/// Element "IPv6Address" of XSD type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address*                     IPv6Address                    0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PrefixedIPv4Address is a complexType.
///
/// class tt__PrefixedIPv4Address operations:
/// - soap_new_tt__PrefixedIPv4Address(soap*) allocate
/// - soap_new_tt__PrefixedIPv4Address(soap*, int num) allocate array
/// - soap_new_req_tt__PrefixedIPv4Address(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PrefixedIPv4Address(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PrefixedIPv4Address(soap*, tt__PrefixedIPv4Address*) deserialize from a stream
/// - int soap_write_tt__PrefixedIPv4Address(soap, tt__PrefixedIPv4Address*) serialize to a stream
class tt__PrefixedIPv4Address : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv4 address
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.onvif.org/ver10/schema":IPv4Address.
    tt__IPv4Address                      Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Prefix/submask length
/// </BLOCKQUOTE></PRE>
/// Element "PrefixLength" of XSD type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PrefixedIPv6Address is a complexType.
///
/// class tt__PrefixedIPv6Address operations:
/// - soap_new_tt__PrefixedIPv6Address(soap*) allocate
/// - soap_new_tt__PrefixedIPv6Address(soap*, int num) allocate array
/// - soap_new_req_tt__PrefixedIPv6Address(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PrefixedIPv6Address(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PrefixedIPv6Address(soap*, tt__PrefixedIPv6Address*) deserialize from a stream
/// - int soap_write_tt__PrefixedIPv6Address(soap, tt__PrefixedIPv6Address*) serialize to a stream
class tt__PrefixedIPv6Address : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv6 address
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type "http://www.onvif.org/ver10/schema":IPv6Address.
    tt__IPv6Address                      Address                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Prefix/submask length
/// </BLOCKQUOTE></PRE>
/// Element "PrefixLength" of XSD type xs:int.
    int                                  PrefixLength                   1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":HostnameInformation is a complexType.
///
/// class tt__HostnameInformation operations:
/// - soap_new_tt__HostnameInformation(soap*) allocate
/// - soap_new_tt__HostnameInformation(soap*, int num) allocate array
/// - soap_new_req_tt__HostnameInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__HostnameInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__HostnameInformation(soap*, tt__HostnameInformation*) deserialize from a stream
/// - int soap_write_tt__HostnameInformation(soap, tt__HostnameInformation*) serialize to a stream
class tt__HostnameInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether the hostname is obtained from DHCP or not.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the hostname.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:token.
    xsd__token*                          Name                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":HostnameInformationExtension.
    tt__HostnameInformationExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":HostnameInformationExtension is a complexType.
///
/// class tt__HostnameInformationExtension operations:
/// - soap_new_tt__HostnameInformationExtension(soap*) allocate
/// - soap_new_tt__HostnameInformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__HostnameInformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__HostnameInformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__HostnameInformationExtension(soap*, tt__HostnameInformationExtension*) deserialize from a stream
/// - int soap_write_tt__HostnameInformationExtension(soap, tt__HostnameInformationExtension*) serialize to a stream
class tt__HostnameInformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":DNSInformation is a complexType.
///
/// class tt__DNSInformation operations:
/// - soap_new_tt__DNSInformation(soap*) allocate
/// - soap_new_tt__DNSInformation(soap*, int num) allocate array
/// - soap_new_req_tt__DNSInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DNSInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DNSInformation(soap*, tt__DNSInformation*) deserialize from a stream
/// - int soap_write_tt__DNSInformation(soap, tt__DNSInformation*) serialize to a stream
class tt__DNSInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DNS information is retrieved from DHCP.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Search domain.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__token of length 0..unbounded.
    std::vector<xsd__token             > SearchDomain                   0;
/// <PRE><BLOCKQUOTE>
///   List of DNS addresses received from DHCP.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPAddress* of length 0..unbounded.
    std::vector<tt__IPAddress*         > DNSFromDHCP                    0;
/// <PRE><BLOCKQUOTE>
///   List of manually entered DNS addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPAddress* of length 0..unbounded.
    std::vector<tt__IPAddress*         > DNSManual                      0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":DNSInformationExtension.
    tt__DNSInformationExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DNSInformationExtension is a complexType.
///
/// class tt__DNSInformationExtension operations:
/// - soap_new_tt__DNSInformationExtension(soap*) allocate
/// - soap_new_tt__DNSInformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__DNSInformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DNSInformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DNSInformationExtension(soap*, tt__DNSInformationExtension*) deserialize from a stream
/// - int soap_write_tt__DNSInformationExtension(soap, tt__DNSInformationExtension*) serialize to a stream
class tt__DNSInformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NTPInformation is a complexType.
///
/// class tt__NTPInformation operations:
/// - soap_new_tt__NTPInformation(soap*) allocate
/// - soap_new_tt__NTPInformation(soap*, int num) allocate array
/// - soap_new_req_tt__NTPInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NTPInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NTPInformation(soap*, tt__NTPInformation*) deserialize from a stream
/// - int soap_write_tt__NTPInformation(soap, tt__NTPInformation*) serialize to a stream
class tt__NTPInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if NTP information is to be retrieved by using DHCP.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of NTP addresses retrieved by using DHCP.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > NTPFromDHCP                    0;
/// <PRE><BLOCKQUOTE>
///   List of manually entered NTP addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > NTPManual                      0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NTPInformationExtension.
    tt__NTPInformationExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NTPInformationExtension is a complexType.
///
/// class tt__NTPInformationExtension operations:
/// - soap_new_tt__NTPInformationExtension(soap*) allocate
/// - soap_new_tt__NTPInformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NTPInformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NTPInformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NTPInformationExtension(soap*, tt__NTPInformationExtension*) deserialize from a stream
/// - int soap_write_tt__NTPInformationExtension(soap, tt__NTPInformationExtension*) serialize to a stream
class tt__NTPInformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSInformation is a complexType.
///
/// class tt__DynamicDNSInformation operations:
/// - soap_new_tt__DynamicDNSInformation(soap*) allocate
/// - soap_new_tt__DynamicDNSInformation(soap*, int num) allocate array
/// - soap_new_req_tt__DynamicDNSInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DynamicDNSInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DynamicDNSInformation(soap*, tt__DynamicDNSInformation*) deserialize from a stream
/// - int soap_write_tt__DynamicDNSInformation(soap, tt__DynamicDNSInformation*) serialize to a stream
class tt__DynamicDNSInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS type.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    enum tt__DynamicDNSType              Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time to live.
/// </BLOCKQUOTE></PRE>
/// Element "TTL" of XSD type xs:duration.
    xsd__duration*                       TTL                            0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension.
    tt__DynamicDNSInformationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DynamicDNSInformationExtension is a complexType.
///
/// class tt__DynamicDNSInformationExtension operations:
/// - soap_new_tt__DynamicDNSInformationExtension(soap*) allocate
/// - soap_new_tt__DynamicDNSInformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__DynamicDNSInformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DynamicDNSInformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DynamicDNSInformationExtension(soap*, tt__DynamicDNSInformationExtension*) deserialize from a stream
/// - int soap_write_tt__DynamicDNSInformationExtension(soap, tt__DynamicDNSInformationExtension*) serialize to a stream
class tt__DynamicDNSInformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration is a complexType.
///
/// class tt__NetworkInterfaceSetConfiguration operations:
/// - soap_new_tt__NetworkInterfaceSetConfiguration(soap*) allocate
/// - soap_new_tt__NetworkInterfaceSetConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceSetConfiguration(soap*, tt__NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfiguration(soap, tt__NetworkInterfaceSetConfiguration*) serialize to a stream
class tt__NetworkInterfaceSetConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not an interface is enabled.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Link configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Link" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceConnectionSetting.
    tt__NetworkInterfaceConnectionSetting*  Link                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum transmission unit.
/// </BLOCKQUOTE></PRE>
/// Element "MTU" of XSD type xs:int.
    int*                                 MTU                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 network interface configuration.
/// </BLOCKQUOTE></PRE>
/// Element "IPv4" of XSD type "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration.
    tt__IPv4NetworkInterfaceSetConfiguration*  IPv4                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 network interface configuration.
/// </BLOCKQUOTE></PRE>
/// Element "IPv6" of XSD type "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration.
    tt__IPv6NetworkInterfaceSetConfiguration*  IPv6                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension.
    tt__NetworkInterfaceSetConfigurationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension is a complexType.
///
/// class tt__NetworkInterfaceSetConfigurationExtension operations:
/// - soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap*) allocate
/// - soap_new_tt__NetworkInterfaceSetConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceSetConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceSetConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceSetConfigurationExtension(soap*, tt__NetworkInterfaceSetConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfigurationExtension(soap, tt__NetworkInterfaceSetConfigurationExtension*) serialize to a stream
class tt__NetworkInterfaceSetConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Vector of tt__Dot3Configuration* of length 0..unbounded.
    std::vector<tt__Dot3Configuration* > Dot3                           0;
/// Vector of tt__Dot11Configuration* of length 0..unbounded.
    std::vector<tt__Dot11Configuration*> Dot11                          0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2.
    tt__NetworkInterfaceSetConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv6NetworkInterfaceSetConfiguration is a complexType.
///
/// class tt__IPv6NetworkInterfaceSetConfiguration operations:
/// - soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap*) allocate
/// - soap_new_tt__IPv6NetworkInterfaceSetConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__IPv6NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv6NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv6NetworkInterfaceSetConfiguration(soap*, tt__IPv6NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__IPv6NetworkInterfaceSetConfiguration(soap, tt__IPv6NetworkInterfaceSetConfiguration*) serialize to a stream
class tt__IPv6NetworkInterfaceSetConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is enabled.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether router advertisment is used.
/// </BLOCKQUOTE></PRE>
/// Element "AcceptRouterAdvert" of XSD type xs:boolean.
    bool*                                AcceptRouterAdvert             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv6 addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> Manual                         0;
/// <PRE><BLOCKQUOTE>
///   DHCP configuration.
/// </BLOCKQUOTE></PRE>
/// Element "DHCP" of XSD type "http://www.onvif.org/ver10/schema":IPv6DHCPConfiguration.
    enum tt__IPv6DHCPConfiguration*      DHCP                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":IPv4NetworkInterfaceSetConfiguration is a complexType.
///
/// class tt__IPv4NetworkInterfaceSetConfiguration operations:
/// - soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap*) allocate
/// - soap_new_tt__IPv4NetworkInterfaceSetConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__IPv4NetworkInterfaceSetConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPv4NetworkInterfaceSetConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPv4NetworkInterfaceSetConfiguration(soap*, tt__IPv4NetworkInterfaceSetConfiguration*) deserialize from a stream
/// - int soap_write_tt__IPv4NetworkInterfaceSetConfiguration(soap, tt__IPv4NetworkInterfaceSetConfiguration*) serialize to a stream
class tt__IPv4NetworkInterfaceSetConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv4 is enabled.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool*                                Enabled                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of manually added IPv4 addresses.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PrefixedIPv4Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv4Address*> Manual                         0;
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not DHCP is used.
/// </BLOCKQUOTE></PRE>
/// Element "DHCP" of XSD type xs:boolean.
    bool*                                DHCP                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkGateway is a complexType.
///
/// class tt__NetworkGateway operations:
/// - soap_new_tt__NetworkGateway(soap*) allocate
/// - soap_new_tt__NetworkGateway(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkGateway(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkGateway(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkGateway(soap*, tt__NetworkGateway*) deserialize from a stream
/// - int soap_write_tt__NetworkGateway(soap, tt__NetworkGateway*) serialize to a stream
class tt__NetworkGateway : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   IPv4 address string.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPv4Address of length 0..unbounded.
    std::vector<tt__IPv4Address        > IPv4Address                    0;
/// <PRE><BLOCKQUOTE>
///   IPv6 address string.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPv6Address of length 0..unbounded.
    std::vector<tt__IPv6Address        > IPv6Address                    0;
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration is a complexType.
///
/// class tt__NetworkZeroConfiguration operations:
/// - soap_new_tt__NetworkZeroConfiguration(soap*) allocate
/// - soap_new_tt__NetworkZeroConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkZeroConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkZeroConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkZeroConfiguration(soap*, tt__NetworkZeroConfiguration*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfiguration(soap, tt__NetworkZeroConfiguration*) serialize to a stream
class tt__NetworkZeroConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier of network interface.
/// </BLOCKQUOTE></PRE>
/// Element "InterfaceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the zero-configuration is enabled or not.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The zero-configuration IPv4 address(es)
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPv4Address of length 0..unbounded.
    std::vector<tt__IPv4Address        > Addresses                      0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension.
    tt__NetworkZeroConfigurationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension is a complexType.
///
/// class tt__NetworkZeroConfigurationExtension operations:
/// - soap_new_tt__NetworkZeroConfigurationExtension(soap*) allocate
/// - soap_new_tt__NetworkZeroConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkZeroConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkZeroConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkZeroConfigurationExtension(soap*, tt__NetworkZeroConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfigurationExtension(soap, tt__NetworkZeroConfigurationExtension*) serialize to a stream
class tt__NetworkZeroConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional array holding the configuration for the second and possibly further interfaces.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkZeroConfiguration* of length 0..unbounded.
    std::vector<tt__NetworkZeroConfiguration*> Additional                     0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension2.
    tt__NetworkZeroConfigurationExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkZeroConfigurationExtension2 is a complexType.
///
/// class tt__NetworkZeroConfigurationExtension2 operations:
/// - soap_new_tt__NetworkZeroConfigurationExtension2(soap*) allocate
/// - soap_new_tt__NetworkZeroConfigurationExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkZeroConfigurationExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkZeroConfigurationExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkZeroConfigurationExtension2(soap*, tt__NetworkZeroConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkZeroConfigurationExtension2(soap, tt__NetworkZeroConfigurationExtension2*) serialize to a stream
class tt__NetworkZeroConfigurationExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilter is a complexType.
///
/// class tt__IPAddressFilter operations:
/// - soap_new_tt__IPAddressFilter(soap*) allocate
/// - soap_new_tt__IPAddressFilter(soap*, int num) allocate array
/// - soap_new_req_tt__IPAddressFilter(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPAddressFilter(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPAddressFilter(soap*, tt__IPAddressFilter*) deserialize from a stream
/// - int soap_write_tt__IPAddressFilter(soap, tt__IPAddressFilter*) serialize to a stream
class tt__IPAddressFilter : public xsd__anyType
{ public:
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":IPAddressFilterType.
    enum tt__IPAddressFilterType         Type                           1;	///< Required element.
/// Vector of tt__PrefixedIPv4Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv4Address*> IPv4Address                    0;
/// Vector of tt__PrefixedIPv6Address* of length 0..unbounded.
    std::vector<tt__PrefixedIPv6Address*> IPv6Address                    0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":IPAddressFilterExtension.
    tt__IPAddressFilterExtension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IPAddressFilterExtension is a complexType.
///
/// class tt__IPAddressFilterExtension operations:
/// - soap_new_tt__IPAddressFilterExtension(soap*) allocate
/// - soap_new_tt__IPAddressFilterExtension(soap*, int num) allocate array
/// - soap_new_req_tt__IPAddressFilterExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IPAddressFilterExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IPAddressFilterExtension(soap*, tt__IPAddressFilterExtension*) deserialize from a stream
/// - int soap_write_tt__IPAddressFilterExtension(soap, tt__IPAddressFilterExtension*) serialize to a stream
class tt__IPAddressFilterExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Configuration is a complexType.
///
/// class tt__Dot11Configuration operations:
/// - soap_new_tt__Dot11Configuration(soap*) allocate
/// - soap_new_tt__Dot11Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11Configuration(soap*, tt__Dot11Configuration*) deserialize from a stream
/// - int soap_write_tt__Dot11Configuration(soap, tt__Dot11Configuration*) serialize to a stream
class tt__Dot11Configuration : public xsd__anyType
{ public:
/// Element "SSID" of XSD type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":Dot11StationMode.
    enum tt__Dot11StationMode            Mode                           1;	///< Required element.
/// Element "Alias" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Alias                          1;	///< Required element.
/// Element "Priority" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceConfigPriority.
    tt__NetworkInterfaceConfigPriority   Priority                       1;	///< Required element.
/// Element "Security" of XSD type "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration.
    tt__Dot11SecurityConfiguration*      Security                       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityConfiguration is a complexType.
///
/// class tt__Dot11SecurityConfiguration operations:
/// - soap_new_tt__Dot11SecurityConfiguration(soap*) allocate
/// - soap_new_tt__Dot11SecurityConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11SecurityConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11SecurityConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11SecurityConfiguration(soap*, tt__Dot11SecurityConfiguration*) deserialize from a stream
/// - int soap_write_tt__Dot11SecurityConfiguration(soap, tt__Dot11SecurityConfiguration*) serialize to a stream
class tt__Dot11SecurityConfiguration : public xsd__anyType
{ public:
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":Dot11SecurityMode.
    enum tt__Dot11SecurityMode           Mode                           1;	///< Required element.
/// Element "Algorithm" of XSD type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum tt__Dot11Cipher*                Algorithm                      0;	///< Optional element.
/// Element "PSK" of XSD type "http://www.onvif.org/ver10/schema":Dot11PSKSet.
    tt__Dot11PSKSet*                     PSK                            0;	///< Optional element.
/// Element "Dot1X" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  Dot1X                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension.
    tt__Dot11SecurityConfigurationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11SecurityConfigurationExtension is a complexType.
///
/// class tt__Dot11SecurityConfigurationExtension operations:
/// - soap_new_tt__Dot11SecurityConfigurationExtension(soap*) allocate
/// - soap_new_tt__Dot11SecurityConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11SecurityConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11SecurityConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11SecurityConfigurationExtension(soap*, tt__Dot11SecurityConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11SecurityConfigurationExtension(soap, tt__Dot11SecurityConfigurationExtension*) serialize to a stream
class tt__Dot11SecurityConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKSet is a complexType.
///
/// class tt__Dot11PSKSet operations:
/// - soap_new_tt__Dot11PSKSet(soap*) allocate
/// - soap_new_tt__Dot11PSKSet(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11PSKSet(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11PSKSet(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11PSKSet(soap*, tt__Dot11PSKSet*) deserialize from a stream
/// - int soap_write_tt__Dot11PSKSet(soap, tt__Dot11PSKSet*) serialize to a stream
class tt__Dot11PSKSet : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   According to IEEE802.11-2007 H.4.1 the RSNA PSK consists of 256 bits, or 64 octets when represented in hex<br/>
///   Either Key or Passphrase shall be given, if both are supplied Key shall be used by the device and Passphrase ignored.
/// </BLOCKQUOTE></PRE>
/// Element "Key" of XSD type "http://www.onvif.org/ver10/schema":Dot11PSK.
    tt__Dot11PSK*                        Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   According to IEEE802.11-2007 H.4.1 a pass-phrase is a sequence of between 8 and 63 ASCII-encoded characters and
///   each character in the pass-phrase must have an encoding in the range of 32 to 126 (decimal),inclusive.<br/>
///   If only Passpharse is supplied the Key shall be derived using the algorithm described in IEEE802.11-2007 section H.4
/// </BLOCKQUOTE></PRE>
/// Element "Passphrase" of XSD type "http://www.onvif.org/ver10/schema":Dot11PSKPassphrase.
    tt__Dot11PSKPassphrase*              Passphrase                     0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension.
    tt__Dot11PSKSetExtension*            Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11PSKSetExtension is a complexType.
///
/// class tt__Dot11PSKSetExtension operations:
/// - soap_new_tt__Dot11PSKSetExtension(soap*) allocate
/// - soap_new_tt__Dot11PSKSetExtension(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11PSKSetExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11PSKSetExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11PSKSetExtension(soap*, tt__Dot11PSKSetExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11PSKSetExtension(soap, tt__Dot11PSKSetExtension*) serialize to a stream
class tt__Dot11PSKSetExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfigurationExtension2 is a complexType.
///
/// class tt__NetworkInterfaceSetConfigurationExtension2 operations:
/// - soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap*) allocate
/// - soap_new_tt__NetworkInterfaceSetConfigurationExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterfaceSetConfigurationExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterfaceSetConfigurationExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterfaceSetConfigurationExtension2(soap*, tt__NetworkInterfaceSetConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkInterfaceSetConfigurationExtension2(soap, tt__NetworkInterfaceSetConfigurationExtension2*) serialize to a stream
class tt__NetworkInterfaceSetConfigurationExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Capabilities is a complexType.
///
/// class tt__Dot11Capabilities operations:
/// - soap_new_tt__Dot11Capabilities(soap*) allocate
/// - soap_new_tt__Dot11Capabilities(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11Capabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11Capabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11Capabilities(soap*, tt__Dot11Capabilities*) deserialize from a stream
/// - int soap_write_tt__Dot11Capabilities(soap, tt__Dot11Capabilities*) serialize to a stream
class tt__Dot11Capabilities : public xsd__anyType
{ public:
/// Element "TKIP" of XSD type xs:boolean.
    bool                                 TKIP                           1;	///< Required element.
/// Element "ScanAvailableNetworks" of XSD type xs:boolean.
    bool                                 ScanAvailableNetworks          1;	///< Required element.
/// Element "MultipleConfiguration" of XSD type xs:boolean.
    bool                                 MultipleConfiguration          1;	///< Required element.
/// Element "AdHocStationMode" of XSD type xs:boolean.
    bool                                 AdHocStationMode               1;	///< Required element.
/// Element "WEP" of XSD type xs:boolean.
    bool                                 WEP                            1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11Status is a complexType.
///
/// class tt__Dot11Status operations:
/// - soap_new_tt__Dot11Status(soap*) allocate
/// - soap_new_tt__Dot11Status(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11Status(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11Status(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11Status(soap*, tt__Dot11Status*) deserialize from a stream
/// - int soap_write_tt__Dot11Status(soap, tt__Dot11Status*) serialize to a stream
class tt__Dot11Status : public xsd__anyType
{ public:
/// Element "SSID" of XSD type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "BSSID" of XSD type xs:string.
    std::string*                         BSSID                          0;	///< Optional element.
/// Element "PairCipher" of XSD type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum tt__Dot11Cipher*                PairCipher                     0;	///< Optional element.
/// Element "GroupCipher" of XSD type "http://www.onvif.org/ver10/schema":Dot11Cipher.
    enum tt__Dot11Cipher*                GroupCipher                    0;	///< Optional element.
/// Element "SignalStrength" of XSD type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    enum tt__Dot11SignalStrength*        SignalStrength                 0;	///< Optional element.
/// Element "ActiveConfigAlias" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   ActiveConfigAlias              1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AvailableNetworks is a complexType.
///
/// class tt__Dot11AvailableNetworks operations:
/// - soap_new_tt__Dot11AvailableNetworks(soap*) allocate
/// - soap_new_tt__Dot11AvailableNetworks(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11AvailableNetworks(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11AvailableNetworks(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11AvailableNetworks(soap*, tt__Dot11AvailableNetworks*) deserialize from a stream
/// - int soap_write_tt__Dot11AvailableNetworks(soap, tt__Dot11AvailableNetworks*) serialize to a stream
class tt__Dot11AvailableNetworks : public xsd__anyType
{ public:
/// Element "SSID" of XSD type "http://www.onvif.org/ver10/schema":Dot11SSIDType.
    tt__Dot11SSIDType                    SSID                           1;	///< Required element.
/// Element "BSSID" of XSD type xs:string.
    std::string*                         BSSID                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   See IEEE802.11 7.3.2.25.2 for details.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__Dot11AuthAndMangementSuite of length 0..unbounded.
    std::vector<enum tt__Dot11AuthAndMangementSuite> AuthAndMangementSuite          0;
/// Vector of enum tt__Dot11Cipher of length 0..unbounded.
    std::vector<enum tt__Dot11Cipher   > PairCipher                     0;
/// Vector of enum tt__Dot11Cipher of length 0..unbounded.
    std::vector<enum tt__Dot11Cipher   > GroupCipher                    0;
/// Element "SignalStrength" of XSD type "http://www.onvif.org/ver10/schema":Dot11SignalStrength.
    enum tt__Dot11SignalStrength*        SignalStrength                 0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension.
    tt__Dot11AvailableNetworksExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot11AvailableNetworksExtension is a complexType.
///
/// class tt__Dot11AvailableNetworksExtension operations:
/// - soap_new_tt__Dot11AvailableNetworksExtension(soap*) allocate
/// - soap_new_tt__Dot11AvailableNetworksExtension(soap*, int num) allocate array
/// - soap_new_req_tt__Dot11AvailableNetworksExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot11AvailableNetworksExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot11AvailableNetworksExtension(soap*, tt__Dot11AvailableNetworksExtension*) deserialize from a stream
/// - int soap_write_tt__Dot11AvailableNetworksExtension(soap, tt__Dot11AvailableNetworksExtension*) serialize to a stream
class tt__Dot11AvailableNetworksExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Capabilities is a complexType.
///
/// class tt__Capabilities operations:
/// - soap_new_tt__Capabilities(soap*) allocate
/// - soap_new_tt__Capabilities(soap*, int num) allocate array
/// - soap_new_req_tt__Capabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Capabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Capabilities(soap*, tt__Capabilities*) deserialize from a stream
/// - int soap_write_tt__Capabilities(soap, tt__Capabilities*) serialize to a stream
class tt__Capabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Analytics capabilities
/// </BLOCKQUOTE></PRE>
/// Element "Analytics" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsCapabilities.
    tt__AnalyticsCapabilities*           Analytics                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Device capabilities
/// </BLOCKQUOTE></PRE>
/// Element "Device" of XSD type "http://www.onvif.org/ver10/schema":DeviceCapabilities.
    tt__DeviceCapabilities*              Device                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Event capabilities
/// </BLOCKQUOTE></PRE>
/// Element "Events" of XSD type "http://www.onvif.org/ver10/schema":EventCapabilities.
    tt__EventCapabilities*               Events                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Imaging capabilities
/// </BLOCKQUOTE></PRE>
/// Element "Imaging" of XSD type "http://www.onvif.org/ver10/schema":ImagingCapabilities.
    tt__ImagingCapabilities*             Imaging                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Media capabilities
/// </BLOCKQUOTE></PRE>
/// Element "Media" of XSD type "http://www.onvif.org/ver10/schema":MediaCapabilities.
    tt__MediaCapabilities*               Media                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   PTZ capabilities
/// </BLOCKQUOTE></PRE>
/// Element "PTZ" of XSD type "http://www.onvif.org/ver10/schema":PTZCapabilities.
    tt__PTZCapabilities*                 PTZ                            0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":CapabilitiesExtension.
    tt__CapabilitiesExtension*           Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilitiesExtension is a complexType.
///
/// class tt__CapabilitiesExtension operations:
/// - soap_new_tt__CapabilitiesExtension(soap*) allocate
/// - soap_new_tt__CapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__CapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CapabilitiesExtension(soap*, tt__CapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__CapabilitiesExtension(soap, tt__CapabilitiesExtension*) serialize to a stream
class tt__CapabilitiesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "DeviceIO" of XSD type "http://www.onvif.org/ver10/schema":DeviceIOCapabilities.
    tt__DeviceIOCapabilities*            DeviceIO                       0;	///< Optional element.
/// Element "Display" of XSD type "http://www.onvif.org/ver10/schema":DisplayCapabilities.
    tt__DisplayCapabilities*             Display                        0;	///< Optional element.
/// Element "Recording" of XSD type "http://www.onvif.org/ver10/schema":RecordingCapabilities.
    tt__RecordingCapabilities*           Recording                      0;	///< Optional element.
/// Element "Search" of XSD type "http://www.onvif.org/ver10/schema":SearchCapabilities.
    tt__SearchCapabilities*              Search                         0;	///< Optional element.
/// Element "Replay" of XSD type "http://www.onvif.org/ver10/schema":ReplayCapabilities.
    tt__ReplayCapabilities*              Replay                         0;	///< Optional element.
/// Element "Receiver" of XSD type "http://www.onvif.org/ver10/schema":ReceiverCapabilities.
    tt__ReceiverCapabilities*            Receiver                       0;	///< Optional element.
/// Element "AnalyticsDevice" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities.
    tt__AnalyticsDeviceCapabilities*     AnalyticsDevice                0;	///< Optional element.
/// Element "Extensions" of XSD type "http://www.onvif.org/ver10/schema":CapabilitiesExtension2.
    tt__CapabilitiesExtension2*          Extensions                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":CapabilitiesExtension2 is a complexType.
///
/// class tt__CapabilitiesExtension2 operations:
/// - soap_new_tt__CapabilitiesExtension2(soap*) allocate
/// - soap_new_tt__CapabilitiesExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__CapabilitiesExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CapabilitiesExtension2(soap*, tt__CapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__CapabilitiesExtension2(soap, tt__CapabilitiesExtension2*) serialize to a stream
class tt__CapabilitiesExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsCapabilities is a complexType.
///
/// class tt__AnalyticsCapabilities operations:
/// - soap_new_tt__AnalyticsCapabilities(soap*) allocate
/// - soap_new_tt__AnalyticsCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsCapabilities(soap*, tt__AnalyticsCapabilities*) deserialize from a stream
/// - int soap_write_tt__AnalyticsCapabilities(soap, tt__AnalyticsCapabilities*) serialize to a stream
class tt__AnalyticsCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Analytics service URI.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not rules are supported.
/// </BLOCKQUOTE></PRE>
/// Element "RuleSupport" of XSD type xs:boolean.
    bool                                 RuleSupport                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not modules are supported.
/// </BLOCKQUOTE></PRE>
/// Element "AnalyticsModuleSupport" of XSD type xs:boolean.
    bool                                 AnalyticsModuleSupport         1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceCapabilities is a complexType.
///
/// class tt__DeviceCapabilities operations:
/// - soap_new_tt__DeviceCapabilities(soap*) allocate
/// - soap_new_tt__DeviceCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__DeviceCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DeviceCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DeviceCapabilities(soap*, tt__DeviceCapabilities*) deserialize from a stream
/// - int soap_write_tt__DeviceCapabilities(soap, tt__DeviceCapabilities*) serialize to a stream
class tt__DeviceCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Device service URI.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "Network" of XSD type "http://www.onvif.org/ver10/schema":NetworkCapabilities.
    tt__NetworkCapabilities*             Network                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   System capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "System" of XSD type "http://www.onvif.org/ver10/schema":SystemCapabilities.
    tt__SystemCapabilities*              System                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   I/O capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "IO" of XSD type "http://www.onvif.org/ver10/schema":IOCapabilities.
    tt__IOCapabilities*                  IO                             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Security capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "Security" of XSD type "http://www.onvif.org/ver10/schema":SecurityCapabilities.
    tt__SecurityCapabilities*            Security                       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension.
    tt__DeviceCapabilitiesExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceCapabilitiesExtension is a complexType.
///
/// class tt__DeviceCapabilitiesExtension operations:
/// - soap_new_tt__DeviceCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__DeviceCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__DeviceCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DeviceCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DeviceCapabilitiesExtension(soap*, tt__DeviceCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__DeviceCapabilitiesExtension(soap, tt__DeviceCapabilitiesExtension*) serialize to a stream
class tt__DeviceCapabilitiesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":EventCapabilities is a complexType.
///
/// class tt__EventCapabilities operations:
/// - soap_new_tt__EventCapabilities(soap*) allocate
/// - soap_new_tt__EventCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__EventCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EventCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EventCapabilities(soap*, tt__EventCapabilities*) deserialize from a stream
/// - int soap_write_tt__EventCapabilities(soap, tt__EventCapabilities*) serialize to a stream
class tt__EventCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Event service URI.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Subscription policy is supported.
/// </BLOCKQUOTE></PRE>
/// Element "WSSubscriptionPolicySupport" of XSD type xs:boolean.
    bool                                 WSSubscriptionPolicySupport    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Pull Point is supported.
/// </BLOCKQUOTE></PRE>
/// Element "WSPullPointSupport" of XSD type xs:boolean.
    bool                                 WSPullPointSupport             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Pausable Subscription Manager Interface is supported.
/// </BLOCKQUOTE></PRE>
/// Element "WSPausableSubscriptionManagerInterfaceSupport" of XSD type xs:boolean.
    bool                                 WSPausableSubscriptionManagerInterfaceSupport 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilities is a complexType.
///
/// class tt__IOCapabilities operations:
/// - soap_new_tt__IOCapabilities(soap*) allocate
/// - soap_new_tt__IOCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__IOCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IOCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IOCapabilities(soap*, tt__IOCapabilities*) deserialize from a stream
/// - int soap_write_tt__IOCapabilities(soap, tt__IOCapabilities*) serialize to a stream
class tt__IOCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Number of input connectors.
/// </BLOCKQUOTE></PRE>
/// Element "InputConnectors" of XSD type xs:int.
    int*                                 InputConnectors                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of relay outputs.
/// </BLOCKQUOTE></PRE>
/// Element "RelayOutputs" of XSD type xs:int.
    int*                                 RelayOutputs                   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension.
    tt__IOCapabilitiesExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension is a complexType.
///
/// class tt__IOCapabilitiesExtension operations:
/// - soap_new_tt__IOCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__IOCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__IOCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IOCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IOCapabilitiesExtension(soap*, tt__IOCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__IOCapabilitiesExtension(soap, tt__IOCapabilitiesExtension*) serialize to a stream
class tt__IOCapabilitiesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Auxiliary" of XSD type xs:boolean.
    bool*                                Auxiliary                      0;	///< Optional element.
/// Vector of tt__AuxiliaryData of length 0..unbounded.
    std::vector<tt__AuxiliaryData      > AuxiliaryCommands              0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2.
    tt__IOCapabilitiesExtension2*        Extension                      1;	///< Required element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IOCapabilitiesExtension2 is a complexType.
///
/// class tt__IOCapabilitiesExtension2 operations:
/// - soap_new_tt__IOCapabilitiesExtension2(soap*) allocate
/// - soap_new_tt__IOCapabilitiesExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__IOCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IOCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IOCapabilitiesExtension2(soap*, tt__IOCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__IOCapabilitiesExtension2(soap, tt__IOCapabilitiesExtension2*) serialize to a stream
class tt__IOCapabilitiesExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaCapabilities is a complexType.
///
/// class tt__MediaCapabilities operations:
/// - soap_new_tt__MediaCapabilities(soap*) allocate
/// - soap_new_tt__MediaCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__MediaCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MediaCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MediaCapabilities(soap*, tt__MediaCapabilities*) deserialize from a stream
/// - int soap_write_tt__MediaCapabilities(soap, tt__MediaCapabilities*) serialize to a stream
class tt__MediaCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Media service URI.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Streaming capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "StreamingCapabilities" of XSD type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities.
    tt__RealTimeStreamingCapabilities*   StreamingCapabilities          1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension.
    tt__MediaCapabilitiesExtension*      Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaCapabilitiesExtension is a complexType.
///
/// class tt__MediaCapabilitiesExtension operations:
/// - soap_new_tt__MediaCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__MediaCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__MediaCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MediaCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MediaCapabilitiesExtension(soap*, tt__MediaCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__MediaCapabilitiesExtension(soap, tt__MediaCapabilitiesExtension*) serialize to a stream
class tt__MediaCapabilitiesExtension : public xsd__anyType
{ public:
/// Element "ProfileCapabilities" of XSD type "http://www.onvif.org/ver10/schema":ProfileCapabilities.
    tt__ProfileCapabilities*             ProfileCapabilities            1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilities is a complexType.
///
/// class tt__RealTimeStreamingCapabilities operations:
/// - soap_new_tt__RealTimeStreamingCapabilities(soap*) allocate
/// - soap_new_tt__RealTimeStreamingCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__RealTimeStreamingCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RealTimeStreamingCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RealTimeStreamingCapabilities(soap*, tt__RealTimeStreamingCapabilities*) deserialize from a stream
/// - int soap_write_tt__RealTimeStreamingCapabilities(soap, tt__RealTimeStreamingCapabilities*) serialize to a stream
class tt__RealTimeStreamingCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP multicast is supported.
/// </BLOCKQUOTE></PRE>
/// Element "RTPMulticast" of XSD type xs:boolean.
    bool*                                RTPMulticast                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP over TCP is supported.
/// </BLOCKQUOTE></PRE>
/// Element "RTP_TCP" of XSD type xs:boolean.
    bool*                                RTP_USCORETCP                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not RTP/RTSP/TCP is supported.
/// </BLOCKQUOTE></PRE>
/// Element "RTP_RTSP_TCP" of XSD type xs:boolean.
    bool*                                RTP_USCORERTSP_USCORETCP       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension.
    tt__RealTimeStreamingCapabilitiesExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RealTimeStreamingCapabilitiesExtension is a complexType.
///
/// class tt__RealTimeStreamingCapabilitiesExtension operations:
/// - soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__RealTimeStreamingCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RealTimeStreamingCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RealTimeStreamingCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RealTimeStreamingCapabilitiesExtension(soap*, tt__RealTimeStreamingCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__RealTimeStreamingCapabilitiesExtension(soap, tt__RealTimeStreamingCapabilitiesExtension*) serialize to a stream
class tt__RealTimeStreamingCapabilitiesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileCapabilities is a complexType.
///
/// class tt__ProfileCapabilities operations:
/// - soap_new_tt__ProfileCapabilities(soap*) allocate
/// - soap_new_tt__ProfileCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__ProfileCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ProfileCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ProfileCapabilities(soap*, tt__ProfileCapabilities*) deserialize from a stream
/// - int soap_write_tt__ProfileCapabilities(soap, tt__ProfileCapabilities*) serialize to a stream
class tt__ProfileCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Maximum number of profiles.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumNumberOfProfiles" of XSD type xs:int.
    int                                  MaximumNumberOfProfiles        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilities is a complexType.
///
/// class tt__NetworkCapabilities operations:
/// - soap_new_tt__NetworkCapabilities(soap*) allocate
/// - soap_new_tt__NetworkCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkCapabilities(soap*, tt__NetworkCapabilities*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilities(soap, tt__NetworkCapabilities*) serialize to a stream
class tt__NetworkCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IP filtering is supported.
/// </BLOCKQUOTE></PRE>
/// Element "IPFilter" of XSD type xs:boolean.
    bool*                                IPFilter                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not zeroconf is supported.
/// </BLOCKQUOTE></PRE>
/// Element "ZeroConfiguration" of XSD type xs:boolean.
    bool*                                ZeroConfiguration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not IPv6 is supported.
/// </BLOCKQUOTE></PRE>
/// Element "IPVersion6" of XSD type xs:boolean.
    bool*                                IPVersion6                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not is supported.
/// </BLOCKQUOTE></PRE>
/// Element "DynDNS" of XSD type xs:boolean.
    bool*                                DynDNS                         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension.
    tt__NetworkCapabilitiesExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension is a complexType.
///
/// class tt__NetworkCapabilitiesExtension operations:
/// - soap_new_tt__NetworkCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__NetworkCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkCapabilitiesExtension(soap*, tt__NetworkCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilitiesExtension(soap, tt__NetworkCapabilitiesExtension*) serialize to a stream
class tt__NetworkCapabilitiesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Dot11Configuration" of XSD type xs:boolean.
    bool*                                Dot11Configuration             0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2.
    tt__NetworkCapabilitiesExtension2*   Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkCapabilitiesExtension2 is a complexType.
///
/// class tt__NetworkCapabilitiesExtension2 operations:
/// - soap_new_tt__NetworkCapabilitiesExtension2(soap*) allocate
/// - soap_new_tt__NetworkCapabilitiesExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkCapabilitiesExtension2(soap*, tt__NetworkCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__NetworkCapabilitiesExtension2(soap, tt__NetworkCapabilitiesExtension2*) serialize to a stream
class tt__NetworkCapabilitiesExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilities is a complexType.
///
/// class tt__SecurityCapabilities operations:
/// - soap_new_tt__SecurityCapabilities(soap*) allocate
/// - soap_new_tt__SecurityCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__SecurityCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SecurityCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SecurityCapabilities(soap*, tt__SecurityCapabilities*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilities(soap, tt__SecurityCapabilities*) serialize to a stream
class tt__SecurityCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not TLS 1.1 is supported.
/// </BLOCKQUOTE></PRE>
/// Element "TLS1.1" of XSD type xs:boolean.
    bool                                 TLS1_x002e1                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not TLS 1.2 is supported.
/// </BLOCKQUOTE></PRE>
/// Element "TLS1.2" of XSD type xs:boolean.
    bool                                 TLS1_x002e2                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not onboard key generation is supported.
/// </BLOCKQUOTE></PRE>
/// Element "OnboardKeyGeneration" of XSD type xs:boolean.
    bool                                 OnboardKeyGeneration           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not access policy configuration is supported.
/// </BLOCKQUOTE></PRE>
/// Element "AccessPolicyConfig" of XSD type xs:boolean.
    bool                                 AccessPolicyConfig             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security X.509 token is supported.
/// </BLOCKQUOTE></PRE>
/// Element "X.509Token" of XSD type xs:boolean.
    bool                                 X_x002e509Token                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security SAML token is supported.
/// </BLOCKQUOTE></PRE>
/// Element "SAMLToken" of XSD type xs:boolean.
    bool                                 SAMLToken                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security Kerberos token is supported.
/// </BLOCKQUOTE></PRE>
/// Element "KerberosToken" of XSD type xs:boolean.
    bool                                 KerberosToken                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Security REL token is supported.
/// </BLOCKQUOTE></PRE>
/// Element "RELToken" of XSD type xs:boolean.
    bool                                 RELToken                       1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension.
    tt__SecurityCapabilitiesExtension*   Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension is a complexType.
///
/// class tt__SecurityCapabilitiesExtension operations:
/// - soap_new_tt__SecurityCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__SecurityCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SecurityCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SecurityCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SecurityCapabilitiesExtension(soap*, tt__SecurityCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilitiesExtension(soap, tt__SecurityCapabilitiesExtension*) serialize to a stream
class tt__SecurityCapabilitiesExtension : public xsd__anyType
{ public:
/// Element "TLS1.0" of XSD type xs:boolean.
    bool                                 TLS1_x002e0                    1;	///< Required element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2.
    tt__SecurityCapabilitiesExtension2*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":SecurityCapabilitiesExtension2 is a complexType.
///
/// class tt__SecurityCapabilitiesExtension2 operations:
/// - soap_new_tt__SecurityCapabilitiesExtension2(soap*) allocate
/// - soap_new_tt__SecurityCapabilitiesExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__SecurityCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SecurityCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SecurityCapabilitiesExtension2(soap*, tt__SecurityCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__SecurityCapabilitiesExtension2(soap, tt__SecurityCapabilitiesExtension2*) serialize to a stream
class tt__SecurityCapabilitiesExtension2 : public xsd__anyType
{ public:
/// Element "Dot1X" of XSD type xs:boolean.
    bool                                 Dot1X                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
/// Vector of int of length 0..unbounded.
    std::vector<int                    > SupportedEAPMethod             0;
/// Element "RemoteUserHandling" of XSD type xs:boolean.
    bool                                 RemoteUserHandling             1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilities is a complexType.
///
/// class tt__SystemCapabilities operations:
/// - soap_new_tt__SystemCapabilities(soap*) allocate
/// - soap_new_tt__SystemCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__SystemCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemCapabilities(soap*, tt__SystemCapabilities*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilities(soap, tt__SystemCapabilities*) serialize to a stream
class tt__SystemCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS Discovery resolve requests are supported.
/// </BLOCKQUOTE></PRE>
/// Element "DiscoveryResolve" of XSD type xs:boolean.
    bool                                 DiscoveryResolve               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not WS-Discovery Bye is supported.
/// </BLOCKQUOTE></PRE>
/// Element "DiscoveryBye" of XSD type xs:boolean.
    bool                                 DiscoveryBye                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not remote discovery is supported.
/// </BLOCKQUOTE></PRE>
/// Element "RemoteDiscovery" of XSD type xs:boolean.
    bool                                 RemoteDiscovery                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not system backup is supported.
/// </BLOCKQUOTE></PRE>
/// Element "SystemBackup" of XSD type xs:boolean.
    bool                                 SystemBackup                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not system logging is supported.
/// </BLOCKQUOTE></PRE>
/// Element "SystemLogging" of XSD type xs:boolean.
    bool                                 SystemLogging                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not firmware upgrade is supported.
/// </BLOCKQUOTE></PRE>
/// Element "FirmwareUpgrade" of XSD type xs:boolean.
    bool                                 FirmwareUpgrade                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates supported ONVIF version(s).
/// </BLOCKQUOTE></PRE>
/// Vector of tt__OnvifVersion* of length 1..unbounded.
    std::vector<tt__OnvifVersion*      > SupportedVersions              1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension.
    tt__SystemCapabilitiesExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension is a complexType.
///
/// class tt__SystemCapabilitiesExtension operations:
/// - soap_new_tt__SystemCapabilitiesExtension(soap*) allocate
/// - soap_new_tt__SystemCapabilitiesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SystemCapabilitiesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemCapabilitiesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemCapabilitiesExtension(soap*, tt__SystemCapabilitiesExtension*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilitiesExtension(soap, tt__SystemCapabilitiesExtension*) serialize to a stream
class tt__SystemCapabilitiesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "HttpFirmwareUpgrade" of XSD type xs:boolean.
    bool*                                HttpFirmwareUpgrade            0;	///< Optional element.
/// Element "HttpSystemBackup" of XSD type xs:boolean.
    bool*                                HttpSystemBackup               0;	///< Optional element.
/// Element "HttpSystemLogging" of XSD type xs:boolean.
    bool*                                HttpSystemLogging              0;	///< Optional element.
/// Element "HttpSupportInformation" of XSD type xs:boolean.
    bool*                                HttpSupportInformation         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2.
    tt__SystemCapabilitiesExtension2*    Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemCapabilitiesExtension2 is a complexType.
///
/// class tt__SystemCapabilitiesExtension2 operations:
/// - soap_new_tt__SystemCapabilitiesExtension2(soap*) allocate
/// - soap_new_tt__SystemCapabilitiesExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__SystemCapabilitiesExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemCapabilitiesExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemCapabilitiesExtension2(soap*, tt__SystemCapabilitiesExtension2*) deserialize from a stream
/// - int soap_write_tt__SystemCapabilitiesExtension2(soap, tt__SystemCapabilitiesExtension2*) serialize to a stream
class tt__SystemCapabilitiesExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":OnvifVersion is a complexType.
///
/// class tt__OnvifVersion operations:
/// - soap_new_tt__OnvifVersion(soap*) allocate
/// - soap_new_tt__OnvifVersion(soap*, int num) allocate array
/// - soap_new_req_tt__OnvifVersion(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OnvifVersion(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OnvifVersion(soap*, tt__OnvifVersion*) deserialize from a stream
/// - int soap_write_tt__OnvifVersion(soap, tt__OnvifVersion*) serialize to a stream
class tt__OnvifVersion : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Major version number.
/// </BLOCKQUOTE></PRE>
/// Element "Major" of XSD type xs:int.
    int                                  Major                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Two digit minor version number.
///   If major version number is less than "16", X.0.1 maps to "01" and X.2.1 maps to "21" where X stands for Major version number.
///   Otherwise, minor number is month of release, such as "06" for June.
/// </BLOCKQUOTE></PRE>
/// Element "Minor" of XSD type xs:int.
    int                                  Minor                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingCapabilities is a complexType.
///
/// class tt__ImagingCapabilities operations:
/// - soap_new_tt__ImagingCapabilities(soap*) allocate
/// - soap_new_tt__ImagingCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingCapabilities(soap*, tt__ImagingCapabilities*) deserialize from a stream
/// - int soap_write_tt__ImagingCapabilities(soap, tt__ImagingCapabilities*) serialize to a stream
class tt__ImagingCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Imaging service URI.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZCapabilities is a complexType.
///
/// class tt__PTZCapabilities operations:
/// - soap_new_tt__PTZCapabilities(soap*) allocate
/// - soap_new_tt__PTZCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__PTZCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZCapabilities(soap*, tt__PTZCapabilities*) deserialize from a stream
/// - int soap_write_tt__PTZCapabilities(soap, tt__PTZCapabilities*) serialize to a stream
class tt__PTZCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   PTZ service URI.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DeviceIOCapabilities is a complexType.
///
/// class tt__DeviceIOCapabilities operations:
/// - soap_new_tt__DeviceIOCapabilities(soap*) allocate
/// - soap_new_tt__DeviceIOCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__DeviceIOCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DeviceIOCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DeviceIOCapabilities(soap*, tt__DeviceIOCapabilities*) deserialize from a stream
/// - int soap_write_tt__DeviceIOCapabilities(soap, tt__DeviceIOCapabilities*) serialize to a stream
class tt__DeviceIOCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "VideoSources" of XSD type xs:int.
    int                                  VideoSources                   1;	///< Required element.
/// Element "VideoOutputs" of XSD type xs:int.
    int                                  VideoOutputs                   1;	///< Required element.
/// Element "AudioSources" of XSD type xs:int.
    int                                  AudioSources                   1;	///< Required element.
/// Element "AudioOutputs" of XSD type xs:int.
    int                                  AudioOutputs                   1;	///< Required element.
/// Element "RelayOutputs" of XSD type xs:int.
    int                                  RelayOutputs                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DisplayCapabilities is a complexType.
///
/// class tt__DisplayCapabilities operations:
/// - soap_new_tt__DisplayCapabilities(soap*) allocate
/// - soap_new_tt__DisplayCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__DisplayCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DisplayCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DisplayCapabilities(soap*, tt__DisplayCapabilities*) deserialize from a stream
/// - int soap_write_tt__DisplayCapabilities(soap, tt__DisplayCapabilities*) serialize to a stream
class tt__DisplayCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indication that the SetLayout command supports only predefined layouts.
/// </BLOCKQUOTE></PRE>
/// Element "FixedLayout" of XSD type xs:boolean.
    bool                                 FixedLayout                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingCapabilities is a complexType.
///
/// class tt__RecordingCapabilities operations:
/// - soap_new_tt__RecordingCapabilities(soap*) allocate
/// - soap_new_tt__RecordingCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingCapabilities(soap*, tt__RecordingCapabilities*) deserialize from a stream
/// - int soap_write_tt__RecordingCapabilities(soap, tt__RecordingCapabilities*) serialize to a stream
class tt__RecordingCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "ReceiverSource" of XSD type xs:boolean.
    bool                                 ReceiverSource                 1;	///< Required element.
/// Element "MediaProfileSource" of XSD type xs:boolean.
    bool                                 MediaProfileSource             1;	///< Required element.
/// Element "DynamicRecordings" of XSD type xs:boolean.
    bool                                 DynamicRecordings              1;	///< Required element.
/// Element "DynamicTracks" of XSD type xs:boolean.
    bool                                 DynamicTracks                  1;	///< Required element.
/// Element "MaxStringLength" of XSD type xs:int.
    int                                  MaxStringLength                1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SearchCapabilities is a complexType.
///
/// class tt__SearchCapabilities operations:
/// - soap_new_tt__SearchCapabilities(soap*) allocate
/// - soap_new_tt__SearchCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__SearchCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SearchCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SearchCapabilities(soap*, tt__SearchCapabilities*) deserialize from a stream
/// - int soap_write_tt__SearchCapabilities(soap, tt__SearchCapabilities*) serialize to a stream
class tt__SearchCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// Element "MetadataSearch" of XSD type xs:boolean.
    bool                                 MetadataSearch                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ReplayCapabilities is a complexType.
///
/// class tt__ReplayCapabilities operations:
/// - soap_new_tt__ReplayCapabilities(soap*) allocate
/// - soap_new_tt__ReplayCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__ReplayCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReplayCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReplayCapabilities(soap*, tt__ReplayCapabilities*) deserialize from a stream
/// - int soap_write_tt__ReplayCapabilities(soap, tt__ReplayCapabilities*) serialize to a stream
class tt__ReplayCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The address of the replay service.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverCapabilities is a complexType.
///
/// class tt__ReceiverCapabilities operations:
/// - soap_new_tt__ReceiverCapabilities(soap*) allocate
/// - soap_new_tt__ReceiverCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__ReceiverCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReceiverCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReceiverCapabilities(soap*, tt__ReceiverCapabilities*) deserialize from a stream
/// - int soap_write_tt__ReceiverCapabilities(soap, tt__ReceiverCapabilities*) serialize to a stream
class tt__ReceiverCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The address of the receiver service.
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP multicast streams.
/// </BLOCKQUOTE></PRE>
/// Element "RTP_Multicast" of XSD type xs:boolean.
    bool                                 RTP_USCOREMulticast            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP/TCP streams
/// </BLOCKQUOTE></PRE>
/// Element "RTP_TCP" of XSD type xs:boolean.
    bool                                 RTP_USCORETCP                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether the device can receive RTP/RTSP/TCP streams.
/// </BLOCKQUOTE></PRE>
/// Element "RTP_RTSP_TCP" of XSD type xs:boolean.
    bool                                 RTP_USCORERTSP_USCORETCP       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The maximum number of receivers supported by the device.
/// </BLOCKQUOTE></PRE>
/// Element "SupportedReceivers" of XSD type xs:int.
    int                                  SupportedReceivers             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The maximum allowed length for RTSP URIs.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumRTSPURILength" of XSD type xs:int.
    int                                  MaximumRTSPURILength           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceCapabilities is a complexType.
///
/// class tt__AnalyticsDeviceCapabilities operations:
/// - soap_new_tt__AnalyticsDeviceCapabilities(soap*) allocate
/// - soap_new_tt__AnalyticsDeviceCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsDeviceCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsDeviceCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsDeviceCapabilities(soap*, tt__AnalyticsDeviceCapabilities*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceCapabilities(soap, tt__AnalyticsDeviceCapabilities*) serialize to a stream
class tt__AnalyticsDeviceCapabilities : public xsd__anyType
{ public:
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Obsolete property.
/// </BLOCKQUOTE></PRE>
/// Element "RuleSupport" of XSD type xs:boolean.
    bool*                                RuleSupport                    0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension.
    tt__AnalyticsDeviceExtension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceExtension is a complexType.
///
/// class tt__AnalyticsDeviceExtension operations:
/// - soap_new_tt__AnalyticsDeviceExtension(soap*) allocate
/// - soap_new_tt__AnalyticsDeviceExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsDeviceExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsDeviceExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsDeviceExtension(soap*, tt__AnalyticsDeviceExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceExtension(soap, tt__AnalyticsDeviceExtension*) serialize to a stream
class tt__AnalyticsDeviceExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLog is a complexType.
///
/// class tt__SystemLog operations:
/// - soap_new_tt__SystemLog(soap*) allocate
/// - soap_new_tt__SystemLog(soap*, int num) allocate array
/// - soap_new_req_tt__SystemLog(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemLog(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemLog(soap*, tt__SystemLog*) deserialize from a stream
/// - int soap_write_tt__SystemLog(soap, tt__SystemLog*) serialize to a stream
class tt__SystemLog : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The log information as attachment data.
/// </BLOCKQUOTE></PRE>
/// Element "Binary" of XSD type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Binary                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The log information as character data.
/// </BLOCKQUOTE></PRE>
/// Element "String" of XSD type xs:string.
    std::string*                         String                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportInformation is a complexType.
///
/// class tt__SupportInformation operations:
/// - soap_new_tt__SupportInformation(soap*) allocate
/// - soap_new_tt__SupportInformation(soap*, int num) allocate array
/// - soap_new_req_tt__SupportInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SupportInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SupportInformation(soap*, tt__SupportInformation*) deserialize from a stream
/// - int soap_write_tt__SupportInformation(soap, tt__SupportInformation*) serialize to a stream
class tt__SupportInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The support information as attachment data.
/// </BLOCKQUOTE></PRE>
/// Element "Binary" of XSD type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Binary                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The support information as character data.
/// </BLOCKQUOTE></PRE>
/// Element "String" of XSD type xs:string.
    std::string*                         String                         0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":BinaryData is a complexType.
///
/// class tt__BinaryData operations:
/// - soap_new_tt__BinaryData(soap*) allocate
/// - soap_new_tt__BinaryData(soap*, int num) allocate array
/// - soap_new_req_tt__BinaryData(soap*, ...) allocate, set required members
/// - soap_new_set_tt__BinaryData(soap*, ...) allocate, set all public members
/// - int soap_read_tt__BinaryData(soap*, tt__BinaryData*) deserialize from a stream
/// - int soap_write_tt__BinaryData(soap, tt__BinaryData*) serialize to a stream
class tt__BinaryData : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded binary data.
/// </BLOCKQUOTE></PRE>
/// Element "Data" of XSD type xs:base64Binary.
    xsd__base64Binary                    Data                           1;	///< Required element.
/// Imported attribute reference xmime:contentType.
   @char*                                xmime__contentType             0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":AttachmentData is a complexType.
///
/// class tt__AttachmentData operations:
/// - soap_new_tt__AttachmentData(soap*) allocate
/// - soap_new_tt__AttachmentData(soap*, int num) allocate array
/// - soap_new_req_tt__AttachmentData(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AttachmentData(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AttachmentData(soap*, tt__AttachmentData*) deserialize from a stream
/// - int soap_write_tt__AttachmentData(soap, tt__AttachmentData*) serialize to a stream
class tt__AttachmentData : public xsd__anyType
{ public:
/// Imported element reference "http://www.w3.org/2004/08/xop/include":Include.
    _xop__Include                        xop__Include                   1;	///< Required element.
/// Imported attribute reference xmime:contentType.
   @char*                                xmime__contentType             0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":BackupFile is a complexType.
///
/// class tt__BackupFile operations:
/// - soap_new_tt__BackupFile(soap*) allocate
/// - soap_new_tt__BackupFile(soap*, int num) allocate array
/// - soap_new_req_tt__BackupFile(soap*, ...) allocate, set required members
/// - soap_new_set_tt__BackupFile(soap*, ...) allocate, set all public members
/// - int soap_read_tt__BackupFile(soap*, tt__BackupFile*) deserialize from a stream
/// - int soap_write_tt__BackupFile(soap, tt__BackupFile*) serialize to a stream
class tt__BackupFile : public xsd__anyType
{ public:
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element "Data" of XSD type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Data                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogUriList is a complexType.
///
/// class tt__SystemLogUriList operations:
/// - soap_new_tt__SystemLogUriList(soap*) allocate
/// - soap_new_tt__SystemLogUriList(soap*, int num) allocate array
/// - soap_new_req_tt__SystemLogUriList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemLogUriList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemLogUriList(soap*, tt__SystemLogUriList*) deserialize from a stream
/// - int soap_write_tt__SystemLogUriList(soap, tt__SystemLogUriList*) serialize to a stream
class tt__SystemLogUriList : public xsd__anyType
{ public:
/// Vector of tt__SystemLogUri* of length 0..unbounded.
    std::vector<tt__SystemLogUri*      > SystemLog                      0;
};

/// @brief "http://www.onvif.org/ver10/schema":SystemLogUri is a complexType.
///
/// class tt__SystemLogUri operations:
/// - soap_new_tt__SystemLogUri(soap*) allocate
/// - soap_new_tt__SystemLogUri(soap*, int num) allocate array
/// - soap_new_req_tt__SystemLogUri(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemLogUri(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemLogUri(soap*, tt__SystemLogUri*) deserialize from a stream
/// - int soap_write_tt__SystemLogUri(soap, tt__SystemLogUri*) serialize to a stream
class tt__SystemLogUri : public xsd__anyType
{ public:
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":SystemLogType.
    enum tt__SystemLogType               Type                           1;	///< Required element.
/// Element "Uri" of XSD type xs:anyURI.
    xsd__anyURI                          Uri                            1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemDateTime is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   General date time inforamtion returned by the GetSystemDateTime method.
/// </BLOCKQUOTE></PRE>
/// class tt__SystemDateTime operations:
/// - soap_new_tt__SystemDateTime(soap*) allocate
/// - soap_new_tt__SystemDateTime(soap*, int num) allocate array
/// - soap_new_req_tt__SystemDateTime(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemDateTime(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemDateTime(soap*, tt__SystemDateTime*) deserialize from a stream
/// - int soap_write_tt__SystemDateTime(soap, tt__SystemDateTime*) serialize to a stream
class tt__SystemDateTime : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the time is set manully or through NTP.
/// </BLOCKQUOTE></PRE>
/// Element "DateTimeType" of XSD type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    enum tt__SetDateTimeType             DateTimeType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative indicator whether daylight savings is currently on/off.
/// </BLOCKQUOTE></PRE>
/// Element "DaylightSavings" of XSD type xs:boolean.
    bool                                 DaylightSavings                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Timezone information in Posix format.
/// </BLOCKQUOTE></PRE>
/// Element "TimeZone" of XSD type "http://www.onvif.org/ver10/schema":TimeZone.
    tt__TimeZone*                        TimeZone                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Current system date and time in UTC format. This field is mandatory since version 2.0.
/// </BLOCKQUOTE></PRE>
/// Element "UTCDateTime" of XSD type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        UTCDateTime                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time in local format.
/// </BLOCKQUOTE></PRE>
/// Element "LocalDateTime" of XSD type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        LocalDateTime                  0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SystemDateTimeExtension.
    tt__SystemDateTimeExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SystemDateTimeExtension is a complexType.
///
/// class tt__SystemDateTimeExtension operations:
/// - soap_new_tt__SystemDateTimeExtension(soap*) allocate
/// - soap_new_tt__SystemDateTimeExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SystemDateTimeExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SystemDateTimeExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SystemDateTimeExtension(soap*, tt__SystemDateTimeExtension*) deserialize from a stream
/// - int soap_write_tt__SystemDateTimeExtension(soap, tt__SystemDateTimeExtension*) serialize to a stream
class tt__SystemDateTimeExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":DateTime is a complexType.
///
/// class tt__DateTime operations:
/// - soap_new_tt__DateTime(soap*) allocate
/// - soap_new_tt__DateTime(soap*, int num) allocate array
/// - soap_new_req_tt__DateTime(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DateTime(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DateTime(soap*, tt__DateTime*) deserialize from a stream
/// - int soap_write_tt__DateTime(soap, tt__DateTime*) serialize to a stream
class tt__DateTime : public xsd__anyType
{ public:
/// Element "Time" of XSD type "http://www.onvif.org/ver10/schema":Time.
    tt__Time*                            Time                           1;	///< Required element.
/// Element "Date" of XSD type "http://www.onvif.org/ver10/schema":Date.
    tt__Date*                            Date                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Date is a complexType.
///
/// class tt__Date operations:
/// - soap_new_tt__Date(soap*) allocate
/// - soap_new_tt__Date(soap*, int num) allocate array
/// - soap_new_req_tt__Date(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Date(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Date(soap*, tt__Date*) deserialize from a stream
/// - int soap_write_tt__Date(soap, tt__Date*) serialize to a stream
class tt__Date : public xsd__anyType
{ public:
/// Element "Year" of XSD type xs:int.
    int                                  Year                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 1 to 12.
/// </BLOCKQUOTE></PRE>
/// Element "Month" of XSD type xs:int.
    int                                  Month                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 1 to 31.
/// </BLOCKQUOTE></PRE>
/// Element "Day" of XSD type xs:int.
    int                                  Day                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Time is a complexType.
///
/// class tt__Time operations:
/// - soap_new_tt__Time(soap*) allocate
/// - soap_new_tt__Time(soap*, int num) allocate array
/// - soap_new_req_tt__Time(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Time(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Time(soap*, tt__Time*) deserialize from a stream
/// - int soap_write_tt__Time(soap, tt__Time*) serialize to a stream
class tt__Time : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 23.
/// </BLOCKQUOTE></PRE>
/// Element "Hour" of XSD type xs:int.
    int                                  Hour                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 59.
/// </BLOCKQUOTE></PRE>
/// Element "Minute" of XSD type xs:int.
    int                                  Minute                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Range is 0 to 61 (typically 59).
/// </BLOCKQUOTE></PRE>
/// Element "Second" of XSD type xs:int.
    int                                  Second                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":TimeZone is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The TZ format is specified by POSIX, please refer to POSIX 1003.1 section 8.3<br/>
///   Example: Europe, Paris TZ=CET-1CEST,M3.5.0/2,M10.5.0/3<br/>
///   CET = designation for standard time when daylight saving is not in force<br/>
///   -1 = offset in hours = negative so 1 hour east of Greenwich meridian<br/>
///   CEST = designation when daylight saving is in force ("Central European Summer Time")<br/>
///   , = no offset number between code and comma, so default to one hour ahead for daylight saving<br/>
///   M3.5.0 = when daylight saving starts = the last Sunday in March (the "5th" week means the last in the month)<br/>
///   /2, = the local time when the switch occurs = 2 a.m. in this case<br/>
///   M10.5.0 = when daylight saving ends = the last Sunday in October.<br/>
///   /3, = the local time when the switch occurs = 3 a.m. in this case<br/>
/// </BLOCKQUOTE></PRE>
/// class tt__TimeZone operations:
/// - soap_new_tt__TimeZone(soap*) allocate
/// - soap_new_tt__TimeZone(soap*, int num) allocate array
/// - soap_new_req_tt__TimeZone(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TimeZone(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TimeZone(soap*, tt__TimeZone*) deserialize from a stream
/// - int soap_write_tt__TimeZone(soap, tt__TimeZone*) serialize to a stream
class tt__TimeZone : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Posix timezone string.
/// </BLOCKQUOTE></PRE>
/// Element "TZ" of XSD type xs:token.
    xsd__token                           TZ                             1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":RemoteUser is a complexType.
///
/// class tt__RemoteUser operations:
/// - soap_new_tt__RemoteUser(soap*) allocate
/// - soap_new_tt__RemoteUser(soap*, int num) allocate array
/// - soap_new_req_tt__RemoteUser(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RemoteUser(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RemoteUser(soap*, tt__RemoteUser*) deserialize from a stream
/// - int soap_write_tt__RemoteUser(soap, tt__RemoteUser*) serialize to a stream
class tt__RemoteUser : public xsd__anyType
{ public:
/// Element "Username" of XSD type xs:string.
    std::string                          Username                       1;	///< Required element.
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// Element "UseDerivedPassword" of XSD type xs:boolean.
    bool                                 UseDerivedPassword             1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":User is a complexType.
///
/// class tt__User operations:
/// - soap_new_tt__User(soap*) allocate
/// - soap_new_tt__User(soap*, int num) allocate array
/// - soap_new_req_tt__User(soap*, ...) allocate, set required members
/// - soap_new_set_tt__User(soap*, ...) allocate, set all public members
/// - int soap_read_tt__User(soap*, tt__User*) deserialize from a stream
/// - int soap_write_tt__User(soap, tt__User*) serialize to a stream
class tt__User : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Username string.
/// </BLOCKQUOTE></PRE>
/// Element "Username" of XSD type xs:string.
    std::string                          Username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Password string.
/// </BLOCKQUOTE></PRE>
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User level string.
/// </BLOCKQUOTE></PRE>
/// Element "UserLevel" of XSD type "http://www.onvif.org/ver10/schema":UserLevel.
    enum tt__UserLevel                   UserLevel                      1;	///< Required element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":UserExtension.
    tt__UserExtension*                   Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":UserExtension is a complexType.
///
/// class tt__UserExtension operations:
/// - soap_new_tt__UserExtension(soap*) allocate
/// - soap_new_tt__UserExtension(soap*, int num) allocate array
/// - soap_new_req_tt__UserExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__UserExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__UserExtension(soap*, tt__UserExtension*) deserialize from a stream
/// - int soap_write_tt__UserExtension(soap, tt__UserExtension*) serialize to a stream
class tt__UserExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateGenerationParameters is a complexType.
///
/// class tt__CertificateGenerationParameters operations:
/// - soap_new_tt__CertificateGenerationParameters(soap*) allocate
/// - soap_new_tt__CertificateGenerationParameters(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateGenerationParameters(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateGenerationParameters(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateGenerationParameters(soap*, tt__CertificateGenerationParameters*) deserialize from a stream
/// - int soap_write_tt__CertificateGenerationParameters(soap, tt__CertificateGenerationParameters*) serialize to a stream
class tt__CertificateGenerationParameters : public xsd__anyType
{ public:
/// Element "CertificateID" of XSD type xs:token.
    xsd__token*                          CertificateID                  0;	///< Optional element.
/// Element "Subject" of XSD type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// Element "ValidNotBefore" of XSD type xs:token.
    xsd__token*                          ValidNotBefore                 0;	///< Optional element.
/// Element "ValidNotAfter" of XSD type xs:token.
    xsd__token*                          ValidNotAfter                  0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension.
    tt__CertificateGenerationParametersExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateGenerationParametersExtension is a complexType.
///
/// class tt__CertificateGenerationParametersExtension operations:
/// - soap_new_tt__CertificateGenerationParametersExtension(soap*) allocate
/// - soap_new_tt__CertificateGenerationParametersExtension(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateGenerationParametersExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateGenerationParametersExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateGenerationParametersExtension(soap*, tt__CertificateGenerationParametersExtension*) deserialize from a stream
/// - int soap_write_tt__CertificateGenerationParametersExtension(soap, tt__CertificateGenerationParametersExtension*) serialize to a stream
class tt__CertificateGenerationParametersExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Certificate is a complexType.
///
/// class tt__Certificate operations:
/// - soap_new_tt__Certificate(soap*) allocate
/// - soap_new_tt__Certificate(soap*, int num) allocate array
/// - soap_new_req_tt__Certificate(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Certificate(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Certificate(soap*, tt__Certificate*) deserialize from a stream
/// - int soap_write_tt__Certificate(soap, tt__Certificate*) serialize to a stream
class tt__Certificate : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
/// Element "CertificateID" of XSD type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
/// Element "Certificate" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Certificate                    1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateStatus is a complexType.
///
/// class tt__CertificateStatus operations:
/// - soap_new_tt__CertificateStatus(soap*) allocate
/// - soap_new_tt__CertificateStatus(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateStatus(soap*, tt__CertificateStatus*) deserialize from a stream
/// - int soap_write_tt__CertificateStatus(soap, tt__CertificateStatus*) serialize to a stream
class tt__CertificateStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
/// Element "CertificateID" of XSD type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a certificate is used in a HTTPS configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type xs:boolean.
    bool                                 Status                         1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateWithPrivateKey is a complexType.
///
/// class tt__CertificateWithPrivateKey operations:
/// - soap_new_tt__CertificateWithPrivateKey(soap*) allocate
/// - soap_new_tt__CertificateWithPrivateKey(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateWithPrivateKey(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateWithPrivateKey(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateWithPrivateKey(soap*, tt__CertificateWithPrivateKey*) deserialize from a stream
/// - int soap_write_tt__CertificateWithPrivateKey(soap, tt__CertificateWithPrivateKey*) serialize to a stream
class tt__CertificateWithPrivateKey : public xsd__anyType
{ public:
/// Element "CertificateID" of XSD type xs:token.
    xsd__token*                          CertificateID                  0;	///< Optional element.
/// Element "Certificate" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Certificate                    1;	///< Required element.
/// Element "PrivateKey" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PrivateKey                     1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateInformation is a complexType.
///
/// class tt__CertificateInformation operations:
/// - soap_new_tt__CertificateInformation(soap*) allocate
/// - soap_new_tt__CertificateInformation(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateInformation(soap*, tt__CertificateInformation*) deserialize from a stream
/// - int soap_write_tt__CertificateInformation(soap, tt__CertificateInformation*) serialize to a stream
class tt__CertificateInformation : public xsd__anyType
{ public:
/// Element "CertificateID" of XSD type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// Element "IssuerDN" of XSD type xs:string.
    std::string*                         IssuerDN                       0;	///< Optional element.
/// Element "SubjectDN" of XSD type xs:string.
    std::string*                         SubjectDN                      0;	///< Optional element.
/// Element "KeyUsage" of XSD type "http://www.onvif.org/ver10/schema":CertificateUsage.
    tt__CertificateUsage*                KeyUsage                       0;	///< Optional element.
/// Element "ExtendedKeyUsage" of XSD type "http://www.onvif.org/ver10/schema":CertificateUsage.
    tt__CertificateUsage*                ExtendedKeyUsage               0;	///< Optional element.
/// Element "KeyLength" of XSD type xs:int.
    int*                                 KeyLength                      0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// Element "SerialNum" of XSD type xs:string.
    std::string*                         SerialNum                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Validity Range is from "NotBefore" to "NotAfter"; the corresponding DateTimeRange is from "From" to "Until"
/// </BLOCKQUOTE></PRE>
/// Element "SignatureAlgorithm" of XSD type xs:string.
    std::string*                         SignatureAlgorithm             0;	///< Optional element.
/// Element "Validity" of XSD type "http://www.onvif.org/ver10/schema":DateTimeRange.
    tt__DateTimeRange*                   Validity                       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":CertificateInformationExtension.
    tt__CertificateInformationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateInformationExtension is a complexType.
///
/// class tt__CertificateInformationExtension operations:
/// - soap_new_tt__CertificateInformationExtension(soap*) allocate
/// - soap_new_tt__CertificateInformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateInformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateInformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateInformationExtension(soap*, tt__CertificateInformationExtension*) deserialize from a stream
/// - int soap_write_tt__CertificateInformationExtension(soap, tt__CertificateInformationExtension*) serialize to a stream
class tt__CertificateInformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot1XConfiguration is a complexType.
///
/// class tt__Dot1XConfiguration operations:
/// - soap_new_tt__Dot1XConfiguration(soap*) allocate
/// - soap_new_tt__Dot1XConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__Dot1XConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot1XConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot1XConfiguration(soap*, tt__Dot1XConfiguration*) deserialize from a stream
/// - int soap_write_tt__Dot1XConfiguration(soap, tt__Dot1XConfiguration*) serialize to a stream
class tt__Dot1XConfiguration : public xsd__anyType
{ public:
/// Element "Dot1XConfigurationToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Dot1XConfigurationToken        1;	///< Required element.
/// Element "Identity" of XSD type xs:string.
    std::string                          Identity                       1;	///< Required element.
/// Element "AnonymousID" of XSD type xs:string.
    std::string*                         AnonymousID                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   EAP Method type as defined in <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
/// Element "EAPMethod" of XSD type xs:int.
    int                                  EAPMethod                      1;	///< Required element.
/// Vector of xsd__token of length 0..unbounded.
    std::vector<xsd__token             > CACertificateID                0;
/// Element "EAPMethodConfiguration" of XSD type "http://www.onvif.org/ver10/schema":EAPMethodConfiguration.
    tt__EAPMethodConfiguration*          EAPMethodConfiguration         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension.
    tt__Dot1XConfigurationExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Dot1XConfigurationExtension is a complexType.
///
/// class tt__Dot1XConfigurationExtension operations:
/// - soap_new_tt__Dot1XConfigurationExtension(soap*) allocate
/// - soap_new_tt__Dot1XConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__Dot1XConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Dot1XConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Dot1XConfigurationExtension(soap*, tt__Dot1XConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__Dot1XConfigurationExtension(soap, tt__Dot1XConfigurationExtension*) serialize to a stream
class tt__Dot1XConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":EAPMethodConfiguration is a complexType.
///
/// class tt__EAPMethodConfiguration operations:
/// - soap_new_tt__EAPMethodConfiguration(soap*) allocate
/// - soap_new_tt__EAPMethodConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__EAPMethodConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EAPMethodConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EAPMethodConfiguration(soap*, tt__EAPMethodConfiguration*) deserialize from a stream
/// - int soap_write_tt__EAPMethodConfiguration(soap, tt__EAPMethodConfiguration*) serialize to a stream
class tt__EAPMethodConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Confgiuration information for TLS Method.
/// </BLOCKQUOTE></PRE>
/// Element "TLSConfiguration" of XSD type "http://www.onvif.org/ver10/schema":TLSConfiguration.
    tt__TLSConfiguration*                TLSConfiguration               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Password for those EAP Methods that require a password. The password shall never be returned on a get method.
/// </BLOCKQUOTE></PRE>
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":EapMethodExtension.
    tt__EapMethodExtension*              Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":EapMethodExtension is a complexType.
///
/// class tt__EapMethodExtension operations:
/// - soap_new_tt__EapMethodExtension(soap*) allocate
/// - soap_new_tt__EapMethodExtension(soap*, int num) allocate array
/// - soap_new_req_tt__EapMethodExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EapMethodExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EapMethodExtension(soap*, tt__EapMethodExtension*) deserialize from a stream
/// - int soap_write_tt__EapMethodExtension(soap, tt__EapMethodExtension*) serialize to a stream
class tt__EapMethodExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":TLSConfiguration is a complexType.
///
/// class tt__TLSConfiguration operations:
/// - soap_new_tt__TLSConfiguration(soap*) allocate
/// - soap_new_tt__TLSConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__TLSConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TLSConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TLSConfiguration(soap*, tt__TLSConfiguration*) deserialize from a stream
/// - int soap_write_tt__TLSConfiguration(soap, tt__TLSConfiguration*) serialize to a stream
class tt__TLSConfiguration : public xsd__anyType
{ public:
/// Element "CertificateID" of XSD type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":GenericEapPwdConfigurationExtension is a complexType.
///
/// class tt__GenericEapPwdConfigurationExtension operations:
/// - soap_new_tt__GenericEapPwdConfigurationExtension(soap*) allocate
/// - soap_new_tt__GenericEapPwdConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__GenericEapPwdConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GenericEapPwdConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GenericEapPwdConfigurationExtension(soap*, tt__GenericEapPwdConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__GenericEapPwdConfigurationExtension(soap, tt__GenericEapPwdConfigurationExtension*) serialize to a stream
class tt__GenericEapPwdConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":RelayOutputSettings is a complexType.
///
/// class tt__RelayOutputSettings operations:
/// - soap_new_tt__RelayOutputSettings(soap*) allocate
/// - soap_new_tt__RelayOutputSettings(soap*, int num) allocate array
/// - soap_new_req_tt__RelayOutputSettings(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RelayOutputSettings(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RelayOutputSettings(soap*, tt__RelayOutputSettings*) deserialize from a stream
/// - int soap_write_tt__RelayOutputSettings(soap, tt__RelayOutputSettings*) serialize to a stream
class tt__RelayOutputSettings : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   'Bistable' or 'Monostable'
///   <ul>
///   <li>Bistable After setting the state, the relay remains in this state.</li>
///   <li>Monostable After setting the state, the relay returns to its idle state after the specified time.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":RelayMode.
    enum tt__RelayMode                   Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Time after which the relay returns to its idle state if it is in monostable mode. If the Mode field is set to bistable mode the value of the parameter can be ignored.
/// </BLOCKQUOTE></PRE>
/// Element "DelayTime" of XSD type xs:duration.
    xsd__duration                        DelayTime                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   'open' or 'closed'
///   <ul>
///   <li>'open' means that the relay is open when the relay state is set to 'inactive' through the trigger command and closed when the state is set to 'active' through the same command.</li>
///   <li>'closed' means that the relay is closed when the relay state is set to 'inactive' through the trigger command and open when the state is set to 'active' through the same command.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "IdleState" of XSD type "http://www.onvif.org/ver10/schema":RelayIdleState.
    enum tt__RelayIdleState              IdleState                      1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNodeExtension is a complexType.
///
/// class tt__PTZNodeExtension operations:
/// - soap_new_tt__PTZNodeExtension(soap*) allocate
/// - soap_new_tt__PTZNodeExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZNodeExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZNodeExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZNodeExtension(soap*, tt__PTZNodeExtension*) deserialize from a stream
/// - int soap_write_tt__PTZNodeExtension(soap, tt__PTZNodeExtension*) serialize to a stream
class tt__PTZNodeExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Detail of supported Preset Tour feature.
/// </BLOCKQUOTE></PRE>
/// Element "SupportedPresetTour" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourSupported.
    tt__PTZPresetTourSupported*          SupportedPresetTour            0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZNodeExtension2.
    tt__PTZNodeExtension2*               Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNodeExtension2 is a complexType.
///
/// class tt__PTZNodeExtension2 operations:
/// - soap_new_tt__PTZNodeExtension2(soap*) allocate
/// - soap_new_tt__PTZNodeExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__PTZNodeExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZNodeExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZNodeExtension2(soap*, tt__PTZNodeExtension2*) deserialize from a stream
/// - int soap_write_tt__PTZNodeExtension2(soap, tt__PTZNodeExtension2*) serialize to a stream
class tt__PTZNodeExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSupported is a complexType.
///
/// class tt__PTZPresetTourSupported operations:
/// - soap_new_tt__PTZPresetTourSupported(soap*) allocate
/// - soap_new_tt__PTZPresetTourSupported(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourSupported(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourSupported(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourSupported(soap*, tt__PTZPresetTourSupported*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSupported(soap, tt__PTZPresetTourSupported*) serialize to a stream
class tt__PTZPresetTourSupported : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates number of preset tours that can be created. Required preset tour operations shall be available for this PTZ Node if one or more preset tour is supported.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumNumberOfPresetTours" of XSD type xs:int.
    int                                  MaximumNumberOfPresetTours     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates which preset tour operations are available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__PTZPresetTourOperation of length 0..unbounded.
    std::vector<enum tt__PTZPresetTourOperation> PTZPresetTourOperation         0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourSupportedExtension.
    tt__PTZPresetTourSupportedExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSupportedExtension is a complexType.
///
/// class tt__PTZPresetTourSupportedExtension operations:
/// - soap_new_tt__PTZPresetTourSupportedExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourSupportedExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourSupportedExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourSupportedExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourSupportedExtension(soap*, tt__PTZPresetTourSupportedExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSupportedExtension(soap, tt__PTZPresetTourSupportedExtension*) serialize to a stream
class tt__PTZPresetTourSupportedExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationExtension is a complexType.
///
/// class tt__PTZConfigurationExtension operations:
/// - soap_new_tt__PTZConfigurationExtension(soap*) allocate
/// - soap_new_tt__PTZConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZConfigurationExtension(soap*, tt__PTZConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationExtension(soap, tt__PTZConfigurationExtension*) serialize to a stream
class tt__PTZConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure PT Control Direction related features.
/// </BLOCKQUOTE></PRE>
/// Element "PTControlDirection" of XSD type "http://www.onvif.org/ver10/schema":PTControlDirection.
    tt__PTControlDirection*              PTControlDirection             0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZConfigurationExtension2.
    tt__PTZConfigurationExtension2*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationExtension2 is a complexType.
///
/// class tt__PTZConfigurationExtension2 operations:
/// - soap_new_tt__PTZConfigurationExtension2(soap*) allocate
/// - soap_new_tt__PTZConfigurationExtension2(soap*, int num) allocate array
/// - soap_new_req_tt__PTZConfigurationExtension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZConfigurationExtension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZConfigurationExtension2(soap*, tt__PTZConfigurationExtension2*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationExtension2(soap, tt__PTZConfigurationExtension2*) serialize to a stream
class tt__PTZConfigurationExtension2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirection is a complexType.
///
/// class tt__PTControlDirection operations:
/// - soap_new_tt__PTControlDirection(soap*) allocate
/// - soap_new_tt__PTControlDirection(soap*, int num) allocate array
/// - soap_new_req_tt__PTControlDirection(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTControlDirection(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTControlDirection(soap*, tt__PTControlDirection*) deserialize from a stream
/// - int soap_write_tt__PTControlDirection(soap, tt__PTControlDirection*) serialize to a stream
class tt__PTControlDirection : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure related parameters for E-Flip.
/// </BLOCKQUOTE></PRE>
/// Element "EFlip" of XSD type "http://www.onvif.org/ver10/schema":EFlip.
    tt__EFlip*                           EFlip                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure related parameters for reversing of PT Control Direction.
/// </BLOCKQUOTE></PRE>
/// Element "Reverse" of XSD type "http://www.onvif.org/ver10/schema":Reverse.
    tt__Reverse*                         Reverse                        0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTControlDirectionExtension.
    tt__PTControlDirectionExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionExtension is a complexType.
///
/// class tt__PTControlDirectionExtension operations:
/// - soap_new_tt__PTControlDirectionExtension(soap*) allocate
/// - soap_new_tt__PTControlDirectionExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTControlDirectionExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTControlDirectionExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTControlDirectionExtension(soap*, tt__PTControlDirectionExtension*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionExtension(soap, tt__PTControlDirectionExtension*) serialize to a stream
class tt__PTControlDirectionExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":EFlip is a complexType.
///
/// class tt__EFlip operations:
/// - soap_new_tt__EFlip(soap*) allocate
/// - soap_new_tt__EFlip(soap*, int num) allocate array
/// - soap_new_req_tt__EFlip(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EFlip(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EFlip(soap*, tt__EFlip*) deserialize from a stream
/// - int soap_write_tt__EFlip(soap, tt__EFlip*) serialize to a stream
class tt__EFlip : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable E-Flip feature.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":EFlipMode.
    enum tt__EFlipMode                   Mode                           1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Reverse is a complexType.
///
/// class tt__Reverse operations:
/// - soap_new_tt__Reverse(soap*) allocate
/// - soap_new_tt__Reverse(soap*, int num) allocate array
/// - soap_new_req_tt__Reverse(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Reverse(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Reverse(soap*, tt__Reverse*) deserialize from a stream
/// - int soap_write_tt__Reverse(soap, tt__Reverse*) serialize to a stream
class tt__Reverse : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Reverse feature.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":ReverseMode.
    enum tt__ReverseMode                 Mode                           1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationOptions is a complexType.
///
/// class tt__PTZConfigurationOptions operations:
/// - soap_new_tt__PTZConfigurationOptions(soap*) allocate
/// - soap_new_tt__PTZConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTZConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZConfigurationOptions(soap*, tt__PTZConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationOptions(soap, tt__PTZConfigurationOptions*) serialize to a stream
class tt__PTZConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of supported coordinate systems including their range limitations.
/// </BLOCKQUOTE></PRE>
/// Element "Spaces" of XSD type "http://www.onvif.org/ver10/schema":PTZSpaces.
    tt__PTZSpaces*                       Spaces                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A timeout Range within which Timeouts are accepted by the PTZ Node.
/// </BLOCKQUOTE></PRE>
/// Element "PTZTimeout" of XSD type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   PTZTimeout                     1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Supported options for PT Direction Control.
/// </BLOCKQUOTE></PRE>
/// Element "PTControlDirection" of XSD type "http://www.onvif.org/ver10/schema":PTControlDirectionOptions.
    tt__PTControlDirectionOptions*       PTControlDirection             0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZConfigurationOptions2.
    tt__PTZConfigurationOptions2*        Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The list of acceleration ramps supported by the device. The
///   smallest acceleration value corresponds to the minimal index, the
///   highest acceleration corresponds to the maximum index.
/// </BLOCKQUOTE></PRE>
/// Attribute "PTZRamps" of XSD type "http://www.onvif.org/ver10/schema":IntAttrList.
   @tt__IntAttrList*                     PTZRamps                       0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfigurationOptions2 is a complexType.
///
/// class tt__PTZConfigurationOptions2 operations:
/// - soap_new_tt__PTZConfigurationOptions2(soap*) allocate
/// - soap_new_tt__PTZConfigurationOptions2(soap*, int num) allocate array
/// - soap_new_req_tt__PTZConfigurationOptions2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZConfigurationOptions2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZConfigurationOptions2(soap*, tt__PTZConfigurationOptions2*) deserialize from a stream
/// - int soap_write_tt__PTZConfigurationOptions2(soap, tt__PTZConfigurationOptions2*) serialize to a stream
class tt__PTZConfigurationOptions2 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionOptions is a complexType.
///
/// class tt__PTControlDirectionOptions operations:
/// - soap_new_tt__PTControlDirectionOptions(soap*) allocate
/// - soap_new_tt__PTControlDirectionOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTControlDirectionOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTControlDirectionOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTControlDirectionOptions(soap*, tt__PTControlDirectionOptions*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionOptions(soap, tt__PTControlDirectionOptions*) serialize to a stream
class tt__PTControlDirectionOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for EFlip feature.
/// </BLOCKQUOTE></PRE>
/// Element "EFlip" of XSD type "http://www.onvif.org/ver10/schema":EFlipOptions.
    tt__EFlipOptions*                    EFlip                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Reverse feature.
/// </BLOCKQUOTE></PRE>
/// Element "Reverse" of XSD type "http://www.onvif.org/ver10/schema":ReverseOptions.
    tt__ReverseOptions*                  Reverse                        0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTControlDirectionOptionsExtension.
    tt__PTControlDirectionOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTControlDirectionOptionsExtension is a complexType.
///
/// class tt__PTControlDirectionOptionsExtension operations:
/// - soap_new_tt__PTControlDirectionOptionsExtension(soap*) allocate
/// - soap_new_tt__PTControlDirectionOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTControlDirectionOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTControlDirectionOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTControlDirectionOptionsExtension(soap*, tt__PTControlDirectionOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTControlDirectionOptionsExtension(soap, tt__PTControlDirectionOptionsExtension*) serialize to a stream
class tt__PTControlDirectionOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipOptions is a complexType.
///
/// class tt__EFlipOptions operations:
/// - soap_new_tt__EFlipOptions(soap*) allocate
/// - soap_new_tt__EFlipOptions(soap*, int num) allocate array
/// - soap_new_req_tt__EFlipOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EFlipOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EFlipOptions(soap*, tt__EFlipOptions*) deserialize from a stream
/// - int soap_write_tt__EFlipOptions(soap, tt__EFlipOptions*) serialize to a stream
class tt__EFlipOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of EFlip mode parameter.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__EFlipMode of length 0..unbounded.
    std::vector<enum tt__EFlipMode     > Mode                           0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":EFlipOptionsExtension.
    tt__EFlipOptionsExtension*           Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":EFlipOptionsExtension is a complexType.
///
/// class tt__EFlipOptionsExtension operations:
/// - soap_new_tt__EFlipOptionsExtension(soap*) allocate
/// - soap_new_tt__EFlipOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__EFlipOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EFlipOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EFlipOptionsExtension(soap*, tt__EFlipOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__EFlipOptionsExtension(soap, tt__EFlipOptionsExtension*) serialize to a stream
class tt__EFlipOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseOptions is a complexType.
///
/// class tt__ReverseOptions operations:
/// - soap_new_tt__ReverseOptions(soap*) allocate
/// - soap_new_tt__ReverseOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ReverseOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReverseOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReverseOptions(soap*, tt__ReverseOptions*) deserialize from a stream
/// - int soap_write_tt__ReverseOptions(soap, tt__ReverseOptions*) serialize to a stream
class tt__ReverseOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of Reverse mode parameter.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__ReverseMode of length 0..unbounded.
    std::vector<enum tt__ReverseMode   > Mode                           0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ReverseOptionsExtension.
    tt__ReverseOptionsExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ReverseOptionsExtension is a complexType.
///
/// class tt__ReverseOptionsExtension operations:
/// - soap_new_tt__ReverseOptionsExtension(soap*) allocate
/// - soap_new_tt__ReverseOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ReverseOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReverseOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReverseOptionsExtension(soap*, tt__ReverseOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__ReverseOptionsExtension(soap, tt__ReverseOptionsExtension*) serialize to a stream
class tt__ReverseOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PanTiltLimits is a complexType.
///
/// class tt__PanTiltLimits operations:
/// - soap_new_tt__PanTiltLimits(soap*) allocate
/// - soap_new_tt__PanTiltLimits(soap*, int num) allocate array
/// - soap_new_req_tt__PanTiltLimits(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PanTiltLimits(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PanTiltLimits(soap*, tt__PanTiltLimits*) deserialize from a stream
/// - int soap_write_tt__PanTiltLimits(soap, tt__PanTiltLimits*) serialize to a stream
class tt__PanTiltLimits : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A range of pan tilt limits.
/// </BLOCKQUOTE></PRE>
/// Element "Range" of XSD type "http://www.onvif.org/ver10/schema":Space2DDescription.
    tt__Space2DDescription*              Range                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ZoomLimits is a complexType.
///
/// class tt__ZoomLimits operations:
/// - soap_new_tt__ZoomLimits(soap*) allocate
/// - soap_new_tt__ZoomLimits(soap*, int num) allocate array
/// - soap_new_req_tt__ZoomLimits(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ZoomLimits(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ZoomLimits(soap*, tt__ZoomLimits*) deserialize from a stream
/// - int soap_write_tt__ZoomLimits(soap, tt__ZoomLimits*) serialize to a stream
class tt__ZoomLimits : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A range of zoom limit
/// </BLOCKQUOTE></PRE>
/// Element "Range" of XSD type "http://www.onvif.org/ver10/schema":Space1DDescription.
    tt__Space1DDescription*              Range                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpaces is a complexType.
///
/// class tt__PTZSpaces operations:
/// - soap_new_tt__PTZSpaces(soap*) allocate
/// - soap_new_tt__PTZSpaces(soap*, int num) allocate array
/// - soap_new_req_tt__PTZSpaces(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZSpaces(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZSpaces(soap*, tt__PTZSpaces*) deserialize from a stream
/// - int soap_write_tt__PTZSpaces(soap, tt__PTZSpaces*) serialize to a stream
class tt__PTZSpaces : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Generic Pan/Tilt Position space is provided by every PTZ node that supports absolute Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the PTZ unit normalized to the range -1 to 1 resulting in the following space description.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space2DDescription* of length 0..unbounded.
    std::vector<tt__Space2DDescription*> AbsolutePanTiltPositionSpace   0;
/// <PRE><BLOCKQUOTE>
///   The Generic Zoom Position Space is provided by every PTZ node that supports absolute Zoom, since it does not relate to a specific physical range. Instead, the range should be defined as the full range of the Zoom normalized to the range 0 (wide) to 1 (tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> AbsoluteZoomPositionSpace      0;
/// <PRE><BLOCKQUOTE>
///   The Generic Pan/Tilt translation space is provided by every PTZ node that supports relative Pan/Tilt, since it does not relate to a specific physical range. Instead, the range should be defined as the full positive and negative translation range of the PTZ unit normalized to the range -1 to 1, where positive translation would mean clockwise rotation or movement in right/up direction resulting in the following space description.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space2DDescription* of length 0..unbounded.
    std::vector<tt__Space2DDescription*> RelativePanTiltTranslationSpace 0;
/// <PRE><BLOCKQUOTE>
///   The Generic Zoom Translation Space is provided by every PTZ node that supports relative Zoom, since it does not relate to a specific physical range. Instead, the corresponding absolute range should be defined as the full positive and negative translation range of the Zoom normalized to the range -1 to1, where a positive translation maps to a movement in TELE direction. The translation is signed to indicate direction (negative is to wide, positive is to tele). There is no assumption about how the generic zoom range is mapped to magnification, FOV or other physical zoom dimension. This results in the following space description.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> RelativeZoomTranslationSpace   0;
/// <PRE><BLOCKQUOTE>
///   The generic Pan/Tilt velocity space shall be provided by every PTZ node, since it does not relate to a specific physical range. Instead, the range should be defined as a range of the PTZ units speed normalized to the range -1 to 1, where a positive velocity would map to clockwise rotation or movement in the right/up direction. A signed speed can be independently specified for the pan and tilt component resulting in the following space description.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space2DDescription* of length 0..unbounded.
    std::vector<tt__Space2DDescription*> ContinuousPanTiltVelocitySpace 0;
/// <PRE><BLOCKQUOTE>
///   The generic zoom velocity space specifies a zoom factor velocity without knowing the underlying physical model. The range should be normalized from -1 to 1, where a positive velocity would map to TELE direction. A generic zoom velocity space description resembles the following.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> ContinuousZoomVelocitySpace    0;
/// <PRE><BLOCKQUOTE>
///   The speed space specifies the speed for a Pan/Tilt movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information. The speed of a combined Pan/Tilt movement is represented by a single non-negative scalar value.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> PanTiltSpeedSpace              0;
/// <PRE><BLOCKQUOTE>
///   The speed space specifies the speed for a Zoom movement when moving to an absolute position or to a relative translation. In contrast to the velocity spaces, speed spaces do not contain any directional information.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Space1DDescription* of length 0..unbounded.
    std::vector<tt__Space1DDescription*> ZoomSpeedSpace                 0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZSpacesExtension.
    tt__PTZSpacesExtension*              Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpacesExtension is a complexType.
///
/// class tt__PTZSpacesExtension operations:
/// - soap_new_tt__PTZSpacesExtension(soap*) allocate
/// - soap_new_tt__PTZSpacesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZSpacesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZSpacesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZSpacesExtension(soap*, tt__PTZSpacesExtension*) deserialize from a stream
/// - int soap_write_tt__PTZSpacesExtension(soap, tt__PTZSpacesExtension*) serialize to a stream
class tt__PTZSpacesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Space2DDescription is a complexType.
///
/// class tt__Space2DDescription operations:
/// - soap_new_tt__Space2DDescription(soap*) allocate
/// - soap_new_tt__Space2DDescription(soap*, int num) allocate array
/// - soap_new_req_tt__Space2DDescription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Space2DDescription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Space2DDescription(soap*, tt__Space2DDescription*) deserialize from a stream
/// - int soap_write_tt__Space2DDescription(soap, tt__Space2DDescription*) serialize to a stream
class tt__Space2DDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A URI of coordinate systems.
/// </BLOCKQUOTE></PRE>
/// Element "URI" of XSD type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of x-axis.
/// </BLOCKQUOTE></PRE>
/// Element "XRange" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      XRange                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of y-axis.
/// </BLOCKQUOTE></PRE>
/// Element "YRange" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YRange                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Space1DDescription is a complexType.
///
/// class tt__Space1DDescription operations:
/// - soap_new_tt__Space1DDescription(soap*) allocate
/// - soap_new_tt__Space1DDescription(soap*, int num) allocate array
/// - soap_new_req_tt__Space1DDescription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Space1DDescription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Space1DDescription(soap*, tt__Space1DDescription*) deserialize from a stream
/// - int soap_write_tt__Space1DDescription(soap, tt__Space1DDescription*) serialize to a stream
class tt__Space1DDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A URI of coordinate systems.
/// </BLOCKQUOTE></PRE>
/// Element "URI" of XSD type xs:anyURI.
    xsd__anyURI                          URI                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A range of x-axis.
/// </BLOCKQUOTE></PRE>
/// Element "XRange" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      XRange                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZSpeed is a complexType.
///
/// class tt__PTZSpeed operations:
/// - soap_new_tt__PTZSpeed(soap*) allocate
/// - soap_new_tt__PTZSpeed(soap*, int num) allocate array
/// - soap_new_req_tt__PTZSpeed(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZSpeed(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZSpeed(soap*, tt__PTZSpeed*) deserialize from a stream
/// - int soap_write_tt__PTZSpeed(soap, tt__PTZSpeed*) serialize to a stream
class tt__PTZSpeed : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Pan and tilt speed. The x component corresponds to pan and the y component to tilt. If omitted in a request, the current (if any) PanTilt movement should not be affected.
/// </BLOCKQUOTE></PRE>
/// Element "PanTilt" of XSD type "http://www.onvif.org/ver10/schema":Vector2D.
    tt__Vector2D*                        PanTilt                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A zoom speed. If omitted in a request, the current (if any) Zoom movement should not be affected.
/// </BLOCKQUOTE></PRE>
/// Element "Zoom" of XSD type "http://www.onvif.org/ver10/schema":Vector1D.
    tt__Vector1D*                        Zoom                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPreset is a complexType.
///
/// class tt__PTZPreset operations:
/// - soap_new_tt__PTZPreset(soap*) allocate
/// - soap_new_tt__PTZPreset(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPreset(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPreset(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPreset(soap*, tt__PTZPreset*) deserialize from a stream
/// - int soap_write_tt__PTZPreset(soap, tt__PTZPreset*) serialize to a stream
class tt__PTZPreset : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of preset position name.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name*                            Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A list of preset position.
/// </BLOCKQUOTE></PRE>
/// Element "PTZPosition" of XSD type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       PTZPosition                    0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken*                  token                          0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PresetTour is a complexType.
///
/// class tt__PresetTour operations:
/// - soap_new_tt__PresetTour(soap*) allocate
/// - soap_new_tt__PresetTour(soap*, int num) allocate array
/// - soap_new_req_tt__PresetTour(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PresetTour(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PresetTour(soap*, tt__PresetTour*) deserialize from a stream
/// - int soap_write_tt__PresetTour(soap, tt__PresetTour*) serialize to a stream
class tt__PresetTour : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Readable name of the preset tour.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name*                            Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Read only parameters to indicate the status of the preset tour.
/// </BLOCKQUOTE></PRE>
/// Element "Status" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourStatus.
    tt__PTZPresetTourStatus*             Status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Auto Start flag of the preset tour. True allows the preset tour to be activated always.
/// </BLOCKQUOTE></PRE>
/// Element "AutoStart" of XSD type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameters to specify the detail behavior of the preset tour.
/// </BLOCKQUOTE></PRE>
/// Element "StartingCondition" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingCondition.
    tt__PTZPresetTourStartingCondition*  StartingCondition              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A list of detail of touring spots including preset positions.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PTZPresetTourSpot* of length 0..unbounded.
    std::vector<tt__PTZPresetTourSpot* > TourSpot                       0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourExtension.
    tt__PTZPresetTourExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Unique identifier of this preset tour.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken*                  token                          0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourExtension is a complexType.
///
/// class tt__PTZPresetTourExtension operations:
/// - soap_new_tt__PTZPresetTourExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourExtension(soap*, tt__PTZPresetTourExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourExtension(soap, tt__PTZPresetTourExtension*) serialize to a stream
class tt__PTZPresetTourExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpot is a complexType.
///
/// class tt__PTZPresetTourSpot operations:
/// - soap_new_tt__PTZPresetTourSpot(soap*) allocate
/// - soap_new_tt__PTZPresetTourSpot(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourSpot(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourSpot(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourSpot(soap*, tt__PTZPresetTourSpot*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpot(soap, tt__PTZPresetTourSpot*) serialize to a stream
class tt__PTZPresetTourSpot : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Detail definition of preset position of the tour spot.
/// </BLOCKQUOTE></PRE>
/// Element "PresetDetail" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetail.
    tt__PTZPresetTourPresetDetail*       PresetDetail                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify Pan/Tilt and Zoom speed on moving toward this tour spot.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type "http://www.onvif.org/ver10/schema":PTZSpeed.
    tt__PTZSpeed*                        Speed                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify time duration of staying on this tour sport.
/// </BLOCKQUOTE></PRE>
/// Element "StayTime" of XSD type xs:duration.
    xsd__duration*                       StayTime                       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourSpotExtension.
    tt__PTZPresetTourSpotExtension*      Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpotExtension is a complexType.
///
/// class tt__PTZPresetTourSpotExtension operations:
/// - soap_new_tt__PTZPresetTourSpotExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourSpotExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourSpotExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourSpotExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourSpotExtension(soap*, tt__PTZPresetTourSpotExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpotExtension(soap, tt__PTZPresetTourSpotExtension*) serialize to a stream
class tt__PTZPresetTourSpotExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetail is a complexType.
///
/// class tt__PTZPresetTourPresetDetail operations:
/// - soap_new_tt__PTZPresetTourPresetDetail(soap*) allocate
/// - soap_new_tt__PTZPresetTourPresetDetail(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourPresetDetail(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourPresetDetail(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourPresetDetail(soap*, tt__PTZPresetTourPresetDetail*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetail(soap, tt__PTZPresetTourPresetDetail*) serialize to a stream
class tt__PTZPresetTourPresetDetail : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_PTZPresetTourPresetDetail;	///< Union _tt__union_PTZPresetTourPresetDetail selector: set to SOAP_UNION__tt__union_PTZPresetTourPresetDetail_<fieldname>
    union _tt__union_PTZPresetTourPresetDetail
    {
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with Preset Token defined in advance.
/// </BLOCKQUOTE></PRE>
/// Element "PresetToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  PresetToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with the home position of this PTZ Node. "False" to this parameter shall be treated as an invalid argument.
/// </BLOCKQUOTE></PRE>
/// Element "Home" of XSD type xs:boolean.
    bool                                 Home                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Option to specify the preset position with vector of PTZ node directly.
/// </BLOCKQUOTE></PRE>
/// Element "PTZPosition" of XSD type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       PTZPosition                    1;	///< Required element.
/// Element "TypeExtension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourTypeExtension.
    tt__PTZPresetTourTypeExtension*      TypeExtension                  1;	///< Required element.
    }                                    union_PTZPresetTourPresetDetail;
//  END OF CHOICE
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourTypeExtension is a complexType.
///
/// class tt__PTZPresetTourTypeExtension operations:
/// - soap_new_tt__PTZPresetTourTypeExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourTypeExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourTypeExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourTypeExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourTypeExtension(soap*, tt__PTZPresetTourTypeExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourTypeExtension(soap, tt__PTZPresetTourTypeExtension*) serialize to a stream
class tt__PTZPresetTourTypeExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStatus is a complexType.
///
/// class tt__PTZPresetTourStatus operations:
/// - soap_new_tt__PTZPresetTourStatus(soap*) allocate
/// - soap_new_tt__PTZPresetTourStatus(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourStatus(soap*, tt__PTZPresetTourStatus*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStatus(soap, tt__PTZPresetTourStatus*) serialize to a stream
class tt__PTZPresetTourStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates state of this preset tour by Idle/Touring/Paused.
/// </BLOCKQUOTE></PRE>
/// Element "State" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourState.
    enum tt__PTZPresetTourState          State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates a tour spot currently staying.
/// </BLOCKQUOTE></PRE>
/// Element "CurrentTourSpot" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourSpot.
    tt__PTZPresetTourSpot*               CurrentTourSpot                0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourStatusExtension.
    tt__PTZPresetTourStatusExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStatusExtension is a complexType.
///
/// class tt__PTZPresetTourStatusExtension operations:
/// - soap_new_tt__PTZPresetTourStatusExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourStatusExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourStatusExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourStatusExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourStatusExtension(soap*, tt__PTZPresetTourStatusExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStatusExtension(soap, tt__PTZPresetTourStatusExtension*) serialize to a stream
class tt__PTZPresetTourStatusExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingCondition is a complexType.
///
/// class tt__PTZPresetTourStartingCondition operations:
/// - soap_new_tt__PTZPresetTourStartingCondition(soap*) allocate
/// - soap_new_tt__PTZPresetTourStartingCondition(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourStartingCondition(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourStartingCondition(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourStartingCondition(soap*, tt__PTZPresetTourStartingCondition*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingCondition(soap, tt__PTZPresetTourStartingCondition*) serialize to a stream
class tt__PTZPresetTourStartingCondition : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify how many times the preset tour is recurred.
/// </BLOCKQUOTE></PRE>
/// Element "RecurringTime" of XSD type xs:int.
    int*                                 RecurringTime                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to specify how long time duration the preset tour is recurred.
/// </BLOCKQUOTE></PRE>
/// Element "RecurringDuration" of XSD type xs:duration.
    xsd__duration*                       RecurringDuration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to choose which direction the preset tour goes. Forward shall be chosen in case it is omitted.
/// </BLOCKQUOTE></PRE>
/// Element "Direction" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourDirection.
    enum tt__PTZPresetTourDirection*     Direction                      0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionExtension.
    tt__PTZPresetTourStartingConditionExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Execute presets in random order. If set to true and Direction is also present, Direction will be ignored and presets of the Tour will be recalled randomly.
/// </BLOCKQUOTE></PRE>
/// Attribute "RandomPresetOrder" of XSD type xs:boolean.
   @bool*                                RandomPresetOrder              0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionExtension is a complexType.
///
/// class tt__PTZPresetTourStartingConditionExtension operations:
/// - soap_new_tt__PTZPresetTourStartingConditionExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourStartingConditionExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourStartingConditionExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourStartingConditionExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourStartingConditionExtension(soap*, tt__PTZPresetTourStartingConditionExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionExtension(soap, tt__PTZPresetTourStartingConditionExtension*) serialize to a stream
class tt__PTZPresetTourStartingConditionExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourOptions is a complexType.
///
/// class tt__PTZPresetTourOptions operations:
/// - soap_new_tt__PTZPresetTourOptions(soap*) allocate
/// - soap_new_tt__PTZPresetTourOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourOptions(soap*, tt__PTZPresetTourOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourOptions(soap, tt__PTZPresetTourOptions*) serialize to a stream
class tt__PTZPresetTourOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not the AutoStart is supported.
/// </BLOCKQUOTE></PRE>
/// Element "AutoStart" of XSD type xs:boolean.
    bool                                 AutoStart                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Preset Tour Starting Condition.
/// </BLOCKQUOTE></PRE>
/// Element "StartingCondition" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptions.
    tt__PTZPresetTourStartingConditionOptions*  StartingCondition              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Preset Tour Spot.
/// </BLOCKQUOTE></PRE>
/// Element "TourSpot" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourSpotOptions.
    tt__PTZPresetTourSpotOptions*        TourSpot                       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourSpotOptions is a complexType.
///
/// class tt__PTZPresetTourSpotOptions operations:
/// - soap_new_tt__PTZPresetTourSpotOptions(soap*) allocate
/// - soap_new_tt__PTZPresetTourSpotOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourSpotOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourSpotOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourSpotOptions(soap*, tt__PTZPresetTourSpotOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourSpotOptions(soap, tt__PTZPresetTourSpotOptions*) serialize to a stream
class tt__PTZPresetTourSpotOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for detail definition of preset position of the tour spot.
/// </BLOCKQUOTE></PRE>
/// Element "PresetDetail" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptions.
    tt__PTZPresetTourPresetDetailOptions*  PresetDetail                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported range of stay time for a tour spot.
/// </BLOCKQUOTE></PRE>
/// Element "StayTime" of XSD type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   StayTime                       1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptions is a complexType.
///
/// class tt__PTZPresetTourPresetDetailOptions operations:
/// - soap_new_tt__PTZPresetTourPresetDetailOptions(soap*) allocate
/// - soap_new_tt__PTZPresetTourPresetDetailOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourPresetDetailOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourPresetDetailOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourPresetDetailOptions(soap*, tt__PTZPresetTourPresetDetailOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetailOptions(soap, tt__PTZPresetTourPresetDetailOptions*) serialize to a stream
class tt__PTZPresetTourPresetDetailOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of available Preset Tokens for tour spots.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ReferenceToken of length 0..unbounded.
    std::vector<tt__ReferenceToken     > PresetToken                    0;
/// <PRE><BLOCKQUOTE>
///   An option to indicate Home postion for tour spots.
/// </BLOCKQUOTE></PRE>
/// Element "Home" of XSD type xs:boolean.
    bool*                                Home                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Pan and Tilt for tour spots.
/// </BLOCKQUOTE></PRE>
/// Element "PanTiltPositionSpace" of XSD type "http://www.onvif.org/ver10/schema":Space2DDescription.
    tt__Space2DDescription*              PanTiltPositionSpace           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Zoom for a tour spot.
/// </BLOCKQUOTE></PRE>
/// Element "ZoomPositionSpace" of XSD type "http://www.onvif.org/ver10/schema":Space1DDescription.
    tt__Space1DDescription*              ZoomPositionSpace              0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptionsExtension.
    tt__PTZPresetTourPresetDetailOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourPresetDetailOptionsExtension is a complexType.
///
/// class tt__PTZPresetTourPresetDetailOptionsExtension operations:
/// - soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourPresetDetailOptionsExtension(soap*, tt__PTZPresetTourPresetDetailOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourPresetDetailOptionsExtension(soap, tt__PTZPresetTourPresetDetailOptionsExtension*) serialize to a stream
class tt__PTZPresetTourPresetDetailOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptions is a complexType.
///
/// class tt__PTZPresetTourStartingConditionOptions operations:
/// - soap_new_tt__PTZPresetTourStartingConditionOptions(soap*) allocate
/// - soap_new_tt__PTZPresetTourStartingConditionOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourStartingConditionOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourStartingConditionOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourStartingConditionOptions(soap*, tt__PTZPresetTourStartingConditionOptions*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionOptions(soap, tt__PTZPresetTourStartingConditionOptions*) serialize to a stream
class tt__PTZPresetTourStartingConditionOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported range of Recurring Time.
/// </BLOCKQUOTE></PRE>
/// Element "RecurringTime" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        RecurringTime                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of Recurring Duration.
/// </BLOCKQUOTE></PRE>
/// Element "RecurringDuration" of XSD type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   RecurringDuration              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported options for Direction of Preset Tour.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__PTZPresetTourDirection of length 0..unbounded.
    std::vector<enum tt__PTZPresetTourDirection> Direction                      0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptionsExtension.
    tt__PTZPresetTourStartingConditionOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPresetTourStartingConditionOptionsExtension is a complexType.
///
/// class tt__PTZPresetTourStartingConditionOptionsExtension operations:
/// - soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap*) allocate
/// - soap_new_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPresetTourStartingConditionOptionsExtension(soap*, tt__PTZPresetTourStartingConditionOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__PTZPresetTourStartingConditionOptionsExtension(soap, tt__PTZPresetTourStartingConditionOptionsExtension*) serialize to a stream
class tt__PTZPresetTourStartingConditionOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingStatus is a complexType.
///
/// class tt__ImagingStatus operations:
/// - soap_new_tt__ImagingStatus(soap*) allocate
/// - soap_new_tt__ImagingStatus(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingStatus(soap*, tt__ImagingStatus*) deserialize from a stream
/// - int soap_write_tt__ImagingStatus(soap, tt__ImagingStatus*) serialize to a stream
class tt__ImagingStatus : public xsd__anyType
{ public:
/// Element "FocusStatus" of XSD type "http://www.onvif.org/ver10/schema":FocusStatus.
    tt__FocusStatus*                     FocusStatus                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusStatus is a complexType.
///
/// class tt__FocusStatus operations:
/// - soap_new_tt__FocusStatus(soap*) allocate
/// - soap_new_tt__FocusStatus(soap*, int num) allocate array
/// - soap_new_req_tt__FocusStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusStatus(soap*, tt__FocusStatus*) deserialize from a stream
/// - int soap_write_tt__FocusStatus(soap, tt__FocusStatus*) serialize to a stream
class tt__FocusStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of focus position.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type xs:float.
    float                                Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Status of focus MoveStatus.
/// </BLOCKQUOTE></PRE>
/// Element "MoveStatus" of XSD type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum tt__MoveStatus                  MoveStatus                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Error status of focus.
/// </BLOCKQUOTE></PRE>
/// Element "Error" of XSD type xs:string.
    std::string                          Error                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration is a complexType.
///
/// class tt__FocusConfiguration operations:
/// - soap_new_tt__FocusConfiguration(soap*) allocate
/// - soap_new_tt__FocusConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__FocusConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusConfiguration(soap*, tt__FocusConfiguration*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration(soap, tt__FocusConfiguration*) serialize to a stream
class tt__FocusConfiguration : public xsd__anyType
{ public:
/// Element "AutoFocusMode" of XSD type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    enum tt__AutoFocusMode               AutoFocusMode                  1;	///< Required element.
/// Element "DefaultSpeed" of XSD type xs:float.
    float                                DefaultSpeed                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus near limit (unit: meter).
/// </BLOCKQUOTE></PRE>
/// Element "NearLimit" of XSD type xs:float.
    float                                NearLimit                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus far limit (unit: meter).
///   If set to 0.0, infinity will be used.
/// </BLOCKQUOTE></PRE>
/// Element "FarLimit" of XSD type xs:float.
    float                                FarLimit                       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettings is a complexType.
///
/// class tt__ImagingSettings operations:
/// - soap_new_tt__ImagingSettings(soap*) allocate
/// - soap_new_tt__ImagingSettings(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettings(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettings(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettings(soap*, tt__ImagingSettings*) deserialize from a stream
/// - int soap_write_tt__ImagingSettings(soap, tt__ImagingSettings*) serialize to a stream
class tt__ImagingSettings : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Enabled/disabled BLC mode (on/off).
/// </BLOCKQUOTE></PRE>
/// Element "BacklightCompensation" of XSD type "http://www.onvif.org/ver10/schema":BacklightCompensation.
    tt__BacklightCompensation*           BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image brightness (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Brightness" of XSD type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Color saturation of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "ColorSaturation" of XSD type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contrast of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Contrast" of XSD type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exposure mode of the device.
/// </BLOCKQUOTE></PRE>
/// Element "Exposure" of XSD type "http://www.onvif.org/ver10/schema":Exposure.
    tt__Exposure*                        Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Focus configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Focus" of XSD type "http://www.onvif.org/ver10/schema":FocusConfiguration.
    tt__FocusConfiguration*              Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Infrared Cutoff Filter settings.
/// </BLOCKQUOTE></PRE>
/// Element "IrCutFilter" of XSD type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    enum tt__IrCutFilterMode*            IrCutFilter                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sharpness of the Video image.
/// </BLOCKQUOTE></PRE>
/// Element "Sharpness" of XSD type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WDR settings.
/// </BLOCKQUOTE></PRE>
/// Element "WideDynamicRange" of XSD type "http://www.onvif.org/ver10/schema":WideDynamicRange.
    tt__WideDynamicRange*                WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   White balance settings.
/// </BLOCKQUOTE></PRE>
/// Element "WhiteBalance" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalance.
    tt__WhiteBalance*                    WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension.
    tt__ImagingSettingsExtension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension is a complexType.
///
/// class tt__ImagingSettingsExtension operations:
/// - soap_new_tt__ImagingSettingsExtension(soap*) allocate
/// - soap_new_tt__ImagingSettingsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettingsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettingsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettingsExtension(soap*, tt__ImagingSettingsExtension*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension(soap, tt__ImagingSettingsExtension*) serialize to a stream
class tt__ImagingSettingsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Exposure is a complexType.
///
/// class tt__Exposure operations:
/// - soap_new_tt__Exposure(soap*) allocate
/// - soap_new_tt__Exposure(soap*, int num) allocate array
/// - soap_new_req_tt__Exposure(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Exposure(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Exposure(soap*, tt__Exposure*) deserialize from a stream
/// - int soap_write_tt__Exposure(soap, tt__Exposure*) serialize to a stream
class tt__Exposure : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the NVT.</li>
///   <li>Manual Disabled exposure algorithm on the NVT.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":ExposureMode.
    enum tt__ExposureMode                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
/// Element "Priority" of XSD type "http://www.onvif.org/ver10/schema":ExposurePriority.
    enum tt__ExposurePriority            Priority                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rectangular exposure mask.
/// </BLOCKQUOTE></PRE>
/// Element "Window" of XSD type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Window                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MinExposureTime" of XSD type xs:float.
    float                                MinExposureTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MaxExposureTime" of XSD type xs:float.
    float                                MaxExposureTime                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MinGain" of XSD type xs:float.
    float                                MinGain                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MaxGain" of XSD type xs:float.
    float                                MaxGain                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MinIris" of XSD type xs:float.
    float                                MinIris                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the iris range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MaxIris" of XSD type xs:float.
    float                                MaxIris                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed exposure time used by the image sensor (s).
/// </BLOCKQUOTE></PRE>
/// Element "ExposureTime" of XSD type xs:float.
    float                                ExposureTime                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed gain used by the image sensor (dB).
/// </BLOCKQUOTE></PRE>
/// Element "Gain" of XSD type xs:float.
    float                                Gain                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris.
/// </BLOCKQUOTE></PRE>
/// Element "Iris" of XSD type xs:float.
    float                                Iris                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRange is a complexType.
///
/// class tt__WideDynamicRange operations:
/// - soap_new_tt__WideDynamicRange(soap*) allocate
/// - soap_new_tt__WideDynamicRange(soap*, int num) allocate array
/// - soap_new_req_tt__WideDynamicRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WideDynamicRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WideDynamicRange(soap*, tt__WideDynamicRange*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRange(soap, tt__WideDynamicRange*) serialize to a stream
class tt__WideDynamicRange : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   White dynamic range (on/off)
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    enum tt__WideDynamicMode             Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unitless)
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float                                Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensation is a complexType.
///
/// class tt__BacklightCompensation operations:
/// - soap_new_tt__BacklightCompensation(soap*) allocate
/// - soap_new_tt__BacklightCompensation(soap*, int num) allocate array
/// - soap_new_req_tt__BacklightCompensation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__BacklightCompensation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__BacklightCompensation(soap*, tt__BacklightCompensation*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensation(soap, tt__BacklightCompensation*) serialize to a stream
class tt__BacklightCompensation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Backlight compensation mode (on/off).
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    enum tt__BacklightCompensationMode   Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float                                Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions is a complexType.
///
/// class tt__ImagingOptions operations:
/// - soap_new_tt__ImagingOptions(soap*) allocate
/// - soap_new_tt__ImagingOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingOptions(soap*, tt__ImagingOptions*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions(soap, tt__ImagingOptions*) serialize to a stream
class tt__ImagingOptions : public xsd__anyType
{ public:
/// Element "BacklightCompensation" of XSD type "http://www.onvif.org/ver10/schema":BacklightCompensationOptions.
    tt__BacklightCompensationOptions*    BacklightCompensation          1;	///< Required element.
/// Element "Brightness" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Brightness                     1;	///< Required element.
/// Element "ColorSaturation" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ColorSaturation                1;	///< Required element.
/// Element "Contrast" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Contrast                       1;	///< Required element.
/// Element "Exposure" of XSD type "http://www.onvif.org/ver10/schema":ExposureOptions.
    tt__ExposureOptions*                 Exposure                       1;	///< Required element.
/// Element "Focus" of XSD type "http://www.onvif.org/ver10/schema":FocusOptions.
    tt__FocusOptions*                    Focus                          1;	///< Required element.
/// Vector of enum tt__IrCutFilterMode of length 1..unbounded.
    std::vector<enum tt__IrCutFilterMode> IrCutFilterModes               1;
/// Element "Sharpness" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Sharpness                      1;	///< Required element.
/// Element "WideDynamicRange" of XSD type "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions.
    tt__WideDynamicRangeOptions*         WideDynamicRange               1;	///< Required element.
/// Element "WhiteBalance" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions.
    tt__WhiteBalanceOptions*             WhiteBalance                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions is a complexType.
///
/// class tt__WideDynamicRangeOptions operations:
/// - soap_new_tt__WideDynamicRangeOptions(soap*) allocate
/// - soap_new_tt__WideDynamicRangeOptions(soap*, int num) allocate array
/// - soap_new_req_tt__WideDynamicRangeOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WideDynamicRangeOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WideDynamicRangeOptions(soap*, tt__WideDynamicRangeOptions*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRangeOptions(soap, tt__WideDynamicRangeOptions*) serialize to a stream
class tt__WideDynamicRangeOptions : public xsd__anyType
{ public:
/// Vector of enum tt__WideDynamicMode of length 1..unbounded.
    std::vector<enum tt__WideDynamicMode> Mode                           1;
/// Element "Level" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensationOptions is a complexType.
///
/// class tt__BacklightCompensationOptions operations:
/// - soap_new_tt__BacklightCompensationOptions(soap*) allocate
/// - soap_new_tt__BacklightCompensationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__BacklightCompensationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__BacklightCompensationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__BacklightCompensationOptions(soap*, tt__BacklightCompensationOptions*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensationOptions(soap, tt__BacklightCompensationOptions*) serialize to a stream
class tt__BacklightCompensationOptions : public xsd__anyType
{ public:
/// Vector of enum tt__WideDynamicMode of length 1..unbounded.
    std::vector<enum tt__WideDynamicMode> Mode                           1;
/// Element "Level" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusOptions is a complexType.
///
/// class tt__FocusOptions operations:
/// - soap_new_tt__FocusOptions(soap*) allocate
/// - soap_new_tt__FocusOptions(soap*, int num) allocate array
/// - soap_new_req_tt__FocusOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusOptions(soap*, tt__FocusOptions*) deserialize from a stream
/// - int soap_write_tt__FocusOptions(soap, tt__FocusOptions*) serialize to a stream
class tt__FocusOptions : public xsd__anyType
{ public:
/// Vector of enum tt__AutoFocusMode of length 0..unbounded.
    std::vector<enum tt__AutoFocusMode > AutoFocusModes                 0;
/// Element "DefaultSpeed" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      DefaultSpeed                   1;	///< Required element.
/// Element "NearLimit" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      NearLimit                      1;	///< Required element.
/// Element "FarLimit" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      FarLimit                       1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ExposureOptions is a complexType.
///
/// class tt__ExposureOptions operations:
/// - soap_new_tt__ExposureOptions(soap*) allocate
/// - soap_new_tt__ExposureOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ExposureOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ExposureOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ExposureOptions(soap*, tt__ExposureOptions*) deserialize from a stream
/// - int soap_write_tt__ExposureOptions(soap, tt__ExposureOptions*) serialize to a stream
class tt__ExposureOptions : public xsd__anyType
{ public:
/// Vector of enum tt__ExposureMode of length 1..unbounded.
    std::vector<enum tt__ExposureMode  > Mode                           1;
/// Vector of enum tt__ExposurePriority of length 1..unbounded.
    std::vector<enum tt__ExposurePriority> Priority                       1;
/// Element "MinExposureTime" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinExposureTime                1;	///< Required element.
/// Element "MaxExposureTime" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxExposureTime                1;	///< Required element.
/// Element "MinGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinGain                        1;	///< Required element.
/// Element "MaxGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxGain                        1;	///< Required element.
/// Element "MinIris" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinIris                        1;	///< Required element.
/// Element "MaxIris" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxIris                        1;	///< Required element.
/// Element "ExposureTime" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ExposureTime                   1;	///< Required element.
/// Element "Gain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Gain                           1;	///< Required element.
/// Element "Iris" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Iris                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceOptions is a complexType.
///
/// class tt__WhiteBalanceOptions operations:
/// - soap_new_tt__WhiteBalanceOptions(soap*) allocate
/// - soap_new_tt__WhiteBalanceOptions(soap*, int num) allocate array
/// - soap_new_req_tt__WhiteBalanceOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WhiteBalanceOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WhiteBalanceOptions(soap*, tt__WhiteBalanceOptions*) deserialize from a stream
/// - int soap_write_tt__WhiteBalanceOptions(soap, tt__WhiteBalanceOptions*) serialize to a stream
class tt__WhiteBalanceOptions : public xsd__anyType
{ public:
/// Vector of enum tt__WhiteBalanceMode of length 1..unbounded.
    std::vector<enum tt__WhiteBalanceMode> Mode                           1;
/// Element "YrGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YrGain                         1;	///< Required element.
/// Element "YbGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YbGain                         1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusMove is a complexType.
///
/// class tt__FocusMove operations:
/// - soap_new_tt__FocusMove(soap*) allocate
/// - soap_new_tt__FocusMove(soap*, int num) allocate array
/// - soap_new_req_tt__FocusMove(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusMove(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusMove(soap*, tt__FocusMove*) deserialize from a stream
/// - int soap_write_tt__FocusMove(soap, tt__FocusMove*) serialize to a stream
class tt__FocusMove : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameters for the absolute focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Absolute" of XSD type "http://www.onvif.org/ver10/schema":AbsoluteFocus.
    tt__AbsoluteFocus*                   Absolute                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameters for the relative focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Relative" of XSD type "http://www.onvif.org/ver10/schema":RelativeFocus.
    tt__RelativeFocus*                   Relative                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter for the continuous focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Continuous" of XSD type "http://www.onvif.org/ver10/schema":ContinuousFocus.
    tt__ContinuousFocus*                 Continuous                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":AbsoluteFocus is a complexType.
///
/// class tt__AbsoluteFocus operations:
/// - soap_new_tt__AbsoluteFocus(soap*) allocate
/// - soap_new_tt__AbsoluteFocus(soap*, int num) allocate array
/// - soap_new_req_tt__AbsoluteFocus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AbsoluteFocus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AbsoluteFocus(soap*, tt__AbsoluteFocus*) deserialize from a stream
/// - int soap_write_tt__AbsoluteFocus(soap, tt__AbsoluteFocus*) serialize to a stream
class tt__AbsoluteFocus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Position parameter for the absolute focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type xs:float.
    float                                Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed parameter for the absolute focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type xs:float.
    float*                               Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":RelativeFocus is a complexType.
///
/// class tt__RelativeFocus operations:
/// - soap_new_tt__RelativeFocus(soap*) allocate
/// - soap_new_tt__RelativeFocus(soap*, int num) allocate array
/// - soap_new_req_tt__RelativeFocus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RelativeFocus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RelativeFocus(soap*, tt__RelativeFocus*) deserialize from a stream
/// - int soap_write_tt__RelativeFocus(soap, tt__RelativeFocus*) serialize to a stream
class tt__RelativeFocus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Distance parameter for the relative focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Distance" of XSD type xs:float.
    float                                Distance                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Speed parameter for the relative focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type xs:float.
    float*                               Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ContinuousFocus is a complexType.
///
/// class tt__ContinuousFocus operations:
/// - soap_new_tt__ContinuousFocus(soap*) allocate
/// - soap_new_tt__ContinuousFocus(soap*, int num) allocate array
/// - soap_new_req_tt__ContinuousFocus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ContinuousFocus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ContinuousFocus(soap*, tt__ContinuousFocus*) deserialize from a stream
/// - int soap_write_tt__ContinuousFocus(soap, tt__ContinuousFocus*) serialize to a stream
class tt__ContinuousFocus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Speed parameter for the Continuous focus control.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type xs:float.
    float                                Speed                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":MoveOptions is a complexType.
///
/// class tt__MoveOptions operations:
/// - soap_new_tt__MoveOptions(soap*) allocate
/// - soap_new_tt__MoveOptions(soap*, int num) allocate array
/// - soap_new_req_tt__MoveOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MoveOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MoveOptions(soap*, tt__MoveOptions*) deserialize from a stream
/// - int soap_write_tt__MoveOptions(soap, tt__MoveOptions*) serialize to a stream
class tt__MoveOptions : public xsd__anyType
{ public:
/// Element "Absolute" of XSD type "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions.
    tt__AbsoluteFocusOptions*            Absolute                       0;	///< Optional element.
/// Element "Relative" of XSD type "http://www.onvif.org/ver10/schema":RelativeFocusOptions.
    tt__RelativeFocusOptions*            Relative                       0;	///< Optional element.
/// Element "Continuous" of XSD type "http://www.onvif.org/ver10/schema":ContinuousFocusOptions.
    tt__ContinuousFocusOptions*          Continuous                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions is a complexType.
///
/// class tt__AbsoluteFocusOptions operations:
/// - soap_new_tt__AbsoluteFocusOptions(soap*) allocate
/// - soap_new_tt__AbsoluteFocusOptions(soap*, int num) allocate array
/// - soap_new_req_tt__AbsoluteFocusOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AbsoluteFocusOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AbsoluteFocusOptions(soap*, tt__AbsoluteFocusOptions*) deserialize from a stream
/// - int soap_write_tt__AbsoluteFocusOptions(soap, tt__AbsoluteFocusOptions*) serialize to a stream
class tt__AbsoluteFocusOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the position.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":RelativeFocusOptions is a complexType.
///
/// class tt__RelativeFocusOptions operations:
/// - soap_new_tt__RelativeFocusOptions(soap*) allocate
/// - soap_new_tt__RelativeFocusOptions(soap*, int num) allocate array
/// - soap_new_req_tt__RelativeFocusOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RelativeFocusOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RelativeFocusOptions(soap*, tt__RelativeFocusOptions*) deserialize from a stream
/// - int soap_write_tt__RelativeFocusOptions(soap, tt__RelativeFocusOptions*) serialize to a stream
class tt__RelativeFocusOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the distance.
/// </BLOCKQUOTE></PRE>
/// Element "Distance" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Distance                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":ContinuousFocusOptions is a complexType.
///
/// class tt__ContinuousFocusOptions operations:
/// - soap_new_tt__ContinuousFocusOptions(soap*) allocate
/// - soap_new_tt__ContinuousFocusOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ContinuousFocusOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ContinuousFocusOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ContinuousFocusOptions(soap*, tt__ContinuousFocusOptions*) deserialize from a stream
/// - int soap_write_tt__ContinuousFocusOptions(soap, tt__ContinuousFocusOptions*) serialize to a stream
class tt__ContinuousFocusOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance is a complexType.
///
/// class tt__WhiteBalance operations:
/// - soap_new_tt__WhiteBalance(soap*) allocate
/// - soap_new_tt__WhiteBalance(soap*, int num) allocate array
/// - soap_new_req_tt__WhiteBalance(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WhiteBalance(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WhiteBalance(soap*, tt__WhiteBalance*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance(soap, tt__WhiteBalance*) serialize to a stream
class tt__WhiteBalance : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Auto whitebalancing mode (auto/manual).
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    enum tt__WhiteBalanceMode            Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rgain (unitless).
/// </BLOCKQUOTE></PRE>
/// Element "CrGain" of XSD type xs:float.
    float                                CrGain                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Bgain (unitless).
/// </BLOCKQUOTE></PRE>
/// Element "CbGain" of XSD type xs:float.
    float                                CbGain                         1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingStatus20 is a complexType.
///
/// class tt__ImagingStatus20 operations:
/// - soap_new_tt__ImagingStatus20(soap*) allocate
/// - soap_new_tt__ImagingStatus20(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingStatus20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingStatus20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingStatus20(soap*, tt__ImagingStatus20*) deserialize from a stream
/// - int soap_write_tt__ImagingStatus20(soap, tt__ImagingStatus20*) serialize to a stream
class tt__ImagingStatus20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of focus.
/// </BLOCKQUOTE></PRE>
/// Element "FocusStatus20" of XSD type "http://www.onvif.org/ver10/schema":FocusStatus20.
    tt__FocusStatus20*                   FocusStatus20                  0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingStatus20Extension.
    tt__ImagingStatus20Extension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingStatus20Extension is a complexType.
///
/// class tt__ImagingStatus20Extension operations:
/// - soap_new_tt__ImagingStatus20Extension(soap*) allocate
/// - soap_new_tt__ImagingStatus20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingStatus20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingStatus20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingStatus20Extension(soap*, tt__ImagingStatus20Extension*) deserialize from a stream
/// - int soap_write_tt__ImagingStatus20Extension(soap, tt__ImagingStatus20Extension*) serialize to a stream
class tt__ImagingStatus20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusStatus20 is a complexType.
///
/// class tt__FocusStatus20 operations:
/// - soap_new_tt__FocusStatus20(soap*) allocate
/// - soap_new_tt__FocusStatus20(soap*, int num) allocate array
/// - soap_new_req_tt__FocusStatus20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusStatus20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusStatus20(soap*, tt__FocusStatus20*) deserialize from a stream
/// - int soap_write_tt__FocusStatus20(soap, tt__FocusStatus20*) serialize to a stream
class tt__FocusStatus20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Status of focus position.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type xs:float.
    float                                Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Status of focus MoveStatus.
/// </BLOCKQUOTE></PRE>
/// Element "MoveStatus" of XSD type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum tt__MoveStatus                  MoveStatus                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Error status of focus.
/// </BLOCKQUOTE></PRE>
/// Element "Error" of XSD type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":FocusStatus20Extension.
    tt__FocusStatus20Extension*          Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusStatus20Extension is a complexType.
///
/// class tt__FocusStatus20Extension operations:
/// - soap_new_tt__FocusStatus20Extension(soap*) allocate
/// - soap_new_tt__FocusStatus20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__FocusStatus20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusStatus20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusStatus20Extension(soap*, tt__FocusStatus20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusStatus20Extension(soap, tt__FocusStatus20Extension*) serialize to a stream
class tt__FocusStatus20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettings20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing the ImagingSettings of a VideoSource. The supported options and ranges can be obtained via the GetOptions command.
/// </BLOCKQUOTE></PRE>
/// class tt__ImagingSettings20 operations:
/// - soap_new_tt__ImagingSettings20(soap*) allocate
/// - soap_new_tt__ImagingSettings20(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettings20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettings20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettings20(soap*, tt__ImagingSettings20*) deserialize from a stream
/// - int soap_write_tt__ImagingSettings20(soap, tt__ImagingSettings20*) serialize to a stream
class tt__ImagingSettings20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Enabled/disabled BLC mode (on/off).
/// </BLOCKQUOTE></PRE>
/// Element "BacklightCompensation" of XSD type "http://www.onvif.org/ver10/schema":BacklightCompensation20.
    tt__BacklightCompensation20*         BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image brightness (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Brightness" of XSD type xs:float.
    float*                               Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Color saturation of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "ColorSaturation" of XSD type xs:float.
    float*                               ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Contrast of the image (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Contrast" of XSD type xs:float.
    float*                               Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Exposure mode of the device.
/// </BLOCKQUOTE></PRE>
/// Element "Exposure" of XSD type "http://www.onvif.org/ver10/schema":Exposure20.
    tt__Exposure20*                      Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Focus configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Focus" of XSD type "http://www.onvif.org/ver10/schema":FocusConfiguration20.
    tt__FocusConfiguration20*            Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Infrared Cutoff Filter settings.
/// </BLOCKQUOTE></PRE>
/// Element "IrCutFilter" of XSD type "http://www.onvif.org/ver10/schema":IrCutFilterMode.
    enum tt__IrCutFilterMode*            IrCutFilter                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sharpness of the Video image.
/// </BLOCKQUOTE></PRE>
/// Element "Sharpness" of XSD type xs:float.
    float*                               Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   WDR settings.
/// </BLOCKQUOTE></PRE>
/// Element "WideDynamicRange" of XSD type "http://www.onvif.org/ver10/schema":WideDynamicRange20.
    tt__WideDynamicRange20*              WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   White balance settings.
/// </BLOCKQUOTE></PRE>
/// Element "WhiteBalance" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalance20.
    tt__WhiteBalance20*                  WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20.
    tt__ImagingSettingsExtension20*      Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension20 is a complexType.
///
/// class tt__ImagingSettingsExtension20 operations:
/// - soap_new_tt__ImagingSettingsExtension20(soap*) allocate
/// - soap_new_tt__ImagingSettingsExtension20(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettingsExtension20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettingsExtension20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettingsExtension20(soap*, tt__ImagingSettingsExtension20*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension20(soap, tt__ImagingSettingsExtension20*) serialize to a stream
class tt__ImagingSettingsExtension20 : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
/// Element "ImageStabilization" of XSD type "http://www.onvif.org/ver10/schema":ImageStabilization.
    tt__ImageStabilization*              ImageStabilization             0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension202.
    tt__ImagingSettingsExtension202*     Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension202 is a complexType.
///
/// class tt__ImagingSettingsExtension202 operations:
/// - soap_new_tt__ImagingSettingsExtension202(soap*) allocate
/// - soap_new_tt__ImagingSettingsExtension202(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettingsExtension202(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettingsExtension202(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettingsExtension202(soap*, tt__ImagingSettingsExtension202*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension202(soap, tt__ImagingSettingsExtension202*) serialize to a stream
class tt__ImagingSettingsExtension202 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   An optional parameter applied to only auto mode to adjust timing of toggling Ir cut filter.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IrCutFilterAutoAdjustment* of length 0..unbounded.
    std::vector<tt__IrCutFilterAutoAdjustment*> IrCutFilterAutoAdjustment      0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension203.
    tt__ImagingSettingsExtension203*     Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension203 is a complexType.
///
/// class tt__ImagingSettingsExtension203 operations:
/// - soap_new_tt__ImagingSettingsExtension203(soap*) allocate
/// - soap_new_tt__ImagingSettingsExtension203(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettingsExtension203(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettingsExtension203(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettingsExtension203(soap*, tt__ImagingSettingsExtension203*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension203(soap, tt__ImagingSettingsExtension203*) serialize to a stream
class tt__ImagingSettingsExtension203 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Contrast Compensation.
/// </BLOCKQUOTE></PRE>
/// Element "ToneCompensation" of XSD type "http://www.onvif.org/ver10/schema":ToneCompensation.
    tt__ToneCompensation*                ToneCompensation               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Defogging.
/// </BLOCKQUOTE></PRE>
/// Element "Defogging" of XSD type "http://www.onvif.org/ver10/schema":Defogging.
    tt__Defogging*                       Defogging                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Image Noise Reduction.
/// </BLOCKQUOTE></PRE>
/// Element "NoiseReduction" of XSD type "http://www.onvif.org/ver10/schema":NoiseReduction.
    tt__NoiseReduction*                  NoiseReduction                 0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettingsExtension204.
    tt__ImagingSettingsExtension204*     Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingSettingsExtension204 is a complexType.
///
/// class tt__ImagingSettingsExtension204 operations:
/// - soap_new_tt__ImagingSettingsExtension204(soap*) allocate
/// - soap_new_tt__ImagingSettingsExtension204(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingSettingsExtension204(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingSettingsExtension204(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingSettingsExtension204(soap*, tt__ImagingSettingsExtension204*) deserialize from a stream
/// - int soap_write_tt__ImagingSettingsExtension204(soap, tt__ImagingSettingsExtension204*) serialize to a stream
class tt__ImagingSettingsExtension204 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilization is a complexType.
///
/// class tt__ImageStabilization operations:
/// - soap_new_tt__ImageStabilization(soap*) allocate
/// - soap_new_tt__ImageStabilization(soap*, int num) allocate array
/// - soap_new_req_tt__ImageStabilization(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImageStabilization(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImageStabilization(soap*, tt__ImageStabilization*) deserialize from a stream
/// - int soap_write_tt__ImageStabilization(soap, tt__ImageStabilization*) serialize to a stream
class tt__ImageStabilization : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":ImageStabilizationMode.
    enum tt__ImageStabilizationMode      Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified)
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImageStabilizationExtension.
    tt__ImageStabilizationExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationExtension is a complexType.
///
/// class tt__ImageStabilizationExtension operations:
/// - soap_new_tt__ImageStabilizationExtension(soap*) allocate
/// - soap_new_tt__ImageStabilizationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ImageStabilizationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImageStabilizationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImageStabilizationExtension(soap*, tt__ImageStabilizationExtension*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationExtension(soap, tt__ImageStabilizationExtension*) serialize to a stream
class tt__ImageStabilizationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustment is a complexType.
///
/// class tt__IrCutFilterAutoAdjustment operations:
/// - soap_new_tt__IrCutFilterAutoAdjustment(soap*) allocate
/// - soap_new_tt__IrCutFilterAutoAdjustment(soap*, int num) allocate array
/// - soap_new_req_tt__IrCutFilterAutoAdjustment(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IrCutFilterAutoAdjustment(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IrCutFilterAutoAdjustment(soap*, tt__IrCutFilterAutoAdjustment*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustment(soap, tt__IrCutFilterAutoAdjustment*) serialize to a stream
class tt__IrCutFilterAutoAdjustment : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies which boundaries to automatically toggle Ir cut filter following parameters are applied to. Its options shall be chosen from tt:IrCutFilterAutoBoundaryType.
/// </BLOCKQUOTE></PRE>
/// Element "BoundaryType" of XSD type xs:string.
    std::string                          BoundaryType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Adjusts boundary exposure level for toggling Ir cut filter to on/off specified with unitless normalized value from +1.0 to -1.0. Zero is default and -1.0 is the darkest adjustment (Unitless).
/// </BLOCKQUOTE></PRE>
/// Element "BoundaryOffset" of XSD type xs:float.
    float*                               BoundaryOffset                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Delay time of toggling Ir cut filter to on/off after crossing of the boundary exposure levels.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseTime" of XSD type xs:duration.
    xsd__duration*                       ResponseTime                   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentExtension.
    tt__IrCutFilterAutoAdjustmentExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentExtension is a complexType.
///
/// class tt__IrCutFilterAutoAdjustmentExtension operations:
/// - soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap*) allocate
/// - soap_new_tt__IrCutFilterAutoAdjustmentExtension(soap*, int num) allocate array
/// - soap_new_req_tt__IrCutFilterAutoAdjustmentExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IrCutFilterAutoAdjustmentExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentExtension(soap*, tt__IrCutFilterAutoAdjustmentExtension*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentExtension(soap, tt__IrCutFilterAutoAdjustmentExtension*) serialize to a stream
class tt__IrCutFilterAutoAdjustmentExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRange20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing whether WDR mode is enabled or disabled (on/off).
/// </BLOCKQUOTE></PRE>
/// class tt__WideDynamicRange20 operations:
/// - soap_new_tt__WideDynamicRange20(soap*) allocate
/// - soap_new_tt__WideDynamicRange20(soap*, int num) allocate array
/// - soap_new_req_tt__WideDynamicRange20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WideDynamicRange20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WideDynamicRange20(soap*, tt__WideDynamicRange20*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRange20(soap, tt__WideDynamicRange20*) serialize to a stream
class tt__WideDynamicRange20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Wide dynamic range mode (on/off).
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":WideDynamicMode.
    enum tt__WideDynamicMode             Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float*                               Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensation20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing whether BLC mode is enabled or disabled (on/off).
/// </BLOCKQUOTE></PRE>
/// class tt__BacklightCompensation20 operations:
/// - soap_new_tt__BacklightCompensation20(soap*) allocate
/// - soap_new_tt__BacklightCompensation20(soap*, int num) allocate array
/// - soap_new_req_tt__BacklightCompensation20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__BacklightCompensation20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__BacklightCompensation20(soap*, tt__BacklightCompensation20*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensation20(soap, tt__BacklightCompensation20*) serialize to a stream
class tt__BacklightCompensation20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Backlight compensation mode (on/off).
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":BacklightCompensationMode.
    enum tt__BacklightCompensationMode   Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter (unit unspecified).
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float*                               Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":Exposure20 is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Type describing the exposure settings.
/// </BLOCKQUOTE></PRE>
/// class tt__Exposure20 operations:
/// - soap_new_tt__Exposure20(soap*) allocate
/// - soap_new_tt__Exposure20(soap*, int num) allocate array
/// - soap_new_req_tt__Exposure20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Exposure20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Exposure20(soap*, tt__Exposure20*) deserialize from a stream
/// - int soap_write_tt__Exposure20(soap, tt__Exposure20*) serialize to a stream
class tt__Exposure20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the device.</li>
///   <li>Manual Disabled exposure algorithm on the device.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":ExposureMode.
    enum tt__ExposureMode                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
/// Element "Priority" of XSD type "http://www.onvif.org/ver10/schema":ExposurePriority.
    enum tt__ExposurePriority*           Priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Rectangular exposure mask.
/// </BLOCKQUOTE></PRE>
/// Element "Window" of XSD type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Window                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MinExposureTime" of XSD type xs:float.
    float*                               MinExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of exposure time range allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MaxExposureTime" of XSD type xs:float.
    float*                               MaxExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MinGain" of XSD type xs:float.
    float*                               MinGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the sensor gain range that is allowed to be used by the algorithm.
/// </BLOCKQUOTE></PRE>
/// Element "MaxGain" of XSD type xs:float.
    float*                               MaxGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Minimum value of the iris range allowed to be used by the algorithm. 0dB maps to a fully opened iris and positive values map to higher attenuation.
/// </BLOCKQUOTE></PRE>
/// Element "MinIris" of XSD type xs:float.
    float*                               MinIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Maximum value of the iris range allowed to be used by the algorithm. 0dB maps to a fully opened iris and positive values map to higher attenuation.
/// </BLOCKQUOTE></PRE>
/// Element "MaxIris" of XSD type xs:float.
    float*                               MaxIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed exposure time used by the image sensor (s).
/// </BLOCKQUOTE></PRE>
/// Element "ExposureTime" of XSD type xs:float.
    float*                               ExposureTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed gain used by the image sensor (dB).
/// </BLOCKQUOTE></PRE>
/// Element "Gain" of XSD type xs:float.
    float*                               Gain                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The fixed attenuation of input light affected by the iris (dB). 0dB maps to a fully opened iris and positive values map to higher attenuation.
/// </BLOCKQUOTE></PRE>
/// Element "Iris" of XSD type xs:float.
    float*                               Iris                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensation is a complexType.
///
/// class tt__ToneCompensation operations:
/// - soap_new_tt__ToneCompensation(soap*) allocate
/// - soap_new_tt__ToneCompensation(soap*, int num) allocate array
/// - soap_new_req_tt__ToneCompensation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ToneCompensation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ToneCompensation(soap*, tt__ToneCompensation*) deserialize from a stream
/// - int soap_write_tt__ToneCompensation(soap, tt__ToneCompensation*) serialize to a stream
class tt__ToneCompensation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable or automatic ToneCompensation feature. Its options shall be chosen from tt:ToneCompensationMode Type.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type xs:string.
    std::string                          Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ToneCompensationExtension.
    tt__ToneCompensationExtension*       Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationExtension is a complexType.
///
/// class tt__ToneCompensationExtension operations:
/// - soap_new_tt__ToneCompensationExtension(soap*) allocate
/// - soap_new_tt__ToneCompensationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ToneCompensationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ToneCompensationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ToneCompensationExtension(soap*, tt__ToneCompensationExtension*) deserialize from a stream
/// - int soap_write_tt__ToneCompensationExtension(soap, tt__ToneCompensationExtension*) serialize to a stream
class tt__ToneCompensationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Defogging is a complexType.
///
/// class tt__Defogging operations:
/// - soap_new_tt__Defogging(soap*) allocate
/// - soap_new_tt__Defogging(soap*, int num) allocate array
/// - soap_new_req_tt__Defogging(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Defogging(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Defogging(soap*, tt__Defogging*) deserialize from a stream
/// - int soap_write_tt__Defogging(soap, tt__Defogging*) serialize to a stream
class tt__Defogging : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Parameter to enable/disable or automatic Defogging feature. Its options shall be chosen from tt:DefoggingMode Type.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type xs:string.
    std::string                          Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional level parameter specified with unitless normalized value from 0.0 to +1.0.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float*                               Level                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":DefoggingExtension.
    tt__DefoggingExtension*              Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingExtension is a complexType.
///
/// class tt__DefoggingExtension operations:
/// - soap_new_tt__DefoggingExtension(soap*) allocate
/// - soap_new_tt__DefoggingExtension(soap*, int num) allocate array
/// - soap_new_req_tt__DefoggingExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DefoggingExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DefoggingExtension(soap*, tt__DefoggingExtension*) deserialize from a stream
/// - int soap_write_tt__DefoggingExtension(soap, tt__DefoggingExtension*) serialize to a stream
class tt__DefoggingExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":NoiseReduction is a complexType.
///
/// class tt__NoiseReduction operations:
/// - soap_new_tt__NoiseReduction(soap*) allocate
/// - soap_new_tt__NoiseReduction(soap*, int num) allocate array
/// - soap_new_req_tt__NoiseReduction(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NoiseReduction(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NoiseReduction(soap*, tt__NoiseReduction*) deserialize from a stream
/// - int soap_write_tt__NoiseReduction(soap, tt__NoiseReduction*) serialize to a stream
class tt__NoiseReduction : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Level parameter specified with unitless normalized value from 0.0 to +1.0. Level=0 means no noise reduction or minimal noise reduction.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:float.
    float                                Level                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20 is a complexType.
///
/// class tt__ImagingOptions20 operations:
/// - soap_new_tt__ImagingOptions20(soap*) allocate
/// - soap_new_tt__ImagingOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingOptions20(soap*, tt__ImagingOptions20*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20(soap, tt__ImagingOptions20*) serialize to a stream
class tt__ImagingOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid range of Backlight Compensation.
/// </BLOCKQUOTE></PRE>
/// Element "BacklightCompensation" of XSD type "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20.
    tt__BacklightCompensationOptions20*  BacklightCompensation          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Brightness.
/// </BLOCKQUOTE></PRE>
/// Element "Brightness" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Brightness                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Color Saturation.
/// </BLOCKQUOTE></PRE>
/// Element "ColorSaturation" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ColorSaturation                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Contrast.
/// </BLOCKQUOTE></PRE>
/// Element "Contrast" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Contrast                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Exposure.
/// </BLOCKQUOTE></PRE>
/// Element "Exposure" of XSD type "http://www.onvif.org/ver10/schema":ExposureOptions20.
    tt__ExposureOptions20*               Exposure                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of Focus.
/// </BLOCKQUOTE></PRE>
/// Element "Focus" of XSD type "http://www.onvif.org/ver10/schema":FocusOptions20.
    tt__FocusOptions20*                  Focus                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of IrCutFilterModes.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__IrCutFilterMode of length 0..unbounded.
    std::vector<enum tt__IrCutFilterMode> IrCutFilterModes               0;
/// <PRE><BLOCKQUOTE>
///   Valid range of Sharpness.
/// </BLOCKQUOTE></PRE>
/// Element "Sharpness" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Sharpness                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of WideDynamicRange.
/// </BLOCKQUOTE></PRE>
/// Element "WideDynamicRange" of XSD type "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20.
    tt__WideDynamicRangeOptions20*       WideDynamicRange               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of WhiteBalance.
/// </BLOCKQUOTE></PRE>
/// Element "WhiteBalance" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20.
    tt__WhiteBalanceOptions20*           WhiteBalance                   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension.
    tt__ImagingOptions20Extension*       Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension is a complexType.
///
/// class tt__ImagingOptions20Extension operations:
/// - soap_new_tt__ImagingOptions20Extension(soap*) allocate
/// - soap_new_tt__ImagingOptions20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingOptions20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingOptions20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingOptions20Extension(soap*, tt__ImagingOptions20Extension*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension(soap, tt__ImagingOptions20Extension*) serialize to a stream
class tt__ImagingOptions20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Image Stabilization feature.
/// </BLOCKQUOTE></PRE>
/// Element "ImageStabilization" of XSD type "http://www.onvif.org/ver10/schema":ImageStabilizationOptions.
    tt__ImageStabilizationOptions*       ImageStabilization             0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension2.
    tt__ImagingOptions20Extension2*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension2 is a complexType.
///
/// class tt__ImagingOptions20Extension2 operations:
/// - soap_new_tt__ImagingOptions20Extension2(soap*) allocate
/// - soap_new_tt__ImagingOptions20Extension2(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingOptions20Extension2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingOptions20Extension2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingOptions20Extension2(soap*, tt__ImagingOptions20Extension2*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension2(soap, tt__ImagingOptions20Extension2*) serialize to a stream
class tt__ImagingOptions20Extension2 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of parameters for adjustment of Ir cut filter auto mode.
/// </BLOCKQUOTE></PRE>
/// Element "IrCutFilterAutoAdjustment" of XSD type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptions.
    tt__IrCutFilterAutoAdjustmentOptions*  IrCutFilterAutoAdjustment      0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension3.
    tt__ImagingOptions20Extension3*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension3 is a complexType.
///
/// class tt__ImagingOptions20Extension3 operations:
/// - soap_new_tt__ImagingOptions20Extension3(soap*) allocate
/// - soap_new_tt__ImagingOptions20Extension3(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingOptions20Extension3(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingOptions20Extension3(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingOptions20Extension3(soap*, tt__ImagingOptions20Extension3*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension3(soap, tt__ImagingOptions20Extension3*) serialize to a stream
class tt__ImagingOptions20Extension3 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Tone Compensation feature.
/// </BLOCKQUOTE></PRE>
/// Element "ToneCompensationOptions" of XSD type "http://www.onvif.org/ver10/schema":ToneCompensationOptions.
    tt__ToneCompensationOptions*         ToneCompensationOptions        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Options of parameters for Defogging feature.
/// </BLOCKQUOTE></PRE>
/// Element "DefoggingOptions" of XSD type "http://www.onvif.org/ver10/schema":DefoggingOptions.
    tt__DefoggingOptions*                DefoggingOptions               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Options of parameter for Noise Reduction feature.
/// </BLOCKQUOTE></PRE>
/// Element "NoiseReductionOptions" of XSD type "http://www.onvif.org/ver10/schema":NoiseReductionOptions.
    tt__NoiseReductionOptions*           NoiseReductionOptions          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImagingOptions20Extension4.
    tt__ImagingOptions20Extension4*      Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ImagingOptions20Extension4 is a complexType.
///
/// class tt__ImagingOptions20Extension4 operations:
/// - soap_new_tt__ImagingOptions20Extension4(soap*) allocate
/// - soap_new_tt__ImagingOptions20Extension4(soap*, int num) allocate array
/// - soap_new_req_tt__ImagingOptions20Extension4(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImagingOptions20Extension4(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImagingOptions20Extension4(soap*, tt__ImagingOptions20Extension4*) deserialize from a stream
/// - int soap_write_tt__ImagingOptions20Extension4(soap, tt__ImagingOptions20Extension4*) serialize to a stream
class tt__ImagingOptions20Extension4 : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationOptions is a complexType.
///
/// class tt__ImageStabilizationOptions operations:
/// - soap_new_tt__ImageStabilizationOptions(soap*) allocate
/// - soap_new_tt__ImageStabilizationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ImageStabilizationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImageStabilizationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImageStabilizationOptions(soap*, tt__ImageStabilizationOptions*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationOptions(soap, tt__ImageStabilizationOptions*) serialize to a stream
class tt__ImageStabilizationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of Image Stabilization mode parameter.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__ImageStabilizationMode of length 1..unbounded.
    std::vector<enum tt__ImageStabilizationMode> Mode                           1;
/// <PRE><BLOCKQUOTE>
///   Valid range of the Image Stabilization.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ImageStabilizationOptionsExtension.
    tt__ImageStabilizationOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ImageStabilizationOptionsExtension is a complexType.
///
/// class tt__ImageStabilizationOptionsExtension operations:
/// - soap_new_tt__ImageStabilizationOptionsExtension(soap*) allocate
/// - soap_new_tt__ImageStabilizationOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ImageStabilizationOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ImageStabilizationOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ImageStabilizationOptionsExtension(soap*, tt__ImageStabilizationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__ImageStabilizationOptionsExtension(soap, tt__ImageStabilizationOptionsExtension*) serialize to a stream
class tt__ImageStabilizationOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptions is a complexType.
///
/// class tt__IrCutFilterAutoAdjustmentOptions operations:
/// - soap_new_tt__IrCutFilterAutoAdjustmentOptions(soap*) allocate
/// - soap_new_tt__IrCutFilterAutoAdjustmentOptions(soap*, int num) allocate array
/// - soap_new_req_tt__IrCutFilterAutoAdjustmentOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IrCutFilterAutoAdjustmentOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentOptions(soap*, tt__IrCutFilterAutoAdjustmentOptions*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentOptions(soap, tt__IrCutFilterAutoAdjustmentOptions*) serialize to a stream
class tt__IrCutFilterAutoAdjustmentOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options of boundary types for adjustment of Ir cut filter auto mode. The opptions shall be chosen from tt:IrCutFilterAutoBoundaryType.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > BoundaryType                   1;
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not boundary offset for toggling Ir cut filter is supported.
/// </BLOCKQUOTE></PRE>
/// Element "BoundaryOffset" of XSD type xs:boolean.
    bool*                                BoundaryOffset                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Supported range of delay time for toggling Ir cut filter.
/// </BLOCKQUOTE></PRE>
/// Element "ResponseTimeRange" of XSD type "http://www.onvif.org/ver10/schema":DurationRange.
    tt__DurationRange*                   ResponseTimeRange              0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptionsExtension.
    tt__IrCutFilterAutoAdjustmentOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IrCutFilterAutoAdjustmentOptionsExtension is a complexType.
///
/// class tt__IrCutFilterAutoAdjustmentOptionsExtension operations:
/// - soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*) allocate
/// - soap_new_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap*, tt__IrCutFilterAutoAdjustmentOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__IrCutFilterAutoAdjustmentOptionsExtension(soap, tt__IrCutFilterAutoAdjustmentOptionsExtension*) serialize to a stream
class tt__IrCutFilterAutoAdjustmentOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":WideDynamicRangeOptions20 is a complexType.
///
/// class tt__WideDynamicRangeOptions20 operations:
/// - soap_new_tt__WideDynamicRangeOptions20(soap*) allocate
/// - soap_new_tt__WideDynamicRangeOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__WideDynamicRangeOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WideDynamicRangeOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WideDynamicRangeOptions20(soap*, tt__WideDynamicRangeOptions20*) deserialize from a stream
/// - int soap_write_tt__WideDynamicRangeOptions20(soap, tt__WideDynamicRangeOptions20*) serialize to a stream
class tt__WideDynamicRangeOptions20 : public xsd__anyType
{ public:
/// Vector of enum tt__WideDynamicMode of length 1..unbounded.
    std::vector<enum tt__WideDynamicMode> Mode                           1;
/// Element "Level" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":BacklightCompensationOptions20 is a complexType.
///
/// class tt__BacklightCompensationOptions20 operations:
/// - soap_new_tt__BacklightCompensationOptions20(soap*) allocate
/// - soap_new_tt__BacklightCompensationOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__BacklightCompensationOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__BacklightCompensationOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__BacklightCompensationOptions20(soap*, tt__BacklightCompensationOptions20*) deserialize from a stream
/// - int soap_write_tt__BacklightCompensationOptions20(soap, tt__BacklightCompensationOptions20*) serialize to a stream
class tt__BacklightCompensationOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   'ON' or 'OFF'
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__BacklightCompensationMode of length 1..unbounded.
    std::vector<enum tt__BacklightCompensationMode> Mode                           1;
/// <PRE><BLOCKQUOTE>
///   Level range of BacklightCompensation.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Level                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ExposureOptions20 is a complexType.
///
/// class tt__ExposureOptions20 operations:
/// - soap_new_tt__ExposureOptions20(soap*) allocate
/// - soap_new_tt__ExposureOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__ExposureOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ExposureOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ExposureOptions20(soap*, tt__ExposureOptions20*) deserialize from a stream
/// - int soap_write_tt__ExposureOptions20(soap, tt__ExposureOptions20*) serialize to a stream
class tt__ExposureOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exposure Mode
///   <ul>
///   <li>Auto Enabled the exposure algorithm on the device.</li>
///   <li>Manual Disabled exposure algorithm on the device.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__ExposureMode of length 1..unbounded.
    std::vector<enum tt__ExposureMode  > Mode                           1;
/// <PRE><BLOCKQUOTE>
///   The exposure priority mode (low noise/framerate).
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__ExposurePriority of length 0..unbounded.
    std::vector<enum tt__ExposurePriority> Priority                       0;
/// <PRE><BLOCKQUOTE>
///   Valid range of the Minimum ExposureTime.
/// </BLOCKQUOTE></PRE>
/// Element "MinExposureTime" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Maximum ExposureTime.
/// </BLOCKQUOTE></PRE>
/// Element "MaxExposureTime" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxExposureTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Minimum Gain.
/// </BLOCKQUOTE></PRE>
/// Element "MinGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Maximum Gain.
/// </BLOCKQUOTE></PRE>
/// Element "MaxGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxGain                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Minimum Iris.
/// </BLOCKQUOTE></PRE>
/// Element "MinIris" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MinIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Maximum Iris.
/// </BLOCKQUOTE></PRE>
/// Element "MaxIris" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      MaxIris                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the ExposureTime.
/// </BLOCKQUOTE></PRE>
/// Element "ExposureTime" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      ExposureTime                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Gain.
/// </BLOCKQUOTE></PRE>
/// Element "Gain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Gain                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of the Iris.
/// </BLOCKQUOTE></PRE>
/// Element "Iris" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Iris                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":MoveOptions20 is a complexType.
///
/// class tt__MoveOptions20 operations:
/// - soap_new_tt__MoveOptions20(soap*) allocate
/// - soap_new_tt__MoveOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__MoveOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MoveOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MoveOptions20(soap*, tt__MoveOptions20*) deserialize from a stream
/// - int soap_write_tt__MoveOptions20(soap, tt__MoveOptions20*) serialize to a stream
class tt__MoveOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges for the absolute control.
/// </BLOCKQUOTE></PRE>
/// Element "Absolute" of XSD type "http://www.onvif.org/ver10/schema":AbsoluteFocusOptions.
    tt__AbsoluteFocusOptions*            Absolute                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges for the relative control.
/// </BLOCKQUOTE></PRE>
/// Element "Relative" of XSD type "http://www.onvif.org/ver10/schema":RelativeFocusOptions20.
    tt__RelativeFocusOptions20*          Relative                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges for the continuous control.
/// </BLOCKQUOTE></PRE>
/// Element "Continuous" of XSD type "http://www.onvif.org/ver10/schema":ContinuousFocusOptions.
    tt__ContinuousFocusOptions*          Continuous                     0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":RelativeFocusOptions20 is a complexType.
///
/// class tt__RelativeFocusOptions20 operations:
/// - soap_new_tt__RelativeFocusOptions20(soap*) allocate
/// - soap_new_tt__RelativeFocusOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__RelativeFocusOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RelativeFocusOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RelativeFocusOptions20(soap*, tt__RelativeFocusOptions20*) deserialize from a stream
/// - int soap_write_tt__RelativeFocusOptions20(soap, tt__RelativeFocusOptions20*) serialize to a stream
class tt__RelativeFocusOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the distance.
/// </BLOCKQUOTE></PRE>
/// Element "Distance" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Distance                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Valid ranges of the speed.
/// </BLOCKQUOTE></PRE>
/// Element "Speed" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Speed                          0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance20 is a complexType.
///
/// class tt__WhiteBalance20 operations:
/// - soap_new_tt__WhiteBalance20(soap*) allocate
/// - soap_new_tt__WhiteBalance20(soap*, int num) allocate array
/// - soap_new_req_tt__WhiteBalance20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WhiteBalance20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WhiteBalance20(soap*, tt__WhiteBalance20*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance20(soap, tt__WhiteBalance20*) serialize to a stream
class tt__WhiteBalance20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   'AUTO' or 'MANUAL'
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalanceMode.
    enum tt__WhiteBalanceMode            Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rgain (unitless).
/// </BLOCKQUOTE></PRE>
/// Element "CrGain" of XSD type xs:float.
    float*                               CrGain                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Bgain (unitless).
/// </BLOCKQUOTE></PRE>
/// Element "CbGain" of XSD type xs:float.
    float*                               CbGain                         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalance20Extension.
    tt__WhiteBalance20Extension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalance20Extension is a complexType.
///
/// class tt__WhiteBalance20Extension operations:
/// - soap_new_tt__WhiteBalance20Extension(soap*) allocate
/// - soap_new_tt__WhiteBalance20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__WhiteBalance20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WhiteBalance20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WhiteBalance20Extension(soap*, tt__WhiteBalance20Extension*) deserialize from a stream
/// - int soap_write_tt__WhiteBalance20Extension(soap, tt__WhiteBalance20Extension*) serialize to a stream
class tt__WhiteBalance20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration20 is a complexType.
///
/// class tt__FocusConfiguration20 operations:
/// - soap_new_tt__FocusConfiguration20(soap*) allocate
/// - soap_new_tt__FocusConfiguration20(soap*, int num) allocate array
/// - soap_new_req_tt__FocusConfiguration20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusConfiguration20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusConfiguration20(soap*, tt__FocusConfiguration20*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration20(soap, tt__FocusConfiguration20*) serialize to a stream
class tt__FocusConfiguration20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mode of auto focus.
///   <ul>
///   <li>AUTO - The device automatically adjusts focus.</li>
///   <li>MANUAL - The device does not automatically adjust focus.</li>
///   </ul>
///   Note: for devices supporting both manual and auto operation at the same time manual operation may be supported even if the Mode parameter is set to Auto.
/// </BLOCKQUOTE></PRE>
/// Element "AutoFocusMode" of XSD type "http://www.onvif.org/ver10/schema":AutoFocusMode.
    enum tt__AutoFocusMode               AutoFocusMode                  1;	///< Required element.
/// Element "DefaultSpeed" of XSD type xs:float.
    float*                               DefaultSpeed                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus near limit (unit: meter).
/// </BLOCKQUOTE></PRE>
/// Element "NearLimit" of XSD type xs:float.
    float*                               NearLimit                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter to set autofocus far limit (unit: meter).
/// </BLOCKQUOTE></PRE>
/// Element "FarLimit" of XSD type xs:float.
    float*                               FarLimit                       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension.
    tt__FocusConfiguration20Extension*   Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Zero or more modes as defined in enumeration tt:AFModes.
/// </BLOCKQUOTE></PRE>
/// Attribute "AFMode" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  AFMode                         0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusConfiguration20Extension is a complexType.
///
/// class tt__FocusConfiguration20Extension operations:
/// - soap_new_tt__FocusConfiguration20Extension(soap*) allocate
/// - soap_new_tt__FocusConfiguration20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__FocusConfiguration20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusConfiguration20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusConfiguration20Extension(soap*, tt__FocusConfiguration20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusConfiguration20Extension(soap, tt__FocusConfiguration20Extension*) serialize to a stream
class tt__FocusConfiguration20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20 is a complexType.
///
/// class tt__WhiteBalanceOptions20 operations:
/// - soap_new_tt__WhiteBalanceOptions20(soap*) allocate
/// - soap_new_tt__WhiteBalanceOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__WhiteBalanceOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WhiteBalanceOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WhiteBalanceOptions20(soap*, tt__WhiteBalanceOptions20*) deserialize from a stream
/// - int soap_write_tt__WhiteBalanceOptions20(soap, tt__WhiteBalanceOptions20*) serialize to a stream
class tt__WhiteBalanceOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mode of WhiteBalance.
///   <ul>
///   <li>AUTO</li>
///   <li>MANUAL</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__WhiteBalanceMode of length 1..unbounded.
    std::vector<enum tt__WhiteBalanceMode> Mode                           1;
/// Element "YrGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YrGain                         0;	///< Optional element.
/// Element "YbGain" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      YbGain                         0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension.
    tt__WhiteBalanceOptions20Extension*  Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":WhiteBalanceOptions20Extension is a complexType.
///
/// class tt__WhiteBalanceOptions20Extension operations:
/// - soap_new_tt__WhiteBalanceOptions20Extension(soap*) allocate
/// - soap_new_tt__WhiteBalanceOptions20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__WhiteBalanceOptions20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__WhiteBalanceOptions20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__WhiteBalanceOptions20Extension(soap*, tt__WhiteBalanceOptions20Extension*) deserialize from a stream
/// - int soap_write_tt__WhiteBalanceOptions20Extension(soap, tt__WhiteBalanceOptions20Extension*) serialize to a stream
class tt__WhiteBalanceOptions20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusOptions20 is a complexType.
///
/// class tt__FocusOptions20 operations:
/// - soap_new_tt__FocusOptions20(soap*) allocate
/// - soap_new_tt__FocusOptions20(soap*, int num) allocate array
/// - soap_new_req_tt__FocusOptions20(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusOptions20(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusOptions20(soap*, tt__FocusOptions20*) deserialize from a stream
/// - int soap_write_tt__FocusOptions20(soap, tt__FocusOptions20*) serialize to a stream
class tt__FocusOptions20 : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported modes for auto focus.
///   <ul>
///   <li>AUTO - The device supports automatic focus adjustment.</li>
///   <li>MANUAL - The device supports manual focus adjustment.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__AutoFocusMode of length 0..unbounded.
    std::vector<enum tt__AutoFocusMode > AutoFocusModes                 0;
/// <PRE><BLOCKQUOTE>
///   Valid range of DefaultSpeed.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultSpeed" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      DefaultSpeed                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of NearLimit.
/// </BLOCKQUOTE></PRE>
/// Element "NearLimit" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      NearLimit                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Valid range of FarLimit.
/// </BLOCKQUOTE></PRE>
/// Element "FarLimit" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      FarLimit                       0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":FocusOptions20Extension.
    tt__FocusOptions20Extension*         Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":FocusOptions20Extension is a complexType.
///
/// class tt__FocusOptions20Extension operations:
/// - soap_new_tt__FocusOptions20Extension(soap*) allocate
/// - soap_new_tt__FocusOptions20Extension(soap*, int num) allocate array
/// - soap_new_req_tt__FocusOptions20Extension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FocusOptions20Extension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FocusOptions20Extension(soap*, tt__FocusOptions20Extension*) deserialize from a stream
/// - int soap_write_tt__FocusOptions20Extension(soap, tt__FocusOptions20Extension*) serialize to a stream
class tt__FocusOptions20Extension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Supported options for auto focus. Options shall be chosen from tt:AFModes.
/// </BLOCKQUOTE></PRE>
/// Element "AFModes" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
    tt__StringAttrList*                  AFModes                        0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ToneCompensationOptions is a complexType.
///
/// class tt__ToneCompensationOptions operations:
/// - soap_new_tt__ToneCompensationOptions(soap*) allocate
/// - soap_new_tt__ToneCompensationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ToneCompensationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ToneCompensationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ToneCompensationOptions(soap*, tt__ToneCompensationOptions*) deserialize from a stream
/// - int soap_write_tt__ToneCompensationOptions(soap, tt__ToneCompensationOptions*) serialize to a stream
class tt__ToneCompensationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for Tone Compensation mode. Its options shall be chosen from tt:ToneCompensationMode Type.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Mode                           1;
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not support Level parameter for Tone Compensation.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:boolean.
    bool                                 Level                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DefoggingOptions is a complexType.
///
/// class tt__DefoggingOptions operations:
/// - soap_new_tt__DefoggingOptions(soap*) allocate
/// - soap_new_tt__DefoggingOptions(soap*, int num) allocate array
/// - soap_new_req_tt__DefoggingOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DefoggingOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DefoggingOptions(soap*, tt__DefoggingOptions*) deserialize from a stream
/// - int soap_write_tt__DefoggingOptions(soap, tt__DefoggingOptions*) serialize to a stream
class tt__DefoggingOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Supported options for Defogging mode. Its options shall be chosen from tt:DefoggingMode Type.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Mode                           1;
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not support Level parameter for Defogging.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:boolean.
    bool                                 Level                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NoiseReductionOptions is a complexType.
///
/// class tt__NoiseReductionOptions operations:
/// - soap_new_tt__NoiseReductionOptions(soap*) allocate
/// - soap_new_tt__NoiseReductionOptions(soap*, int num) allocate array
/// - soap_new_req_tt__NoiseReductionOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NoiseReductionOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NoiseReductionOptions(soap*, tt__NoiseReductionOptions*) deserialize from a stream
/// - int soap_write_tt__NoiseReductionOptions(soap, tt__NoiseReductionOptions*) serialize to a stream
class tt__NoiseReductionOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not support Level parameter for NoiseReduction.
/// </BLOCKQUOTE></PRE>
/// Element "Level" of XSD type xs:boolean.
    bool                                 Level                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MessageExtension is a complexType.
///
/// class tt__MessageExtension operations:
/// - soap_new_tt__MessageExtension(soap*) allocate
/// - soap_new_tt__MessageExtension(soap*, int num) allocate array
/// - soap_new_req_tt__MessageExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MessageExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MessageExtension(soap*, tt__MessageExtension*) deserialize from a stream
/// - int soap_write_tt__MessageExtension(soap, tt__MessageExtension*) serialize to a stream
class tt__MessageExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemList is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   List of parameters according to the corresponding ItemListDescription.
///   Each item in the list shall have a unique name.
/// </BLOCKQUOTE></PRE>
/// class tt__ItemList operations:
/// - soap_new_tt__ItemList(soap*) allocate
/// - soap_new_tt__ItemList(soap*, int num) allocate array
/// - soap_new_req_tt__ItemList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ItemList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ItemList(soap*, tt__ItemList*) deserialize from a stream
/// - int soap_write_tt__ItemList(soap, tt__ItemList*) serialize to a stream
class tt__ItemList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Value name pair as defined by the corresponding description.
/// </BLOCKQUOTE></PRE>
/// Vector of SimpleItem of length 0..unbounded.
    std::vector<
/// class _tt__ItemList_SimpleItem operations:
/// - soap_new__tt__ItemList_SimpleItem(soap*) allocate
/// - soap_new__tt__ItemList_SimpleItem(soap*, int num) allocate array
/// - soap_new_req__tt__ItemList_SimpleItem(soap*, ...) allocate, set required members
/// - soap_new_set__tt__ItemList_SimpleItem(soap*, ...) allocate, set all public members
/// - int soap_read__tt__ItemList_SimpleItem(soap*, _tt__ItemList_SimpleItem*) deserialize from a stream
/// - int soap_write__tt__ItemList_SimpleItem(soap, _tt__ItemList_SimpleItem*) serialize to a stream
    class _tt__ItemList_SimpleItem
    {
/// <PRE><BLOCKQUOTE>
///   Item name.
/// </BLOCKQUOTE></PRE>
/// Attribute "Name" of XSD type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Item value. The type is defined in the corresponding description.
/// </BLOCKQUOTE></PRE>
/// Attribute "Value" of XSD type xs:anySimpleType.
   @xsd__anySimpleType                   Value                          1;	///< Required attribute.
    }>                                  *SimpleItem                     0;
/// <PRE><BLOCKQUOTE>
///   Complex value structure.
/// </BLOCKQUOTE></PRE>
/// Vector of ElementItem of length 0..unbounded.
    std::vector<
/// class _tt__ItemList_ElementItem operations:
/// - soap_new__tt__ItemList_ElementItem(soap*) allocate
/// - soap_new__tt__ItemList_ElementItem(soap*, int num) allocate array
/// - soap_new_req__tt__ItemList_ElementItem(soap*, ...) allocate, set required members
/// - soap_new_set__tt__ItemList_ElementItem(soap*, ...) allocate, set all public members
/// - int soap_read__tt__ItemList_ElementItem(soap*, _tt__ItemList_ElementItem*) deserialize from a stream
/// - int soap_write__tt__ItemList_ElementItem(soap, _tt__ItemList_ElementItem*) serialize to a stream
    class _tt__ItemList_ElementItem
    {
/// @todo <any namespace="##any">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Item name.
/// </BLOCKQUOTE></PRE>
/// Attribute "Name" of XSD type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
    }>                                  *ElementItem                    0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ItemListExtension.
    tt__ItemListExtension*               Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListExtension is a complexType.
///
/// class tt__ItemListExtension operations:
/// - soap_new_tt__ItemListExtension(soap*) allocate
/// - soap_new_tt__ItemListExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ItemListExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ItemListExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ItemListExtension(soap*, tt__ItemListExtension*) deserialize from a stream
/// - int soap_write_tt__ItemListExtension(soap, tt__ItemListExtension*) serialize to a stream
class tt__ItemListExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":MessageDescription is a complexType.
///
/// class tt__MessageDescription operations:
/// - soap_new_tt__MessageDescription(soap*) allocate
/// - soap_new_tt__MessageDescription(soap*, int num) allocate array
/// - soap_new_req_tt__MessageDescription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MessageDescription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MessageDescription(soap*, tt__MessageDescription*) deserialize from a stream
/// - int soap_write_tt__MessageDescription(soap, tt__MessageDescription*) serialize to a stream
class tt__MessageDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Set of tokens producing this message. The list may only contain SimpleItemDescription items.
///   The set of tokens identify the component within the WS-Endpoint, which is responsible for the producing the message.<br/>
///   For analytics events the token set shall include the VideoSourceConfigurationToken, the VideoAnalyticsConfigurationToken
///   and the name of the analytics module or rule.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Source                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes optional message payload parameters that may be used as key. E.g. object IDs of tracked objects are conveyed as key.
/// </BLOCKQUOTE></PRE>
/// Element "Key" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the payload of the message.
/// </BLOCKQUOTE></PRE>
/// Element "Data" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Data                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MessageDescriptionExtension.
    tt__MessageDescriptionExtension*     Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Must be set to true when the described Message relates to a property. An alternative term of "property" is a "state" in contrast to a pure event, which contains relevant information for only a single point in time.<br/>Default is false.
/// </BLOCKQUOTE></PRE>
/// Attribute "IsProperty" of XSD type xs:boolean.
   @bool*                                IsProperty                     0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MessageDescriptionExtension is a complexType.
///
/// class tt__MessageDescriptionExtension operations:
/// - soap_new_tt__MessageDescriptionExtension(soap*) allocate
/// - soap_new_tt__MessageDescriptionExtension(soap*, int num) allocate array
/// - soap_new_req_tt__MessageDescriptionExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MessageDescriptionExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MessageDescriptionExtension(soap*, tt__MessageDescriptionExtension*) deserialize from a stream
/// - int soap_write_tt__MessageDescriptionExtension(soap, tt__MessageDescriptionExtension*) serialize to a stream
class tt__MessageDescriptionExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListDescription is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes a list of items. Each item in the list shall have a unique name.
///   The list is designed as linear structure without optional or unbounded elements.
///   Use ElementItems only when complex structures are inevitable.
/// </BLOCKQUOTE></PRE>
/// class tt__ItemListDescription operations:
/// - soap_new_tt__ItemListDescription(soap*) allocate
/// - soap_new_tt__ItemListDescription(soap*, int num) allocate array
/// - soap_new_req_tt__ItemListDescription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ItemListDescription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ItemListDescription(soap*, tt__ItemListDescription*) deserialize from a stream
/// - int soap_write_tt__ItemListDescription(soap, tt__ItemListDescription*) serialize to a stream
class tt__ItemListDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Description of a simple item. The type must be of cathegory simpleType (xs:string, xs:integer, xs:float, ...).
/// </BLOCKQUOTE></PRE>
/// Vector of SimpleItemDescription of length 0..unbounded.
    std::vector<
/// class _tt__ItemListDescription_SimpleItemDescription operations:
/// - soap_new__tt__ItemListDescription_SimpleItemDescription(soap*) allocate
/// - soap_new__tt__ItemListDescription_SimpleItemDescription(soap*, int num) allocate array
/// - soap_new_req__tt__ItemListDescription_SimpleItemDescription(soap*, ...) allocate, set required members
/// - soap_new_set__tt__ItemListDescription_SimpleItemDescription(soap*, ...) allocate, set all public members
/// - int soap_read__tt__ItemListDescription_SimpleItemDescription(soap*, _tt__ItemListDescription_SimpleItemDescription*) deserialize from a stream
/// - int soap_write__tt__ItemListDescription_SimpleItemDescription(soap, _tt__ItemListDescription_SimpleItemDescription*) serialize to a stream
    class _tt__ItemListDescription_SimpleItemDescription
    {
/// <PRE><BLOCKQUOTE>
///   Item name. Must be unique within a list.
/// </BLOCKQUOTE></PRE>
/// Attribute "Name" of XSD type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
/// Attribute "Type" of XSD type xs:QName.
   @xsd__QName                           Type                           1;	///< Required attribute.
    }>                                  *SimpleItemDescription          0;
/// <PRE><BLOCKQUOTE>
///   Description of a complex type. The Type must reference a defined type.
/// </BLOCKQUOTE></PRE>
/// Vector of ElementItemDescription of length 0..unbounded.
    std::vector<
/// class _tt__ItemListDescription_ElementItemDescription operations:
/// - soap_new__tt__ItemListDescription_ElementItemDescription(soap*) allocate
/// - soap_new__tt__ItemListDescription_ElementItemDescription(soap*, int num) allocate array
/// - soap_new_req__tt__ItemListDescription_ElementItemDescription(soap*, ...) allocate, set required members
/// - soap_new_set__tt__ItemListDescription_ElementItemDescription(soap*, ...) allocate, set all public members
/// - int soap_read__tt__ItemListDescription_ElementItemDescription(soap*, _tt__ItemListDescription_ElementItemDescription*) deserialize from a stream
/// - int soap_write__tt__ItemListDescription_ElementItemDescription(soap, _tt__ItemListDescription_ElementItemDescription*) serialize to a stream
    class _tt__ItemListDescription_ElementItemDescription
    {
/// <PRE><BLOCKQUOTE>
///   Item name. Must be unique within a list.
/// </BLOCKQUOTE></PRE>
/// Attribute "Name" of XSD type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The type of the item. The Type must reference a defined type.
/// </BLOCKQUOTE></PRE>
/// Attribute "Type" of XSD type xs:QName.
   @xsd__QName                           Type                           1;	///< Required attribute.
    }>                                  *ElementItemDescription         0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension.
    tt__ItemListDescriptionExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ItemListDescriptionExtension is a complexType.
///
/// class tt__ItemListDescriptionExtension operations:
/// - soap_new_tt__ItemListDescriptionExtension(soap*) allocate
/// - soap_new_tt__ItemListDescriptionExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ItemListDescriptionExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ItemListDescriptionExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ItemListDescriptionExtension(soap*, tt__ItemListDescriptionExtension*) deserialize from a stream
/// - int soap_write_tt__ItemListDescriptionExtension(soap, tt__ItemListDescriptionExtension*) serialize to a stream
class tt__ItemListDescriptionExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Polyline is a complexType.
///
/// class tt__Polyline operations:
/// - soap_new_tt__Polyline(soap*) allocate
/// - soap_new_tt__Polyline(soap*, int num) allocate array
/// - soap_new_req_tt__Polyline(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Polyline(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Polyline(soap*, tt__Polyline*) deserialize from a stream
/// - int soap_write_tt__Polyline(soap, tt__Polyline*) serialize to a stream
class tt__Polyline : public xsd__anyType
{ public:
/// Vector of tt__Vector* of length 2..unbounded.
    std::vector<tt__Vector*            > Point                          2;
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration is a complexType.
///
/// class tt__AnalyticsEngineConfiguration operations:
/// - soap_new_tt__AnalyticsEngineConfiguration(soap*) allocate
/// - soap_new_tt__AnalyticsEngineConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngineConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngineConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngineConfiguration(soap*, tt__AnalyticsEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineConfiguration(soap, tt__AnalyticsEngineConfiguration*) serialize to a stream
class tt__AnalyticsEngineConfiguration : public xsd__anyType
{ public:
/// Vector of tt__Config* of length 0..unbounded.
    std::vector<tt__Config*            > AnalyticsModule                0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension.
    tt__AnalyticsEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineConfigurationExtension is a complexType.
///
/// class tt__AnalyticsEngineConfigurationExtension operations:
/// - soap_new_tt__AnalyticsEngineConfigurationExtension(soap*) allocate
/// - soap_new_tt__AnalyticsEngineConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngineConfigurationExtension(soap*, tt__AnalyticsEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineConfigurationExtension(soap, tt__AnalyticsEngineConfigurationExtension*) serialize to a stream
class tt__AnalyticsEngineConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":RuleEngineConfiguration is a complexType.
///
/// class tt__RuleEngineConfiguration operations:
/// - soap_new_tt__RuleEngineConfiguration(soap*) allocate
/// - soap_new_tt__RuleEngineConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__RuleEngineConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RuleEngineConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RuleEngineConfiguration(soap*, tt__RuleEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__RuleEngineConfiguration(soap, tt__RuleEngineConfiguration*) serialize to a stream
class tt__RuleEngineConfiguration : public xsd__anyType
{ public:
/// Vector of tt__Config* of length 0..unbounded.
    std::vector<tt__Config*            > Rule                           0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension.
    tt__RuleEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RuleEngineConfigurationExtension is a complexType.
///
/// class tt__RuleEngineConfigurationExtension operations:
/// - soap_new_tt__RuleEngineConfigurationExtension(soap*) allocate
/// - soap_new_tt__RuleEngineConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RuleEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RuleEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RuleEngineConfigurationExtension(soap*, tt__RuleEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__RuleEngineConfigurationExtension(soap, tt__RuleEngineConfigurationExtension*) serialize to a stream
class tt__RuleEngineConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Config is a complexType.
///
/// class tt__Config operations:
/// - soap_new_tt__Config(soap*) allocate
/// - soap_new_tt__Config(soap*, int num) allocate array
/// - soap_new_req_tt__Config(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Config(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Config(soap*, tt__Config*) deserialize from a stream
/// - int soap_write_tt__Config(soap, tt__Config*) serialize to a stream
class tt__Config : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of configuration parameters as defined in the correspding description.
/// </BLOCKQUOTE></PRE>
/// Element "Parameters" of XSD type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Parameters                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Name of the configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "Name" of XSD type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The Type attribute specifies the type of rule and shall be equal to value of one of Name attributes of ConfigDescription elements returned by GetSupportedRules and GetSupportedAnalyticsModules command.
/// </BLOCKQUOTE></PRE>
/// Attribute "Type" of XSD type xs:QName.
   @xsd__QName                           Type                           1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":ConfigDescription is a complexType.
///
/// class tt__ConfigDescription operations:
/// - soap_new_tt__ConfigDescription(soap*) allocate
/// - soap_new_tt__ConfigDescription(soap*, int num) allocate array
/// - soap_new_req_tt__ConfigDescription(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ConfigDescription(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ConfigDescription(soap*, tt__ConfigDescription*) deserialize from a stream
/// - int soap_write_tt__ConfigDescription(soap, tt__ConfigDescription*) serialize to a stream
class tt__ConfigDescription : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List describing the configuration parameters. The names of the parameters must be unique. If possible SimpleItems
///   should be used to transport the information to ease parsing of dynamically defined messages by a client
///   application.
/// </BLOCKQUOTE></PRE>
/// Element "Parameters" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Parameters                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The analytics modules and rule engine produce Events, which must be listed within the Analytics Module Description. In order to do so
///   the structure of the Message is defined and consists of three groups: Source, Key, and Data. It is recommended to use SimpleItemDescriptions wherever applicable.
///   The name of all Items must be unique within all Items contained in any group of this Message.
///   Depending on the component multiple parameters or none may be needed to identify the component uniquely.
/// </BLOCKQUOTE></PRE>
/// Vector of Messages of length 0..unbounded.
    std::vector<
/// class _tt__ConfigDescription_Messages operations:
/// - soap_new__tt__ConfigDescription_Messages(soap*) allocate
/// - soap_new__tt__ConfigDescription_Messages(soap*, int num) allocate array
/// - soap_new_req__tt__ConfigDescription_Messages(soap*, ...) allocate, set required members
/// - soap_new_set__tt__ConfigDescription_Messages(soap*, ...) allocate, set all public members
/// - int soap_read__tt__ConfigDescription_Messages(soap*, _tt__ConfigDescription_Messages*) deserialize from a stream
/// - int soap_write__tt__ConfigDescription_Messages(soap, _tt__ConfigDescription_Messages*) serialize to a stream
    class _tt__ConfigDescription_Messages
    {
/// INHERITED FROM tt__MessageDescription:
/// <PRE><BLOCKQUOTE>
///   Set of tokens producing this message. The list may only contain SimpleItemDescription items.
///   The set of tokens identify the component within the WS-Endpoint, which is responsible for the producing the message.<br/>
///   For analytics events the token set shall include the VideoSourceConfigurationToken, the VideoAnalyticsConfigurationToken
///   and the name of the analytics module or rule.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Source                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes optional message payload parameters that may be used as key. E.g. object IDs of tracked objects are conveyed as key.
/// </BLOCKQUOTE></PRE>
/// Element "Key" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Key                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the payload of the message.
/// </BLOCKQUOTE></PRE>
/// Element "Data" of XSD type "http://www.onvif.org/ver10/schema":ItemListDescription.
    tt__ItemListDescription*             Data                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MessageDescriptionExtension.
    tt__MessageDescriptionExtension*     Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Must be set to true when the described Message relates to a property. An alternative term of "property" is a "state" in contrast to a pure event, which contains relevant information for only a single point in time.<br/>Default is false.
/// </BLOCKQUOTE></PRE>
/// Attribute "IsProperty" of XSD type xs:boolean.
   @bool*                                IsProperty                     0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM tt__MessageDescription
/// <PRE><BLOCKQUOTE>
///   The topic of the message. For historical reason the element is named ParentTopic, but the full topic is expected.
/// </BLOCKQUOTE></PRE>
/// Element "ParentTopic" of XSD type xs:string.
    std::string                          ParentTopic                    1;	///< Required element.
    }>                                  *Messages                       0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension.
    tt__ConfigDescriptionExtension*      Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Name attribute (e.g. "tt::LineDetector") uniquely identifies the type of rule, not a type definition in a schema.
/// </BLOCKQUOTE></PRE>
/// Attribute "Name" of XSD type xs:QName.
   @xsd__QName                           Name                           1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The fixed attribute signals that it is not allowed to add or remove this type of configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "fixed" of XSD type xs:boolean.
   @bool*                                fixed                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maxInstances attribute signals the maximum number of instances per configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "maxInstances" of XSD type xs:integer.
   @xsd__integer*                        maxInstances                   0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ConfigDescriptionExtension is a complexType.
///
/// class tt__ConfigDescriptionExtension operations:
/// - soap_new_tt__ConfigDescriptionExtension(soap*) allocate
/// - soap_new_tt__ConfigDescriptionExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ConfigDescriptionExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ConfigDescriptionExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ConfigDescriptionExtension(soap*, tt__ConfigDescriptionExtension*) deserialize from a stream
/// - int soap_write_tt__ConfigDescriptionExtension(soap, tt__ConfigDescriptionExtension*) serialize to a stream
class tt__ConfigDescriptionExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedRules is a complexType.
///
/// class tt__SupportedRules operations:
/// - soap_new_tt__SupportedRules(soap*) allocate
/// - soap_new_tt__SupportedRules(soap*, int num) allocate array
/// - soap_new_req_tt__SupportedRules(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SupportedRules(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SupportedRules(soap*, tt__SupportedRules*) deserialize from a stream
/// - int soap_write_tt__SupportedRules(soap, tt__SupportedRules*) serialize to a stream
class tt__SupportedRules : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lists the location of all schemas that are referenced in the rules.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > RuleContentSchemaLocation      0;
/// <PRE><BLOCKQUOTE>
///   List of rules supported by the Video Analytics configuration..
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ConfigDescription* of length 0..unbounded.
    std::vector<tt__ConfigDescription* > RuleDescription                0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SupportedRulesExtension.
    tt__SupportedRulesExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedRulesExtension is a complexType.
///
/// class tt__SupportedRulesExtension operations:
/// - soap_new_tt__SupportedRulesExtension(soap*) allocate
/// - soap_new_tt__SupportedRulesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SupportedRulesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SupportedRulesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SupportedRulesExtension(soap*, tt__SupportedRulesExtension*) deserialize from a stream
/// - int soap_write_tt__SupportedRulesExtension(soap, tt__SupportedRulesExtension*) serialize to a stream
class tt__SupportedRulesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedAnalyticsModules is a complexType.
///
/// class tt__SupportedAnalyticsModules operations:
/// - soap_new_tt__SupportedAnalyticsModules(soap*) allocate
/// - soap_new_tt__SupportedAnalyticsModules(soap*, int num) allocate array
/// - soap_new_req_tt__SupportedAnalyticsModules(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SupportedAnalyticsModules(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SupportedAnalyticsModules(soap*, tt__SupportedAnalyticsModules*) deserialize from a stream
/// - int soap_write_tt__SupportedAnalyticsModules(soap, tt__SupportedAnalyticsModules*) serialize to a stream
class tt__SupportedAnalyticsModules : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   It optionally contains a list of URLs that provide the location of schema files.
///   These schema files describe the types and elements used in the analytics module descriptions.
///   Analytics module descriptions that reference types or elements imported from any ONVIF defined schema files
///   need not explicitly list those schema files.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > AnalyticsModuleContentSchemaLocation 0;
/// Vector of tt__ConfigDescription* of length 0..unbounded.
    std::vector<tt__ConfigDescription* > AnalyticsModuleDescription     0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension.
    tt__SupportedAnalyticsModulesExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SupportedAnalyticsModulesExtension is a complexType.
///
/// class tt__SupportedAnalyticsModulesExtension operations:
/// - soap_new_tt__SupportedAnalyticsModulesExtension(soap*) allocate
/// - soap_new_tt__SupportedAnalyticsModulesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SupportedAnalyticsModulesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SupportedAnalyticsModulesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SupportedAnalyticsModulesExtension(soap*, tt__SupportedAnalyticsModulesExtension*) deserialize from a stream
/// - int soap_write_tt__SupportedAnalyticsModulesExtension(soap, tt__SupportedAnalyticsModulesExtension*) serialize to a stream
class tt__SupportedAnalyticsModulesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PolygonConfiguration is a complexType.
///
/// class tt__PolygonConfiguration operations:
/// - soap_new_tt__PolygonConfiguration(soap*) allocate
/// - soap_new_tt__PolygonConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__PolygonConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PolygonConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PolygonConfiguration(soap*, tt__PolygonConfiguration*) deserialize from a stream
/// - int soap_write_tt__PolygonConfiguration(soap, tt__PolygonConfiguration*) serialize to a stream
class tt__PolygonConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains Polygon configuration for rule parameters
/// </BLOCKQUOTE></PRE>
/// Element "Polygon" of XSD type "http://www.onvif.org/ver10/schema":Polygon.
    tt__Polygon*                         Polygon                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PolylineArray is a complexType.
///
/// class tt__PolylineArray operations:
/// - soap_new_tt__PolylineArray(soap*) allocate
/// - soap_new_tt__PolylineArray(soap*, int num) allocate array
/// - soap_new_req_tt__PolylineArray(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PolylineArray(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PolylineArray(soap*, tt__PolylineArray*) deserialize from a stream
/// - int soap_write_tt__PolylineArray(soap, tt__PolylineArray*) serialize to a stream
class tt__PolylineArray : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains array of Polyline
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Polyline* of length 1..unbounded.
    std::vector<tt__Polyline*          > Segment                        1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PolylineArrayExtension.
    tt__PolylineArrayExtension*          Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PolylineArrayExtension is a complexType.
///
/// class tt__PolylineArrayExtension operations:
/// - soap_new_tt__PolylineArrayExtension(soap*) allocate
/// - soap_new_tt__PolylineArrayExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PolylineArrayExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PolylineArrayExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PolylineArrayExtension(soap*, tt__PolylineArrayExtension*) deserialize from a stream
/// - int soap_write_tt__PolylineArrayExtension(soap, tt__PolylineArrayExtension*) serialize to a stream
class tt__PolylineArrayExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PolylineArrayConfiguration is a complexType.
///
/// class tt__PolylineArrayConfiguration operations:
/// - soap_new_tt__PolylineArrayConfiguration(soap*) allocate
/// - soap_new_tt__PolylineArrayConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__PolylineArrayConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PolylineArrayConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PolylineArrayConfiguration(soap*, tt__PolylineArrayConfiguration*) deserialize from a stream
/// - int soap_write_tt__PolylineArrayConfiguration(soap, tt__PolylineArrayConfiguration*) serialize to a stream
class tt__PolylineArrayConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains PolylineArray configuration data
/// </BLOCKQUOTE></PRE>
/// Element "PolylineArray" of XSD type "http://www.onvif.org/ver10/schema":PolylineArray.
    tt__PolylineArray*                   PolylineArray                  1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MotionExpression is a complexType.
///
/// class tt__MotionExpression operations:
/// - soap_new_tt__MotionExpression(soap*) allocate
/// - soap_new_tt__MotionExpression(soap*, int num) allocate array
/// - soap_new_req_tt__MotionExpression(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MotionExpression(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MotionExpression(soap*, tt__MotionExpression*) deserialize from a stream
/// - int soap_write_tt__MotionExpression(soap, tt__MotionExpression*) serialize to a stream
class tt__MotionExpression : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Motion Expression data structure contains motion expression which is based on Scene Descriptor schema with XPATH syntax. The Type argument could allow introduction of different dialects
/// </BLOCKQUOTE></PRE>
/// Element "Expression" of XSD type xs:string.
    std::string                          Expression                     1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute "Type" of XSD type xs:string.
   @std::string*                         Type                           0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MotionExpressionConfiguration is a complexType.
///
/// class tt__MotionExpressionConfiguration operations:
/// - soap_new_tt__MotionExpressionConfiguration(soap*) allocate
/// - soap_new_tt__MotionExpressionConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__MotionExpressionConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MotionExpressionConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MotionExpressionConfiguration(soap*, tt__MotionExpressionConfiguration*) deserialize from a stream
/// - int soap_write_tt__MotionExpressionConfiguration(soap, tt__MotionExpressionConfiguration*) serialize to a stream
class tt__MotionExpressionConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains Rule MotionExpression configuration
/// </BLOCKQUOTE></PRE>
/// Element "MotionExpression" of XSD type "http://www.onvif.org/ver10/schema":MotionExpression.
    tt__MotionExpression*                MotionExpression               1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CellLayout is a complexType.
///
/// class tt__CellLayout operations:
/// - soap_new_tt__CellLayout(soap*) allocate
/// - soap_new_tt__CellLayout(soap*, int num) allocate array
/// - soap_new_req_tt__CellLayout(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CellLayout(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CellLayout(soap*, tt__CellLayout*) deserialize from a stream
/// - int soap_write_tt__CellLayout(soap, tt__CellLayout*) serialize to a stream
class tt__CellLayout : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Mapping of the cell grid to the Video frame. The cell grid is starting from the upper left corner and x dimension is going from left to right and the y dimension from up to down.
/// </BLOCKQUOTE></PRE>
/// Element "Transformation" of XSD type "http://www.onvif.org/ver10/schema":Transformation.
    tt__Transformation*                  Transformation                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Number of columns of the cell grid (x dimension)
/// </BLOCKQUOTE></PRE>
/// Attribute "Columns" of XSD type xs:integer.
   @xsd__integer                         Columns                        1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Number of rows of the cell grid (y dimension)
/// </BLOCKQUOTE></PRE>
/// Attribute "Rows" of XSD type xs:integer.
   @xsd__integer                         Rows                           1;	///< Required attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneConfiguration is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Configuration of the streaming and coding settings of a Video window.
/// </BLOCKQUOTE></PRE>
/// class tt__PaneConfiguration operations:
/// - soap_new_tt__PaneConfiguration(soap*) allocate
/// - soap_new_tt__PaneConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__PaneConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PaneConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PaneConfiguration(soap*, tt__PaneConfiguration*) deserialize from a stream
/// - int soap_write_tt__PaneConfiguration(soap, tt__PaneConfiguration*) serialize to a stream
class tt__PaneConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional name of the pane configuration.
/// </BLOCKQUOTE></PRE>
/// Element "PaneName" of XSD type xs:string.
    std::string*                         PaneName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device has audio outputs, this element contains a pointer to the audio output that is associated with the pane. A client
///   can retrieve the available audio outputs of a device using the GetAudioOutputs command of the DeviceIO service.
/// </BLOCKQUOTE></PRE>
/// Element "AudioOutputToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  AudioOutputToken               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device has audio sources, this element contains a pointer to the audio source that is associated with this pane.
///   The audio connection from a decoder device to the NVT is established using the backchannel mechanism. A client can retrieve the available audio sources of a device using the GetAudioSources command of the
///   DeviceIO service.
/// </BLOCKQUOTE></PRE>
/// Element "AudioSourceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  AudioSourceToken               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The configuration of the audio encoder including codec, bitrate
///   and sample rate.
/// </BLOCKQUOTE></PRE>
/// Element "AudioEncoderConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
    tt__AudioEncoderConfiguration*       AudioEncoderConfiguration      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A pointer to a Receiver that has the necessary information to receive
///   data from a Transmitter. This Receiver can be connected and the network video decoder displays the received data on the specified outputs. A client can retrieve the available Receivers using the
///   GetReceivers command of the Receiver Service.
/// </BLOCKQUOTE></PRE>
/// Element "ReceiverToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken*                  ReceiverToken                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A unique identifier in the display device.
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneLayout is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A pane layout describes one Video window of a display. It links a pane configuration to a region of the screen.
/// </BLOCKQUOTE></PRE>
/// class tt__PaneLayout operations:
/// - soap_new_tt__PaneLayout(soap*) allocate
/// - soap_new_tt__PaneLayout(soap*, int num) allocate array
/// - soap_new_req_tt__PaneLayout(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PaneLayout(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PaneLayout(soap*, tt__PaneLayout*) deserialize from a stream
/// - int soap_write_tt__PaneLayout(soap, tt__PaneLayout*) serialize to a stream
class tt__PaneLayout : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Reference to the configuration of the streaming and coding parameters.
/// </BLOCKQUOTE></PRE>
/// Element "Pane" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Pane                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Describes the location and size of the area on the monitor. The area coordinate values are espressed in normalized units [-1.0, 1.0].
/// </BLOCKQUOTE></PRE>
/// Element "Area" of XSD type "http://www.onvif.org/ver10/schema":Rectangle.
    tt__Rectangle*                       Area                           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Layout is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A layout describes a set of Video windows that are displayed simultaniously on a display.
/// </BLOCKQUOTE></PRE>
/// class tt__Layout operations:
/// - soap_new_tt__Layout(soap*) allocate
/// - soap_new_tt__Layout(soap*, int num) allocate array
/// - soap_new_req_tt__Layout(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Layout(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Layout(soap*, tt__Layout*) deserialize from a stream
/// - int soap_write_tt__Layout(soap, tt__Layout*) serialize to a stream
class tt__Layout : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of panes assembling the display layout.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PaneLayout* of length 1..unbounded.
    std::vector<tt__PaneLayout*        > PaneLayout                     1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":LayoutExtension.
    tt__LayoutExtension*                 Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LayoutExtension is a complexType.
///
/// class tt__LayoutExtension operations:
/// - soap_new_tt__LayoutExtension(soap*) allocate
/// - soap_new_tt__LayoutExtension(soap*, int num) allocate array
/// - soap_new_req_tt__LayoutExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LayoutExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LayoutExtension(soap*, tt__LayoutExtension*) deserialize from a stream
/// - int soap_write_tt__LayoutExtension(soap, tt__LayoutExtension*) serialize to a stream
class tt__LayoutExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":CodingCapabilities is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This type contains the Audio and Video coding capabilities of a display service.
/// </BLOCKQUOTE></PRE>
/// class tt__CodingCapabilities operations:
/// - soap_new_tt__CodingCapabilities(soap*) allocate
/// - soap_new_tt__CodingCapabilities(soap*, int num) allocate array
/// - soap_new_req_tt__CodingCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CodingCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CodingCapabilities(soap*, tt__CodingCapabilities*) deserialize from a stream
/// - int soap_write_tt__CodingCapabilities(soap, tt__CodingCapabilities*) serialize to a stream
class tt__CodingCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the device supports audio encoding this section describes the supported codecs and their configuration.
/// </BLOCKQUOTE></PRE>
/// Element "AudioEncodingCapabilities" of XSD type "http://www.onvif.org/ver10/schema":AudioEncoderConfigurationOptions.
    tt__AudioEncoderConfigurationOptions*  AudioEncodingCapabilities      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the device supports audio decoding this section describes the supported codecs and their settings.
/// </BLOCKQUOTE></PRE>
/// Element "AudioDecodingCapabilities" of XSD type "http://www.onvif.org/ver10/schema":AudioDecoderConfigurationOptions.
    tt__AudioDecoderConfigurationOptions*  AudioDecodingCapabilities      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This section describes the supported video codesc and their configuration.
/// </BLOCKQUOTE></PRE>
/// Element "VideoDecodingCapabilities" of XSD type "http://www.onvif.org/ver10/schema":VideoDecoderConfigurationOptions.
    tt__VideoDecoderConfigurationOptions*  VideoDecodingCapabilities      1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LayoutOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The options supported for a display layout.
/// </BLOCKQUOTE></PRE>
/// class tt__LayoutOptions operations:
/// - soap_new_tt__LayoutOptions(soap*) allocate
/// - soap_new_tt__LayoutOptions(soap*, int num) allocate array
/// - soap_new_req_tt__LayoutOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LayoutOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LayoutOptions(soap*, tt__LayoutOptions*) deserialize from a stream
/// - int soap_write_tt__LayoutOptions(soap, tt__LayoutOptions*) serialize to a stream
class tt__LayoutOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lists the possible Pane Layouts of the Video Output
/// </BLOCKQUOTE></PRE>
/// Vector of tt__PaneLayoutOptions* of length 1..unbounded.
    std::vector<tt__PaneLayoutOptions* > PaneLayoutOptions              1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":LayoutOptionsExtension.
    tt__LayoutOptionsExtension*          Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LayoutOptionsExtension is a complexType.
///
/// class tt__LayoutOptionsExtension operations:
/// - soap_new_tt__LayoutOptionsExtension(soap*) allocate
/// - soap_new_tt__LayoutOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__LayoutOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LayoutOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LayoutOptionsExtension(soap*, tt__LayoutOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__LayoutOptionsExtension(soap, tt__LayoutOptionsExtension*) serialize to a stream
class tt__LayoutOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneLayoutOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of a pane layout describing a complete display layout.
/// </BLOCKQUOTE></PRE>
/// class tt__PaneLayoutOptions operations:
/// - soap_new_tt__PaneLayoutOptions(soap*) allocate
/// - soap_new_tt__PaneLayoutOptions(soap*, int num) allocate array
/// - soap_new_req_tt__PaneLayoutOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PaneLayoutOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PaneLayoutOptions(soap*, tt__PaneLayoutOptions*) deserialize from a stream
/// - int soap_write_tt__PaneLayoutOptions(soap, tt__PaneLayoutOptions*) serialize to a stream
class tt__PaneLayoutOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of areas assembling a layout. Coordinate values are in the range [-1.0, 1.0].
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Rectangle* of length 1..unbounded.
    std::vector<tt__Rectangle*         > Area                           1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PaneOptionExtension.
    tt__PaneOptionExtension*             Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PaneOptionExtension is a complexType.
///
/// class tt__PaneOptionExtension operations:
/// - soap_new_tt__PaneOptionExtension(soap*) allocate
/// - soap_new_tt__PaneOptionExtension(soap*, int num) allocate array
/// - soap_new_req_tt__PaneOptionExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PaneOptionExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PaneOptionExtension(soap*, tt__PaneOptionExtension*) deserialize from a stream
/// - int soap_write_tt__PaneOptionExtension(soap, tt__PaneOptionExtension*) serialize to a stream
class tt__PaneOptionExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":Receiver is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Description of a receiver, including its token and configuration.
/// </BLOCKQUOTE></PRE>
/// class tt__Receiver operations:
/// - soap_new_tt__Receiver(soap*) allocate
/// - soap_new_tt__Receiver(soap*, int num) allocate array
/// - soap_new_req_tt__Receiver(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Receiver(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Receiver(soap*, tt__Receiver*) deserialize from a stream
/// - int soap_write_tt__Receiver(soap, tt__Receiver*) serialize to a stream
class tt__Receiver : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier of the receiver.
/// </BLOCKQUOTE></PRE>
/// Element "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Describes the configuration of the receiver.
/// </BLOCKQUOTE></PRE>
/// Element "Configuration" of XSD type "http://www.onvif.org/ver10/schema":ReceiverConfiguration.
    tt__ReceiverConfiguration*           Configuration                  1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverConfiguration is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes the configuration of a receiver.
/// </BLOCKQUOTE></PRE>
/// class tt__ReceiverConfiguration operations:
/// - soap_new_tt__ReceiverConfiguration(soap*) allocate
/// - soap_new_tt__ReceiverConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__ReceiverConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReceiverConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReceiverConfiguration(soap*, tt__ReceiverConfiguration*) deserialize from a stream
/// - int soap_write_tt__ReceiverConfiguration(soap, tt__ReceiverConfiguration*) serialize to a stream
class tt__ReceiverConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The following connection modes are defined:
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":ReceiverMode.
    enum tt__ReceiverMode                Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Details of the URI to which the receiver should connect.
/// </BLOCKQUOTE></PRE>
/// Element "MediaUri" of XSD type xs:anyURI.
    xsd__anyURI                          MediaUri                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Stream connection parameters.
/// </BLOCKQUOTE></PRE>
/// Element "StreamSetup" of XSD type "http://www.onvif.org/ver10/schema":StreamSetup.
    tt__StreamSetup*                     StreamSetup                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ReceiverStateInformation is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Contains information about a receiver's current state.
/// </BLOCKQUOTE></PRE>
/// class tt__ReceiverStateInformation operations:
/// - soap_new_tt__ReceiverStateInformation(soap*) allocate
/// - soap_new_tt__ReceiverStateInformation(soap*, int num) allocate array
/// - soap_new_req_tt__ReceiverStateInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReceiverStateInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReceiverStateInformation(soap*, tt__ReceiverStateInformation*) deserialize from a stream
/// - int soap_write_tt__ReceiverStateInformation(soap, tt__ReceiverStateInformation*) serialize to a stream
class tt__ReceiverStateInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The connection state of the receiver may have one of the following states:
/// </BLOCKQUOTE></PRE>
/// Element "State" of XSD type "http://www.onvif.org/ver10/schema":ReceiverState.
    enum tt__ReceiverState               State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not the receiver was created automatically.
/// </BLOCKQUOTE></PRE>
/// Element "AutoCreated" of XSD type xs:boolean.
    bool                                 AutoCreated                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SourceReference is a complexType.
///
/// class tt__SourceReference operations:
/// - soap_new_tt__SourceReference(soap*) allocate
/// - soap_new_tt__SourceReference(soap*, int num) allocate array
/// - soap_new_req_tt__SourceReference(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SourceReference(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SourceReference(soap*, tt__SourceReference*) deserialize from a stream
/// - int soap_write_tt__SourceReference(soap, tt__SourceReference*) serialize to a stream
class tt__SourceReference : public xsd__anyType
{ public:
/// Element "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute "Type" of XSD type xs:anyURI.
   @xsd__anyURI                          Type                           0;	///< Default attribute value="http://www.onvif.org/ver10/schema/Receiver".
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DateTimeRange is a complexType.
///
/// class tt__DateTimeRange operations:
/// - soap_new_tt__DateTimeRange(soap*) allocate
/// - soap_new_tt__DateTimeRange(soap*, int num) allocate array
/// - soap_new_req_tt__DateTimeRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DateTimeRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DateTimeRange(soap*, tt__DateTimeRange*) deserialize from a stream
/// - int soap_write_tt__DateTimeRange(soap, tt__DateTimeRange*) serialize to a stream
class tt__DateTimeRange : public xsd__anyType
{ public:
/// Element "From" of XSD type xs:dateTime.
    time_t                               From                           1;	///< Required element.
/// Element "Until" of XSD type xs:dateTime.
    time_t                               Until                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingSummary is a complexType.
///
/// class tt__RecordingSummary operations:
/// - soap_new_tt__RecordingSummary(soap*) allocate
/// - soap_new_tt__RecordingSummary(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingSummary(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingSummary(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingSummary(soap*, tt__RecordingSummary*) deserialize from a stream
/// - int soap_write_tt__RecordingSummary(soap, tt__RecordingSummary*) serialize to a stream
class tt__RecordingSummary : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The earliest point in time where there is recorded data on the device.
/// </BLOCKQUOTE></PRE>
/// Element "DataFrom" of XSD type xs:dateTime.
    time_t                               DataFrom                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The most recent point in time where there is recorded data on the device.
/// </BLOCKQUOTE></PRE>
/// Element "DataUntil" of XSD type xs:dateTime.
    time_t                               DataUntil                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The device contains this many recordings.
/// </BLOCKQUOTE></PRE>
/// Element "NumberRecordings" of XSD type xs:int.
    int                                  NumberRecordings               1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SearchScope is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A structure for defining a limited scope when searching in recorded data.
/// </BLOCKQUOTE></PRE>
/// class tt__SearchScope operations:
/// - soap_new_tt__SearchScope(soap*) allocate
/// - soap_new_tt__SearchScope(soap*, int num) allocate array
/// - soap_new_req_tt__SearchScope(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SearchScope(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SearchScope(soap*, tt__SearchScope*) deserialize from a stream
/// - int soap_write_tt__SearchScope(soap, tt__SearchScope*) serialize to a stream
class tt__SearchScope : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A list of sources that are included in the scope. If this list is included, only data from one of these sources shall be searched.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__SourceReference* of length 0..unbounded.
    std::vector<tt__SourceReference*   > IncludedSources                0;
/// <PRE><BLOCKQUOTE>
///   A list of recordings that are included in the scope. If this list is included, only data from one of these recordings shall be searched.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__RecordingReference of length 0..unbounded.
    std::vector<tt__RecordingReference > IncludedRecordings             0;
/// <PRE><BLOCKQUOTE>
///   An xpath expression used to specify what recordings to search. Only those recordings with an RecordingInformation structure that matches the filter shall be searched.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingInformationFilter" of XSD type "http://www.onvif.org/ver10/schema":XPathExpression.
    tt__XPathExpression*                 RecordingInformationFilter     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SearchScopeExtension.
    tt__SearchScopeExtension*            Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SearchScopeExtension is a complexType.
///
/// class tt__SearchScopeExtension operations:
/// - soap_new_tt__SearchScopeExtension(soap*) allocate
/// - soap_new_tt__SearchScopeExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SearchScopeExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SearchScopeExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SearchScopeExtension(soap*, tt__SearchScopeExtension*) deserialize from a stream
/// - int soap_write_tt__SearchScopeExtension(soap, tt__SearchScopeExtension*) serialize to a stream
class tt__SearchScopeExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZPositionFilter is a complexType.
///
/// class tt__PTZPositionFilter operations:
/// - soap_new_tt__PTZPositionFilter(soap*) allocate
/// - soap_new_tt__PTZPositionFilter(soap*, int num) allocate array
/// - soap_new_req_tt__PTZPositionFilter(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZPositionFilter(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZPositionFilter(soap*, tt__PTZPositionFilter*) deserialize from a stream
/// - int soap_write_tt__PTZPositionFilter(soap, tt__PTZPositionFilter*) serialize to a stream
class tt__PTZPositionFilter : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The lower boundary of the PTZ volume to look for.
/// </BLOCKQUOTE></PRE>
/// Element "MinPosition" of XSD type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       MinPosition                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The upper boundary of the PTZ volume to look for.
/// </BLOCKQUOTE></PRE>
/// Element "MaxPosition" of XSD type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       MaxPosition                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If true, search for when entering the specified PTZ volume.
/// </BLOCKQUOTE></PRE>
/// Element "EnterOrExit" of XSD type xs:boolean.
    bool                                 EnterOrExit                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataFilter is a complexType.
///
/// class tt__MetadataFilter operations:
/// - soap_new_tt__MetadataFilter(soap*) allocate
/// - soap_new_tt__MetadataFilter(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataFilter(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataFilter(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataFilter(soap*, tt__MetadataFilter*) deserialize from a stream
/// - int soap_write_tt__MetadataFilter(soap, tt__MetadataFilter*) serialize to a stream
class tt__MetadataFilter : public xsd__anyType
{ public:
/// Element "MetadataStreamFilter" of XSD type "http://www.onvif.org/ver10/schema":XPathExpression.
    tt__XPathExpression                  MetadataStreamFilter           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FindRecordingResultList is a complexType.
///
/// class tt__FindRecordingResultList operations:
/// - soap_new_tt__FindRecordingResultList(soap*) allocate
/// - soap_new_tt__FindRecordingResultList(soap*, int num) allocate array
/// - soap_new_req_tt__FindRecordingResultList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindRecordingResultList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindRecordingResultList(soap*, tt__FindRecordingResultList*) deserialize from a stream
/// - int soap_write_tt__FindRecordingResultList(soap, tt__FindRecordingResultList*) serialize to a stream
class tt__FindRecordingResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
/// Element "SearchState" of XSD type "http://www.onvif.org/ver10/schema":SearchState.
    enum tt__SearchState                 SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A RecordingInformation structure for each found recording matching the search.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__RecordingInformation* of length 0..unbounded.
    std::vector<tt__RecordingInformation*> RecordingInformation           0;
};

/// @brief "http://www.onvif.org/ver10/schema":FindEventResultList is a complexType.
///
/// class tt__FindEventResultList operations:
/// - soap_new_tt__FindEventResultList(soap*) allocate
/// - soap_new_tt__FindEventResultList(soap*, int num) allocate array
/// - soap_new_req_tt__FindEventResultList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindEventResultList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindEventResultList(soap*, tt__FindEventResultList*) deserialize from a stream
/// - int soap_write_tt__FindEventResultList(soap, tt__FindEventResultList*) serialize to a stream
class tt__FindEventResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
/// Element "SearchState" of XSD type "http://www.onvif.org/ver10/schema":SearchState.
    enum tt__SearchState                 SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A FindEventResult structure for each found event matching the search.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__FindEventResult* of length 0..unbounded.
    std::vector<tt__FindEventResult*   > Result                         0;
};

/// @brief "http://www.onvif.org/ver10/schema":FindEventResult is a complexType.
///
/// class tt__FindEventResult operations:
/// - soap_new_tt__FindEventResult(soap*) allocate
/// - soap_new_tt__FindEventResult(soap*, int num) allocate array
/// - soap_new_req_tt__FindEventResult(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindEventResult(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindEventResult(soap*, tt__FindEventResult*) deserialize from a stream
/// - int soap_write_tt__FindEventResult(soap, tt__FindEventResult*) serialize to a stream
class tt__FindEventResult : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The recording where this event was found. Empty string if no recording is associated with this event.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the track where this event was found. Empty string if no track is associated with this event.
/// </BLOCKQUOTE></PRE>
/// Element "TrackToken" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time when the event occured.
/// </BLOCKQUOTE></PRE>
/// Element "Time" of XSD type xs:dateTime.
    time_t                               Time                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The description of the event.
/// </BLOCKQUOTE></PRE>
/// Element "Event" of XSD type "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType.
    wsnt__NotificationMessageHolderType*  Event                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If true, indicates that the event is a virtual event generated for this particular search session to give the state of a property at the start time of the search.
/// </BLOCKQUOTE></PRE>
/// Element "StartStateEvent" of XSD type xs:boolean.
    bool                                 StartStateEvent                1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FindPTZPositionResultList is a complexType.
///
/// class tt__FindPTZPositionResultList operations:
/// - soap_new_tt__FindPTZPositionResultList(soap*) allocate
/// - soap_new_tt__FindPTZPositionResultList(soap*, int num) allocate array
/// - soap_new_req_tt__FindPTZPositionResultList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindPTZPositionResultList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindPTZPositionResultList(soap*, tt__FindPTZPositionResultList*) deserialize from a stream
/// - int soap_write_tt__FindPTZPositionResultList(soap, tt__FindPTZPositionResultList*) serialize to a stream
class tt__FindPTZPositionResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
/// Element "SearchState" of XSD type "http://www.onvif.org/ver10/schema":SearchState.
    enum tt__SearchState                 SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A FindPTZPositionResult structure for each found PTZ position matching the search.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__FindPTZPositionResult* of length 0..unbounded.
    std::vector<tt__FindPTZPositionResult*> Result                         0;
};

/// @brief "http://www.onvif.org/ver10/schema":FindPTZPositionResult is a complexType.
///
/// class tt__FindPTZPositionResult operations:
/// - soap_new_tt__FindPTZPositionResult(soap*) allocate
/// - soap_new_tt__FindPTZPositionResult(soap*, int num) allocate array
/// - soap_new_req_tt__FindPTZPositionResult(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindPTZPositionResult(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindPTZPositionResult(soap*, tt__FindPTZPositionResult*) deserialize from a stream
/// - int soap_write_tt__FindPTZPositionResult(soap, tt__FindPTZPositionResult*) serialize to a stream
class tt__FindPTZPositionResult : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the recording containing the PTZ position.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the metadata track containing the PTZ position.
/// </BLOCKQUOTE></PRE>
/// Element "TrackToken" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time when the PTZ position was valid.
/// </BLOCKQUOTE></PRE>
/// Element "Time" of XSD type xs:dateTime.
    time_t                               Time                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The PTZ position.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       Position                       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FindMetadataResultList is a complexType.
///
/// class tt__FindMetadataResultList operations:
/// - soap_new_tt__FindMetadataResultList(soap*) allocate
/// - soap_new_tt__FindMetadataResultList(soap*, int num) allocate array
/// - soap_new_req_tt__FindMetadataResultList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindMetadataResultList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindMetadataResultList(soap*, tt__FindMetadataResultList*) deserialize from a stream
/// - int soap_write_tt__FindMetadataResultList(soap, tt__FindMetadataResultList*) serialize to a stream
class tt__FindMetadataResultList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The state of the search when the result is returned. Indicates if there can be more results, or if the search is completed.
/// </BLOCKQUOTE></PRE>
/// Element "SearchState" of XSD type "http://www.onvif.org/ver10/schema":SearchState.
    enum tt__SearchState                 SearchState                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A FindMetadataResult structure for each found set of Metadata matching the search.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__FindMetadataResult* of length 0..unbounded.
    std::vector<tt__FindMetadataResult*> Result                         0;
};

/// @brief "http://www.onvif.org/ver10/schema":FindMetadataResult is a complexType.
///
/// class tt__FindMetadataResult operations:
/// - soap_new_tt__FindMetadataResult(soap*) allocate
/// - soap_new_tt__FindMetadataResult(soap*, int num) allocate array
/// - soap_new_req_tt__FindMetadataResult(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FindMetadataResult(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FindMetadataResult(soap*, tt__FindMetadataResult*) deserialize from a stream
/// - int soap_write_tt__FindMetadataResult(soap, tt__FindMetadataResult*) serialize to a stream
class tt__FindMetadataResult : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the recording containing the metadata.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A reference to the metadata track containing the matching metadata.
/// </BLOCKQUOTE></PRE>
/// Element "TrackToken" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The point in time when the matching metadata occurs in the metadata track.
/// </BLOCKQUOTE></PRE>
/// Element "Time" of XSD type xs:dateTime.
    time_t                               Time                           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingInformation is a complexType.
///
/// class tt__RecordingInformation operations:
/// - soap_new_tt__RecordingInformation(soap*) allocate
/// - soap_new_tt__RecordingInformation(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingInformation(soap*, tt__RecordingInformation*) deserialize from a stream
/// - int soap_write_tt__RecordingInformation(soap, tt__RecordingInformation*) serialize to a stream
class tt__RecordingInformation : public xsd__anyType
{ public:
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Information about the source of the recording. This gives a description of where the data in the recording comes from. Since a single
///   recording is intended to record related material, there is just one source. It is indicates the physical location or the
///   major data source for the recording. Currently the recordingconfiguration cannot describe each individual data source.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.onvif.org/ver10/schema":RecordingSourceInformation.
    tt__RecordingSourceInformation*      Source                         1;	///< Required element.
/// Element "EarliestRecording" of XSD type xs:dateTime.
    time_t*                              EarliestRecording              0;	///< Optional element.
/// Element "LatestRecording" of XSD type xs:dateTime.
    time_t*                              LatestRecording                0;	///< Optional element.
/// Element "Content" of XSD type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Content                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Basic information about the track. Note that a track may represent a single contiguous time span or consist of multiple slices.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__TrackInformation* of length 0..unbounded.
    std::vector<tt__TrackInformation*  > Track                          0;
/// Element "RecordingStatus" of XSD type "http://www.onvif.org/ver10/schema":RecordingStatus.
    enum tt__RecordingStatus             RecordingStatus                1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingSourceInformation is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A set of informative desciptions of a data source. The Search searvice allows a client to filter on recordings based on information in this structure.
/// </BLOCKQUOTE></PRE>
/// class tt__RecordingSourceInformation operations:
/// - soap_new_tt__RecordingSourceInformation(soap*) allocate
/// - soap_new_tt__RecordingSourceInformation(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingSourceInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingSourceInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingSourceInformation(soap*, tt__RecordingSourceInformation*) deserialize from a stream
/// - int soap_write_tt__RecordingSourceInformation(soap, tt__RecordingSourceInformation*) serialize to a stream
class tt__RecordingSourceInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier for the source chosen by the client that creates the structure.
///   This identifier is opaque to the device. Clients may use any type of URI for this field. A device shall support at least 128 characters.
/// </BLOCKQUOTE></PRE>
/// Element "SourceId" of XSD type xs:anyURI.
    xsd__anyURI                          SourceId                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative user readable name of the source, e.g. "Camera23". A device shall support at least 20 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the physical location of the source, e.g. the coordinates on a map.
/// </BLOCKQUOTE></PRE>
/// Element "Location" of XSD type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Location                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the source.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   URI provided by the service supplying data to be recorded. A device shall support at least 128 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Address" of XSD type xs:anyURI.
    xsd__anyURI                          Address                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackInformation is a complexType.
///
/// class tt__TrackInformation operations:
/// - soap_new_tt__TrackInformation(soap*) allocate
/// - soap_new_tt__TrackInformation(soap*, int num) allocate array
/// - soap_new_req_tt__TrackInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TrackInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TrackInformation(soap*, tt__TrackInformation*) deserialize from a stream
/// - int soap_write_tt__TrackInformation(soap, tt__TrackInformation*) serialize to a stream
class tt__TrackInformation : public xsd__anyType
{ public:
/// Element "TrackToken" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of the track: "Video", "Audio" or "Metadata".
///   The track shall only be able to hold data of that type.
/// </BLOCKQUOTE></PRE>
/// Element "TrackType" of XSD type "http://www.onvif.org/ver10/schema":TrackType.
    enum tt__TrackType                   TrackType                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the contents of the track.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The start date and time of the oldest recorded data in the track.
/// </BLOCKQUOTE></PRE>
/// Element "DataFrom" of XSD type xs:dateTime.
    time_t                               DataFrom                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The stop date and time of the newest recorded data in the track.
/// </BLOCKQUOTE></PRE>
/// Element "DataTo" of XSD type xs:dateTime.
    time_t                               DataTo                         1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MediaAttributes is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   A set of media attributes valid for a recording at a point in time or for a time interval.
/// </BLOCKQUOTE></PRE>
/// class tt__MediaAttributes operations:
/// - soap_new_tt__MediaAttributes(soap*) allocate
/// - soap_new_tt__MediaAttributes(soap*, int num) allocate array
/// - soap_new_req_tt__MediaAttributes(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MediaAttributes(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MediaAttributes(soap*, tt__MediaAttributes*) deserialize from a stream
/// - int soap_write_tt__MediaAttributes(soap, tt__MediaAttributes*) serialize to a stream
class tt__MediaAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   A reference to the recording that has these attributes.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A set of attributes for each track.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__TrackAttributes* of length 0..unbounded.
    std::vector<tt__TrackAttributes*   > TrackAttributes                0;
/// <PRE><BLOCKQUOTE>
///   The attributes are valid from this point in time in the recording.
/// </BLOCKQUOTE></PRE>
/// Element "From" of XSD type xs:dateTime.
    time_t                               From                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The attributes are valid until this point in time in the recording. Can be equal to 'From' to indicate that the attributes are only known to be valid for this particular point in time.
/// </BLOCKQUOTE></PRE>
/// Element "Until" of XSD type xs:dateTime.
    time_t                               Until                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackAttributes is a complexType.
///
/// class tt__TrackAttributes operations:
/// - soap_new_tt__TrackAttributes(soap*) allocate
/// - soap_new_tt__TrackAttributes(soap*, int num) allocate array
/// - soap_new_req_tt__TrackAttributes(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TrackAttributes(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TrackAttributes(soap*, tt__TrackAttributes*) deserialize from a stream
/// - int soap_write_tt__TrackAttributes(soap, tt__TrackAttributes*) serialize to a stream
class tt__TrackAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The basic information about the track. Note that a track may represent a single contiguous time span or consist of multiple slices.
/// </BLOCKQUOTE></PRE>
/// Element "TrackInformation" of XSD type "http://www.onvif.org/ver10/schema":TrackInformation.
    tt__TrackInformation*                TrackInformation               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If the track is a video track, exactly one of this structure shall be present and contain the video attributes.
/// </BLOCKQUOTE></PRE>
/// Element "VideoAttributes" of XSD type "http://www.onvif.org/ver10/schema":VideoAttributes.
    tt__VideoAttributes*                 VideoAttributes                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the track is an audio track, exactly one of this structure shall be present and contain the audio attributes.
/// </BLOCKQUOTE></PRE>
/// Element "AudioAttributes" of XSD type "http://www.onvif.org/ver10/schema":AudioAttributes.
    tt__AudioAttributes*                 AudioAttributes                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the track is an metadata track, exactly one of this structure shall be present and contain the metadata attributes.
/// </BLOCKQUOTE></PRE>
/// Element "MetadataAttributes" of XSD type "http://www.onvif.org/ver10/schema":MetadataAttributes.
    tt__MetadataAttributes*              MetadataAttributes             0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":TrackAttributesExtension.
    tt__TrackAttributesExtension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackAttributesExtension is a complexType.
///
/// class tt__TrackAttributesExtension operations:
/// - soap_new_tt__TrackAttributesExtension(soap*) allocate
/// - soap_new_tt__TrackAttributesExtension(soap*, int num) allocate array
/// - soap_new_req_tt__TrackAttributesExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TrackAttributesExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TrackAttributesExtension(soap*, tt__TrackAttributesExtension*) deserialize from a stream
/// - int soap_write_tt__TrackAttributesExtension(soap, tt__TrackAttributesExtension*) serialize to a stream
class tt__TrackAttributesExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoAttributes is a complexType.
///
/// class tt__VideoAttributes operations:
/// - soap_new_tt__VideoAttributes(soap*) allocate
/// - soap_new_tt__VideoAttributes(soap*, int num) allocate array
/// - soap_new_req_tt__VideoAttributes(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoAttributes(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoAttributes(soap*, tt__VideoAttributes*) deserialize from a stream
/// - int soap_write_tt__VideoAttributes(soap, tt__VideoAttributes*) serialize to a stream
class tt__VideoAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Average bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type xs:int.
    int*                                 Bitrate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The width of the video in pixels.
/// </BLOCKQUOTE></PRE>
/// Element "Width" of XSD type xs:int.
    int                                  Width                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The height of the video in pixels.
/// </BLOCKQUOTE></PRE>
/// Element "Height" of XSD type xs:int.
    int                                  Height                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Video encoding of the track. Use value from tt:VideoEncoding for MPEG4. Otherwise use values from tt:VideoEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Average framerate in frames per second.
/// </BLOCKQUOTE></PRE>
/// Element "Framerate" of XSD type xs:float.
    float                                Framerate                      1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioAttributes is a complexType.
///
/// class tt__AudioAttributes operations:
/// - soap_new_tt__AudioAttributes(soap*) allocate
/// - soap_new_tt__AudioAttributes(soap*, int num) allocate array
/// - soap_new_req_tt__AudioAttributes(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioAttributes(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioAttributes(soap*, tt__AudioAttributes*) deserialize from a stream
/// - int soap_write_tt__AudioAttributes(soap, tt__AudioAttributes*) serialize to a stream
class tt__AudioAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type xs:int.
    int*                                 Bitrate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Audio encoding of the track. Use values from tt:AudioEncoding for G711 and AAC. Otherwise use values from tt:AudioEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The sample rate in kHz.
/// </BLOCKQUOTE></PRE>
/// Element "Samplerate" of XSD type xs:int.
    int                                  Samplerate                     1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataAttributes is a complexType.
///
/// class tt__MetadataAttributes operations:
/// - soap_new_tt__MetadataAttributes(soap*) allocate
/// - soap_new_tt__MetadataAttributes(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataAttributes(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataAttributes(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataAttributes(soap*, tt__MetadataAttributes*) deserialize from a stream
/// - int soap_write_tt__MetadataAttributes(soap, tt__MetadataAttributes*) serialize to a stream
class tt__MetadataAttributes : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates that there can be PTZ data in the metadata track in the specified time interval.
/// </BLOCKQUOTE></PRE>
/// Element "CanContainPTZ" of XSD type xs:boolean.
    bool                                 CanContainPTZ                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates that there can be analytics data in the metadata track in the specified time interval.
/// </BLOCKQUOTE></PRE>
/// Element "CanContainAnalytics" of XSD type xs:boolean.
    bool                                 CanContainAnalytics            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates that there can be notifications in the metadata track in the specified time interval.
/// </BLOCKQUOTE></PRE>
/// Element "CanContainNotifications" of XSD type xs:boolean.
    bool                                 CanContainNotifications        1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   List of all PTZ spaces active for recording. Note that events are only recorded on position changes and the actual point of recording may not necessarily contain an event of the specified type.
/// </BLOCKQUOTE></PRE>
/// Attribute "PtzSpaces" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  PtzSpaces                      0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingConfiguration is a complexType.
///
/// class tt__RecordingConfiguration operations:
/// - soap_new_tt__RecordingConfiguration(soap*) allocate
/// - soap_new_tt__RecordingConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingConfiguration(soap*, tt__RecordingConfiguration*) deserialize from a stream
/// - int soap_write_tt__RecordingConfiguration(soap, tt__RecordingConfiguration*) serialize to a stream
class tt__RecordingConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Information about the source of the recording.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.onvif.org/ver10/schema":RecordingSourceInformation.
    tt__RecordingSourceInformation*      Source                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the source.
/// </BLOCKQUOTE></PRE>
/// Element "Content" of XSD type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Content                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Sspecifies the maximum time that data in any track within the
///   recording shall be stored. The device shall delete any data older than the maximum retention
///   time. Such data shall not be accessible anymore. If the MaximumRetentionPeriod is set to 0,
///   the device shall not limit the retention time of stored data, except by resource constraints.
///   Whatever the value of MaximumRetentionTime, the device may automatically delete
///   recordings to free up storage space for new recordings.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumRetentionTime" of XSD type xs:duration.
    xsd__duration                        MaximumRetentionTime           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":TrackConfiguration is a complexType.
///
/// class tt__TrackConfiguration operations:
/// - soap_new_tt__TrackConfiguration(soap*) allocate
/// - soap_new_tt__TrackConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__TrackConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TrackConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TrackConfiguration(soap*, tt__TrackConfiguration*) deserialize from a stream
/// - int soap_write_tt__TrackConfiguration(soap, tt__TrackConfiguration*) serialize to a stream
class tt__TrackConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Type of the track. It shall be equal to the strings Video,
///   Audio or Metadata. The track shall only be able to hold data of that type.
/// </BLOCKQUOTE></PRE>
/// Element "TrackType" of XSD type "http://www.onvif.org/ver10/schema":TrackType.
    enum tt__TrackType                   TrackType                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Informative description of the track.
/// </BLOCKQUOTE></PRE>
/// Element "Description" of XSD type "http://www.onvif.org/ver10/schema":Description.
    tt__Description                      Description                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":GetRecordingsResponseItem is a complexType.
///
/// class tt__GetRecordingsResponseItem operations:
/// - soap_new_tt__GetRecordingsResponseItem(soap*) allocate
/// - soap_new_tt__GetRecordingsResponseItem(soap*, int num) allocate array
/// - soap_new_req_tt__GetRecordingsResponseItem(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GetRecordingsResponseItem(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GetRecordingsResponseItem(soap*, tt__GetRecordingsResponseItem*) deserialize from a stream
/// - int soap_write_tt__GetRecordingsResponseItem(soap, tt__GetRecordingsResponseItem*) serialize to a stream
class tt__GetRecordingsResponseItem : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Token of the recording.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configuration of the recording.
/// </BLOCKQUOTE></PRE>
/// Element "Configuration" of XSD type "http://www.onvif.org/ver10/schema":RecordingConfiguration.
    tt__RecordingConfiguration*          Configuration                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of tracks.
/// </BLOCKQUOTE></PRE>
/// Element "Tracks" of XSD type "http://www.onvif.org/ver10/schema":GetTracksResponseList.
    tt__GetTracksResponseList*           Tracks                         1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":GetTracksResponseList is a complexType.
///
/// class tt__GetTracksResponseList operations:
/// - soap_new_tt__GetTracksResponseList(soap*) allocate
/// - soap_new_tt__GetTracksResponseList(soap*, int num) allocate array
/// - soap_new_req_tt__GetTracksResponseList(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GetTracksResponseList(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GetTracksResponseList(soap*, tt__GetTracksResponseList*) deserialize from a stream
/// - int soap_write_tt__GetTracksResponseList(soap, tt__GetTracksResponseList*) serialize to a stream
class tt__GetTracksResponseList : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Configuration of a track.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__GetTracksResponseItem* of length 0..unbounded.
    std::vector<tt__GetTracksResponseItem*> Track                          0;
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":GetTracksResponseItem is a complexType.
///
/// class tt__GetTracksResponseItem operations:
/// - soap_new_tt__GetTracksResponseItem(soap*) allocate
/// - soap_new_tt__GetTracksResponseItem(soap*, int num) allocate array
/// - soap_new_req_tt__GetTracksResponseItem(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GetTracksResponseItem(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GetTracksResponseItem(soap*, tt__GetTracksResponseItem*) deserialize from a stream
/// - int soap_write_tt__GetTracksResponseItem(soap, tt__GetTracksResponseItem*) serialize to a stream
class tt__GetTracksResponseItem : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Token of the track.
/// </BLOCKQUOTE></PRE>
/// Element "TrackToken" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   TrackToken                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configuration of the track.
/// </BLOCKQUOTE></PRE>
/// Element "Configuration" of XSD type "http://www.onvif.org/ver10/schema":TrackConfiguration.
    tt__TrackConfiguration*              Configuration                  1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobConfiguration is a complexType.
///
/// class tt__RecordingJobConfiguration operations:
/// - soap_new_tt__RecordingJobConfiguration(soap*) allocate
/// - soap_new_tt__RecordingJobConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobConfiguration(soap*, tt__RecordingJobConfiguration*) deserialize from a stream
/// - int soap_write_tt__RecordingJobConfiguration(soap, tt__RecordingJobConfiguration*) serialize to a stream
class tt__RecordingJobConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the recording to which this job shall store the received data.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The mode of the job. If it is idle, nothing shall happen. If it is active, the device shall try
///   to obtain data from the receivers. A client shall use GetRecordingJobState to determine if data transfer is really taking place.<br/>
///   The only valid values for Mode shall be Idle and Active.
/// </BLOCKQUOTE></PRE>
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobMode.
    tt__RecordingJobMode                 Mode                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   This shall be a non-negative number. If there are multiple recording jobs that store data to
///   the same track, the device will only store the data for the recording job with the highest
///   priority. The priority is specified per recording job, but the device shall determine the priority
///   of each track individually. If there are two recording jobs with the same priority, the device
///   shall record the data corresponding to the recording job that was activated the latest.
/// </BLOCKQUOTE></PRE>
/// Element "Priority" of XSD type xs:int.
    int                                  Priority                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Source of the recording.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__RecordingJobSource* of length 0..unbounded.
    std::vector<tt__RecordingJobSource*> Source                         0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension.
    tt__RecordingJobConfigurationExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This attribute adds an additional requirement for activating the recording job. If this optional field is provided the job shall only record if the schedule exists and is active.
/// </BLOCKQUOTE></PRE>
/// Attribute "ScheduleToken" has no type or ref: assuming string content.
   @std::string                          ScheduleToken                  0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobConfigurationExtension is a complexType.
///
/// class tt__RecordingJobConfigurationExtension operations:
/// - soap_new_tt__RecordingJobConfigurationExtension(soap*) allocate
/// - soap_new_tt__RecordingJobConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobConfigurationExtension(soap*, tt__RecordingJobConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__RecordingJobConfigurationExtension(soap, tt__RecordingJobConfigurationExtension*) serialize to a stream
class tt__RecordingJobConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobSource is a complexType.
///
/// class tt__RecordingJobSource operations:
/// - soap_new_tt__RecordingJobSource(soap*) allocate
/// - soap_new_tt__RecordingJobSource(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobSource(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobSource(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobSource(soap*, tt__RecordingJobSource*) deserialize from a stream
/// - int soap_write_tt__RecordingJobSource(soap, tt__RecordingJobSource*) serialize to a stream
class tt__RecordingJobSource : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   This field shall be a reference to the source of the data. The type of the source
///   is determined by the attribute Type in the SourceToken structure. If Type is
///   http://www.onvif.org/ver10/schema/Receiver, the token is a ReceiverReference. In this case
///   the device shall receive the data over the network. If Type is
///   http://www.onvif.org/ver10/schema/Profile, the token identifies a media profile, instructing the
///   device to obtain data from a profile that exists on the local device.
/// </BLOCKQUOTE></PRE>
/// Element "SourceToken" of XSD type "http://www.onvif.org/ver10/schema":SourceReference.
    tt__SourceReference*                 SourceToken                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If this field is TRUE, and if the SourceToken is omitted, the device
///   shall create a receiver object (through the receiver service) and assign the
///   ReceiverReference to the SourceToken field. When retrieving the RecordingJobConfiguration
///   from the device, the AutoCreateReceiver field shall never be present.
/// </BLOCKQUOTE></PRE>
/// Element "AutoCreateReceiver" of XSD type xs:boolean.
    bool*                                AutoCreateReceiver             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of tracks associated with the recording.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__RecordingJobTrack* of length 0..unbounded.
    std::vector<tt__RecordingJobTrack* > Tracks                         0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension.
    tt__RecordingJobSourceExtension*     Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobSourceExtension is a complexType.
///
/// class tt__RecordingJobSourceExtension operations:
/// - soap_new_tt__RecordingJobSourceExtension(soap*) allocate
/// - soap_new_tt__RecordingJobSourceExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobSourceExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobSourceExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobSourceExtension(soap*, tt__RecordingJobSourceExtension*) deserialize from a stream
/// - int soap_write_tt__RecordingJobSourceExtension(soap, tt__RecordingJobSourceExtension*) serialize to a stream
class tt__RecordingJobSourceExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobTrack is a complexType.
///
/// class tt__RecordingJobTrack operations:
/// - soap_new_tt__RecordingJobTrack(soap*) allocate
/// - soap_new_tt__RecordingJobTrack(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobTrack(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobTrack(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobTrack(soap*, tt__RecordingJobTrack*) deserialize from a stream
/// - int soap_write_tt__RecordingJobTrack(soap, tt__RecordingJobTrack*) serialize to a stream
class tt__RecordingJobTrack : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   If the received RTSP stream contains multiple tracks of the same type, the
///   SourceTag differentiates between those Tracks. This field can be ignored in case of recording a local source.
/// </BLOCKQUOTE></PRE>
/// Element "SourceTag" of XSD type xs:string.
    std::string                          SourceTag                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The destination is the tracktoken of the track to which the device shall store the
///   received data.
/// </BLOCKQUOTE></PRE>
/// Element "Destination" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   Destination                    1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateInformation is a complexType.
///
/// class tt__RecordingJobStateInformation operations:
/// - soap_new_tt__RecordingJobStateInformation(soap*) allocate
/// - soap_new_tt__RecordingJobStateInformation(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobStateInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobStateInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobStateInformation(soap*, tt__RecordingJobStateInformation*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateInformation(soap, tt__RecordingJobStateInformation*) serialize to a stream
class tt__RecordingJobStateInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identification of the recording that the recording job records to.
/// </BLOCKQUOTE></PRE>
/// Element "RecordingToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingReference.
    tt__RecordingReference               RecordingToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Holds the aggregated state over the whole RecordingJobInformation structure.
/// </BLOCKQUOTE></PRE>
/// Element "State" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobState.
    tt__RecordingJobState                State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifies the data source of the recording job.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__RecordingJobStateSource* of length 0..unbounded.
    std::vector<tt__RecordingJobStateSource*> Sources                        0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension.
    tt__RecordingJobStateInformationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateInformationExtension is a complexType.
///
/// class tt__RecordingJobStateInformationExtension operations:
/// - soap_new_tt__RecordingJobStateInformationExtension(soap*) allocate
/// - soap_new_tt__RecordingJobStateInformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobStateInformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobStateInformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobStateInformationExtension(soap*, tt__RecordingJobStateInformationExtension*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateInformationExtension(soap, tt__RecordingJobStateInformationExtension*) serialize to a stream
class tt__RecordingJobStateInformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateSource is a complexType.
///
/// class tt__RecordingJobStateSource operations:
/// - soap_new_tt__RecordingJobStateSource(soap*) allocate
/// - soap_new_tt__RecordingJobStateSource(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobStateSource(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobStateSource(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobStateSource(soap*, tt__RecordingJobStateSource*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateSource(soap, tt__RecordingJobStateSource*) serialize to a stream
class tt__RecordingJobStateSource : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the data source of the recording job.
/// </BLOCKQUOTE></PRE>
/// Element "SourceToken" of XSD type "http://www.onvif.org/ver10/schema":SourceReference.
    tt__SourceReference*                 SourceToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Holds the aggregated state over all substructures of RecordingJobStateSource.
/// </BLOCKQUOTE></PRE>
/// Element "State" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobState.
    tt__RecordingJobState                State                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of track items.
/// </BLOCKQUOTE></PRE>
/// Element "Tracks" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobStateTracks.
    tt__RecordingJobStateTracks*         Tracks                         1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateTracks is a complexType.
///
/// class tt__RecordingJobStateTracks operations:
/// - soap_new_tt__RecordingJobStateTracks(soap*) allocate
/// - soap_new_tt__RecordingJobStateTracks(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobStateTracks(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobStateTracks(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobStateTracks(soap*, tt__RecordingJobStateTracks*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateTracks(soap, tt__RecordingJobStateTracks*) serialize to a stream
class tt__RecordingJobStateTracks : public xsd__anyType
{ public:
/// Vector of tt__RecordingJobStateTrack* of length 0..unbounded.
    std::vector<tt__RecordingJobStateTrack*> Track                          0;
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":RecordingJobStateTrack is a complexType.
///
/// class tt__RecordingJobStateTrack operations:
/// - soap_new_tt__RecordingJobStateTrack(soap*) allocate
/// - soap_new_tt__RecordingJobStateTrack(soap*, int num) allocate array
/// - soap_new_req_tt__RecordingJobStateTrack(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RecordingJobStateTrack(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RecordingJobStateTrack(soap*, tt__RecordingJobStateTrack*) deserialize from a stream
/// - int soap_write_tt__RecordingJobStateTrack(soap, tt__RecordingJobStateTrack*) serialize to a stream
class tt__RecordingJobStateTrack : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifies the track of the data source that provides the data.
/// </BLOCKQUOTE></PRE>
/// Element "SourceTag" of XSD type xs:string.
    std::string                          SourceTag                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Indicates the destination track.
/// </BLOCKQUOTE></PRE>
/// Element "Destination" of XSD type "http://www.onvif.org/ver10/schema":TrackReference.
    tt__TrackReference                   Destination                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optionally holds an implementation defined string value that describes the error.
///   The string should be in the English language.
/// </BLOCKQUOTE></PRE>
/// Element "Error" of XSD type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Provides the job state of the track. The valid
///   values of state shall be Idle, Active and Error. If state equals Error, the Error field may be filled in with an implementation defined value.
/// </BLOCKQUOTE></PRE>
/// Element "State" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobState.
    tt__RecordingJobState                State                          1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":GetRecordingJobsResponseItem is a complexType.
///
/// class tt__GetRecordingJobsResponseItem operations:
/// - soap_new_tt__GetRecordingJobsResponseItem(soap*) allocate
/// - soap_new_tt__GetRecordingJobsResponseItem(soap*, int num) allocate array
/// - soap_new_req_tt__GetRecordingJobsResponseItem(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GetRecordingJobsResponseItem(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GetRecordingJobsResponseItem(soap*, tt__GetRecordingJobsResponseItem*) deserialize from a stream
/// - int soap_write_tt__GetRecordingJobsResponseItem(soap, tt__GetRecordingJobsResponseItem*) serialize to a stream
class tt__GetRecordingJobsResponseItem : public xsd__anyType
{ public:
/// Element "JobToken" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobReference.
    tt__RecordingJobReference            JobToken                       1;	///< Required element.
/// Element "JobConfiguration" of XSD type "http://www.onvif.org/ver10/schema":RecordingJobConfiguration.
    tt__RecordingJobConfiguration*       JobConfiguration               1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ReplayConfiguration is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Configuration parameters for the replay service.
/// </BLOCKQUOTE></PRE>
/// class tt__ReplayConfiguration operations:
/// - soap_new_tt__ReplayConfiguration(soap*) allocate
/// - soap_new_tt__ReplayConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__ReplayConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ReplayConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ReplayConfiguration(soap*, tt__ReplayConfiguration*) deserialize from a stream
/// - int soap_write_tt__ReplayConfiguration(soap, tt__ReplayConfiguration*) serialize to a stream
class tt__ReplayConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The RTSP session timeout.
/// </BLOCKQUOTE></PRE>
/// Element "SessionTimeout" of XSD type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration is a complexType.
///
/// class tt__AnalyticsDeviceEngineConfiguration operations:
/// - soap_new_tt__AnalyticsDeviceEngineConfiguration(soap*) allocate
/// - soap_new_tt__AnalyticsDeviceEngineConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsDeviceEngineConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsDeviceEngineConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsDeviceEngineConfiguration(soap*, tt__AnalyticsDeviceEngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceEngineConfiguration(soap, tt__AnalyticsDeviceEngineConfiguration*) serialize to a stream
class tt__AnalyticsDeviceEngineConfiguration : public xsd__anyType
{ public:
/// Vector of tt__EngineConfiguration* of length 1..unbounded.
    std::vector<tt__EngineConfiguration*> EngineConfiguration            1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension.
    tt__AnalyticsDeviceEngineConfigurationExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfigurationExtension is a complexType.
///
/// class tt__AnalyticsDeviceEngineConfigurationExtension operations:
/// - soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(soap*) allocate
/// - soap_new_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsDeviceEngineConfigurationExtension(soap*, tt__AnalyticsDeviceEngineConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsDeviceEngineConfigurationExtension(soap, tt__AnalyticsDeviceEngineConfigurationExtension*) serialize to a stream
class tt__AnalyticsDeviceEngineConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":EngineConfiguration is a complexType.
///
/// class tt__EngineConfiguration operations:
/// - soap_new_tt__EngineConfiguration(soap*) allocate
/// - soap_new_tt__EngineConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__EngineConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EngineConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EngineConfiguration(soap*, tt__EngineConfiguration*) deserialize from a stream
/// - int soap_write_tt__EngineConfiguration(soap, tt__EngineConfiguration*) serialize to a stream
class tt__EngineConfiguration : public xsd__anyType
{ public:
/// Element "VideoAnalyticsConfiguration" of XSD type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
    tt__VideoAnalyticsConfiguration*     VideoAnalyticsConfiguration    1;	///< Required element.
/// Element "AnalyticsEngineInputInfo" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo.
    tt__AnalyticsEngineInputInfo*        AnalyticsEngineInputInfo       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfo is a complexType.
///
/// class tt__AnalyticsEngineInputInfo operations:
/// - soap_new_tt__AnalyticsEngineInputInfo(soap*) allocate
/// - soap_new_tt__AnalyticsEngineInputInfo(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngineInputInfo(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngineInputInfo(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngineInputInfo(soap*, tt__AnalyticsEngineInputInfo*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineInputInfo(soap, tt__AnalyticsEngineInputInfo*) serialize to a stream
class tt__AnalyticsEngineInputInfo : public xsd__anyType
{ public:
/// Element "InputInfo" of XSD type "http://www.onvif.org/ver10/schema":Config.
    tt__Config*                          InputInfo                      0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension.
    tt__AnalyticsEngineInputInfoExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineInputInfoExtension is a complexType.
///
/// class tt__AnalyticsEngineInputInfoExtension operations:
/// - soap_new_tt__AnalyticsEngineInputInfoExtension(soap*) allocate
/// - soap_new_tt__AnalyticsEngineInputInfoExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngineInputInfoExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngineInputInfoExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngineInputInfoExtension(soap*, tt__AnalyticsEngineInputInfoExtension*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineInputInfoExtension(soap, tt__AnalyticsEngineInputInfoExtension*) serialize to a stream
class tt__AnalyticsEngineInputInfoExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":SourceIdentification is a complexType.
///
/// class tt__SourceIdentification operations:
/// - soap_new_tt__SourceIdentification(soap*) allocate
/// - soap_new_tt__SourceIdentification(soap*, int num) allocate array
/// - soap_new_req_tt__SourceIdentification(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SourceIdentification(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SourceIdentification(soap*, tt__SourceIdentification*) deserialize from a stream
/// - int soap_write_tt__SourceIdentification(soap, tt__SourceIdentification*) serialize to a stream
class tt__SourceIdentification : public xsd__anyType
{ public:
/// Element "Name" of XSD type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > Token                          1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":SourceIdentificationExtension.
    tt__SourceIdentificationExtension*   Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":SourceIdentificationExtension is a complexType.
///
/// class tt__SourceIdentificationExtension operations:
/// - soap_new_tt__SourceIdentificationExtension(soap*) allocate
/// - soap_new_tt__SourceIdentificationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__SourceIdentificationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__SourceIdentificationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__SourceIdentificationExtension(soap*, tt__SourceIdentificationExtension*) deserialize from a stream
/// - int soap_write_tt__SourceIdentificationExtension(soap, tt__SourceIdentificationExtension*) serialize to a stream
class tt__SourceIdentificationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataInput is a complexType.
///
/// class tt__MetadataInput operations:
/// - soap_new_tt__MetadataInput(soap*) allocate
/// - soap_new_tt__MetadataInput(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataInput(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataInput(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataInput(soap*, tt__MetadataInput*) deserialize from a stream
/// - int soap_write_tt__MetadataInput(soap, tt__MetadataInput*) serialize to a stream
class tt__MetadataInput : public xsd__anyType
{ public:
/// Vector of tt__Config* of length 0..unbounded.
    std::vector<tt__Config*            > MetadataConfig                 0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MetadataInputExtension.
    tt__MetadataInputExtension*          Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataInputExtension is a complexType.
///
/// class tt__MetadataInputExtension operations:
/// - soap_new_tt__MetadataInputExtension(soap*) allocate
/// - soap_new_tt__MetadataInputExtension(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataInputExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataInputExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataInputExtension(soap*, tt__MetadataInputExtension*) deserialize from a stream
/// - int soap_write_tt__MetadataInputExtension(soap, tt__MetadataInputExtension*) serialize to a stream
class tt__MetadataInputExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsStateInformation is a complexType.
///
/// class tt__AnalyticsStateInformation operations:
/// - soap_new_tt__AnalyticsStateInformation(soap*) allocate
/// - soap_new_tt__AnalyticsStateInformation(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsStateInformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsStateInformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsStateInformation(soap*, tt__AnalyticsStateInformation*) deserialize from a stream
/// - int soap_write_tt__AnalyticsStateInformation(soap, tt__AnalyticsStateInformation*) serialize to a stream
class tt__AnalyticsStateInformation : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Token of the control object whose status is requested.
/// </BLOCKQUOTE></PRE>
/// Element "AnalyticsEngineControlToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   AnalyticsEngineControlToken    1;	///< Required element.
/// Element "State" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsState.
    tt__AnalyticsState*                  State                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsState is a complexType.
///
/// class tt__AnalyticsState operations:
/// - soap_new_tt__AnalyticsState(soap*) allocate
/// - soap_new_tt__AnalyticsState(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsState(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsState(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsState(soap*, tt__AnalyticsState*) deserialize from a stream
/// - int soap_write_tt__AnalyticsState(soap, tt__AnalyticsState*) serialize to a stream
class tt__AnalyticsState : public xsd__anyType
{ public:
/// Element "Error" of XSD type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// Element "State" of XSD type xs:string.
    std::string                          State                          1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ActionEngineEventPayload is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Action Engine Event Payload data structure contains the information about the ONVIF command invocations. Since this event could be generated by other or proprietary actions, the command invocation specific fields are defined as optional and additional extension mechanism is provided for future or additional action definitions.
/// </BLOCKQUOTE></PRE>
/// class tt__ActionEngineEventPayload operations:
/// - soap_new_tt__ActionEngineEventPayload(soap*) allocate
/// - soap_new_tt__ActionEngineEventPayload(soap*, int num) allocate array
/// - soap_new_req_tt__ActionEngineEventPayload(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ActionEngineEventPayload(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ActionEngineEventPayload(soap*, tt__ActionEngineEventPayload*) deserialize from a stream
/// - int soap_write_tt__ActionEngineEventPayload(soap, tt__ActionEngineEventPayload*) serialize to a stream
class tt__ActionEngineEventPayload : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Request Message
/// </BLOCKQUOTE></PRE>
/// Element "RequestInfo" of XSD type SOAP-ENV:Envelope.
    struct SOAP_ENV__Envelope*           RequestInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Response Message
/// </BLOCKQUOTE></PRE>
/// Element "ResponseInfo" of XSD type SOAP-ENV:Envelope.
    struct SOAP_ENV__Envelope*           ResponseInfo                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Fault Message
/// </BLOCKQUOTE></PRE>
/// Element "Fault" of XSD type SOAP-ENV:Fault.
    struct SOAP_ENV__Fault*              Fault                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ActionEngineEventPayloadExtension.
    tt__ActionEngineEventPayloadExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ActionEngineEventPayloadExtension is a complexType.
///
/// class tt__ActionEngineEventPayloadExtension operations:
/// - soap_new_tt__ActionEngineEventPayloadExtension(soap*) allocate
/// - soap_new_tt__ActionEngineEventPayloadExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ActionEngineEventPayloadExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ActionEngineEventPayloadExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ActionEngineEventPayloadExtension(soap*, tt__ActionEngineEventPayloadExtension*) deserialize from a stream
/// - int soap_write_tt__ActionEngineEventPayloadExtension(soap, tt__ActionEngineEventPayloadExtension*) serialize to a stream
class tt__ActionEngineEventPayloadExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassCandidate is a complexType.
///
/// class tt__AudioClassCandidate operations:
/// - soap_new_tt__AudioClassCandidate(soap*) allocate
/// - soap_new_tt__AudioClassCandidate(soap*, int num) allocate array
/// - soap_new_req_tt__AudioClassCandidate(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioClassCandidate(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioClassCandidate(soap*, tt__AudioClassCandidate*) deserialize from a stream
/// - int soap_write_tt__AudioClassCandidate(soap, tt__AudioClassCandidate*) serialize to a stream
class tt__AudioClassCandidate : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates audio class label
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":AudioClassType.
    tt__AudioClassType                   Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A likelihood/probability that the corresponding audio event belongs to this class. The sum of the likelihoods shall NOT exceed 1
/// </BLOCKQUOTE></PRE>
/// Element "Likelihood" of XSD type xs:float.
    float                                Likelihood                     1;	///< Required element.
/// @todo <any namespace="##targetNamespace" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassDescriptor is a complexType.
///
/// class tt__AudioClassDescriptor operations:
/// - soap_new_tt__AudioClassDescriptor(soap*) allocate
/// - soap_new_tt__AudioClassDescriptor(soap*, int num) allocate array
/// - soap_new_req_tt__AudioClassDescriptor(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioClassDescriptor(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioClassDescriptor(soap*, tt__AudioClassDescriptor*) deserialize from a stream
/// - int soap_write_tt__AudioClassDescriptor(soap, tt__AudioClassDescriptor*) serialize to a stream
class tt__AudioClassDescriptor : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Array of audio class label and class probability
/// </BLOCKQUOTE></PRE>
/// Vector of tt__AudioClassCandidate* of length 0..unbounded.
    std::vector<tt__AudioClassCandidate*> ClassCandidate                 0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":AudioClassDescriptorExtension.
    tt__AudioClassDescriptorExtension*   Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioClassDescriptorExtension is a complexType.
///
/// class tt__AudioClassDescriptorExtension operations:
/// - soap_new_tt__AudioClassDescriptorExtension(soap*) allocate
/// - soap_new_tt__AudioClassDescriptorExtension(soap*, int num) allocate array
/// - soap_new_req_tt__AudioClassDescriptorExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioClassDescriptorExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioClassDescriptorExtension(soap*, tt__AudioClassDescriptorExtension*) deserialize from a stream
/// - int soap_write_tt__AudioClassDescriptorExtension(soap, tt__AudioClassDescriptorExtension*) serialize to a stream
class tt__AudioClassDescriptorExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ActiveConnection is a complexType.
///
/// class tt__ActiveConnection operations:
/// - soap_new_tt__ActiveConnection(soap*) allocate
/// - soap_new_tt__ActiveConnection(soap*, int num) allocate array
/// - soap_new_req_tt__ActiveConnection(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ActiveConnection(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ActiveConnection(soap*, tt__ActiveConnection*) deserialize from a stream
/// - int soap_write_tt__ActiveConnection(soap, tt__ActiveConnection*) serialize to a stream
class tt__ActiveConnection : public xsd__anyType
{ public:
/// Element "CurrentBitrate" of XSD type xs:float.
    float                                CurrentBitrate                 1;	///< Required element.
/// Element "CurrentFps" of XSD type xs:float.
    float                                CurrentFps                     1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileStatus is a complexType.
///
/// class tt__ProfileStatus operations:
/// - soap_new_tt__ProfileStatus(soap*) allocate
/// - soap_new_tt__ProfileStatus(soap*, int num) allocate array
/// - soap_new_req_tt__ProfileStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ProfileStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ProfileStatus(soap*, tt__ProfileStatus*) deserialize from a stream
/// - int soap_write_tt__ProfileStatus(soap, tt__ProfileStatus*) serialize to a stream
class tt__ProfileStatus : public xsd__anyType
{ public:
/// Vector of tt__ActiveConnection* of length 0..unbounded.
    std::vector<tt__ActiveConnection*  > ActiveConnections              0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ProfileStatusExtension.
    tt__ProfileStatusExtension*          Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":ProfileStatusExtension is a complexType.
///
/// class tt__ProfileStatusExtension operations:
/// - soap_new_tt__ProfileStatusExtension(soap*) allocate
/// - soap_new_tt__ProfileStatusExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ProfileStatusExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ProfileStatusExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ProfileStatusExtension(soap*, tt__ProfileStatusExtension*) deserialize from a stream
/// - int soap_write_tt__ProfileStatusExtension(soap, tt__ProfileStatusExtension*) serialize to a stream
class tt__ProfileStatusExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDPosConfiguration is a complexType.
///
/// class tt__OSDPosConfiguration operations:
/// - soap_new_tt__OSDPosConfiguration(soap*) allocate
/// - soap_new_tt__OSDPosConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__OSDPosConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDPosConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDPosConfiguration(soap*, tt__OSDPosConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDPosConfiguration(soap, tt__OSDPosConfiguration*) serialize to a stream
class tt__OSDPosConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   For OSD position type, following are the pre-defined: <ul><li>UpperLeft</li>
///   <li>UpperRight</li>
///   <li>LowerLeft</li>
///   <li>LowerRight</li>
///   <li>Custom</li></ul>
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type xs:string.
    std::string                          Type                           1;	///< Required element.
/// Element "Pos" of XSD type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Pos                            0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDPosConfigurationExtension.
    tt__OSDPosConfigurationExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDPosConfigurationExtension is a complexType.
///
/// class tt__OSDPosConfigurationExtension operations:
/// - soap_new_tt__OSDPosConfigurationExtension(soap*) allocate
/// - soap_new_tt__OSDPosConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDPosConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDPosConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDPosConfigurationExtension(soap*, tt__OSDPosConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDPosConfigurationExtension(soap, tt__OSDPosConfigurationExtension*) serialize to a stream
class tt__OSDPosConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColor is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The value range of "Transparent" could be defined by vendors only should follow this rule: the minimum value means non-transparent and the maximum value maens fully transparent.
/// </BLOCKQUOTE></PRE>
/// class tt__OSDColor operations:
/// - soap_new_tt__OSDColor(soap*) allocate
/// - soap_new_tt__OSDColor(soap*, int num) allocate array
/// - soap_new_req_tt__OSDColor(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDColor(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDColor(soap*, tt__OSDColor*) deserialize from a stream
/// - int soap_write_tt__OSDColor(soap, tt__OSDColor*) serialize to a stream
class tt__OSDColor : public xsd__anyType
{ public:
/// Element "Color" of XSD type "http://www.onvif.org/ver10/schema":Color.
    tt__Color*                           Color                          1;	///< Required element.
/// Attribute "Transparent" of XSD type xs:int.
   @int*                                 Transparent                    0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextConfiguration is a complexType.
///
/// class tt__OSDTextConfiguration operations:
/// - soap_new_tt__OSDTextConfiguration(soap*) allocate
/// - soap_new_tt__OSDTextConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__OSDTextConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDTextConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDTextConfiguration(soap*, tt__OSDTextConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDTextConfiguration(soap, tt__OSDTextConfiguration*) serialize to a stream
class tt__OSDTextConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The following OSD Text Type are defined:<ul>
///   <li>Plain - The Plain type means the OSD is shown as a text string which defined in the "PlainText" item.</li>
///   <li>Date - The Date type means the OSD is shown as a date, format of which should be present in the "DateFormat" item.</li>
///   <li>Time - The Time type means the OSD is shown as a time, format of which should be present in the "TimeFormat" item.</li>
///   <li>DateAndTime - The DateAndTime type means the OSD is shown as date and time, format of which should be present in the "DateFormat" and the "TimeFormat" item.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type xs:string.
    std::string                          Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported OSD date formats. This element shall be present when the value of Type field has Date or DateAndTime. The following DateFormat are defined:<ul>
///   <li>M/d/yyyy - e.g. 3/6/2013</li>
///   <li>MM/dd/yyyy - e.g. 03/06/2013</li>
///   <li>dd/MM/yyyy - e.g. 06/03/2013</li>
///   <li>yyyy/MM/dd - e.g. 2013/03/06</li>
///   <li>yyyy-MM-dd - e.g. 2013-06-03</li>
///   <li>dddd, MMMM dd, yyyy - e.g. Wednesday, March 06, 2013</li>
///   <li>MMMM dd, yyyy - e.g. March 06, 2013</li>
///   <li>dd MMMM, yyyy - e.g. 06 March, 2013</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "DateFormat" of XSD type xs:string.
    std::string*                         DateFormat                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported OSD time formats. This element shall be present when the value of Type field has Time or DateAndTime. The following TimeFormat are defined:<ul>
///   <li>h:mm:ss tt - e.g. 2:14:21 PM</li>
///   <li>hh:mm:ss tt - e.g. 02:14:21 PM</li>
///   <li>H:mm:ss - e.g. 14:14:21</li>
///   <li>HH:mm:ss - e.g. 14:14:21</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "TimeFormat" of XSD type xs:string.
    std::string*                         TimeFormat                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Font size of the text in pt.
/// </BLOCKQUOTE></PRE>
/// Element "FontSize" of XSD type xs:int.
    int*                                 FontSize                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Font color of the text.
/// </BLOCKQUOTE></PRE>
/// Element "FontColor" of XSD type "http://www.onvif.org/ver10/schema":OSDColor.
    tt__OSDColor*                        FontColor                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Background color of the text.
/// </BLOCKQUOTE></PRE>
/// Element "BackgroundColor" of XSD type "http://www.onvif.org/ver10/schema":OSDColor.
    tt__OSDColor*                        BackgroundColor                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The content of text to be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "PlainText" of XSD type xs:string.
    std::string*                         PlainText                      0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDTextConfigurationExtension.
    tt__OSDTextConfigurationExtension*   Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This flag is applicable for Type Plain and defaults to true. When set to false the PlainText content will not be persistent across device reboots.
/// </BLOCKQUOTE></PRE>
/// Attribute "IsPersistentText" of XSD type xs:boolean.
   @bool*                                IsPersistentText               0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextConfigurationExtension is a complexType.
///
/// class tt__OSDTextConfigurationExtension operations:
/// - soap_new_tt__OSDTextConfigurationExtension(soap*) allocate
/// - soap_new_tt__OSDTextConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDTextConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDTextConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDTextConfigurationExtension(soap*, tt__OSDTextConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDTextConfigurationExtension(soap, tt__OSDTextConfigurationExtension*) serialize to a stream
class tt__OSDTextConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgConfiguration is a complexType.
///
/// class tt__OSDImgConfiguration operations:
/// - soap_new_tt__OSDImgConfiguration(soap*) allocate
/// - soap_new_tt__OSDImgConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__OSDImgConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDImgConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDImgConfiguration(soap*, tt__OSDImgConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDImgConfiguration(soap, tt__OSDImgConfiguration*) serialize to a stream
class tt__OSDImgConfiguration : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The URI of the image which to be displayed.
/// </BLOCKQUOTE></PRE>
/// Element "ImgPath" of XSD type xs:anyURI.
    xsd__anyURI                          ImgPath                        1;	///< Required element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDImgConfigurationExtension.
    tt__OSDImgConfigurationExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgConfigurationExtension is a complexType.
///
/// class tt__OSDImgConfigurationExtension operations:
/// - soap_new_tt__OSDImgConfigurationExtension(soap*) allocate
/// - soap_new_tt__OSDImgConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDImgConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDImgConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDImgConfigurationExtension(soap*, tt__OSDImgConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDImgConfigurationExtension(soap, tt__OSDImgConfigurationExtension*) serialize to a stream
class tt__OSDImgConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorspaceRange is a complexType.
///
/// class tt__ColorspaceRange operations:
/// - soap_new_tt__ColorspaceRange(soap*) allocate
/// - soap_new_tt__ColorspaceRange(soap*, int num) allocate array
/// - soap_new_req_tt__ColorspaceRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ColorspaceRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ColorspaceRange(soap*, tt__ColorspaceRange*) deserialize from a stream
/// - int soap_write_tt__ColorspaceRange(soap, tt__ColorspaceRange*) serialize to a stream
class tt__ColorspaceRange : public xsd__anyType
{ public:
/// Element "X" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      X                              1;	///< Required element.
/// Element "Y" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Y                              1;	///< Required element.
/// Element "Z" of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
    tt__FloatRange*                      Z                              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Acceptable values are the same as in tt:Color.
/// </BLOCKQUOTE></PRE>
/// Element "Colorspace" of XSD type xs:anyURI.
    xsd__anyURI                          Colorspace                     1;	///< Required element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describe the colors supported. Either list each color or define the range of color values.
/// </BLOCKQUOTE></PRE>
/// class tt__ColorOptions operations:
/// - soap_new_tt__ColorOptions(soap*) allocate
/// - soap_new_tt__ColorOptions(soap*, int num) allocate array
/// - soap_new_req_tt__ColorOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ColorOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ColorOptions(soap*, tt__ColorOptions*) deserialize from a stream
/// - int soap_write_tt__ColorOptions(soap, tt__ColorOptions*) serialize to a stream
class tt__ColorOptions : public xsd__anyType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_ColorOptions          ;	///< Union _tt__union_ColorOptions selector: set to SOAP_UNION__tt__union_ColorOptions_<fieldname>
/// Union for choice in tt__ColorOptions.
    union _tt__union_ColorOptions
    {
/// <PRE><BLOCKQUOTE>
///   List the supported color.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Color* of length 1..unbounded.
    std::vector<tt__Color*            > *ColorList                      1;
/// <PRE><BLOCKQUOTE>
///   Define the range of color supported.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ColorspaceRange* of length 1..unbounded.
    std::vector<tt__ColorspaceRange*  > *ColorspaceRange                1;
    }                                    union_ColorOptions            ;
//  END OF CHOICE
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColorOptions is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describe the option of the color and its transparency.
/// </BLOCKQUOTE></PRE>
/// class tt__OSDColorOptions operations:
/// - soap_new_tt__OSDColorOptions(soap*) allocate
/// - soap_new_tt__OSDColorOptions(soap*, int num) allocate array
/// - soap_new_req_tt__OSDColorOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDColorOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDColorOptions(soap*, tt__OSDColorOptions*) deserialize from a stream
/// - int soap_write_tt__OSDColorOptions(soap, tt__OSDColorOptions*) serialize to a stream
class tt__OSDColorOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional list of supported colors.
/// </BLOCKQUOTE></PRE>
/// Element "Color" of XSD type "http://www.onvif.org/ver10/schema":ColorOptions.
    tt__ColorOptions*                    Color                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Range of the transparent level. Larger means more tranparent.
/// </BLOCKQUOTE></PRE>
/// Element "Transparent" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        Transparent                    0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDColorOptionsExtension.
    tt__OSDColorOptionsExtension*        Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDColorOptionsExtension is a complexType.
///
/// class tt__OSDColorOptionsExtension operations:
/// - soap_new_tt__OSDColorOptionsExtension(soap*) allocate
/// - soap_new_tt__OSDColorOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDColorOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDColorOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDColorOptionsExtension(soap*, tt__OSDColorOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDColorOptionsExtension(soap, tt__OSDColorOptionsExtension*) serialize to a stream
class tt__OSDColorOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextOptions is a complexType.
///
/// class tt__OSDTextOptions operations:
/// - soap_new_tt__OSDTextOptions(soap*) allocate
/// - soap_new_tt__OSDTextOptions(soap*, int num) allocate array
/// - soap_new_req_tt__OSDTextOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDTextOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDTextOptions(soap*, tt__OSDTextOptions*) deserialize from a stream
/// - int soap_write_tt__OSDTextOptions(soap, tt__OSDTextOptions*) serialize to a stream
class tt__OSDTextOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of supported OSD text type. When a device indicates the supported number relating to Text type in MaximumNumberOfOSDs, the type shall be presented.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Type                           1;
/// <PRE><BLOCKQUOTE>
///   Range of the font size value.
/// </BLOCKQUOTE></PRE>
/// Element "FontSizeRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FontSizeRange                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported date format.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > DateFormat                     0;
/// <PRE><BLOCKQUOTE>
///   List of supported time format.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > TimeFormat                     0;
/// <PRE><BLOCKQUOTE>
///   List of supported font color.
/// </BLOCKQUOTE></PRE>
/// Element "FontColor" of XSD type "http://www.onvif.org/ver10/schema":OSDColorOptions.
    tt__OSDColorOptions*                 FontColor                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported background color.
/// </BLOCKQUOTE></PRE>
/// Element "BackgroundColor" of XSD type "http://www.onvif.org/ver10/schema":OSDColorOptions.
    tt__OSDColorOptions*                 BackgroundColor                0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDTextOptionsExtension.
    tt__OSDTextOptionsExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDTextOptionsExtension is a complexType.
///
/// class tt__OSDTextOptionsExtension operations:
/// - soap_new_tt__OSDTextOptionsExtension(soap*) allocate
/// - soap_new_tt__OSDTextOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDTextOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDTextOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDTextOptionsExtension(soap*, tt__OSDTextOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDTextOptionsExtension(soap, tt__OSDTextOptionsExtension*) serialize to a stream
class tt__OSDTextOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgOptions is a complexType.
///
/// class tt__OSDImgOptions operations:
/// - soap_new_tt__OSDImgOptions(soap*) allocate
/// - soap_new_tt__OSDImgOptions(soap*, int num) allocate array
/// - soap_new_req_tt__OSDImgOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDImgOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDImgOptions(soap*, tt__OSDImgOptions*) deserialize from a stream
/// - int soap_write_tt__OSDImgOptions(soap, tt__OSDImgOptions*) serialize to a stream
class tt__OSDImgOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of available image URIs.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > ImagePath                      1;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDImgOptionsExtension.
    tt__OSDImgOptionsExtension*          Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   List of supported image MIME types, such as "image/png".
/// </BLOCKQUOTE></PRE>
/// Attribute "FormatsSupported" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  FormatsSupported               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum size (in bytes) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxSize" of XSD type xs:int.
   @int*                                 MaxSize                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum width (in pixels) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxWidth" of XSD type xs:int.
   @int*                                 MaxWidth                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum height (in pixels) of the image that can be uploaded.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxHeight" of XSD type xs:int.
   @int*                                 MaxHeight                      0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDImgOptionsExtension is a complexType.
///
/// class tt__OSDImgOptionsExtension operations:
/// - soap_new_tt__OSDImgOptionsExtension(soap*) allocate
/// - soap_new_tt__OSDImgOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDImgOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDImgOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDImgOptionsExtension(soap*, tt__OSDImgOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDImgOptionsExtension(soap, tt__OSDImgOptionsExtension*) serialize to a stream
class tt__OSDImgOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationExtension is a complexType.
///
/// class tt__OSDConfigurationExtension operations:
/// - soap_new_tt__OSDConfigurationExtension(soap*) allocate
/// - soap_new_tt__OSDConfigurationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDConfigurationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDConfigurationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDConfigurationExtension(soap*, tt__OSDConfigurationExtension*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationExtension(soap, tt__OSDConfigurationExtension*) serialize to a stream
class tt__OSDConfigurationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MaximumNumberOfOSDs is a complexType.
///
/// class tt__MaximumNumberOfOSDs operations:
/// - soap_new_tt__MaximumNumberOfOSDs(soap*) allocate
/// - soap_new_tt__MaximumNumberOfOSDs(soap*, int num) allocate array
/// - soap_new_req_tt__MaximumNumberOfOSDs(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MaximumNumberOfOSDs(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MaximumNumberOfOSDs(soap*, tt__MaximumNumberOfOSDs*) deserialize from a stream
/// - int soap_write_tt__MaximumNumberOfOSDs(soap, tt__MaximumNumberOfOSDs*) serialize to a stream
class tt__MaximumNumberOfOSDs : public xsd__anyType
{ public:
/// Attribute "Total" of XSD type xs:int.
   @int                                  Total                          1;	///< Required attribute.
/// Attribute "Image" of XSD type xs:int.
   @int*                                 Image                          0;	///< Optional attribute.
/// Attribute "PlainText" of XSD type xs:int.
   @int*                                 PlainText                      0;	///< Optional attribute.
/// Attribute "Date" of XSD type xs:int.
   @int*                                 Date                           0;	///< Optional attribute.
/// Attribute "Time" of XSD type xs:int.
   @int*                                 Time                           0;	///< Optional attribute.
/// Attribute "DateAndTime" of XSD type xs:int.
   @int*                                 DateAndTime                    0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationOptions is a complexType.
///
/// class tt__OSDConfigurationOptions operations:
/// - soap_new_tt__OSDConfigurationOptions(soap*) allocate
/// - soap_new_tt__OSDConfigurationOptions(soap*, int num) allocate array
/// - soap_new_req_tt__OSDConfigurationOptions(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDConfigurationOptions(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDConfigurationOptions(soap*, tt__OSDConfigurationOptions*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationOptions(soap, tt__OSDConfigurationOptions*) serialize to a stream
class tt__OSDConfigurationOptions : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   The maximum number of OSD configurations supported for the specified video source configuration. If the configuration does not support OSDs, this value shall be zero and the Type and PositionOption elements are ignored. If a device limits the number of instances by OSDType, it shall indicate the supported number for each type via the related attribute.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumNumberOfOSDs" of XSD type "http://www.onvif.org/ver10/schema":MaximumNumberOfOSDs.
    tt__MaximumNumberOfOSDs*             MaximumNumberOfOSDs            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List supported type of OSD configuration. When a device indicates the supported number for each types in MaximumNumberOfOSDs, related type shall be presented. A device shall return Option element relating to listed type.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__OSDType of length 1..unbounded.
    std::vector<enum tt__OSDType       > Type                           1;
/// <PRE><BLOCKQUOTE>
///   List available OSD position type. Following are the pre-defined:<ul><li>UpperLeft</li>
///   <li>UpperRight</li>
///   <li>LowerLeft</li>
///   <li>LowerRight</li>
///   <li>Custom</li></ul>
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > PositionOption                 1;
/// <PRE><BLOCKQUOTE>
///   Option of the OSD text configuration. This element shall be returned if the device is signaling the support for Text.
/// </BLOCKQUOTE></PRE>
/// Element "TextOption" of XSD type "http://www.onvif.org/ver10/schema":OSDTextOptions.
    tt__OSDTextOptions*                  TextOption                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Option of the OSD image configuration. This element shall be returned if the device is signaling the support for Image.
/// </BLOCKQUOTE></PRE>
/// Element "ImageOption" of XSD type "http://www.onvif.org/ver10/schema":OSDImgOptions.
    tt__OSDImgOptions*                   ImageOption                    0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDConfigurationOptionsExtension.
    tt__OSDConfigurationOptionsExtension*  Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfigurationOptionsExtension is a complexType.
///
/// class tt__OSDConfigurationOptionsExtension operations:
/// - soap_new_tt__OSDConfigurationOptionsExtension(soap*) allocate
/// - soap_new_tt__OSDConfigurationOptionsExtension(soap*, int num) allocate array
/// - soap_new_req_tt__OSDConfigurationOptionsExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDConfigurationOptionsExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDConfigurationOptionsExtension(soap*, tt__OSDConfigurationOptionsExtension*) deserialize from a stream
/// - int soap_write_tt__OSDConfigurationOptionsExtension(soap, tt__OSDConfigurationOptionsExtension*) serialize to a stream
class tt__OSDConfigurationOptionsExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":FileProgress is a complexType.
///
/// class tt__FileProgress operations:
/// - soap_new_tt__FileProgress(soap*) allocate
/// - soap_new_tt__FileProgress(soap*, int num) allocate array
/// - soap_new_req_tt__FileProgress(soap*, ...) allocate, set required members
/// - soap_new_set_tt__FileProgress(soap*, ...) allocate, set all public members
/// - int soap_read_tt__FileProgress(soap*, tt__FileProgress*) deserialize from a stream
/// - int soap_write_tt__FileProgress(soap, tt__FileProgress*) serialize to a stream
class tt__FileProgress : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exported file name
/// </BLOCKQUOTE></PRE>
/// Element "FileName" of XSD type xs:string.
    std::string                          FileName                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Normalized percentage completion for uploading the exported file
/// </BLOCKQUOTE></PRE>
/// Element "Progress" of XSD type xs:float.
    float                                Progress                       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ArrayOfFileProgress is a complexType.
///
/// class tt__ArrayOfFileProgress operations:
/// - soap_new_tt__ArrayOfFileProgress(soap*) allocate
/// - soap_new_tt__ArrayOfFileProgress(soap*, int num) allocate array
/// - soap_new_req_tt__ArrayOfFileProgress(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ArrayOfFileProgress(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ArrayOfFileProgress(soap*, tt__ArrayOfFileProgress*) deserialize from a stream
/// - int soap_write_tt__ArrayOfFileProgress(soap, tt__ArrayOfFileProgress*) serialize to a stream
class tt__ArrayOfFileProgress : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Exported file name and export progress information
/// </BLOCKQUOTE></PRE>
/// Vector of tt__FileProgress* of length 0..unbounded.
    std::vector<tt__FileProgress*      > FileProgress                   0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":ArrayOfFileProgressExtension.
    tt__ArrayOfFileProgressExtension*    Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":ArrayOfFileProgressExtension is a complexType.
///
/// class tt__ArrayOfFileProgressExtension operations:
/// - soap_new_tt__ArrayOfFileProgressExtension(soap*) allocate
/// - soap_new_tt__ArrayOfFileProgressExtension(soap*, int num) allocate array
/// - soap_new_req_tt__ArrayOfFileProgressExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ArrayOfFileProgressExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ArrayOfFileProgressExtension(soap*, tt__ArrayOfFileProgressExtension*) deserialize from a stream
/// - int soap_write_tt__ArrayOfFileProgressExtension(soap, tt__ArrayOfFileProgressExtension*) serialize to a stream
class tt__ArrayOfFileProgressExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":StorageReferencePath is a complexType.
///
/// class tt__StorageReferencePath operations:
/// - soap_new_tt__StorageReferencePath(soap*) allocate
/// - soap_new_tt__StorageReferencePath(soap*, int num) allocate array
/// - soap_new_req_tt__StorageReferencePath(soap*, ...) allocate, set required members
/// - soap_new_set_tt__StorageReferencePath(soap*, ...) allocate, set all public members
/// - int soap_read_tt__StorageReferencePath(soap*, tt__StorageReferencePath*) deserialize from a stream
/// - int soap_write_tt__StorageReferencePath(soap, tt__StorageReferencePath*) serialize to a stream
class tt__StorageReferencePath : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   identifier of an existing Storage Configuration.
/// </BLOCKQUOTE></PRE>
/// Element "StorageToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   StorageToken                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   gives the relative directory path on the storage
/// </BLOCKQUOTE></PRE>
/// Element "RelativePath" of XSD type xs:string.
    std::string*                         RelativePath                   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":StorageReferencePathExtension.
    tt__StorageReferencePathExtension*   Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":StorageReferencePathExtension is a complexType.
///
/// class tt__StorageReferencePathExtension operations:
/// - soap_new_tt__StorageReferencePathExtension(soap*) allocate
/// - soap_new_tt__StorageReferencePathExtension(soap*, int num) allocate array
/// - soap_new_req_tt__StorageReferencePathExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__StorageReferencePathExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__StorageReferencePathExtension(soap*, tt__StorageReferencePathExtension*) deserialize from a stream
/// - int soap_write_tt__StorageReferencePathExtension(soap, tt__StorageReferencePathExtension*) serialize to a stream
class tt__StorageReferencePathExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":IntRange is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Range of values greater equal Min value and less equal Max value.
/// </BLOCKQUOTE></PRE>
/// class tt__IntRange operations:
/// - soap_new_tt__IntRange(soap*) allocate
/// - soap_new_tt__IntRange(soap*, int num) allocate array
/// - soap_new_req_tt__IntRange(soap*, ...) allocate, set required members
/// - soap_new_set_tt__IntRange(soap*, ...) allocate, set all public members
/// - int soap_read_tt__IntRange(soap*, tt__IntRange*) deserialize from a stream
/// - int soap_write_tt__IntRange(soap, tt__IntRange*) serialize to a stream
class tt__IntRange : public xsd__anyType
{ public:
/// Element "Min" of XSD type xs:int.
    int                                  Min                            1;	///< Required element.
/// Element "Max" of XSD type xs:int.
    int                                  Max                            1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":Vector2D is a complexType.
///
/// class tt__Vector2D operations:
/// - soap_new_tt__Vector2D(soap*) allocate
/// - soap_new_tt__Vector2D(soap*, int num) allocate array
/// - soap_new_req_tt__Vector2D(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Vector2D(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Vector2D(soap*, tt__Vector2D*) deserialize from a stream
/// - int soap_write_tt__Vector2D(soap, tt__Vector2D*) serialize to a stream
class tt__Vector2D : public xsd__anyType
{ public:
/// Attribute "x" of XSD type xs:float.
   @float                                x                              1;	///< Required attribute.
/// Attribute "y" of XSD type xs:float.
   @float                                y                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Pan/tilt coordinate space selector. The following options are defined:<ul>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/PositionGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/TranslationGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/VelocityGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/PanTiltSpaces/GenericSpeedSpace</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Attribute "space" of XSD type xs:anyURI.
   @xsd__anyURI*                         space                          0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Vector1D is a complexType.
///
/// class tt__Vector1D operations:
/// - soap_new_tt__Vector1D(soap*) allocate
/// - soap_new_tt__Vector1D(soap*, int num) allocate array
/// - soap_new_req_tt__Vector1D(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Vector1D(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Vector1D(soap*, tt__Vector1D*) deserialize from a stream
/// - int soap_write_tt__Vector1D(soap, tt__Vector1D*) serialize to a stream
class tt__Vector1D : public xsd__anyType
{ public:
/// Attribute "x" of XSD type xs:float.
   @float                                x                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Zoom coordinate space selector. The following options are defined:<ul style="">
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/PositionGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/TranslationGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/VelocityGenericSpace</li>
///   <li> http://www.onvif.org/ver10/tptz/ZoomSpaces/ZoomGenericSpeedSpace</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Attribute "space" of XSD type xs:anyURI.
   @xsd__anyURI*                         space                          0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZVector is a complexType.
///
/// class tt__PTZVector operations:
/// - soap_new_tt__PTZVector(soap*) allocate
/// - soap_new_tt__PTZVector(soap*, int num) allocate array
/// - soap_new_req_tt__PTZVector(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZVector(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZVector(soap*, tt__PTZVector*) deserialize from a stream
/// - int soap_write_tt__PTZVector(soap, tt__PTZVector*) serialize to a stream
class tt__PTZVector : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Pan and tilt position. The x component corresponds to pan and the y component to tilt.
/// </BLOCKQUOTE></PRE>
/// Element "PanTilt" of XSD type "http://www.onvif.org/ver10/schema":Vector2D.
    tt__Vector2D*                        PanTilt                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A zoom position.
/// </BLOCKQUOTE></PRE>
/// Element "Zoom" of XSD type "http://www.onvif.org/ver10/schema":Vector1D.
    tt__Vector1D*                        Zoom                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZStatus is a complexType.
///
/// class tt__PTZStatus operations:
/// - soap_new_tt__PTZStatus(soap*) allocate
/// - soap_new_tt__PTZStatus(soap*, int num) allocate array
/// - soap_new_req_tt__PTZStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZStatus(soap*, tt__PTZStatus*) deserialize from a stream
/// - int soap_write_tt__PTZStatus(soap, tt__PTZStatus*) serialize to a stream
class tt__PTZStatus : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the absolute position of the PTZ unit together with the Space references. The default absolute spaces of the corresponding PTZ configuration MUST be referenced within the Position element.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type "http://www.onvif.org/ver10/schema":PTZVector.
    tt__PTZVector*                       Position                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates if the Pan/Tilt/Zoom device unit is currently moving, idle or in an unknown state.
/// </BLOCKQUOTE></PRE>
/// Element "MoveStatus" of XSD type "http://www.onvif.org/ver10/schema":PTZMoveStatus.
    tt__PTZMoveStatus*                   MoveStatus                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   States a current PTZ error.
/// </BLOCKQUOTE></PRE>
/// Element "Error" of XSD type xs:string.
    std::string*                         Error                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specifies the UTC time when this status was generated.
/// </BLOCKQUOTE></PRE>
/// Element "UtcTime" of XSD type xs:dateTime.
    time_t                               UtcTime                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZMoveStatus is a complexType.
///
/// class tt__PTZMoveStatus operations:
/// - soap_new_tt__PTZMoveStatus(soap*) allocate
/// - soap_new_tt__PTZMoveStatus(soap*, int num) allocate array
/// - soap_new_req_tt__PTZMoveStatus(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZMoveStatus(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZMoveStatus(soap*, tt__PTZMoveStatus*) deserialize from a stream
/// - int soap_write_tt__PTZMoveStatus(soap, tt__PTZMoveStatus*) serialize to a stream
class tt__PTZMoveStatus : public xsd__anyType
{ public:

/// </BLOCKQUOTE></PRE>
/// Element "PanTilt" of XSD type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum tt__MoveStatus*                 PanTilt                        0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Zoom" of XSD type "http://www.onvif.org/ver10/schema":MoveStatus.
    enum tt__MoveStatus*                 Zoom                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/schema":Vector is a complexType.
///
/// class tt__Vector operations:
/// - soap_new_tt__Vector(soap*) allocate
/// - soap_new_tt__Vector(soap*, int num) allocate array
/// - soap_new_req_tt__Vector(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Vector(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Vector(soap*, tt__Vector*) deserialize from a stream
/// - int soap_write_tt__Vector(soap, tt__Vector*) serialize to a stream
class tt__Vector : public xsd__anyType
{ public:
/// Attribute "x" of XSD type xs:float.
   @float*                               x                              0;	///< Optional attribute.
/// Attribute "y" of XSD type xs:float.
   @float*                               y                              0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Rectangle is a complexType.
///
/// class tt__Rectangle operations:
/// - soap_new_tt__Rectangle(soap*) allocate
/// - soap_new_tt__Rectangle(soap*, int num) allocate array
/// - soap_new_req_tt__Rectangle(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Rectangle(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Rectangle(soap*, tt__Rectangle*) deserialize from a stream
/// - int soap_write_tt__Rectangle(soap, tt__Rectangle*) serialize to a stream
class tt__Rectangle : public xsd__anyType
{ public:
/// Attribute "bottom" of XSD type xs:float.
   @float*                               bottom                         0;	///< Optional attribute.
/// Attribute "top" of XSD type xs:float.
   @float*                               top                            0;	///< Optional attribute.
/// Attribute "right" of XSD type xs:float.
   @float*                               right                          0;	///< Optional attribute.
/// Attribute "left" of XSD type xs:float.
   @float*                               left                           0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":Polygon is a complexType.
///
/// class tt__Polygon operations:
/// - soap_new_tt__Polygon(soap*) allocate
/// - soap_new_tt__Polygon(soap*, int num) allocate array
/// - soap_new_req_tt__Polygon(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Polygon(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Polygon(soap*, tt__Polygon*) deserialize from a stream
/// - int soap_write_tt__Polygon(soap, tt__Polygon*) serialize to a stream
class tt__Polygon : public xsd__anyType
{ public:
/// Vector of tt__Vector* of length 3..unbounded.
    std::vector<tt__Vector*            > Point                          3;
};

/// @brief "http://www.onvif.org/ver10/schema":Color is a complexType.
///
/// class tt__Color operations:
/// - soap_new_tt__Color(soap*) allocate
/// - soap_new_tt__Color(soap*, int num) allocate array
/// - soap_new_req_tt__Color(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Color(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Color(soap*, tt__Color*) deserialize from a stream
/// - int soap_write_tt__Color(soap, tt__Color*) serialize to a stream
class tt__Color : public xsd__anyType
{ public:
/// Attribute "X" of XSD type xs:float.
   @float                                X                              1;	///< Required attribute.
/// Attribute "Y" of XSD type xs:float.
   @float                                Y                              1;	///< Required attribute.
/// Attribute "Z" of XSD type xs:float.
   @float                                Z                              1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   Acceptable values:
///   <ul>
///   <li>http://www.onvif.org/ver10/colorspace/YCbCr - YCbCr
///   <ul><li>X attribute = Y value</li>
///   <li>Y attribute = Cb value</li>
///   <li>Z attribute = Cr value</li></ul>
///   </li>
///   <li>http://www.onvif.org/ver10/colorspace/RGB - RGB
///   <ul><li>X attribute = R value</li>
///   <li>Y attribute = G value</li>
///   <li>Z attribute = B value</li></ul>
///   </li>
///   </ul>
///   If the Colorspace attribute is absent, YCbCr is implied.
///   Deprecated values:
///   <ul>
///   <li>http://www.onvif.org/ver10/colorspace/CIELUV - CIE LUV</li>
///   <li>http://www.onvif.org/ver10/colorspace/CIELAB - CIE 1976 (L*a*b*)</li>
///   <li>http://www.onvif.org/ver10/colorspace/HSV - HSV</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Attribute "Colorspace" of XSD type xs:anyURI.
   @xsd__anyURI*                         Colorspace                     0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorCovariance is a complexType.
///
/// class tt__ColorCovariance operations:
/// - soap_new_tt__ColorCovariance(soap*) allocate
/// - soap_new_tt__ColorCovariance(soap*, int num) allocate array
/// - soap_new_req_tt__ColorCovariance(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ColorCovariance(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ColorCovariance(soap*, tt__ColorCovariance*) deserialize from a stream
/// - int soap_write_tt__ColorCovariance(soap, tt__ColorCovariance*) serialize to a stream
class tt__ColorCovariance : public xsd__anyType
{ public:
/// Attribute "XX" of XSD type xs:float.
   @float                                XX                             1;	///< Required attribute.
/// Attribute "YY" of XSD type xs:float.
   @float                                YY                             1;	///< Required attribute.
/// Attribute "ZZ" of XSD type xs:float.
   @float                                ZZ                             1;	///< Required attribute.
/// Attribute "XY" of XSD type xs:float.
   @float*                               XY                             0;	///< Optional attribute.
/// Attribute "XZ" of XSD type xs:float.
   @float*                               XZ                             0;	///< Optional attribute.
/// Attribute "YZ" of XSD type xs:float.
   @float*                               YZ                             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Acceptable values are the same as in tt:Color.
/// </BLOCKQUOTE></PRE>
/// Attribute "Colorspace" of XSD type xs:anyURI.
   @xsd__anyURI*                         Colorspace                     0;	///< Optional attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":ColorDescriptor is a complexType.
///
/// class tt__ColorDescriptor operations:
/// - soap_new_tt__ColorDescriptor(soap*) allocate
/// - soap_new_tt__ColorDescriptor(soap*, int num) allocate array
/// - soap_new_req_tt__ColorDescriptor(soap*, ...) allocate, set required members
/// - soap_new_set_tt__ColorDescriptor(soap*, ...) allocate, set all public members
/// - int soap_read_tt__ColorDescriptor(soap*, tt__ColorDescriptor*) deserialize from a stream
/// - int soap_write_tt__ColorDescriptor(soap, tt__ColorDescriptor*) serialize to a stream
class tt__ColorDescriptor : public xsd__anyType
{ public:
/// Vector of ColorCluster of length 0..unbounded.
    std::vector<
/// class _tt__ColorDescriptor_ColorCluster operations:
/// - soap_new__tt__ColorDescriptor_ColorCluster(soap*) allocate
/// - soap_new__tt__ColorDescriptor_ColorCluster(soap*, int num) allocate array
/// - soap_new_req__tt__ColorDescriptor_ColorCluster(soap*, ...) allocate, set required members
/// - soap_new_set__tt__ColorDescriptor_ColorCluster(soap*, ...) allocate, set all public members
/// - int soap_read__tt__ColorDescriptor_ColorCluster(soap*, _tt__ColorDescriptor_ColorCluster*) deserialize from a stream
/// - int soap_write__tt__ColorDescriptor_ColorCluster(soap, _tt__ColorDescriptor_ColorCluster*) serialize to a stream
    class _tt__ColorDescriptor_ColorCluster
    {
/// Element "Color" of XSD type "http://www.onvif.org/ver10/schema":Color.
    tt__Color*                           Color                          1;	///< Required element.
/// Element "Weight" of XSD type xs:float.
    float*                               Weight                         0;	///< Optional element.
/// Element "Covariance" of XSD type "http://www.onvif.org/ver10/schema":ColorCovariance.
    tt__ColorCovariance*                 Covariance                     0;	///< Optional element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }>                                  *ColorCluster                   0;
/// Element "Extension" of XSD type xs:anyType.
    xsd__anyType*                        Extension                      0;	///< Optional element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Transformation is a complexType.
///
/// class tt__Transformation operations:
/// - soap_new_tt__Transformation(soap*) allocate
/// - soap_new_tt__Transformation(soap*, int num) allocate array
/// - soap_new_req_tt__Transformation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Transformation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Transformation(soap*, tt__Transformation*) deserialize from a stream
/// - int soap_write_tt__Transformation(soap, tt__Transformation*) serialize to a stream
class tt__Transformation : public xsd__anyType
{ public:
/// Element "Translate" of XSD type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Translate                      0;	///< Optional element.
/// Element "Scale" of XSD type "http://www.onvif.org/ver10/schema":Vector.
    tt__Vector*                          Scale                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":TransformationExtension.
    tt__TransformationExtension*         Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":TransformationExtension is a complexType.
///
/// class tt__TransformationExtension operations:
/// - soap_new_tt__TransformationExtension(soap*) allocate
/// - soap_new_tt__TransformationExtension(soap*, int num) allocate array
/// - soap_new_req_tt__TransformationExtension(soap*, ...) allocate, set required members
/// - soap_new_set_tt__TransformationExtension(soap*, ...) allocate, set all public members
/// - int soap_read_tt__TransformationExtension(soap*, tt__TransformationExtension*) deserialize from a stream
/// - int soap_write_tt__TransformationExtension(soap, tt__TransformationExtension*) serialize to a stream
class tt__TransformationExtension : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/schema":GeoLocation is a complexType.
///
/// class tt__GeoLocation operations:
/// - soap_new_tt__GeoLocation(soap*) allocate
/// - soap_new_tt__GeoLocation(soap*, int num) allocate array
/// - soap_new_req_tt__GeoLocation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GeoLocation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GeoLocation(soap*, tt__GeoLocation*) deserialize from a stream
/// - int soap_write_tt__GeoLocation(soap, tt__GeoLocation*) serialize to a stream
class tt__GeoLocation : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   East west location as angle.
/// </BLOCKQUOTE></PRE>
/// Attribute "lon" of XSD type xs:double.
   @double*                              lon                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   North south location as angle.
/// </BLOCKQUOTE></PRE>
/// Attribute "lat" of XSD type xs:double.
   @double*                              lat                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Hight in meters above sea level.
/// </BLOCKQUOTE></PRE>
/// Attribute "elevation" of XSD type xs:float.
   @float*                               elevation                      0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":GeoOrientation is a complexType.
///
/// class tt__GeoOrientation operations:
/// - soap_new_tt__GeoOrientation(soap*) allocate
/// - soap_new_tt__GeoOrientation(soap*, int num) allocate array
/// - soap_new_req_tt__GeoOrientation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__GeoOrientation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__GeoOrientation(soap*, tt__GeoOrientation*) deserialize from a stream
/// - int soap_write_tt__GeoOrientation(soap, tt__GeoOrientation*) serialize to a stream
class tt__GeoOrientation : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Rotation around the x axis.
/// </BLOCKQUOTE></PRE>
/// Attribute "roll" of XSD type xs:float.
   @float*                               roll                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the y axis.
/// </BLOCKQUOTE></PRE>
/// Attribute "pitch" of XSD type xs:float.
   @float*                               pitch                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the z axis.
/// </BLOCKQUOTE></PRE>
/// Attribute "yaw" of XSD type xs:float.
   @float*                               yaw                            0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LocalLocation is a complexType.
///
/// class tt__LocalLocation operations:
/// - soap_new_tt__LocalLocation(soap*) allocate
/// - soap_new_tt__LocalLocation(soap*, int num) allocate array
/// - soap_new_req_tt__LocalLocation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LocalLocation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LocalLocation(soap*, tt__LocalLocation*) deserialize from a stream
/// - int soap_write_tt__LocalLocation(soap, tt__LocalLocation*) serialize to a stream
class tt__LocalLocation : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   East west location as angle.
/// </BLOCKQUOTE></PRE>
/// Attribute "x" of XSD type xs:float.
   @float*                               x                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   North south location as angle.
/// </BLOCKQUOTE></PRE>
/// Attribute "y" of XSD type xs:float.
   @float*                               y                              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Offset in meters from the sea level.
/// </BLOCKQUOTE></PRE>
/// Attribute "z" of XSD type xs:float.
   @float*                               z                              0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LocalOrientation is a complexType.
///
/// class tt__LocalOrientation operations:
/// - soap_new_tt__LocalOrientation(soap*) allocate
/// - soap_new_tt__LocalOrientation(soap*, int num) allocate array
/// - soap_new_req_tt__LocalOrientation(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LocalOrientation(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LocalOrientation(soap*, tt__LocalOrientation*) deserialize from a stream
/// - int soap_write_tt__LocalOrientation(soap, tt__LocalOrientation*) serialize to a stream
class tt__LocalOrientation : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Rotation around the y axis.
/// </BLOCKQUOTE></PRE>
/// Attribute "pan" of XSD type xs:float.
   @float*                               pan                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the z axis.
/// </BLOCKQUOTE></PRE>
/// Attribute "tilt" of XSD type xs:float.
   @float*                               tilt                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Rotation around the x axis.
/// </BLOCKQUOTE></PRE>
/// Attribute "roll" of XSD type xs:float.
   @float*                               roll                           0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":LocationEntity is a complexType.
///
/// class tt__LocationEntity operations:
/// - soap_new_tt__LocationEntity(soap*) allocate
/// - soap_new_tt__LocationEntity(soap*, int num) allocate array
/// - soap_new_req_tt__LocationEntity(soap*, ...) allocate, set required members
/// - soap_new_set_tt__LocationEntity(soap*, ...) allocate, set all public members
/// - int soap_read_tt__LocationEntity(soap*, tt__LocationEntity*) deserialize from a stream
/// - int soap_write_tt__LocationEntity(soap, tt__LocationEntity*) serialize to a stream
class tt__LocationEntity : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Location on earth.
/// </BLOCKQUOTE></PRE>
/// Element "GeoLocation" of XSD type "http://www.onvif.org/ver10/schema":GeoLocation.
    tt__GeoLocation*                     GeoLocation                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Orientation relative to earth.
/// </BLOCKQUOTE></PRE>
/// Element "GeoOrientation" of XSD type "http://www.onvif.org/ver10/schema":GeoOrientation.
    tt__GeoOrientation*                  GeoOrientation                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indoor location offset.
/// </BLOCKQUOTE></PRE>
/// Element "LocalLocation" of XSD type "http://www.onvif.org/ver10/schema":LocalLocation.
    tt__LocalLocation*                   LocalLocation                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indoor orientation offset.
/// </BLOCKQUOTE></PRE>
/// Element "LocalOrientation" of XSD type "http://www.onvif.org/ver10/schema":LocalOrientation.
    tt__LocalOrientation*                LocalOrientation               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Entity type the entry refers to, use a value from the tt:Entity enumeration.
/// </BLOCKQUOTE></PRE>
/// Attribute "Entity" of XSD type xs:string.
   @std::string*                         Entity                         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional entity token.
/// </BLOCKQUOTE></PRE>
/// Attribute "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken*                  Token                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If this value is true the entity cannot be deleted.
/// </BLOCKQUOTE></PRE>
/// Attribute "Fixed" of XSD type xs:boolean.
   @bool*                                Fixed                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional reference to the XAddr of another devices DeviceManagement service.
/// </BLOCKQUOTE></PRE>
/// Attribute "GeoSource" of XSD type xs:anyURI.
   @xsd__anyURI*                         GeoSource                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If set the geo location is obtained internally.
/// </BLOCKQUOTE></PRE>
/// Attribute "AutoGeo" of XSD type xs:boolean.
   @bool*                                AutoGeo                        0;	///< Optional attribute.
};

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":StringItems
/// @brief "http://www.onvif.org/ver10/schema":StringItems is a complexType.
///
/// class _tt__StringItems operations:
/// - soap_new__tt__StringItems(soap*) allocate
/// - soap_new__tt__StringItems(soap*, int num) allocate array
/// - soap_new_req__tt__StringItems(soap*, ...) allocate, set required members
/// - soap_new_set__tt__StringItems(soap*, ...) allocate, set all public members
/// - int soap_read__tt__StringItems(soap*, _tt__StringItems*) deserialize from a stream
/// - int soap_write__tt__StringItems(soap, _tt__StringItems*) serialize to a stream
class _tt__StringItems
{ public:
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Item                           1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Message
/// @brief "http://www.onvif.org/ver10/schema":Message is a complexType.
///
/// class _tt__Message operations:
/// - soap_new__tt__Message(soap*) allocate
/// - soap_new__tt__Message(soap*, int num) allocate array
/// - soap_new_req__tt__Message(soap*, ...) allocate, set required members
/// - soap_new_set__tt__Message(soap*, ...) allocate, set all public members
/// - int soap_read__tt__Message(soap*, _tt__Message*) deserialize from a stream
/// - int soap_write__tt__Message(soap, _tt__Message*) serialize to a stream
class _tt__Message
{ public:
/// <PRE><BLOCKQUOTE>
///   Token value pairs that triggered this message. Typically only one item is present.
/// </BLOCKQUOTE></PRE>
/// Element "Source" of XSD type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Source                         0;	///< Optional element.
/// Element "Key" of XSD type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Key                            0;	///< Optional element.
/// Element "Data" of XSD type "http://www.onvif.org/ver10/schema":ItemList.
    tt__ItemList*                        Data                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MessageExtension.
    tt__MessageExtension*                Extension                      0;	///< Optional element.
/// Attribute "UtcTime" of XSD type xs:dateTime.
   @time_t                               UtcTime                        1;	///< Required attribute.
/// Attribute "PropertyOperation" of XSD type "http://www.onvif.org/ver10/schema":PropertyOperation.
   @enum tt__PropertyOperation*          PropertyOperation              0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType is a complexType.
///
/// class wsnt__QueryExpressionType operations:
/// - soap_new_wsnt__QueryExpressionType(soap*) allocate
/// - soap_new_wsnt__QueryExpressionType(soap*, int num) allocate array
/// - soap_new_req_wsnt__QueryExpressionType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__QueryExpressionType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__QueryExpressionType(soap*, wsnt__QueryExpressionType*) deserialize from a stream
/// - int soap_write_wsnt__QueryExpressionType(soap, wsnt__QueryExpressionType*) serialize to a stream
class wsnt__QueryExpressionType : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// Attribute "Dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// @todo This mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType is a complexType.
///
/// class wsnt__TopicExpressionType operations:
/// - soap_new_wsnt__TopicExpressionType(soap*) allocate
/// - soap_new_wsnt__TopicExpressionType(soap*, int num) allocate array
/// - soap_new_req_wsnt__TopicExpressionType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__TopicExpressionType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__TopicExpressionType(soap*, wsnt__TopicExpressionType*) deserialize from a stream
/// - int soap_write_wsnt__TopicExpressionType(soap, wsnt__TopicExpressionType*) serialize to a stream
class wsnt__TopicExpressionType : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// Attribute "Dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// @todo This mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":FilterType is a complexType.
///
/// class wsnt__FilterType operations:
/// - soap_new_wsnt__FilterType(soap*) allocate
/// - soap_new_wsnt__FilterType(soap*, int num) allocate array
/// - soap_new_req_wsnt__FilterType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__FilterType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__FilterType(soap*, wsnt__FilterType*) deserialize from a stream
/// - int soap_write_wsnt__FilterType(soap, wsnt__FilterType*) serialize to a stream
class wsnt__FilterType : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType is a complexType.
///
/// class wsnt__SubscriptionPolicyType operations:
/// - soap_new_wsnt__SubscriptionPolicyType(soap*) allocate
/// - soap_new_wsnt__SubscriptionPolicyType(soap*, int num) allocate array
/// - soap_new_req_wsnt__SubscriptionPolicyType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__SubscriptionPolicyType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__SubscriptionPolicyType(soap*, wsnt__SubscriptionPolicyType*) deserialize from a stream
/// - int soap_write_wsnt__SubscriptionPolicyType(soap, wsnt__SubscriptionPolicyType*) serialize to a stream
class wsnt__SubscriptionPolicyType : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType is a complexType.
///
/// class wsnt__NotificationMessageHolderType operations:
/// - soap_new_wsnt__NotificationMessageHolderType(soap*) allocate
/// - soap_new_wsnt__NotificationMessageHolderType(soap*, int num) allocate array
/// - soap_new_req_wsnt__NotificationMessageHolderType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__NotificationMessageHolderType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__NotificationMessageHolderType(soap*, wsnt__NotificationMessageHolderType*) deserialize from a stream
/// - int soap_write_wsnt__NotificationMessageHolderType(soap, wsnt__NotificationMessageHolderType*) serialize to a stream
class wsnt__NotificationMessageHolderType : public xsd__anyType
{ public:
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":SubscriptionReference.
    wsa5__EndpointReferenceType*         SubscriptionReference          0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":Topic.
    wsnt__TopicExpressionType*           Topic                          0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":ProducerReference.
    wsa5__EndpointReferenceType*         ProducerReference              0;	///< Optional element.
/// class _wsnt__NotificationMessageHolderType_Message operations:
/// - soap_new__wsnt__NotificationMessageHolderType_Message(soap*) allocate
/// - soap_new__wsnt__NotificationMessageHolderType_Message(soap*, int num) allocate array
/// - soap_new_req__wsnt__NotificationMessageHolderType_Message(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__NotificationMessageHolderType_Message(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__NotificationMessageHolderType_Message(soap*, _wsnt__NotificationMessageHolderType_Message*) deserialize from a stream
/// - int soap_write__wsnt__NotificationMessageHolderType_Message(soap, _wsnt__NotificationMessageHolderType_Message*) serialize to a stream
    class _wsnt__NotificationMessageHolderType_Message
    {
/// @todo <any namespace="##any" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                    Message                        1;	///< Required element.
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP
/// @brief "http://docs.oasis-open.org/wsn/b-2":NotificationProducerRP is a complexType.
///
/// class _wsnt__NotificationProducerRP operations:
/// - soap_new__wsnt__NotificationProducerRP(soap*) allocate
/// - soap_new__wsnt__NotificationProducerRP(soap*, int num) allocate array
/// - soap_new_req__wsnt__NotificationProducerRP(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__NotificationProducerRP(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__NotificationProducerRP(soap*, _wsnt__NotificationProducerRP*) deserialize from a stream
/// - int soap_write__wsnt__NotificationProducerRP(soap, _wsnt__NotificationProducerRP*) serialize to a stream
class _wsnt__NotificationProducerRP
{ public:
/// Vector of wsnt__TopicExpressionType* element refs of length 0..unbounded.
    std::vector<wsnt__TopicExpressionType*> TopicExpression                0;
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":FixedTopicSet.
    bool*                                FixedTopicSet                  0;	///< Optional element.
/// Vector of xsd__anyURI element refs of length 0..unbounded.
    std::vector<xsd__anyURI            > TopicExpressionDialect         0;
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/t-1":TopicSet.
    wstop__TopicSetType*                 wstop__TopicSet                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP
/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscriptionManagerRP is a complexType.
///
/// class _wsnt__SubscriptionManagerRP operations:
/// - soap_new__wsnt__SubscriptionManagerRP(soap*) allocate
/// - soap_new__wsnt__SubscriptionManagerRP(soap*, int num) allocate array
/// - soap_new_req__wsnt__SubscriptionManagerRP(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__SubscriptionManagerRP(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__SubscriptionManagerRP(soap*, _wsnt__SubscriptionManagerRP*) deserialize from a stream
/// - int soap_write__wsnt__SubscriptionManagerRP(soap, _wsnt__SubscriptionManagerRP*) serialize to a stream
class _wsnt__SubscriptionManagerRP
{ public:
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":ConsumerReference.
    wsa5__EndpointReferenceType          ConsumerReference              1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":Filter.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicy.
    wsnt__SubscriptionPolicyType*        SubscriptionPolicy             0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":CreationTime.
    time_t*                              CreationTime                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Notify
/// @brief "http://docs.oasis-open.org/wsn/b-2":Notify is a complexType.
///
/// class _wsnt__Notify operations:
/// - soap_new__wsnt__Notify(soap*) allocate
/// - soap_new__wsnt__Notify(soap*, int num) allocate array
/// - soap_new_req__wsnt__Notify(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__Notify(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__Notify(soap*, _wsnt__Notify*) deserialize from a stream
/// - int soap_write__wsnt__Notify(soap, _wsnt__Notify*) serialize to a stream
class _wsnt__Notify
{ public:
/// Vector of wsnt__NotificationMessageHolderType* element refs of length 1..unbounded.
    std::vector<wsnt__NotificationMessageHolderType*> NotificationMessage            1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UseRaw
/// @brief "http://docs.oasis-open.org/wsn/b-2":UseRaw is a complexType.
///
/// class _wsnt__UseRaw operations:
/// - soap_new__wsnt__UseRaw(soap*) allocate
/// - soap_new__wsnt__UseRaw(soap*, int num) allocate array
/// - soap_new_req__wsnt__UseRaw(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__UseRaw(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__UseRaw(soap*, _wsnt__UseRaw*) deserialize from a stream
/// - int soap_write__wsnt__UseRaw(soap, _wsnt__UseRaw*) serialize to a stream
class _wsnt__UseRaw
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Subscribe
/// @brief "http://docs.oasis-open.org/wsn/b-2":Subscribe is a complexType.
///
/// class _wsnt__Subscribe operations:
/// - soap_new__wsnt__Subscribe(soap*) allocate
/// - soap_new__wsnt__Subscribe(soap*, int num) allocate array
/// - soap_new_req__wsnt__Subscribe(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__Subscribe(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__Subscribe(soap*, _wsnt__Subscribe*) deserialize from a stream
/// - int soap_write__wsnt__Subscribe(soap, _wsnt__Subscribe*) serialize to a stream
class _wsnt__Subscribe
{ public:
/// Element "ConsumerReference" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          ConsumerReference              1;	///< Required element.
/// Element "Filter" of XSD type "http://docs.oasis-open.org/wsn/b-2":FilterType.
    wsnt__FilterType*                    Filter                         0;	///< Optional element.
/// Element "InitialTerminationTime" of XSD type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    wsnt__AbsoluteOrRelativeTimeType*    InitialTerminationTime         0;	///< Nillable pointer.
/// class _wsnt__Subscribe_SubscriptionPolicy operations:
/// - soap_new__wsnt__Subscribe_SubscriptionPolicy(soap*) allocate
/// - soap_new__wsnt__Subscribe_SubscriptionPolicy(soap*, int num) allocate array
/// - soap_new_req__wsnt__Subscribe_SubscriptionPolicy(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__Subscribe_SubscriptionPolicy(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__Subscribe_SubscriptionPolicy(soap*, _wsnt__Subscribe_SubscriptionPolicy*) deserialize from a stream
/// - int soap_write__wsnt__Subscribe_SubscriptionPolicy(soap, _wsnt__Subscribe_SubscriptionPolicy*) serialize to a stream
    class _wsnt__Subscribe_SubscriptionPolicy
    {
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }                                   *SubscriptionPolicy             0;	///< Optional element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscribeResponse is a complexType.
///
/// class _wsnt__SubscribeResponse operations:
/// - soap_new__wsnt__SubscribeResponse(soap*) allocate
/// - soap_new__wsnt__SubscribeResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__SubscribeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__SubscribeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__SubscribeResponse(soap*, _wsnt__SubscribeResponse*) deserialize from a stream
/// - int soap_write__wsnt__SubscribeResponse(soap, _wsnt__SubscribeResponse*) serialize to a stream
class _wsnt__SubscribeResponse
{ public:
/// Element "SubscriptionReference" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          SubscriptionReference          1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    time_t*                              CurrentTime                    0;	///< Optional element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    time_t*                              TerminationTime                0;	///< Optional element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessage is a complexType.
///
/// class _wsnt__GetCurrentMessage operations:
/// - soap_new__wsnt__GetCurrentMessage(soap*) allocate
/// - soap_new__wsnt__GetCurrentMessage(soap*, int num) allocate array
/// - soap_new_req__wsnt__GetCurrentMessage(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__GetCurrentMessage(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__GetCurrentMessage(soap*, _wsnt__GetCurrentMessage*) deserialize from a stream
/// - int soap_write__wsnt__GetCurrentMessage(soap, _wsnt__GetCurrentMessage*) serialize to a stream
class _wsnt__GetCurrentMessage
{ public:
/// Element "Topic" of XSD type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
    wsnt__TopicExpressionType*           Topic                          1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetCurrentMessageResponse is a complexType.
///
/// class _wsnt__GetCurrentMessageResponse operations:
/// - soap_new__wsnt__GetCurrentMessageResponse(soap*) allocate
/// - soap_new__wsnt__GetCurrentMessageResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__GetCurrentMessageResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__GetCurrentMessageResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__GetCurrentMessageResponse(soap*, _wsnt__GetCurrentMessageResponse*) deserialize from a stream
/// - int soap_write__wsnt__GetCurrentMessageResponse(soap, _wsnt__GetCurrentMessageResponse*) serialize to a stream
class _wsnt__GetCurrentMessageResponse
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessages
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetMessages is a complexType.
///
/// class _wsnt__GetMessages operations:
/// - soap_new__wsnt__GetMessages(soap*) allocate
/// - soap_new__wsnt__GetMessages(soap*, int num) allocate array
/// - soap_new_req__wsnt__GetMessages(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__GetMessages(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__GetMessages(soap*, _wsnt__GetMessages*) deserialize from a stream
/// - int soap_write__wsnt__GetMessages(soap, _wsnt__GetMessages*) serialize to a stream
class _wsnt__GetMessages
{ public:
/// Element "MaximumNumber" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             MaximumNumber                  0;	///< Optional element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":GetMessagesResponse is a complexType.
///
/// class _wsnt__GetMessagesResponse operations:
/// - soap_new__wsnt__GetMessagesResponse(soap*) allocate
/// - soap_new__wsnt__GetMessagesResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__GetMessagesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__GetMessagesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__GetMessagesResponse(soap*, _wsnt__GetMessagesResponse*) deserialize from a stream
/// - int soap_write__wsnt__GetMessagesResponse(soap, _wsnt__GetMessagesResponse*) serialize to a stream
class _wsnt__GetMessagesResponse
{ public:
/// Vector of wsnt__NotificationMessageHolderType* element refs of length 0..unbounded.
    std::vector<wsnt__NotificationMessageHolderType*> NotificationMessage            0;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint
/// @brief "http://docs.oasis-open.org/wsn/b-2":DestroyPullPoint is a complexType.
///
/// class _wsnt__DestroyPullPoint operations:
/// - soap_new__wsnt__DestroyPullPoint(soap*) allocate
/// - soap_new__wsnt__DestroyPullPoint(soap*, int num) allocate array
/// - soap_new_req__wsnt__DestroyPullPoint(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__DestroyPullPoint(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__DestroyPullPoint(soap*, _wsnt__DestroyPullPoint*) deserialize from a stream
/// - int soap_write__wsnt__DestroyPullPoint(soap, _wsnt__DestroyPullPoint*) serialize to a stream
class _wsnt__DestroyPullPoint
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":DestroyPullPointResponse is a complexType.
///
/// class _wsnt__DestroyPullPointResponse operations:
/// - soap_new__wsnt__DestroyPullPointResponse(soap*) allocate
/// - soap_new__wsnt__DestroyPullPointResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__DestroyPullPointResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__DestroyPullPointResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__DestroyPullPointResponse(soap*, _wsnt__DestroyPullPointResponse*) deserialize from a stream
/// - int soap_write__wsnt__DestroyPullPointResponse(soap, _wsnt__DestroyPullPointResponse*) serialize to a stream
class _wsnt__DestroyPullPointResponse
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint
/// @brief "http://docs.oasis-open.org/wsn/b-2":CreatePullPoint is a complexType.
///
/// class _wsnt__CreatePullPoint operations:
/// - soap_new__wsnt__CreatePullPoint(soap*) allocate
/// - soap_new__wsnt__CreatePullPoint(soap*, int num) allocate array
/// - soap_new_req__wsnt__CreatePullPoint(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__CreatePullPoint(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__CreatePullPoint(soap*, _wsnt__CreatePullPoint*) deserialize from a stream
/// - int soap_write__wsnt__CreatePullPoint(soap, _wsnt__CreatePullPoint*) serialize to a stream
class _wsnt__CreatePullPoint
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":CreatePullPointResponse is a complexType.
///
/// class _wsnt__CreatePullPointResponse operations:
/// - soap_new__wsnt__CreatePullPointResponse(soap*) allocate
/// - soap_new__wsnt__CreatePullPointResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__CreatePullPointResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__CreatePullPointResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__CreatePullPointResponse(soap*, _wsnt__CreatePullPointResponse*) deserialize from a stream
/// - int soap_write__wsnt__CreatePullPointResponse(soap, _wsnt__CreatePullPointResponse*) serialize to a stream
class _wsnt__CreatePullPointResponse
{ public:
/// Element "PullPoint" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType          PullPoint                      1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Renew
/// @brief "http://docs.oasis-open.org/wsn/b-2":Renew is a complexType.
///
/// class _wsnt__Renew operations:
/// - soap_new__wsnt__Renew(soap*) allocate
/// - soap_new__wsnt__Renew(soap*, int num) allocate array
/// - soap_new_req__wsnt__Renew(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__Renew(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__Renew(soap*, _wsnt__Renew*) deserialize from a stream
/// - int soap_write__wsnt__Renew(soap, _wsnt__Renew*) serialize to a stream
class _wsnt__Renew
{ public:
/// Element "TerminationTime" of XSD type "http://docs.oasis-open.org/wsn/b-2":AbsoluteOrRelativeTimeType.
    wsnt__AbsoluteOrRelativeTimeType*    TerminationTime                1;	///< Nillable pointer.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":RenewResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":RenewResponse is a complexType.
///
/// class _wsnt__RenewResponse operations:
/// - soap_new__wsnt__RenewResponse(soap*) allocate
/// - soap_new__wsnt__RenewResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__RenewResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__RenewResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__RenewResponse(soap*, _wsnt__RenewResponse*) deserialize from a stream
/// - int soap_write__wsnt__RenewResponse(soap, _wsnt__RenewResponse*) serialize to a stream
class _wsnt__RenewResponse
{ public:
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":TerminationTime.
    time_t                               TerminationTime                1;	///< Required element.
/// Element reference "http://docs.oasis-open.org/wsn/b-2:""http://docs.oasis-open.org/wsn/b-2":CurrentTime.
    time_t*                              CurrentTime                    0;	///< Optional element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Unsubscribe
/// @brief "http://docs.oasis-open.org/wsn/b-2":Unsubscribe is a complexType.
///
/// class _wsnt__Unsubscribe operations:
/// - soap_new__wsnt__Unsubscribe(soap*) allocate
/// - soap_new__wsnt__Unsubscribe(soap*, int num) allocate array
/// - soap_new_req__wsnt__Unsubscribe(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__Unsubscribe(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__Unsubscribe(soap*, _wsnt__Unsubscribe*) deserialize from a stream
/// - int soap_write__wsnt__Unsubscribe(soap, _wsnt__Unsubscribe*) serialize to a stream
class _wsnt__Unsubscribe
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":UnsubscribeResponse is a complexType.
///
/// class _wsnt__UnsubscribeResponse operations:
/// - soap_new__wsnt__UnsubscribeResponse(soap*) allocate
/// - soap_new__wsnt__UnsubscribeResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__UnsubscribeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__UnsubscribeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__UnsubscribeResponse(soap*, _wsnt__UnsubscribeResponse*) deserialize from a stream
/// - int soap_write__wsnt__UnsubscribeResponse(soap, _wsnt__UnsubscribeResponse*) serialize to a stream
class _wsnt__UnsubscribeResponse
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscription
/// @brief "http://docs.oasis-open.org/wsn/b-2":PauseSubscription is a complexType.
///
/// class _wsnt__PauseSubscription operations:
/// - soap_new__wsnt__PauseSubscription(soap*) allocate
/// - soap_new__wsnt__PauseSubscription(soap*, int num) allocate array
/// - soap_new_req__wsnt__PauseSubscription(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__PauseSubscription(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__PauseSubscription(soap*, _wsnt__PauseSubscription*) deserialize from a stream
/// - int soap_write__wsnt__PauseSubscription(soap, _wsnt__PauseSubscription*) serialize to a stream
class _wsnt__PauseSubscription
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":PauseSubscriptionResponse is a complexType.
///
/// class _wsnt__PauseSubscriptionResponse operations:
/// - soap_new__wsnt__PauseSubscriptionResponse(soap*) allocate
/// - soap_new__wsnt__PauseSubscriptionResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__PauseSubscriptionResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__PauseSubscriptionResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__PauseSubscriptionResponse(soap*, _wsnt__PauseSubscriptionResponse*) deserialize from a stream
/// - int soap_write__wsnt__PauseSubscriptionResponse(soap, _wsnt__PauseSubscriptionResponse*) serialize to a stream
class _wsnt__PauseSubscriptionResponse
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription
/// @brief "http://docs.oasis-open.org/wsn/b-2":ResumeSubscription is a complexType.
///
/// class _wsnt__ResumeSubscription operations:
/// - soap_new__wsnt__ResumeSubscription(soap*) allocate
/// - soap_new__wsnt__ResumeSubscription(soap*, int num) allocate array
/// - soap_new_req__wsnt__ResumeSubscription(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__ResumeSubscription(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__ResumeSubscription(soap*, _wsnt__ResumeSubscription*) deserialize from a stream
/// - int soap_write__wsnt__ResumeSubscription(soap, _wsnt__ResumeSubscription*) serialize to a stream
class _wsnt__ResumeSubscription
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse
/// @brief "http://docs.oasis-open.org/wsn/b-2":ResumeSubscriptionResponse is a complexType.
///
/// class _wsnt__ResumeSubscriptionResponse operations:
/// - soap_new__wsnt__ResumeSubscriptionResponse(soap*) allocate
/// - soap_new__wsnt__ResumeSubscriptionResponse(soap*, int num) allocate array
/// - soap_new_req__wsnt__ResumeSubscriptionResponse(soap*, ...) allocate, set required members
/// - soap_new_set__wsnt__ResumeSubscriptionResponse(soap*, ...) allocate, set all public members
/// - int soap_read__wsnt__ResumeSubscriptionResponse(soap*, _wsnt__ResumeSubscriptionResponse*) deserialize from a stream
/// - int soap_write__wsnt__ResumeSubscriptionResponse(soap, _wsnt__ResumeSubscriptionResponse*) serialize to a stream
class _wsnt__ResumeSubscriptionResponse
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType is a complexType.
///
/// class wsrfbf__BaseFaultType operations:
/// - soap_new_wsrfbf__BaseFaultType(soap*) allocate
/// - soap_new_wsrfbf__BaseFaultType(soap*, int num) allocate array
/// - soap_new_req_wsrfbf__BaseFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsrfbf__BaseFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsrfbf__BaseFaultType(soap*, wsrfbf__BaseFaultType*) deserialize from a stream
/// - int soap_write_wsrfbf__BaseFaultType(soap, wsrfbf__BaseFaultType*) serialize to a stream
class wsrfbf__BaseFaultType : public xsd__anyType
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__BaseFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__BaseFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__BaseFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__BaseFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__BaseFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__BaseFaultType_ErrorCode(soap*, _wsrfbf__BaseFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__BaseFaultType_ErrorCode(soap, _wsrfbf__BaseFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__BaseFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__BaseFaultType_Description operations:
/// - soap_new__wsrfbf__BaseFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__BaseFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__BaseFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__BaseFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__BaseFaultType_Description(soap*, _wsrfbf__BaseFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__BaseFaultType_Description(soap, _wsrfbf__BaseFaultType_Description*) serialize to a stream
    class _wsrfbf__BaseFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__BaseFaultType_FaultCause operations:
/// - soap_new__wsrfbf__BaseFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__BaseFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__BaseFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__BaseFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__BaseFaultType_FaultCause(soap*, _wsrfbf__BaseFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__BaseFaultType_FaultCause(soap, _wsrfbf__BaseFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__BaseFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief "http://docs.oasis-open.org/wsn/t-1":Documentation is a complexType.
///
/// class wstop__Documentation operations:
/// - soap_new_wstop__Documentation(soap*) allocate
/// - soap_new_wstop__Documentation(soap*, int num) allocate array
/// - soap_new_req_wstop__Documentation(soap*, ...) allocate, set required members
/// - soap_new_set_wstop__Documentation(soap*, ...) allocate, set all public members
/// - int soap_read_wstop__Documentation(soap*, wstop__Documentation*) deserialize from a stream
/// - int soap_write_wstop__Documentation(soap, wstop__Documentation*) serialize to a stream
class wstop__Documentation : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo This mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string.
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented is an abstract complexType.
///
/// class wstop__ExtensibleDocumented operations:
/// - soap_new_wstop__ExtensibleDocumented(soap*) allocate
/// - soap_new_wstop__ExtensibleDocumented(soap*, int num) allocate array
/// - soap_new_req_wstop__ExtensibleDocumented(soap*, ...) allocate, set required members
/// - soap_new_set_wstop__ExtensibleDocumented(soap*, ...) allocate, set all public members
/// - int soap_read_wstop__ExtensibleDocumented(soap*, wstop__ExtensibleDocumented*) deserialize from a stream
/// - int soap_write_wstop__ExtensibleDocumented(soap, wstop__ExtensibleDocumented*) serialize to a stream
class wstop__ExtensibleDocumented : public xsd__anyType
{ public:
/// Element "documentation" of XSD type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType is a complexType.
///
/// class wstop__QueryExpressionType operations:
/// - soap_new_wstop__QueryExpressionType(soap*) allocate
/// - soap_new_wstop__QueryExpressionType(soap*, int num) allocate array
/// - soap_new_req_wstop__QueryExpressionType(soap*, ...) allocate, set required members
/// - soap_new_set_wstop__QueryExpressionType(soap*, ...) allocate, set all public members
/// - int soap_read_wstop__QueryExpressionType(soap*, wstop__QueryExpressionType*) deserialize from a stream
/// - int soap_write_wstop__QueryExpressionType(soap, wstop__QueryExpressionType*) serialize to a stream
class wstop__QueryExpressionType : public xsd__anyType
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// Attribute "Dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          Dialect                        1;	///< Required attribute.
/// @todo This mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.onvif.org/ver10/device/wsdl":Service is a complexType.
///
/// class tds__Service operations:
/// - soap_new_tds__Service(soap*) allocate
/// - soap_new_tds__Service(soap*, int num) allocate array
/// - soap_new_req_tds__Service(soap*, ...) allocate, set required members
/// - soap_new_set_tds__Service(soap*, ...) allocate, set all public members
/// - int soap_read_tds__Service(soap*, tds__Service*) deserialize from a stream
/// - int soap_write_tds__Service(soap, tds__Service*) serialize to a stream
class tds__Service : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Namespace of the service being described. This parameter allows to match the service capabilities to the service. Note that only one set of capabilities is supported per namespace.
/// </BLOCKQUOTE></PRE>
/// Element "Namespace" of XSD type xs:anyURI.
    xsd__anyURI                          Namespace                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The transport addresses where the service can be reached. The scheme and IP part shall match the one used in the request (i.e. the GetServices request).
/// </BLOCKQUOTE></PRE>
/// Element "XAddr" of XSD type xs:anyURI.
    xsd__anyURI                          XAddr                          1;	///< Required element.
/// class _tds__Service_Capabilities operations:
/// - soap_new__tds__Service_Capabilities(soap*) allocate
/// - soap_new__tds__Service_Capabilities(soap*, int num) allocate array
/// - soap_new_req__tds__Service_Capabilities(soap*, ...) allocate, set required members
/// - soap_new_set__tds__Service_Capabilities(soap*, ...) allocate, set all public members
/// - int soap_read__tds__Service_Capabilities(soap*, _tds__Service_Capabilities*) deserialize from a stream
/// - int soap_write__tds__Service_Capabilities(soap, _tds__Service_Capabilities*) serialize to a stream
    class _tds__Service_Capabilities
    {
/// @todo <any namespace="##any">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *Capabilities                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The version of the service (not the ONVIF core spec version).
/// </BLOCKQUOTE></PRE>
/// Element "Version" of XSD type "http://www.onvif.org/ver10/schema":OnvifVersion.
    tt__OnvifVersion*                    Version                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities is a complexType.
///
/// class tds__DeviceServiceCapabilities operations:
/// - soap_new_tds__DeviceServiceCapabilities(soap*) allocate
/// - soap_new_tds__DeviceServiceCapabilities(soap*, int num) allocate array
/// - soap_new_req_tds__DeviceServiceCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tds__DeviceServiceCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tds__DeviceServiceCapabilities(soap*, tds__DeviceServiceCapabilities*) deserialize from a stream
/// - int soap_write_tds__DeviceServiceCapabilities(soap, tds__DeviceServiceCapabilities*) serialize to a stream
class tds__DeviceServiceCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Network capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "Network" of XSD type "http://www.onvif.org/ver10/device/wsdl":NetworkCapabilities.
    tds__NetworkCapabilities*            Network                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Security capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "Security" of XSD type "http://www.onvif.org/ver10/device/wsdl":SecurityCapabilities.
    tds__SecurityCapabilities*           Security                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   System capabilities.
/// </BLOCKQUOTE></PRE>
/// Element "System" of XSD type "http://www.onvif.org/ver10/device/wsdl":SystemCapabilities.
    tds__SystemCapabilities*             System                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Capabilities that do not fit in any of the other categories.
/// </BLOCKQUOTE></PRE>
/// Element "Misc" of XSD type "http://www.onvif.org/ver10/device/wsdl":MiscCapabilities.
    tds__MiscCapabilities*               Misc                           0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":NetworkCapabilities is a complexType.
///
/// class tds__NetworkCapabilities operations:
/// - soap_new_tds__NetworkCapabilities(soap*) allocate
/// - soap_new_tds__NetworkCapabilities(soap*, int num) allocate array
/// - soap_new_req_tds__NetworkCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tds__NetworkCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tds__NetworkCapabilities(soap*, tds__NetworkCapabilities*) deserialize from a stream
/// - int soap_write_tds__NetworkCapabilities(soap, tds__NetworkCapabilities*) serialize to a stream
class tds__NetworkCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates support for IP filtering.
/// </BLOCKQUOTE></PRE>
/// Attribute "IPFilter" of XSD type xs:boolean.
   @bool*                                IPFilter                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for zeroconf.
/// </BLOCKQUOTE></PRE>
/// Attribute "ZeroConfiguration" of XSD type xs:boolean.
   @bool*                                ZeroConfiguration              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for IPv6.
/// </BLOCKQUOTE></PRE>
/// Attribute "IPVersion6" of XSD type xs:boolean.
   @bool*                                IPVersion6                     0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for dynamic DNS configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "DynDNS" of XSD type xs:boolean.
   @bool*                                DynDNS                         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for IEEE 802.11 configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "Dot11Configuration" of XSD type xs:boolean.
   @bool*                                Dot11Configuration             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates the maximum number of Dot1X configurations supported by the device
/// </BLOCKQUOTE></PRE>
/// Attribute "Dot1XConfigurations" of XSD type xs:int.
   @int*                                 Dot1XConfigurations            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieval of hostname from DHCP.
/// </BLOCKQUOTE></PRE>
/// Attribute "HostnameFromDHCP" of XSD type xs:boolean.
   @bool*                                HostnameFromDHCP               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of NTP servers supported by the devices SetNTP command.
/// </BLOCKQUOTE></PRE>
/// Attribute "NTP" of XSD type xs:int.
   @int*                                 NTP                            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for Stateful IPv6 DHCP.
/// </BLOCKQUOTE></PRE>
/// Attribute "DHCPv6" of XSD type xs:boolean.
   @bool*                                DHCPv6                         0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":SecurityCapabilities is a complexType.
///
/// class tds__SecurityCapabilities operations:
/// - soap_new_tds__SecurityCapabilities(soap*) allocate
/// - soap_new_tds__SecurityCapabilities(soap*, int num) allocate array
/// - soap_new_req_tds__SecurityCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tds__SecurityCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tds__SecurityCapabilities(soap*, tds__SecurityCapabilities*) deserialize from a stream
/// - int soap_write_tds__SecurityCapabilities(soap, tds__SecurityCapabilities*) serialize to a stream
class tds__SecurityCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates support for TLS 1.0.
/// </BLOCKQUOTE></PRE>
/// Attribute "TLS1.0" of XSD type xs:boolean.
   @bool*                                TLS1_x002e0                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for TLS 1.1.
/// </BLOCKQUOTE></PRE>
/// Attribute "TLS1.1" of XSD type xs:boolean.
   @bool*                                TLS1_x002e1                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for TLS 1.2.
/// </BLOCKQUOTE></PRE>
/// Attribute "TLS1.2" of XSD type xs:boolean.
   @bool*                                TLS1_x002e2                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for onboard key generation.
/// </BLOCKQUOTE></PRE>
/// Attribute "OnboardKeyGeneration" of XSD type xs:boolean.
   @bool*                                OnboardKeyGeneration           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for access policy configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "AccessPolicyConfig" of XSD type xs:boolean.
   @bool*                                AccessPolicyConfig             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for the ONVIF default access policy.
/// </BLOCKQUOTE></PRE>
/// Attribute "DefaultAccessPolicy" of XSD type xs:boolean.
   @bool*                                DefaultAccessPolicy            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for IEEE 802.1X configuration.
/// </BLOCKQUOTE></PRE>
/// Attribute "Dot1X" of XSD type xs:boolean.
   @bool*                                Dot1X                          0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for remote user configuration. Used when accessing another device.
/// </BLOCKQUOTE></PRE>
/// Attribute "RemoteUserHandling" of XSD type xs:boolean.
   @bool*                                RemoteUserHandling             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security X.509 token.
/// </BLOCKQUOTE></PRE>
/// Attribute "X.509Token" of XSD type xs:boolean.
   @bool*                                X_x002e509Token                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security SAML token.
/// </BLOCKQUOTE></PRE>
/// Attribute "SAMLToken" of XSD type xs:boolean.
   @bool*                                SAMLToken                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security Kerberos token.
/// </BLOCKQUOTE></PRE>
/// Attribute "KerberosToken" of XSD type xs:boolean.
   @bool*                                KerberosToken                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security Username token.
/// </BLOCKQUOTE></PRE>
/// Attribute "UsernameToken" of XSD type xs:boolean.
   @bool*                                UsernameToken                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS over HTTP digest authenticated communication layer.
/// </BLOCKQUOTE></PRE>
/// Attribute "HttpDigest" of XSD type xs:boolean.
   @bool*                                HttpDigest                     0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Security REL token.
/// </BLOCKQUOTE></PRE>
/// Attribute "RELToken" of XSD type xs:boolean.
   @bool*                                RELToken                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   EAP Methods supported by the device. The int values refer to the <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xhtml">IANA EAP Registry</a>.
/// </BLOCKQUOTE></PRE>
/// Attribute "SupportedEAPMethods" of XSD type "http://www.onvif.org/ver10/device/wsdl":EAPMethodTypes.
   @tds__EAPMethodTypes*                 SupportedEAPMethods            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The maximum number of users that the device supports.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxUsers" of XSD type xs:int.
   @int*                                 MaxUsers                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of characters supported for the username by CreateUsers.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxUserNameLength" of XSD type xs:int.
   @int*                                 MaxUserNameLength              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Maximum number of characters supported for the password by CreateUsers and SetUser.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxPasswordLength" of XSD type xs:int.
   @int*                                 MaxPasswordLength              0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":SystemCapabilities is a complexType.
///
/// class tds__SystemCapabilities operations:
/// - soap_new_tds__SystemCapabilities(soap*) allocate
/// - soap_new_tds__SystemCapabilities(soap*, int num) allocate array
/// - soap_new_req_tds__SystemCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tds__SystemCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tds__SystemCapabilities(soap*, tds__SystemCapabilities*) deserialize from a stream
/// - int soap_write_tds__SystemCapabilities(soap, tds__SystemCapabilities*) serialize to a stream
class tds__SystemCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS Discovery resolve requests.
/// </BLOCKQUOTE></PRE>
/// Attribute "DiscoveryResolve" of XSD type xs:boolean.
   @bool*                                DiscoveryResolve               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for WS-Discovery Bye.
/// </BLOCKQUOTE></PRE>
/// Attribute "DiscoveryBye" of XSD type xs:boolean.
   @bool*                                DiscoveryBye                   0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for remote discovery.
/// </BLOCKQUOTE></PRE>
/// Attribute "RemoteDiscovery" of XSD type xs:boolean.
   @bool*                                RemoteDiscovery                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for system backup through MTOM.
/// </BLOCKQUOTE></PRE>
/// Attribute "SystemBackup" of XSD type xs:boolean.
   @bool*                                SystemBackup                   0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieval of system logging through MTOM.
/// </BLOCKQUOTE></PRE>
/// Attribute "SystemLogging" of XSD type xs:boolean.
   @bool*                                SystemLogging                  0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for firmware upgrade through MTOM.
/// </BLOCKQUOTE></PRE>
/// Attribute "FirmwareUpgrade" of XSD type xs:boolean.
   @bool*                                FirmwareUpgrade                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for firmware upgrade through HTTP.
/// </BLOCKQUOTE></PRE>
/// Attribute "HttpFirmwareUpgrade" of XSD type xs:boolean.
   @bool*                                HttpFirmwareUpgrade            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for system backup through HTTP.
/// </BLOCKQUOTE></PRE>
/// Attribute "HttpSystemBackup" of XSD type xs:boolean.
   @bool*                                HttpSystemBackup               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieval of system logging through HTTP.
/// </BLOCKQUOTE></PRE>
/// Attribute "HttpSystemLogging" of XSD type xs:boolean.
   @bool*                                HttpSystemLogging              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for retrieving support information through HTTP.
/// </BLOCKQUOTE></PRE>
/// Attribute "HttpSupportInformation" of XSD type xs:boolean.
   @bool*                                HttpSupportInformation         0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates support for storage configuration interfaces.
/// </BLOCKQUOTE></PRE>
/// Attribute "StorageConfiguration" of XSD type xs:boolean.
   @bool*                                StorageConfiguration           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indicates maximum number of storage configurations supported.
/// </BLOCKQUOTE></PRE>
/// Attribute "MaxStorageConfigurations" of XSD type xs:int.
   @int*                                 MaxStorageConfigurations       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   If present signals support for geo location. The value signals the supported number of entries.
/// </BLOCKQUOTE></PRE>
/// Attribute "GeoLocationEntries" of XSD type xs:int.
   @int*                                 GeoLocationEntries             0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   List of supported automatic GeoLocation adjustment supported by the device. Valid items are defined by tds:AutoGeoMode.
/// </BLOCKQUOTE></PRE>
/// Attribute "AutoGeo" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  AutoGeo                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Enumerates the supported StorageTypes, see tds:StorageType.
/// </BLOCKQUOTE></PRE>
/// Attribute "StorageTypesSupported" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  StorageTypesSupported          0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":MiscCapabilities is a complexType.
///
/// class tds__MiscCapabilities operations:
/// - soap_new_tds__MiscCapabilities(soap*) allocate
/// - soap_new_tds__MiscCapabilities(soap*, int num) allocate array
/// - soap_new_req_tds__MiscCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set_tds__MiscCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read_tds__MiscCapabilities(soap*, tds__MiscCapabilities*) deserialize from a stream
/// - int soap_write_tds__MiscCapabilities(soap, tds__MiscCapabilities*) serialize to a stream
class tds__MiscCapabilities : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lists of commands supported by SendAuxiliaryCommand.
/// </BLOCKQUOTE></PRE>
/// Attribute "AuxiliaryCommands" of XSD type "http://www.onvif.org/ver10/schema":StringAttrList.
   @tt__StringAttrList*                  AuxiliaryCommands              0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":UserCredential is a complexType.
///
/// class tds__UserCredential operations:
/// - soap_new_tds__UserCredential(soap*) allocate
/// - soap_new_tds__UserCredential(soap*, int num) allocate array
/// - soap_new_req_tds__UserCredential(soap*, ...) allocate, set required members
/// - soap_new_set_tds__UserCredential(soap*, ...) allocate, set all public members
/// - int soap_read_tds__UserCredential(soap*, tds__UserCredential*) deserialize from a stream
/// - int soap_write_tds__UserCredential(soap, tds__UserCredential*) serialize to a stream
class tds__UserCredential : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   User name
/// </BLOCKQUOTE></PRE>
/// Element "UserName" of XSD type xs:string.
    std::string                          UserName                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   optional password
/// </BLOCKQUOTE></PRE>
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// class _tds__UserCredential_Extension operations:
/// - soap_new__tds__UserCredential_Extension(soap*) allocate
/// - soap_new__tds__UserCredential_Extension(soap*, int num) allocate array
/// - soap_new_req__tds__UserCredential_Extension(soap*, ...) allocate, set required members
/// - soap_new_set__tds__UserCredential_Extension(soap*, ...) allocate, set all public members
/// - int soap_read__tds__UserCredential_Extension(soap*, _tds__UserCredential_Extension*) deserialize from a stream
/// - int soap_write__tds__UserCredential_Extension(soap, _tds__UserCredential_Extension*) serialize to a stream
    class _tds__UserCredential_Extension
    {
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }                                   *Extension                      0;	///< Optional element.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":StorageConfigurationData is a complexType.
///
/// class tds__StorageConfigurationData operations:
/// - soap_new_tds__StorageConfigurationData(soap*) allocate
/// - soap_new_tds__StorageConfigurationData(soap*, int num) allocate array
/// - soap_new_req_tds__StorageConfigurationData(soap*, ...) allocate, set required members
/// - soap_new_set_tds__StorageConfigurationData(soap*, ...) allocate, set all public members
/// - int soap_read_tds__StorageConfigurationData(soap*, tds__StorageConfigurationData*) deserialize from a stream
/// - int soap_write_tds__StorageConfigurationData(soap, tds__StorageConfigurationData*) serialize to a stream
class tds__StorageConfigurationData : public xsd__anyType
{ public:
/// <PRE><BLOCKQUOTE>
///   local path
/// </BLOCKQUOTE></PRE>
/// Element "LocalPath" of XSD type xs:anyURI.
    xsd__anyURI*                         LocalPath                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Storage server address
/// </BLOCKQUOTE></PRE>
/// Element "StorageUri" of XSD type xs:anyURI.
    xsd__anyURI*                         StorageUri                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   User credential for the storage server
/// </BLOCKQUOTE></PRE>
/// Element "User" of XSD type "http://www.onvif.org/ver10/device/wsdl":UserCredential.
    tds__UserCredential*                 User                           0;	///< Optional element.
/// class _tds__StorageConfigurationData_Extension operations:
/// - soap_new__tds__StorageConfigurationData_Extension(soap*) allocate
/// - soap_new__tds__StorageConfigurationData_Extension(soap*, int num) allocate array
/// - soap_new_req__tds__StorageConfigurationData_Extension(soap*, ...) allocate, set required members
/// - soap_new_set__tds__StorageConfigurationData_Extension(soap*, ...) allocate, set all public members
/// - int soap_read__tds__StorageConfigurationData_Extension(soap*, _tds__StorageConfigurationData_Extension*) deserialize from a stream
/// - int soap_write__tds__StorageConfigurationData_Extension(soap, _tds__StorageConfigurationData_Extension*) serialize to a stream
    class _tds__StorageConfigurationData_Extension
    {
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }                                   *Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   StorageType lists the acceptable values for type attribute
/// </BLOCKQUOTE></PRE>
/// Attribute "type" of XSD type xs:string.
   @std::string                          type                           1;	///< Required attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServices
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServices is a complexType.
///
/// class _tds__GetServices operations:
/// - soap_new__tds__GetServices(soap*) allocate
/// - soap_new__tds__GetServices(soap*, int num) allocate array
/// - soap_new_req__tds__GetServices(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetServices(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetServices(soap*, _tds__GetServices*) deserialize from a stream
/// - int soap_write__tds__GetServices(soap, _tds__GetServices*) serialize to a stream
class _tds__GetServices
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if the service capabilities (untyped) should be included in the response.
/// </BLOCKQUOTE></PRE>
/// Element "IncludeCapability" of XSD type xs:boolean.
    bool                                 IncludeCapability              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServicesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServicesResponse is a complexType.
///
/// class _tds__GetServicesResponse operations:
/// - soap_new__tds__GetServicesResponse(soap*) allocate
/// - soap_new__tds__GetServicesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetServicesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetServicesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetServicesResponse(soap*, _tds__GetServicesResponse*) deserialize from a stream
/// - int soap_write__tds__GetServicesResponse(soap, _tds__GetServicesResponse*) serialize to a stream
class _tds__GetServicesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Each Service element contains information about one service.
/// </BLOCKQUOTE></PRE>
/// Vector of tds__Service* of length 1..unbounded.
    std::vector<tds__Service*          > Service                        1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilities
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilities is a complexType.
///
/// class _tds__GetServiceCapabilities operations:
/// - soap_new__tds__GetServiceCapabilities(soap*) allocate
/// - soap_new__tds__GetServiceCapabilities(soap*, int num) allocate array
/// - soap_new_req__tds__GetServiceCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetServiceCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetServiceCapabilities(soap*, _tds__GetServiceCapabilities*) deserialize from a stream
/// - int soap_write__tds__GetServiceCapabilities(soap, _tds__GetServiceCapabilities*) serialize to a stream
class _tds__GetServiceCapabilities
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetServiceCapabilitiesResponse is a complexType.
///
/// class _tds__GetServiceCapabilitiesResponse operations:
/// - soap_new__tds__GetServiceCapabilitiesResponse(soap*) allocate
/// - soap_new__tds__GetServiceCapabilitiesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetServiceCapabilitiesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetServiceCapabilitiesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetServiceCapabilitiesResponse(soap*, _tds__GetServiceCapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tds__GetServiceCapabilitiesResponse(soap, _tds__GetServiceCapabilitiesResponse*) serialize to a stream
class _tds__GetServiceCapabilitiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The capabilities for the device service is returned in the Capabilities element.
/// </BLOCKQUOTE></PRE>
/// Element "Capabilities" of XSD type "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities.
    tds__DeviceServiceCapabilities*      Capabilities                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformation is a complexType.
///
/// class _tds__GetDeviceInformation operations:
/// - soap_new__tds__GetDeviceInformation(soap*) allocate
/// - soap_new__tds__GetDeviceInformation(soap*, int num) allocate array
/// - soap_new_req__tds__GetDeviceInformation(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDeviceInformation(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDeviceInformation(soap*, _tds__GetDeviceInformation*) deserialize from a stream
/// - int soap_write__tds__GetDeviceInformation(soap, _tds__GetDeviceInformation*) serialize to a stream
class _tds__GetDeviceInformation
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDeviceInformationResponse is a complexType.
///
/// class _tds__GetDeviceInformationResponse operations:
/// - soap_new__tds__GetDeviceInformationResponse(soap*) allocate
/// - soap_new__tds__GetDeviceInformationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDeviceInformationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDeviceInformationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDeviceInformationResponse(soap*, _tds__GetDeviceInformationResponse*) deserialize from a stream
/// - int soap_write__tds__GetDeviceInformationResponse(soap, _tds__GetDeviceInformationResponse*) serialize to a stream
class _tds__GetDeviceInformationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   The manufactor of the device.
/// </BLOCKQUOTE></PRE>
/// Element "Manufacturer" of XSD type xs:string.
    std::string                          Manufacturer                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The device model.
/// </BLOCKQUOTE></PRE>
/// Element "Model" of XSD type xs:string.
    std::string                          Model                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The firmware version in the device.
/// </BLOCKQUOTE></PRE>
/// Element "FirmwareVersion" of XSD type xs:string.
    std::string                          FirmwareVersion                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The serial number of the device.
/// </BLOCKQUOTE></PRE>
/// Element "SerialNumber" of XSD type xs:string.
    std::string                          SerialNumber                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The hardware ID of the device.
/// </BLOCKQUOTE></PRE>
/// Element "HardwareId" of XSD type xs:string.
    std::string                          HardwareId                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTime
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTime is a complexType.
///
/// class _tds__SetSystemDateAndTime operations:
/// - soap_new__tds__SetSystemDateAndTime(soap*) allocate
/// - soap_new__tds__SetSystemDateAndTime(soap*, int num) allocate array
/// - soap_new_req__tds__SetSystemDateAndTime(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetSystemDateAndTime(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetSystemDateAndTime(soap*, _tds__SetSystemDateAndTime*) deserialize from a stream
/// - int soap_write__tds__SetSystemDateAndTime(soap, _tds__SetSystemDateAndTime*) serialize to a stream
class _tds__SetSystemDateAndTime
{ public:
/// <PRE><BLOCKQUOTE>
///   Defines if the date and time is set via NTP or manually.
/// </BLOCKQUOTE></PRE>
/// Element "DateTimeType" of XSD type "http://www.onvif.org/ver10/schema":SetDateTimeType.
    enum tt__SetDateTimeType             DateTimeType                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Automatically adjust Daylight savings if defined in TimeZone.
/// </BLOCKQUOTE></PRE>
/// Element "DaylightSavings" of XSD type xs:boolean.
    bool                                 DaylightSavings                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The time zone in POSIX 1003.1 format
/// </BLOCKQUOTE></PRE>
/// Element "TimeZone" of XSD type "http://www.onvif.org/ver10/schema":TimeZone.
    tt__TimeZone*                        TimeZone                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time in UTC. If time is obtained via NTP, UTCDateTime has no meaning
/// </BLOCKQUOTE></PRE>
/// Element "UTCDateTime" of XSD type "http://www.onvif.org/ver10/schema":DateTime.
    tt__DateTime*                        UTCDateTime                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTimeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemDateAndTimeResponse is a complexType.
///
/// class _tds__SetSystemDateAndTimeResponse operations:
/// - soap_new__tds__SetSystemDateAndTimeResponse(soap*) allocate
/// - soap_new__tds__SetSystemDateAndTimeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetSystemDateAndTimeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetSystemDateAndTimeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetSystemDateAndTimeResponse(soap*, _tds__SetSystemDateAndTimeResponse*) deserialize from a stream
/// - int soap_write__tds__SetSystemDateAndTimeResponse(soap, _tds__SetSystemDateAndTimeResponse*) serialize to a stream
class _tds__SetSystemDateAndTimeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTime
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTime is a complexType.
///
/// class _tds__GetSystemDateAndTime operations:
/// - soap_new__tds__GetSystemDateAndTime(soap*) allocate
/// - soap_new__tds__GetSystemDateAndTime(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemDateAndTime(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemDateAndTime(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemDateAndTime(soap*, _tds__GetSystemDateAndTime*) deserialize from a stream
/// - int soap_write__tds__GetSystemDateAndTime(soap, _tds__GetSystemDateAndTime*) serialize to a stream
class _tds__GetSystemDateAndTime
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTimeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemDateAndTimeResponse is a complexType.
///
/// class _tds__GetSystemDateAndTimeResponse operations:
/// - soap_new__tds__GetSystemDateAndTimeResponse(soap*) allocate
/// - soap_new__tds__GetSystemDateAndTimeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemDateAndTimeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemDateAndTimeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemDateAndTimeResponse(soap*, _tds__GetSystemDateAndTimeResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemDateAndTimeResponse(soap, _tds__GetSystemDateAndTimeResponse*) serialize to a stream
class _tds__GetSystemDateAndTimeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
/// </BLOCKQUOTE></PRE>
/// Element "SystemDateAndTime" of XSD type "http://www.onvif.org/ver10/schema":SystemDateTime.
    tt__SystemDateTime*                  SystemDateAndTime              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefault
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefault is a complexType.
///
/// class _tds__SetSystemFactoryDefault operations:
/// - soap_new__tds__SetSystemFactoryDefault(soap*) allocate
/// - soap_new__tds__SetSystemFactoryDefault(soap*, int num) allocate array
/// - soap_new_req__tds__SetSystemFactoryDefault(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetSystemFactoryDefault(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetSystemFactoryDefault(soap*, _tds__SetSystemFactoryDefault*) deserialize from a stream
/// - int soap_write__tds__SetSystemFactoryDefault(soap, _tds__SetSystemFactoryDefault*) serialize to a stream
class _tds__SetSystemFactoryDefault
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the factory default action type.
/// </BLOCKQUOTE></PRE>
/// Element "FactoryDefault" of XSD type "http://www.onvif.org/ver10/schema":FactoryDefaultType.
    enum tt__FactoryDefaultType          FactoryDefault                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefaultResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetSystemFactoryDefaultResponse is a complexType.
///
/// class _tds__SetSystemFactoryDefaultResponse operations:
/// - soap_new__tds__SetSystemFactoryDefaultResponse(soap*) allocate
/// - soap_new__tds__SetSystemFactoryDefaultResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetSystemFactoryDefaultResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetSystemFactoryDefaultResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetSystemFactoryDefaultResponse(soap*, _tds__SetSystemFactoryDefaultResponse*) deserialize from a stream
/// - int soap_write__tds__SetSystemFactoryDefaultResponse(soap, _tds__SetSystemFactoryDefaultResponse*) serialize to a stream
class _tds__SetSystemFactoryDefaultResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmware
/// @brief "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmware is a complexType.
///
/// class _tds__UpgradeSystemFirmware operations:
/// - soap_new__tds__UpgradeSystemFirmware(soap*) allocate
/// - soap_new__tds__UpgradeSystemFirmware(soap*, int num) allocate array
/// - soap_new_req__tds__UpgradeSystemFirmware(soap*, ...) allocate, set required members
/// - soap_new_set__tds__UpgradeSystemFirmware(soap*, ...) allocate, set all public members
/// - int soap_read__tds__UpgradeSystemFirmware(soap*, _tds__UpgradeSystemFirmware*) deserialize from a stream
/// - int soap_write__tds__UpgradeSystemFirmware(soap, _tds__UpgradeSystemFirmware*) serialize to a stream
class _tds__UpgradeSystemFirmware
{ public:
/// Element "Firmware" of XSD type "http://www.onvif.org/ver10/schema":AttachmentData.
    tt__AttachmentData*                  Firmware                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmwareResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":UpgradeSystemFirmwareResponse is a complexType.
///
/// class _tds__UpgradeSystemFirmwareResponse operations:
/// - soap_new__tds__UpgradeSystemFirmwareResponse(soap*) allocate
/// - soap_new__tds__UpgradeSystemFirmwareResponse(soap*, int num) allocate array
/// - soap_new_req__tds__UpgradeSystemFirmwareResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__UpgradeSystemFirmwareResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__UpgradeSystemFirmwareResponse(soap*, _tds__UpgradeSystemFirmwareResponse*) deserialize from a stream
/// - int soap_write__tds__UpgradeSystemFirmwareResponse(soap, _tds__UpgradeSystemFirmwareResponse*) serialize to a stream
class _tds__UpgradeSystemFirmwareResponse
{ public:
/// Element "Message" of XSD type xs:string.
    std::string*                         Message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SystemReboot
/// @brief "http://www.onvif.org/ver10/device/wsdl":SystemReboot is a complexType.
///
/// class _tds__SystemReboot operations:
/// - soap_new__tds__SystemReboot(soap*) allocate
/// - soap_new__tds__SystemReboot(soap*, int num) allocate array
/// - soap_new_req__tds__SystemReboot(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SystemReboot(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SystemReboot(soap*, _tds__SystemReboot*) deserialize from a stream
/// - int soap_write__tds__SystemReboot(soap, _tds__SystemReboot*) serialize to a stream
class _tds__SystemReboot
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SystemRebootResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SystemRebootResponse is a complexType.
///
/// class _tds__SystemRebootResponse operations:
/// - soap_new__tds__SystemRebootResponse(soap*) allocate
/// - soap_new__tds__SystemRebootResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SystemRebootResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SystemRebootResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SystemRebootResponse(soap*, _tds__SystemRebootResponse*) deserialize from a stream
/// - int soap_write__tds__SystemRebootResponse(soap, _tds__SystemRebootResponse*) serialize to a stream
class _tds__SystemRebootResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the reboot message sent by the device.
/// </BLOCKQUOTE></PRE>
/// Element "Message" of XSD type xs:string.
    std::string                          Message                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RestoreSystem
/// @brief "http://www.onvif.org/ver10/device/wsdl":RestoreSystem is a complexType.
///
/// class _tds__RestoreSystem operations:
/// - soap_new__tds__RestoreSystem(soap*) allocate
/// - soap_new__tds__RestoreSystem(soap*, int num) allocate array
/// - soap_new_req__tds__RestoreSystem(soap*, ...) allocate, set required members
/// - soap_new_set__tds__RestoreSystem(soap*, ...) allocate, set all public members
/// - int soap_read__tds__RestoreSystem(soap*, _tds__RestoreSystem*) deserialize from a stream
/// - int soap_write__tds__RestoreSystem(soap, _tds__RestoreSystem*) serialize to a stream
class _tds__RestoreSystem
{ public:
/// Vector of tt__BackupFile* of length 1..unbounded.
    std::vector<tt__BackupFile*        > BackupFiles                    1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RestoreSystemResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":RestoreSystemResponse is a complexType.
///
/// class _tds__RestoreSystemResponse operations:
/// - soap_new__tds__RestoreSystemResponse(soap*) allocate
/// - soap_new__tds__RestoreSystemResponse(soap*, int num) allocate array
/// - soap_new_req__tds__RestoreSystemResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__RestoreSystemResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__RestoreSystemResponse(soap*, _tds__RestoreSystemResponse*) deserialize from a stream
/// - int soap_write__tds__RestoreSystemResponse(soap, _tds__RestoreSystemResponse*) serialize to a stream
class _tds__RestoreSystemResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemBackup
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemBackup is a complexType.
///
/// class _tds__GetSystemBackup operations:
/// - soap_new__tds__GetSystemBackup(soap*) allocate
/// - soap_new__tds__GetSystemBackup(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemBackup(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemBackup(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemBackup(soap*, _tds__GetSystemBackup*) deserialize from a stream
/// - int soap_write__tds__GetSystemBackup(soap, _tds__GetSystemBackup*) serialize to a stream
class _tds__GetSystemBackup
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemBackupResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemBackupResponse is a complexType.
///
/// class _tds__GetSystemBackupResponse operations:
/// - soap_new__tds__GetSystemBackupResponse(soap*) allocate
/// - soap_new__tds__GetSystemBackupResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemBackupResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemBackupResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemBackupResponse(soap*, _tds__GetSystemBackupResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemBackupResponse(soap, _tds__GetSystemBackupResponse*) serialize to a stream
class _tds__GetSystemBackupResponse
{ public:
/// Vector of tt__BackupFile* of length 1..unbounded.
    std::vector<tt__BackupFile*        > BackupFiles                    1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformation is a complexType.
///
/// class _tds__GetSystemSupportInformation operations:
/// - soap_new__tds__GetSystemSupportInformation(soap*) allocate
/// - soap_new__tds__GetSystemSupportInformation(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemSupportInformation(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemSupportInformation(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemSupportInformation(soap*, _tds__GetSystemSupportInformation*) deserialize from a stream
/// - int soap_write__tds__GetSystemSupportInformation(soap, _tds__GetSystemSupportInformation*) serialize to a stream
class _tds__GetSystemSupportInformation
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemSupportInformationResponse is a complexType.
///
/// class _tds__GetSystemSupportInformationResponse operations:
/// - soap_new__tds__GetSystemSupportInformationResponse(soap*) allocate
/// - soap_new__tds__GetSystemSupportInformationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemSupportInformationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemSupportInformationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemSupportInformationResponse(soap*, _tds__GetSystemSupportInformationResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemSupportInformationResponse(soap, _tds__GetSystemSupportInformationResponse*) serialize to a stream
class _tds__GetSystemSupportInformationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the arbitary device diagnostics information.
/// </BLOCKQUOTE></PRE>
/// Element "SupportInformation" of XSD type "http://www.onvif.org/ver10/schema":SupportInformation.
    tt__SupportInformation*              SupportInformation             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemLog
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemLog is a complexType.
///
/// class _tds__GetSystemLog operations:
/// - soap_new__tds__GetSystemLog(soap*) allocate
/// - soap_new__tds__GetSystemLog(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemLog(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemLog(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemLog(soap*, _tds__GetSystemLog*) deserialize from a stream
/// - int soap_write__tds__GetSystemLog(soap, _tds__GetSystemLog*) serialize to a stream
class _tds__GetSystemLog
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the type of system log to get.
/// </BLOCKQUOTE></PRE>
/// Element "LogType" of XSD type "http://www.onvif.org/ver10/schema":SystemLogType.
    enum tt__SystemLogType               LogType                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemLogResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemLogResponse is a complexType.
///
/// class _tds__GetSystemLogResponse operations:
/// - soap_new__tds__GetSystemLogResponse(soap*) allocate
/// - soap_new__tds__GetSystemLogResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemLogResponse(soap*, _tds__GetSystemLogResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemLogResponse(soap, _tds__GetSystemLogResponse*) serialize to a stream
class _tds__GetSystemLogResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the system log information.
/// </BLOCKQUOTE></PRE>
/// Element "SystemLog" of XSD type "http://www.onvif.org/ver10/schema":SystemLog.
    tt__SystemLog*                       SystemLog                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetScopes is a complexType.
///
/// class _tds__GetScopes operations:
/// - soap_new__tds__GetScopes(soap*) allocate
/// - soap_new__tds__GetScopes(soap*, int num) allocate array
/// - soap_new_req__tds__GetScopes(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetScopes(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetScopes(soap*, _tds__GetScopes*) deserialize from a stream
/// - int soap_write__tds__GetScopes(soap, _tds__GetScopes*) serialize to a stream
class _tds__GetScopes
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetScopesResponse is a complexType.
///
/// class _tds__GetScopesResponse operations:
/// - soap_new__tds__GetScopesResponse(soap*) allocate
/// - soap_new__tds__GetScopesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetScopesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetScopesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetScopesResponse(soap*, _tds__GetScopesResponse*) deserialize from a stream
/// - int soap_write__tds__GetScopesResponse(soap, _tds__GetScopesResponse*) serialize to a stream
class _tds__GetScopesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of URI definining the device scopes. Scope parameters can be of two types: fixed and configurable. Fixed parameters can not be altered.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Scope* of length 1..unbounded.
    std::vector<tt__Scope*             > Scopes                         1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetScopes is a complexType.
///
/// class _tds__SetScopes operations:
/// - soap_new__tds__SetScopes(soap*) allocate
/// - soap_new__tds__SetScopes(soap*, int num) allocate array
/// - soap_new_req__tds__SetScopes(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetScopes(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetScopes(soap*, _tds__SetScopes*) deserialize from a stream
/// - int soap_write__tds__SetScopes(soap, _tds__SetScopes*) serialize to a stream
class _tds__SetScopes
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of scope parameters that will replace all existing configurable scope parameters.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > Scopes                         1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetScopesResponse is a complexType.
///
/// class _tds__SetScopesResponse operations:
/// - soap_new__tds__SetScopesResponse(soap*) allocate
/// - soap_new__tds__SetScopesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetScopesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetScopesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetScopesResponse(soap*, _tds__SetScopesResponse*) deserialize from a stream
/// - int soap_write__tds__SetScopesResponse(soap, _tds__SetScopesResponse*) serialize to a stream
class _tds__SetScopesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddScopes is a complexType.
///
/// class _tds__AddScopes operations:
/// - soap_new__tds__AddScopes(soap*) allocate
/// - soap_new__tds__AddScopes(soap*, int num) allocate array
/// - soap_new_req__tds__AddScopes(soap*, ...) allocate, set required members
/// - soap_new_set__tds__AddScopes(soap*, ...) allocate, set all public members
/// - int soap_read__tds__AddScopes(soap*, _tds__AddScopes*) deserialize from a stream
/// - int soap_write__tds__AddScopes(soap, _tds__AddScopes*) serialize to a stream
class _tds__AddScopes
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > ScopeItem                      1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddScopesResponse is a complexType.
///
/// class _tds__AddScopesResponse operations:
/// - soap_new__tds__AddScopesResponse(soap*) allocate
/// - soap_new__tds__AddScopesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__AddScopesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__AddScopesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__AddScopesResponse(soap*, _tds__AddScopesResponse*) deserialize from a stream
/// - int soap_write__tds__AddScopesResponse(soap, _tds__AddScopesResponse*) serialize to a stream
class _tds__AddScopesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveScopes
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveScopes is a complexType.
///
/// class _tds__RemoveScopes operations:
/// - soap_new__tds__RemoveScopes(soap*) allocate
/// - soap_new__tds__RemoveScopes(soap*, int num) allocate array
/// - soap_new_req__tds__RemoveScopes(soap*, ...) allocate, set required members
/// - soap_new_set__tds__RemoveScopes(soap*, ...) allocate, set all public members
/// - int soap_read__tds__RemoveScopes(soap*, _tds__RemoveScopes*) deserialize from a stream
/// - int soap_write__tds__RemoveScopes(soap, _tds__RemoveScopes*) serialize to a stream
class _tds__RemoveScopes
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of URIs that should be removed from the device scope.<br/>
///   Note that the response message always will match the request or an error will be returned. The use of the response is for that reason deprecated.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 1..unbounded.
    std::vector<xsd__anyURI            > ScopeItem                      1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveScopesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveScopesResponse is a complexType.
///
/// class _tds__RemoveScopesResponse operations:
/// - soap_new__tds__RemoveScopesResponse(soap*) allocate
/// - soap_new__tds__RemoveScopesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__RemoveScopesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__RemoveScopesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__RemoveScopesResponse(soap*, _tds__RemoveScopesResponse*) deserialize from a stream
/// - int soap_write__tds__RemoveScopesResponse(soap, _tds__RemoveScopesResponse*) serialize to a stream
class _tds__RemoveScopesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of URIs that has been removed from the device scope
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > ScopeItem                      0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryMode is a complexType.
///
/// class _tds__GetDiscoveryMode operations:
/// - soap_new__tds__GetDiscoveryMode(soap*) allocate
/// - soap_new__tds__GetDiscoveryMode(soap*, int num) allocate array
/// - soap_new_req__tds__GetDiscoveryMode(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDiscoveryMode(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDiscoveryMode(soap*, _tds__GetDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__GetDiscoveryMode(soap, _tds__GetDiscoveryMode*) serialize to a stream
class _tds__GetDiscoveryMode
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDiscoveryModeResponse is a complexType.
///
/// class _tds__GetDiscoveryModeResponse operations:
/// - soap_new__tds__GetDiscoveryModeResponse(soap*) allocate
/// - soap_new__tds__GetDiscoveryModeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDiscoveryModeResponse(soap*, _tds__GetDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__GetDiscoveryModeResponse(soap, _tds__GetDiscoveryModeResponse*) serialize to a stream
class _tds__GetDiscoveryModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
/// Element "DiscoveryMode" of XSD type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum tt__DiscoveryMode               DiscoveryMode                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryMode is a complexType.
///
/// class _tds__SetDiscoveryMode operations:
/// - soap_new__tds__SetDiscoveryMode(soap*) allocate
/// - soap_new__tds__SetDiscoveryMode(soap*, int num) allocate array
/// - soap_new_req__tds__SetDiscoveryMode(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDiscoveryMode(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDiscoveryMode(soap*, _tds__SetDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__SetDiscoveryMode(soap, _tds__SetDiscoveryMode*) serialize to a stream
class _tds__SetDiscoveryMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
/// Element "DiscoveryMode" of XSD type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum tt__DiscoveryMode               DiscoveryMode                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDiscoveryModeResponse is a complexType.
///
/// class _tds__SetDiscoveryModeResponse operations:
/// - soap_new__tds__SetDiscoveryModeResponse(soap*) allocate
/// - soap_new__tds__SetDiscoveryModeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDiscoveryModeResponse(soap*, _tds__SetDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__SetDiscoveryModeResponse(soap, _tds__SetDiscoveryModeResponse*) serialize to a stream
class _tds__SetDiscoveryModeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryMode is a complexType.
///
/// class _tds__GetRemoteDiscoveryMode operations:
/// - soap_new__tds__GetRemoteDiscoveryMode(soap*) allocate
/// - soap_new__tds__GetRemoteDiscoveryMode(soap*, int num) allocate array
/// - soap_new_req__tds__GetRemoteDiscoveryMode(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetRemoteDiscoveryMode(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetRemoteDiscoveryMode(soap*, _tds__GetRemoteDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__GetRemoteDiscoveryMode(soap, _tds__GetRemoteDiscoveryMode*) serialize to a stream
class _tds__GetRemoteDiscoveryMode
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteDiscoveryModeResponse is a complexType.
///
/// class _tds__GetRemoteDiscoveryModeResponse operations:
/// - soap_new__tds__GetRemoteDiscoveryModeResponse(soap*) allocate
/// - soap_new__tds__GetRemoteDiscoveryModeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetRemoteDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetRemoteDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetRemoteDiscoveryModeResponse(soap*, _tds__GetRemoteDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__GetRemoteDiscoveryModeResponse(soap, _tds__GetRemoteDiscoveryModeResponse*) serialize to a stream
class _tds__GetRemoteDiscoveryModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
/// Element "RemoteDiscoveryMode" of XSD type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum tt__DiscoveryMode               RemoteDiscoveryMode            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryMode is a complexType.
///
/// class _tds__SetRemoteDiscoveryMode operations:
/// - soap_new__tds__SetRemoteDiscoveryMode(soap*) allocate
/// - soap_new__tds__SetRemoteDiscoveryMode(soap*, int num) allocate array
/// - soap_new_req__tds__SetRemoteDiscoveryMode(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRemoteDiscoveryMode(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRemoteDiscoveryMode(soap*, _tds__SetRemoteDiscoveryMode*) deserialize from a stream
/// - int soap_write__tds__SetRemoteDiscoveryMode(soap, _tds__SetRemoteDiscoveryMode*) serialize to a stream
class _tds__SetRemoteDiscoveryMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicator of discovery mode: Discoverable, NonDiscoverable.
/// </BLOCKQUOTE></PRE>
/// Element "RemoteDiscoveryMode" of XSD type "http://www.onvif.org/ver10/schema":DiscoveryMode.
    enum tt__DiscoveryMode               RemoteDiscoveryMode            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteDiscoveryModeResponse is a complexType.
///
/// class _tds__SetRemoteDiscoveryModeResponse operations:
/// - soap_new__tds__SetRemoteDiscoveryModeResponse(soap*) allocate
/// - soap_new__tds__SetRemoteDiscoveryModeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetRemoteDiscoveryModeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRemoteDiscoveryModeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRemoteDiscoveryModeResponse(soap*, _tds__SetRemoteDiscoveryModeResponse*) deserialize from a stream
/// - int soap_write__tds__SetRemoteDiscoveryModeResponse(soap, _tds__SetRemoteDiscoveryModeResponse*) serialize to a stream
class _tds__SetRemoteDiscoveryModeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDPAddresses
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDPAddresses is a complexType.
///
/// class _tds__GetDPAddresses operations:
/// - soap_new__tds__GetDPAddresses(soap*) allocate
/// - soap_new__tds__GetDPAddresses(soap*, int num) allocate array
/// - soap_new_req__tds__GetDPAddresses(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDPAddresses(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDPAddresses(soap*, _tds__GetDPAddresses*) deserialize from a stream
/// - int soap_write__tds__GetDPAddresses(soap, _tds__GetDPAddresses*) serialize to a stream
class _tds__GetDPAddresses
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDPAddressesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDPAddressesResponse is a complexType.
///
/// class _tds__GetDPAddressesResponse operations:
/// - soap_new__tds__GetDPAddressesResponse(soap*) allocate
/// - soap_new__tds__GetDPAddressesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDPAddressesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDPAddressesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDPAddressesResponse(soap*, _tds__GetDPAddressesResponse*) deserialize from a stream
/// - int soap_write__tds__GetDPAddressesResponse(soap, _tds__GetDPAddressesResponse*) serialize to a stream
class _tds__GetDPAddressesResponse
{ public:
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > DPAddress                      0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDPAddresses
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDPAddresses is a complexType.
///
/// class _tds__SetDPAddresses operations:
/// - soap_new__tds__SetDPAddresses(soap*) allocate
/// - soap_new__tds__SetDPAddresses(soap*, int num) allocate array
/// - soap_new_req__tds__SetDPAddresses(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDPAddresses(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDPAddresses(soap*, _tds__SetDPAddresses*) deserialize from a stream
/// - int soap_write__tds__SetDPAddresses(soap, _tds__SetDPAddresses*) serialize to a stream
class _tds__SetDPAddresses
{ public:
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > DPAddress                      0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDPAddressesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDPAddressesResponse is a complexType.
///
/// class _tds__SetDPAddressesResponse operations:
/// - soap_new__tds__SetDPAddressesResponse(soap*) allocate
/// - soap_new__tds__SetDPAddressesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetDPAddressesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDPAddressesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDPAddressesResponse(soap*, _tds__SetDPAddressesResponse*) deserialize from a stream
/// - int soap_write__tds__SetDPAddressesResponse(soap, _tds__SetDPAddressesResponse*) serialize to a stream
class _tds__SetDPAddressesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetEndpointReference
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetEndpointReference is a complexType.
///
/// class _tds__GetEndpointReference operations:
/// - soap_new__tds__GetEndpointReference(soap*) allocate
/// - soap_new__tds__GetEndpointReference(soap*, int num) allocate array
/// - soap_new_req__tds__GetEndpointReference(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetEndpointReference(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetEndpointReference(soap*, _tds__GetEndpointReference*) deserialize from a stream
/// - int soap_write__tds__GetEndpointReference(soap, _tds__GetEndpointReference*) serialize to a stream
class _tds__GetEndpointReference
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetEndpointReferenceResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetEndpointReferenceResponse is a complexType.
///
/// class _tds__GetEndpointReferenceResponse operations:
/// - soap_new__tds__GetEndpointReferenceResponse(soap*) allocate
/// - soap_new__tds__GetEndpointReferenceResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetEndpointReferenceResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetEndpointReferenceResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetEndpointReferenceResponse(soap*, _tds__GetEndpointReferenceResponse*) deserialize from a stream
/// - int soap_write__tds__GetEndpointReferenceResponse(soap, _tds__GetEndpointReferenceResponse*) serialize to a stream
class _tds__GetEndpointReferenceResponse
{ public:
/// Element "GUID" of XSD type xs:string.
    std::string                          GUID                           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteUser
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteUser is a complexType.
///
/// class _tds__GetRemoteUser operations:
/// - soap_new__tds__GetRemoteUser(soap*) allocate
/// - soap_new__tds__GetRemoteUser(soap*, int num) allocate array
/// - soap_new_req__tds__GetRemoteUser(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetRemoteUser(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetRemoteUser(soap*, _tds__GetRemoteUser*) deserialize from a stream
/// - int soap_write__tds__GetRemoteUser(soap, _tds__GetRemoteUser*) serialize to a stream
class _tds__GetRemoteUser
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRemoteUserResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRemoteUserResponse is a complexType.
///
/// class _tds__GetRemoteUserResponse operations:
/// - soap_new__tds__GetRemoteUserResponse(soap*) allocate
/// - soap_new__tds__GetRemoteUserResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetRemoteUserResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetRemoteUserResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetRemoteUserResponse(soap*, _tds__GetRemoteUserResponse*) deserialize from a stream
/// - int soap_write__tds__GetRemoteUserResponse(soap, _tds__GetRemoteUserResponse*) serialize to a stream
class _tds__GetRemoteUserResponse
{ public:
/// Element "RemoteUser" of XSD type "http://www.onvif.org/ver10/schema":RemoteUser.
    tt__RemoteUser*                      RemoteUser                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteUser
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteUser is a complexType.
///
/// class _tds__SetRemoteUser operations:
/// - soap_new__tds__SetRemoteUser(soap*) allocate
/// - soap_new__tds__SetRemoteUser(soap*, int num) allocate array
/// - soap_new_req__tds__SetRemoteUser(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRemoteUser(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRemoteUser(soap*, _tds__SetRemoteUser*) deserialize from a stream
/// - int soap_write__tds__SetRemoteUser(soap, _tds__SetRemoteUser*) serialize to a stream
class _tds__SetRemoteUser
{ public:
/// Element "RemoteUser" of XSD type "http://www.onvif.org/ver10/schema":RemoteUser.
    tt__RemoteUser*                      RemoteUser                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRemoteUserResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRemoteUserResponse is a complexType.
///
/// class _tds__SetRemoteUserResponse operations:
/// - soap_new__tds__SetRemoteUserResponse(soap*) allocate
/// - soap_new__tds__SetRemoteUserResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetRemoteUserResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRemoteUserResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRemoteUserResponse(soap*, _tds__SetRemoteUserResponse*) deserialize from a stream
/// - int soap_write__tds__SetRemoteUserResponse(soap, _tds__SetRemoteUserResponse*) serialize to a stream
class _tds__SetRemoteUserResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetUsers
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetUsers is a complexType.
///
/// class _tds__GetUsers operations:
/// - soap_new__tds__GetUsers(soap*) allocate
/// - soap_new__tds__GetUsers(soap*, int num) allocate array
/// - soap_new_req__tds__GetUsers(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetUsers(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetUsers(soap*, _tds__GetUsers*) deserialize from a stream
/// - int soap_write__tds__GetUsers(soap, _tds__GetUsers*) serialize to a stream
class _tds__GetUsers
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetUsersResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetUsersResponse is a complexType.
///
/// class _tds__GetUsersResponse operations:
/// - soap_new__tds__GetUsersResponse(soap*) allocate
/// - soap_new__tds__GetUsersResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetUsersResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetUsersResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetUsersResponse(soap*, _tds__GetUsersResponse*) deserialize from a stream
/// - int soap_write__tds__GetUsersResponse(soap, _tds__GetUsersResponse*) serialize to a stream
class _tds__GetUsersResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains a list of the onvif users and following information is included in each entry: username and user level.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__User* of length 0..unbounded.
    std::vector<tt__User*              > User                           0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateUsers
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateUsers is a complexType.
///
/// class _tds__CreateUsers operations:
/// - soap_new__tds__CreateUsers(soap*) allocate
/// - soap_new__tds__CreateUsers(soap*, int num) allocate array
/// - soap_new_req__tds__CreateUsers(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateUsers(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateUsers(soap*, _tds__CreateUsers*) deserialize from a stream
/// - int soap_write__tds__CreateUsers(soap, _tds__CreateUsers*) serialize to a stream
class _tds__CreateUsers
{ public:
/// <PRE><BLOCKQUOTE>
///   Creates new device users and corresponding credentials. Each user entry includes: username, password and user level. Either all users are created successfully or a fault message MUST be returned without creating any user. If trying to create several users with exactly the same username the request is rejected and no users are created. If password is missing, then fault message Too weak password is returned.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__User* of length 1..unbounded.
    std::vector<tt__User*              > User                           1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateUsersResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateUsersResponse is a complexType.
///
/// class _tds__CreateUsersResponse operations:
/// - soap_new__tds__CreateUsersResponse(soap*) allocate
/// - soap_new__tds__CreateUsersResponse(soap*, int num) allocate array
/// - soap_new_req__tds__CreateUsersResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateUsersResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateUsersResponse(soap*, _tds__CreateUsersResponse*) deserialize from a stream
/// - int soap_write__tds__CreateUsersResponse(soap, _tds__CreateUsersResponse*) serialize to a stream
class _tds__CreateUsersResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteUsers
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteUsers is a complexType.
///
/// class _tds__DeleteUsers operations:
/// - soap_new__tds__DeleteUsers(soap*) allocate
/// - soap_new__tds__DeleteUsers(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteUsers(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteUsers(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteUsers(soap*, _tds__DeleteUsers*) deserialize from a stream
/// - int soap_write__tds__DeleteUsers(soap, _tds__DeleteUsers*) serialize to a stream
class _tds__DeleteUsers
{ public:
/// <PRE><BLOCKQUOTE>
///   Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit. Either all users are deleted successfully or a fault message MUST be returned and no users be deleted. If a username exists multiple times in the request, then a fault message is returned.
/// </BLOCKQUOTE></PRE>
/// Vector of std::string of length 1..unbounded.
    std::vector<std::string            > Username                       1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteUsersResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteUsersResponse is a complexType.
///
/// class _tds__DeleteUsersResponse operations:
/// - soap_new__tds__DeleteUsersResponse(soap*) allocate
/// - soap_new__tds__DeleteUsersResponse(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteUsersResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteUsersResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteUsersResponse(soap*, _tds__DeleteUsersResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteUsersResponse(soap, _tds__DeleteUsersResponse*) serialize to a stream
class _tds__DeleteUsersResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetUser
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetUser is a complexType.
///
/// class _tds__SetUser operations:
/// - soap_new__tds__SetUser(soap*) allocate
/// - soap_new__tds__SetUser(soap*, int num) allocate array
/// - soap_new_req__tds__SetUser(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetUser(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetUser(soap*, _tds__SetUser*) deserialize from a stream
/// - int soap_write__tds__SetUser(soap, _tds__SetUser*) serialize to a stream
class _tds__SetUser
{ public:
/// <PRE><BLOCKQUOTE>
///   Updates the credentials for one or several users on an device. Either all change requests are processed successfully or a fault message MUST be returned. If the request contains the same username multiple times, a fault message is returned.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__User* of length 1..unbounded.
    std::vector<tt__User*              > User                           1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetUserResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetUserResponse is a complexType.
///
/// class _tds__SetUserResponse operations:
/// - soap_new__tds__SetUserResponse(soap*) allocate
/// - soap_new__tds__SetUserResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetUserResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetUserResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetUserResponse(soap*, _tds__SetUserResponse*) deserialize from a stream
/// - int soap_write__tds__SetUserResponse(soap, _tds__SetUserResponse*) serialize to a stream
class _tds__SetUserResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrl
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrl is a complexType.
///
/// class _tds__GetWsdlUrl operations:
/// - soap_new__tds__GetWsdlUrl(soap*) allocate
/// - soap_new__tds__GetWsdlUrl(soap*, int num) allocate array
/// - soap_new_req__tds__GetWsdlUrl(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetWsdlUrl(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetWsdlUrl(soap*, _tds__GetWsdlUrl*) deserialize from a stream
/// - int soap_write__tds__GetWsdlUrl(soap, _tds__GetWsdlUrl*) serialize to a stream
class _tds__GetWsdlUrl
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrlResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetWsdlUrlResponse is a complexType.
///
/// class _tds__GetWsdlUrlResponse operations:
/// - soap_new__tds__GetWsdlUrlResponse(soap*) allocate
/// - soap_new__tds__GetWsdlUrlResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetWsdlUrlResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetWsdlUrlResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetWsdlUrlResponse(soap*, _tds__GetWsdlUrlResponse*) deserialize from a stream
/// - int soap_write__tds__GetWsdlUrlResponse(soap, _tds__GetWsdlUrlResponse*) serialize to a stream
class _tds__GetWsdlUrlResponse
{ public:
/// Element "WsdlUrl" of XSD type xs:anyURI.
    xsd__anyURI                          WsdlUrl                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCapabilities
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCapabilities is a complexType.
///
/// class _tds__GetCapabilities operations:
/// - soap_new__tds__GetCapabilities(soap*) allocate
/// - soap_new__tds__GetCapabilities(soap*, int num) allocate array
/// - soap_new_req__tds__GetCapabilities(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCapabilities(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCapabilities(soap*, _tds__GetCapabilities*) deserialize from a stream
/// - int soap_write__tds__GetCapabilities(soap, _tds__GetCapabilities*) serialize to a stream
class _tds__GetCapabilities
{ public:
/// <PRE><BLOCKQUOTE>
///   List of categories to retrieve capability information on.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__CapabilityCategory of length 0..unbounded.
    std::vector<enum tt__CapabilityCategory> Category                       0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCapabilitiesResponse is a complexType.
///
/// class _tds__GetCapabilitiesResponse operations:
/// - soap_new__tds__GetCapabilitiesResponse(soap*) allocate
/// - soap_new__tds__GetCapabilitiesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetCapabilitiesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCapabilitiesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCapabilitiesResponse(soap*, _tds__GetCapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tds__GetCapabilitiesResponse(soap, _tds__GetCapabilitiesResponse*) serialize to a stream
class _tds__GetCapabilitiesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Capability information.
/// </BLOCKQUOTE></PRE>
/// Element "Capabilities" of XSD type "http://www.onvif.org/ver10/schema":Capabilities.
    tt__Capabilities*                    Capabilities                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetHostname
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetHostname is a complexType.
///
/// class _tds__GetHostname operations:
/// - soap_new__tds__GetHostname(soap*) allocate
/// - soap_new__tds__GetHostname(soap*, int num) allocate array
/// - soap_new_req__tds__GetHostname(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetHostname(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetHostname(soap*, _tds__GetHostname*) deserialize from a stream
/// - int soap_write__tds__GetHostname(soap, _tds__GetHostname*) serialize to a stream
class _tds__GetHostname
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetHostnameResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetHostnameResponse is a complexType.
///
/// class _tds__GetHostnameResponse operations:
/// - soap_new__tds__GetHostnameResponse(soap*) allocate
/// - soap_new__tds__GetHostnameResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetHostnameResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetHostnameResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetHostnameResponse(soap*, _tds__GetHostnameResponse*) deserialize from a stream
/// - int soap_write__tds__GetHostnameResponse(soap, _tds__GetHostnameResponse*) serialize to a stream
class _tds__GetHostnameResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the hostname information.
/// </BLOCKQUOTE></PRE>
/// Element "HostnameInformation" of XSD type "http://www.onvif.org/ver10/schema":HostnameInformation.
    tt__HostnameInformation*             HostnameInformation            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostname
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostname is a complexType.
///
/// class _tds__SetHostname operations:
/// - soap_new__tds__SetHostname(soap*) allocate
/// - soap_new__tds__SetHostname(soap*, int num) allocate array
/// - soap_new_req__tds__SetHostname(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetHostname(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetHostname(soap*, _tds__SetHostname*) deserialize from a stream
/// - int soap_write__tds__SetHostname(soap, _tds__SetHostname*) serialize to a stream
class _tds__SetHostname
{ public:
/// <PRE><BLOCKQUOTE>
///   The hostname to set.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type xs:token.
    xsd__token                           Name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostnameResponse is a complexType.
///
/// class _tds__SetHostnameResponse operations:
/// - soap_new__tds__SetHostnameResponse(soap*) allocate
/// - soap_new__tds__SetHostnameResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetHostnameResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetHostnameResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetHostnameResponse(soap*, _tds__SetHostnameResponse*) deserialize from a stream
/// - int soap_write__tds__SetHostnameResponse(soap, _tds__SetHostnameResponse*) serialize to a stream
class _tds__SetHostnameResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCP
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCP is a complexType.
///
/// class _tds__SetHostnameFromDHCP operations:
/// - soap_new__tds__SetHostnameFromDHCP(soap*) allocate
/// - soap_new__tds__SetHostnameFromDHCP(soap*, int num) allocate array
/// - soap_new_req__tds__SetHostnameFromDHCP(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetHostnameFromDHCP(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetHostnameFromDHCP(soap*, _tds__SetHostnameFromDHCP*) deserialize from a stream
/// - int soap_write__tds__SetHostnameFromDHCP(soap, _tds__SetHostnameFromDHCP*) serialize to a stream
class _tds__SetHostnameFromDHCP
{ public:
/// <PRE><BLOCKQUOTE>
///   True if the hostname shall be obtained via DHCP.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCPResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetHostnameFromDHCPResponse is a complexType.
///
/// class _tds__SetHostnameFromDHCPResponse operations:
/// - soap_new__tds__SetHostnameFromDHCPResponse(soap*) allocate
/// - soap_new__tds__SetHostnameFromDHCPResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetHostnameFromDHCPResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetHostnameFromDHCPResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetHostnameFromDHCPResponse(soap*, _tds__SetHostnameFromDHCPResponse*) deserialize from a stream
/// - int soap_write__tds__SetHostnameFromDHCPResponse(soap, _tds__SetHostnameFromDHCPResponse*) serialize to a stream
class _tds__SetHostnameFromDHCPResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a reboot is required after configuration updates.
/// </BLOCKQUOTE></PRE>
/// Element "RebootNeeded" of XSD type xs:boolean.
    bool                                 RebootNeeded                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDNS is a complexType.
///
/// class _tds__GetDNS operations:
/// - soap_new__tds__GetDNS(soap*) allocate
/// - soap_new__tds__GetDNS(soap*, int num) allocate array
/// - soap_new_req__tds__GetDNS(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDNS(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDNS(soap*, _tds__GetDNS*) deserialize from a stream
/// - int soap_write__tds__GetDNS(soap, _tds__GetDNS*) serialize to a stream
class _tds__GetDNS
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDNSResponse is a complexType.
///
/// class _tds__GetDNSResponse operations:
/// - soap_new__tds__GetDNSResponse(soap*) allocate
/// - soap_new__tds__GetDNSResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDNSResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDNSResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDNSResponse(soap*, _tds__GetDNSResponse*) deserialize from a stream
/// - int soap_write__tds__GetDNSResponse(soap, _tds__GetDNSResponse*) serialize to a stream
class _tds__GetDNSResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   DNS information.
/// </BLOCKQUOTE></PRE>
/// Element "DNSInformation" of XSD type "http://www.onvif.org/ver10/schema":DNSInformation.
    tt__DNSInformation*                  DNSInformation                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDNS is a complexType.
///
/// class _tds__SetDNS operations:
/// - soap_new__tds__SetDNS(soap*) allocate
/// - soap_new__tds__SetDNS(soap*, int num) allocate array
/// - soap_new_req__tds__SetDNS(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDNS(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDNS(soap*, _tds__SetDNS*) deserialize from a stream
/// - int soap_write__tds__SetDNS(soap, _tds__SetDNS*) serialize to a stream
class _tds__SetDNS
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicate if the DNS address is to be retrieved using DHCP.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS search domain.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__token of length 0..unbounded.
    std::vector<xsd__token             > SearchDomain                   0;
/// <PRE><BLOCKQUOTE>
///   DNS address(es) set manually.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPAddress* of length 0..unbounded.
    std::vector<tt__IPAddress*         > DNSManual                      0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDNSResponse is a complexType.
///
/// class _tds__SetDNSResponse operations:
/// - soap_new__tds__SetDNSResponse(soap*) allocate
/// - soap_new__tds__SetDNSResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetDNSResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDNSResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDNSResponse(soap*, _tds__SetDNSResponse*) deserialize from a stream
/// - int soap_write__tds__SetDNSResponse(soap, _tds__SetDNSResponse*) serialize to a stream
class _tds__SetDNSResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNTP
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNTP is a complexType.
///
/// class _tds__GetNTP operations:
/// - soap_new__tds__GetNTP(soap*) allocate
/// - soap_new__tds__GetNTP(soap*, int num) allocate array
/// - soap_new_req__tds__GetNTP(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNTP(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNTP(soap*, _tds__GetNTP*) deserialize from a stream
/// - int soap_write__tds__GetNTP(soap, _tds__GetNTP*) serialize to a stream
class _tds__GetNTP
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNTPResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNTPResponse is a complexType.
///
/// class _tds__GetNTPResponse operations:
/// - soap_new__tds__GetNTPResponse(soap*) allocate
/// - soap_new__tds__GetNTPResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetNTPResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNTPResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNTPResponse(soap*, _tds__GetNTPResponse*) deserialize from a stream
/// - int soap_write__tds__GetNTPResponse(soap, _tds__GetNTPResponse*) serialize to a stream
class _tds__GetNTPResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   NTP information.
/// </BLOCKQUOTE></PRE>
/// Element "NTPInformation" of XSD type "http://www.onvif.org/ver10/schema":NTPInformation.
    tt__NTPInformation*                  NTPInformation                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNTP
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNTP is a complexType.
///
/// class _tds__SetNTP operations:
/// - soap_new__tds__SetNTP(soap*) allocate
/// - soap_new__tds__SetNTP(soap*, int num) allocate array
/// - soap_new_req__tds__SetNTP(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNTP(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNTP(soap*, _tds__SetNTP*) deserialize from a stream
/// - int soap_write__tds__SetNTP(soap, _tds__SetNTP*) serialize to a stream
class _tds__SetNTP
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicate if NTP address information is to be retrieved using DHCP.
/// </BLOCKQUOTE></PRE>
/// Element "FromDHCP" of XSD type xs:boolean.
    bool                                 FromDHCP                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Manual NTP settings.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkHost* of length 0..unbounded.
    std::vector<tt__NetworkHost*       > NTPManual                      0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNTPResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNTPResponse is a complexType.
///
/// class _tds__SetNTPResponse operations:
/// - soap_new__tds__SetNTPResponse(soap*) allocate
/// - soap_new__tds__SetNTPResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetNTPResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNTPResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNTPResponse(soap*, _tds__SetNTPResponse*) deserialize from a stream
/// - int soap_write__tds__SetNTPResponse(soap, _tds__SetNTPResponse*) serialize to a stream
class _tds__SetNTPResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNS is a complexType.
///
/// class _tds__GetDynamicDNS operations:
/// - soap_new__tds__GetDynamicDNS(soap*) allocate
/// - soap_new__tds__GetDynamicDNS(soap*, int num) allocate array
/// - soap_new_req__tds__GetDynamicDNS(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDynamicDNS(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDynamicDNS(soap*, _tds__GetDynamicDNS*) deserialize from a stream
/// - int soap_write__tds__GetDynamicDNS(soap, _tds__GetDynamicDNS*) serialize to a stream
class _tds__GetDynamicDNS
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDynamicDNSResponse is a complexType.
///
/// class _tds__GetDynamicDNSResponse operations:
/// - soap_new__tds__GetDynamicDNSResponse(soap*) allocate
/// - soap_new__tds__GetDynamicDNSResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDynamicDNSResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDynamicDNSResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDynamicDNSResponse(soap*, _tds__GetDynamicDNSResponse*) deserialize from a stream
/// - int soap_write__tds__GetDynamicDNSResponse(soap, _tds__GetDynamicDNSResponse*) serialize to a stream
class _tds__GetDynamicDNSResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS information.
/// </BLOCKQUOTE></PRE>
/// Element "DynamicDNSInformation" of XSD type "http://www.onvif.org/ver10/schema":DynamicDNSInformation.
    tt__DynamicDNSInformation*           DynamicDNSInformation          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNS
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNS is a complexType.
///
/// class _tds__SetDynamicDNS operations:
/// - soap_new__tds__SetDynamicDNS(soap*) allocate
/// - soap_new__tds__SetDynamicDNS(soap*, int num) allocate array
/// - soap_new_req__tds__SetDynamicDNS(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDynamicDNS(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDynamicDNS(soap*, _tds__SetDynamicDNS*) deserialize from a stream
/// - int soap_write__tds__SetDynamicDNS(soap, _tds__SetDynamicDNS*) serialize to a stream
class _tds__SetDynamicDNS
{ public:
/// <PRE><BLOCKQUOTE>
///   Dynamic DNS type.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":DynamicDNSType.
    enum tt__DynamicDNSType              Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   DNS name.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":DNSName.
    tt__DNSName*                         Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   DNS record time to live.
/// </BLOCKQUOTE></PRE>
/// Element "TTL" of XSD type xs:duration.
    xsd__duration*                       TTL                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNSResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDynamicDNSResponse is a complexType.
///
/// class _tds__SetDynamicDNSResponse operations:
/// - soap_new__tds__SetDynamicDNSResponse(soap*) allocate
/// - soap_new__tds__SetDynamicDNSResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetDynamicDNSResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDynamicDNSResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDynamicDNSResponse(soap*, _tds__SetDynamicDNSResponse*) deserialize from a stream
/// - int soap_write__tds__SetDynamicDNSResponse(soap, _tds__SetDynamicDNSResponse*) serialize to a stream
class _tds__SetDynamicDNSResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfaces
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfaces is a complexType.
///
/// class _tds__GetNetworkInterfaces operations:
/// - soap_new__tds__GetNetworkInterfaces(soap*) allocate
/// - soap_new__tds__GetNetworkInterfaces(soap*, int num) allocate array
/// - soap_new_req__tds__GetNetworkInterfaces(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNetworkInterfaces(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNetworkInterfaces(soap*, _tds__GetNetworkInterfaces*) deserialize from a stream
/// - int soap_write__tds__GetNetworkInterfaces(soap, _tds__GetNetworkInterfaces*) serialize to a stream
class _tds__GetNetworkInterfaces
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfacesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkInterfacesResponse is a complexType.
///
/// class _tds__GetNetworkInterfacesResponse operations:
/// - soap_new__tds__GetNetworkInterfacesResponse(soap*) allocate
/// - soap_new__tds__GetNetworkInterfacesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetNetworkInterfacesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNetworkInterfacesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNetworkInterfacesResponse(soap*, _tds__GetNetworkInterfacesResponse*) deserialize from a stream
/// - int soap_write__tds__GetNetworkInterfacesResponse(soap, _tds__GetNetworkInterfacesResponse*) serialize to a stream
class _tds__GetNetworkInterfacesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   List of network interfaces.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkInterface* of length 1..unbounded.
    std::vector<tt__NetworkInterface*  > NetworkInterfaces              1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfaces
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfaces is a complexType.
///
/// class _tds__SetNetworkInterfaces operations:
/// - soap_new__tds__SetNetworkInterfaces(soap*) allocate
/// - soap_new__tds__SetNetworkInterfaces(soap*, int num) allocate array
/// - soap_new_req__tds__SetNetworkInterfaces(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNetworkInterfaces(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNetworkInterfaces(soap*, _tds__SetNetworkInterfaces*) deserialize from a stream
/// - int soap_write__tds__SetNetworkInterfaces(soap, _tds__SetNetworkInterfaces*) serialize to a stream
class _tds__SetNetworkInterfaces
{ public:
/// <PRE><BLOCKQUOTE>
///   Symbolic network interface name.
/// </BLOCKQUOTE></PRE>
/// Element "InterfaceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network interface name.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkInterface" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceSetConfiguration.
    tt__NetworkInterfaceSetConfiguration*  NetworkInterface               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfacesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkInterfacesResponse is a complexType.
///
/// class _tds__SetNetworkInterfacesResponse operations:
/// - soap_new__tds__SetNetworkInterfacesResponse(soap*) allocate
/// - soap_new__tds__SetNetworkInterfacesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetNetworkInterfacesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNetworkInterfacesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNetworkInterfacesResponse(soap*, _tds__SetNetworkInterfacesResponse*) deserialize from a stream
/// - int soap_write__tds__SetNetworkInterfacesResponse(soap, _tds__SetNetworkInterfacesResponse*) serialize to a stream
class _tds__SetNetworkInterfacesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not a reboot is required after configuration updates.
///   If a device responds with RebootNeeded set to false, the device can be reached
///   via the new IP address without further action. A client should be aware that a device
///   may not be responsive for a short period of time until it signals availability at
///   the new address via the discovery Hello messages.
///   If a device responds with RebootNeeded set to true, it will be further available under
///   its previous IP address. The settings will only be activated when the device is
///   rebooted via the SystemReboot command.
/// </BLOCKQUOTE></PRE>
/// Element "RebootNeeded" of XSD type xs:boolean.
    bool                                 RebootNeeded                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocols
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocols is a complexType.
///
/// class _tds__GetNetworkProtocols operations:
/// - soap_new__tds__GetNetworkProtocols(soap*) allocate
/// - soap_new__tds__GetNetworkProtocols(soap*, int num) allocate array
/// - soap_new_req__tds__GetNetworkProtocols(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNetworkProtocols(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNetworkProtocols(soap*, _tds__GetNetworkProtocols*) deserialize from a stream
/// - int soap_write__tds__GetNetworkProtocols(soap, _tds__GetNetworkProtocols*) serialize to a stream
class _tds__GetNetworkProtocols
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocolsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkProtocolsResponse is a complexType.
///
/// class _tds__GetNetworkProtocolsResponse operations:
/// - soap_new__tds__GetNetworkProtocolsResponse(soap*) allocate
/// - soap_new__tds__GetNetworkProtocolsResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetNetworkProtocolsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNetworkProtocolsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNetworkProtocolsResponse(soap*, _tds__GetNetworkProtocolsResponse*) deserialize from a stream
/// - int soap_write__tds__GetNetworkProtocolsResponse(soap, _tds__GetNetworkProtocolsResponse*) serialize to a stream
class _tds__GetNetworkProtocolsResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains an array of defined protocols supported by the device. There are three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be retrieved for each protocol: port and enable/disable.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkProtocol* of length 0..unbounded.
    std::vector<tt__NetworkProtocol*   > NetworkProtocols               0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocols
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocols is a complexType.
///
/// class _tds__SetNetworkProtocols operations:
/// - soap_new__tds__SetNetworkProtocols(soap*) allocate
/// - soap_new__tds__SetNetworkProtocols(soap*, int num) allocate array
/// - soap_new_req__tds__SetNetworkProtocols(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNetworkProtocols(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNetworkProtocols(soap*, _tds__SetNetworkProtocols*) deserialize from a stream
/// - int soap_write__tds__SetNetworkProtocols(soap, _tds__SetNetworkProtocols*) serialize to a stream
class _tds__SetNetworkProtocols
{ public:
/// <PRE><BLOCKQUOTE>
///   Configures one or more defined network protocols supported by the device. There are currently three protocols defined; HTTP, HTTPS and RTSP. The following parameters can be set for each protocol: port and enable/disable.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__NetworkProtocol* of length 1..unbounded.
    std::vector<tt__NetworkProtocol*   > NetworkProtocols               1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocolsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkProtocolsResponse is a complexType.
///
/// class _tds__SetNetworkProtocolsResponse operations:
/// - soap_new__tds__SetNetworkProtocolsResponse(soap*) allocate
/// - soap_new__tds__SetNetworkProtocolsResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetNetworkProtocolsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNetworkProtocolsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNetworkProtocolsResponse(soap*, _tds__SetNetworkProtocolsResponse*) deserialize from a stream
/// - int soap_write__tds__SetNetworkProtocolsResponse(soap, _tds__SetNetworkProtocolsResponse*) serialize to a stream
class _tds__SetNetworkProtocolsResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGateway
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGateway is a complexType.
///
/// class _tds__GetNetworkDefaultGateway operations:
/// - soap_new__tds__GetNetworkDefaultGateway(soap*) allocate
/// - soap_new__tds__GetNetworkDefaultGateway(soap*, int num) allocate array
/// - soap_new_req__tds__GetNetworkDefaultGateway(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNetworkDefaultGateway(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNetworkDefaultGateway(soap*, _tds__GetNetworkDefaultGateway*) deserialize from a stream
/// - int soap_write__tds__GetNetworkDefaultGateway(soap, _tds__GetNetworkDefaultGateway*) serialize to a stream
class _tds__GetNetworkDefaultGateway
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGatewayResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetNetworkDefaultGatewayResponse is a complexType.
///
/// class _tds__GetNetworkDefaultGatewayResponse operations:
/// - soap_new__tds__GetNetworkDefaultGatewayResponse(soap*) allocate
/// - soap_new__tds__GetNetworkDefaultGatewayResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetNetworkDefaultGatewayResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetNetworkDefaultGatewayResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetNetworkDefaultGatewayResponse(soap*, _tds__GetNetworkDefaultGatewayResponse*) deserialize from a stream
/// - int soap_write__tds__GetNetworkDefaultGatewayResponse(soap, _tds__GetNetworkDefaultGatewayResponse*) serialize to a stream
class _tds__GetNetworkDefaultGatewayResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Gets the default IPv4 and IPv6 gateway settings from the device.
/// </BLOCKQUOTE></PRE>
/// Element "NetworkGateway" of XSD type "http://www.onvif.org/ver10/schema":NetworkGateway.
    tt__NetworkGateway*                  NetworkGateway                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGateway
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGateway is a complexType.
///
/// class _tds__SetNetworkDefaultGateway operations:
/// - soap_new__tds__SetNetworkDefaultGateway(soap*) allocate
/// - soap_new__tds__SetNetworkDefaultGateway(soap*, int num) allocate array
/// - soap_new_req__tds__SetNetworkDefaultGateway(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNetworkDefaultGateway(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNetworkDefaultGateway(soap*, _tds__SetNetworkDefaultGateway*) deserialize from a stream
/// - int soap_write__tds__SetNetworkDefaultGateway(soap, _tds__SetNetworkDefaultGateway*) serialize to a stream
class _tds__SetNetworkDefaultGateway
{ public:
/// <PRE><BLOCKQUOTE>
///   Sets IPv4 gateway address used as default setting.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPv4Address of length 0..unbounded.
    std::vector<tt__IPv4Address        > IPv4Address                    0;
/// <PRE><BLOCKQUOTE>
///   Sets IPv6 gateway address used as default setting.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__IPv6Address of length 0..unbounded.
    std::vector<tt__IPv6Address        > IPv6Address                    0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGatewayResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetNetworkDefaultGatewayResponse is a complexType.
///
/// class _tds__SetNetworkDefaultGatewayResponse operations:
/// - soap_new__tds__SetNetworkDefaultGatewayResponse(soap*) allocate
/// - soap_new__tds__SetNetworkDefaultGatewayResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetNetworkDefaultGatewayResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetNetworkDefaultGatewayResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetNetworkDefaultGatewayResponse(soap*, _tds__SetNetworkDefaultGatewayResponse*) deserialize from a stream
/// - int soap_write__tds__SetNetworkDefaultGatewayResponse(soap, _tds__SetNetworkDefaultGatewayResponse*) serialize to a stream
class _tds__SetNetworkDefaultGatewayResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetZeroConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetZeroConfiguration is a complexType.
///
/// class _tds__GetZeroConfiguration operations:
/// - soap_new__tds__GetZeroConfiguration(soap*) allocate
/// - soap_new__tds__GetZeroConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__GetZeroConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetZeroConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetZeroConfiguration(soap*, _tds__GetZeroConfiguration*) deserialize from a stream
/// - int soap_write__tds__GetZeroConfiguration(soap, _tds__GetZeroConfiguration*) serialize to a stream
class _tds__GetZeroConfiguration
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetZeroConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetZeroConfigurationResponse is a complexType.
///
/// class _tds__GetZeroConfigurationResponse operations:
/// - soap_new__tds__GetZeroConfigurationResponse(soap*) allocate
/// - soap_new__tds__GetZeroConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetZeroConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetZeroConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetZeroConfigurationResponse(soap*, _tds__GetZeroConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__GetZeroConfigurationResponse(soap, _tds__GetZeroConfigurationResponse*) serialize to a stream
class _tds__GetZeroConfigurationResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Contains the zero-configuration.
/// </BLOCKQUOTE></PRE>
/// Element "ZeroConfiguration" of XSD type "http://www.onvif.org/ver10/schema":NetworkZeroConfiguration.
    tt__NetworkZeroConfiguration*        ZeroConfiguration              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetZeroConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetZeroConfiguration is a complexType.
///
/// class _tds__SetZeroConfiguration operations:
/// - soap_new__tds__SetZeroConfiguration(soap*) allocate
/// - soap_new__tds__SetZeroConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__SetZeroConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetZeroConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetZeroConfiguration(soap*, _tds__SetZeroConfiguration*) deserialize from a stream
/// - int soap_write__tds__SetZeroConfiguration(soap, _tds__SetZeroConfiguration*) serialize to a stream
class _tds__SetZeroConfiguration
{ public:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical interface.
/// </BLOCKQUOTE></PRE>
/// Element "InterfaceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Specifies if the zero-configuration should be enabled or not.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetZeroConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetZeroConfigurationResponse is a complexType.
///
/// class _tds__SetZeroConfigurationResponse operations:
/// - soap_new__tds__SetZeroConfigurationResponse(soap*) allocate
/// - soap_new__tds__SetZeroConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetZeroConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetZeroConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetZeroConfigurationResponse(soap*, _tds__SetZeroConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__SetZeroConfigurationResponse(soap, _tds__SetZeroConfigurationResponse*) serialize to a stream
class _tds__SetZeroConfigurationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilter is a complexType.
///
/// class _tds__GetIPAddressFilter operations:
/// - soap_new__tds__GetIPAddressFilter(soap*) allocate
/// - soap_new__tds__GetIPAddressFilter(soap*, int num) allocate array
/// - soap_new_req__tds__GetIPAddressFilter(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetIPAddressFilter(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetIPAddressFilter(soap*, _tds__GetIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__GetIPAddressFilter(soap, _tds__GetIPAddressFilter*) serialize to a stream
class _tds__GetIPAddressFilter
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetIPAddressFilterResponse is a complexType.
///
/// class _tds__GetIPAddressFilterResponse operations:
/// - soap_new__tds__GetIPAddressFilterResponse(soap*) allocate
/// - soap_new__tds__GetIPAddressFilterResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetIPAddressFilterResponse(soap*, _tds__GetIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__GetIPAddressFilterResponse(soap, _tds__GetIPAddressFilterResponse*) serialize to a stream
class _tds__GetIPAddressFilterResponse
{ public:
/// Element "IPAddressFilter" of XSD type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilter is a complexType.
///
/// class _tds__SetIPAddressFilter operations:
/// - soap_new__tds__SetIPAddressFilter(soap*) allocate
/// - soap_new__tds__SetIPAddressFilter(soap*, int num) allocate array
/// - soap_new_req__tds__SetIPAddressFilter(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetIPAddressFilter(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetIPAddressFilter(soap*, _tds__SetIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__SetIPAddressFilter(soap, _tds__SetIPAddressFilter*) serialize to a stream
class _tds__SetIPAddressFilter
{ public:
/// Element "IPAddressFilter" of XSD type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetIPAddressFilterResponse is a complexType.
///
/// class _tds__SetIPAddressFilterResponse operations:
/// - soap_new__tds__SetIPAddressFilterResponse(soap*) allocate
/// - soap_new__tds__SetIPAddressFilterResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetIPAddressFilterResponse(soap*, _tds__SetIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__SetIPAddressFilterResponse(soap, _tds__SetIPAddressFilterResponse*) serialize to a stream
class _tds__SetIPAddressFilterResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilter is a complexType.
///
/// class _tds__AddIPAddressFilter operations:
/// - soap_new__tds__AddIPAddressFilter(soap*) allocate
/// - soap_new__tds__AddIPAddressFilter(soap*, int num) allocate array
/// - soap_new_req__tds__AddIPAddressFilter(soap*, ...) allocate, set required members
/// - soap_new_set__tds__AddIPAddressFilter(soap*, ...) allocate, set all public members
/// - int soap_read__tds__AddIPAddressFilter(soap*, _tds__AddIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__AddIPAddressFilter(soap, _tds__AddIPAddressFilter*) serialize to a stream
class _tds__AddIPAddressFilter
{ public:
/// Element "IPAddressFilter" of XSD type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":AddIPAddressFilterResponse is a complexType.
///
/// class _tds__AddIPAddressFilterResponse operations:
/// - soap_new__tds__AddIPAddressFilterResponse(soap*) allocate
/// - soap_new__tds__AddIPAddressFilterResponse(soap*, int num) allocate array
/// - soap_new_req__tds__AddIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__AddIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__AddIPAddressFilterResponse(soap*, _tds__AddIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__AddIPAddressFilterResponse(soap, _tds__AddIPAddressFilterResponse*) serialize to a stream
class _tds__AddIPAddressFilterResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilter
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilter is a complexType.
///
/// class _tds__RemoveIPAddressFilter operations:
/// - soap_new__tds__RemoveIPAddressFilter(soap*) allocate
/// - soap_new__tds__RemoveIPAddressFilter(soap*, int num) allocate array
/// - soap_new_req__tds__RemoveIPAddressFilter(soap*, ...) allocate, set required members
/// - soap_new_set__tds__RemoveIPAddressFilter(soap*, ...) allocate, set all public members
/// - int soap_read__tds__RemoveIPAddressFilter(soap*, _tds__RemoveIPAddressFilter*) deserialize from a stream
/// - int soap_write__tds__RemoveIPAddressFilter(soap, _tds__RemoveIPAddressFilter*) serialize to a stream
class _tds__RemoveIPAddressFilter
{ public:
/// Element "IPAddressFilter" of XSD type "http://www.onvif.org/ver10/schema":IPAddressFilter.
    tt__IPAddressFilter*                 IPAddressFilter                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilterResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":RemoveIPAddressFilterResponse is a complexType.
///
/// class _tds__RemoveIPAddressFilterResponse operations:
/// - soap_new__tds__RemoveIPAddressFilterResponse(soap*) allocate
/// - soap_new__tds__RemoveIPAddressFilterResponse(soap*, int num) allocate array
/// - soap_new_req__tds__RemoveIPAddressFilterResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__RemoveIPAddressFilterResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__RemoveIPAddressFilterResponse(soap*, _tds__RemoveIPAddressFilterResponse*) deserialize from a stream
/// - int soap_write__tds__RemoveIPAddressFilterResponse(soap, _tds__RemoveIPAddressFilterResponse*) serialize to a stream
class _tds__RemoveIPAddressFilterResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicy
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicy is a complexType.
///
/// class _tds__GetAccessPolicy operations:
/// - soap_new__tds__GetAccessPolicy(soap*) allocate
/// - soap_new__tds__GetAccessPolicy(soap*, int num) allocate array
/// - soap_new_req__tds__GetAccessPolicy(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetAccessPolicy(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetAccessPolicy(soap*, _tds__GetAccessPolicy*) deserialize from a stream
/// - int soap_write__tds__GetAccessPolicy(soap, _tds__GetAccessPolicy*) serialize to a stream
class _tds__GetAccessPolicy
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicyResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetAccessPolicyResponse is a complexType.
///
/// class _tds__GetAccessPolicyResponse operations:
/// - soap_new__tds__GetAccessPolicyResponse(soap*) allocate
/// - soap_new__tds__GetAccessPolicyResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetAccessPolicyResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetAccessPolicyResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetAccessPolicyResponse(soap*, _tds__GetAccessPolicyResponse*) deserialize from a stream
/// - int soap_write__tds__GetAccessPolicyResponse(soap, _tds__GetAccessPolicyResponse*) serialize to a stream
class _tds__GetAccessPolicyResponse
{ public:
/// Element "PolicyFile" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PolicyFile                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicy
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicy is a complexType.
///
/// class _tds__SetAccessPolicy operations:
/// - soap_new__tds__SetAccessPolicy(soap*) allocate
/// - soap_new__tds__SetAccessPolicy(soap*, int num) allocate array
/// - soap_new_req__tds__SetAccessPolicy(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetAccessPolicy(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetAccessPolicy(soap*, _tds__SetAccessPolicy*) deserialize from a stream
/// - int soap_write__tds__SetAccessPolicy(soap, _tds__SetAccessPolicy*) serialize to a stream
class _tds__SetAccessPolicy
{ public:
/// Element "PolicyFile" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      PolicyFile                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicyResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetAccessPolicyResponse is a complexType.
///
/// class _tds__SetAccessPolicyResponse operations:
/// - soap_new__tds__SetAccessPolicyResponse(soap*) allocate
/// - soap_new__tds__SetAccessPolicyResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetAccessPolicyResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetAccessPolicyResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetAccessPolicyResponse(soap*, _tds__SetAccessPolicyResponse*) deserialize from a stream
/// - int soap_write__tds__SetAccessPolicyResponse(soap, _tds__SetAccessPolicyResponse*) serialize to a stream
class _tds__SetAccessPolicyResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateCertificate
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateCertificate is a complexType.
///
/// class _tds__CreateCertificate operations:
/// - soap_new__tds__CreateCertificate(soap*) allocate
/// - soap_new__tds__CreateCertificate(soap*, int num) allocate array
/// - soap_new_req__tds__CreateCertificate(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateCertificate(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateCertificate(soap*, _tds__CreateCertificate*) deserialize from a stream
/// - int soap_write__tds__CreateCertificate(soap, _tds__CreateCertificate*) serialize to a stream
class _tds__CreateCertificate
{ public:
/// <PRE><BLOCKQUOTE>
///   Certificate id.
/// </BLOCKQUOTE></PRE>
/// Element "CertificateID" of XSD type xs:token.
    xsd__token*                          CertificateID                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identification of the entity associated with the public-key.
/// </BLOCKQUOTE></PRE>
/// Element "Subject" of XSD type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Certificate validity start date.
/// </BLOCKQUOTE></PRE>
/// Element "ValidNotBefore" of XSD type xs:dateTime.
    time_t*                              ValidNotBefore                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Certificate expiry start date.
/// </BLOCKQUOTE></PRE>
/// Element "ValidNotAfter" of XSD type xs:dateTime.
    time_t*                              ValidNotAfter                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateCertificateResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateCertificateResponse is a complexType.
///
/// class _tds__CreateCertificateResponse operations:
/// - soap_new__tds__CreateCertificateResponse(soap*) allocate
/// - soap_new__tds__CreateCertificateResponse(soap*, int num) allocate array
/// - soap_new_req__tds__CreateCertificateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateCertificateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateCertificateResponse(soap*, _tds__CreateCertificateResponse*) deserialize from a stream
/// - int soap_write__tds__CreateCertificateResponse(soap, _tds__CreateCertificateResponse*) serialize to a stream
class _tds__CreateCertificateResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
/// Element "NvtCertificate" of XSD type "http://www.onvif.org/ver10/schema":Certificate.
    tt__Certificate*                     NvtCertificate                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificates is a complexType.
///
/// class _tds__GetCertificates operations:
/// - soap_new__tds__GetCertificates(soap*) allocate
/// - soap_new__tds__GetCertificates(soap*, int num) allocate array
/// - soap_new_req__tds__GetCertificates(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCertificates(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCertificates(soap*, _tds__GetCertificates*) deserialize from a stream
/// - int soap_write__tds__GetCertificates(soap, _tds__GetCertificates*) serialize to a stream
class _tds__GetCertificates
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificatesResponse is a complexType.
///
/// class _tds__GetCertificatesResponse operations:
/// - soap_new__tds__GetCertificatesResponse(soap*) allocate
/// - soap_new__tds__GetCertificatesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetCertificatesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCertificatesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCertificatesResponse(soap*, _tds__GetCertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__GetCertificatesResponse(soap, _tds__GetCertificatesResponse*) serialize to a stream
class _tds__GetCertificatesResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Id and base64 encoded DER representation of all available certificates.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Certificate* of length 0..unbounded.
    std::vector<tt__Certificate*       > NvtCertificate                 0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatus
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatus is a complexType.
///
/// class _tds__GetCertificatesStatus operations:
/// - soap_new__tds__GetCertificatesStatus(soap*) allocate
/// - soap_new__tds__GetCertificatesStatus(soap*, int num) allocate array
/// - soap_new_req__tds__GetCertificatesStatus(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCertificatesStatus(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCertificatesStatus(soap*, _tds__GetCertificatesStatus*) deserialize from a stream
/// - int soap_write__tds__GetCertificatesStatus(soap, _tds__GetCertificatesStatus*) serialize to a stream
class _tds__GetCertificatesStatus
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatusResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificatesStatusResponse is a complexType.
///
/// class _tds__GetCertificatesStatusResponse operations:
/// - soap_new__tds__GetCertificatesStatusResponse(soap*) allocate
/// - soap_new__tds__GetCertificatesStatusResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetCertificatesStatusResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCertificatesStatusResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCertificatesStatusResponse(soap*, _tds__GetCertificatesStatusResponse*) deserialize from a stream
/// - int soap_write__tds__GetCertificatesStatusResponse(soap, _tds__GetCertificatesStatusResponse*) serialize to a stream
class _tds__GetCertificatesStatusResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if a certificate is used in an optional HTTPS configuration of the device.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__CertificateStatus* of length 0..unbounded.
    std::vector<tt__CertificateStatus* > CertificateStatus              0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatus
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatus is a complexType.
///
/// class _tds__SetCertificatesStatus operations:
/// - soap_new__tds__SetCertificatesStatus(soap*) allocate
/// - soap_new__tds__SetCertificatesStatus(soap*, int num) allocate array
/// - soap_new_req__tds__SetCertificatesStatus(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetCertificatesStatus(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetCertificatesStatus(soap*, _tds__SetCertificatesStatus*) deserialize from a stream
/// - int soap_write__tds__SetCertificatesStatus(soap, _tds__SetCertificatesStatus*) serialize to a stream
class _tds__SetCertificatesStatus
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__CertificateStatus* of length 0..unbounded.
    std::vector<tt__CertificateStatus* > CertificateStatus              0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatusResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetCertificatesStatusResponse is a complexType.
///
/// class _tds__SetCertificatesStatusResponse operations:
/// - soap_new__tds__SetCertificatesStatusResponse(soap*) allocate
/// - soap_new__tds__SetCertificatesStatusResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetCertificatesStatusResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetCertificatesStatusResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetCertificatesStatusResponse(soap*, _tds__SetCertificatesStatusResponse*) deserialize from a stream
/// - int soap_write__tds__SetCertificatesStatusResponse(soap, _tds__SetCertificatesStatusResponse*) serialize to a stream
class _tds__SetCertificatesStatusResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteCertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteCertificates is a complexType.
///
/// class _tds__DeleteCertificates operations:
/// - soap_new__tds__DeleteCertificates(soap*) allocate
/// - soap_new__tds__DeleteCertificates(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteCertificates(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteCertificates(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteCertificates(soap*, _tds__DeleteCertificates*) deserialize from a stream
/// - int soap_write__tds__DeleteCertificates(soap, _tds__DeleteCertificates*) serialize to a stream
class _tds__DeleteCertificates
{ public:
/// <PRE><BLOCKQUOTE>
///   List of ids of certificates to delete.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__token of length 1..unbounded.
    std::vector<xsd__token             > CertificateID                  1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteCertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteCertificatesResponse is a complexType.
///
/// class _tds__DeleteCertificatesResponse operations:
/// - soap_new__tds__DeleteCertificatesResponse(soap*) allocate
/// - soap_new__tds__DeleteCertificatesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteCertificatesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteCertificatesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteCertificatesResponse(soap*, _tds__DeleteCertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteCertificatesResponse(soap, _tds__DeleteCertificatesResponse*) serialize to a stream
class _tds__DeleteCertificatesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetPkcs10Request
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetPkcs10Request is a complexType.
///
/// class _tds__GetPkcs10Request operations:
/// - soap_new__tds__GetPkcs10Request(soap*) allocate
/// - soap_new__tds__GetPkcs10Request(soap*, int num) allocate array
/// - soap_new_req__tds__GetPkcs10Request(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetPkcs10Request(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetPkcs10Request(soap*, _tds__GetPkcs10Request*) deserialize from a stream
/// - int soap_write__tds__GetPkcs10Request(soap, _tds__GetPkcs10Request*) serialize to a stream
class _tds__GetPkcs10Request
{ public:
/// <PRE><BLOCKQUOTE>
///   List of ids of certificates to delete.
/// </BLOCKQUOTE></PRE>
/// Element "CertificateID" of XSD type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Relative Dinstinguished Name(RDN) CommonName(CN).
/// </BLOCKQUOTE></PRE>
/// Element "Subject" of XSD type xs:string.
    std::string*                         Subject                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional base64 encoded DER attributes.
/// </BLOCKQUOTE></PRE>
/// Element "Attributes" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Attributes                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetPkcs10RequestResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetPkcs10RequestResponse is a complexType.
///
/// class _tds__GetPkcs10RequestResponse operations:
/// - soap_new__tds__GetPkcs10RequestResponse(soap*) allocate
/// - soap_new__tds__GetPkcs10RequestResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetPkcs10RequestResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetPkcs10RequestResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetPkcs10RequestResponse(soap*, _tds__GetPkcs10RequestResponse*) deserialize from a stream
/// - int soap_write__tds__GetPkcs10RequestResponse(soap, _tds__GetPkcs10RequestResponse*) serialize to a stream
class _tds__GetPkcs10RequestResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
/// Element "Pkcs10Request" of XSD type "http://www.onvif.org/ver10/schema":BinaryData.
    tt__BinaryData*                      Pkcs10Request                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificates is a complexType.
///
/// class _tds__LoadCertificates operations:
/// - soap_new__tds__LoadCertificates(soap*) allocate
/// - soap_new__tds__LoadCertificates(soap*, int num) allocate array
/// - soap_new_req__tds__LoadCertificates(soap*, ...) allocate, set required members
/// - soap_new_set__tds__LoadCertificates(soap*, ...) allocate, set all public members
/// - int soap_read__tds__LoadCertificates(soap*, _tds__LoadCertificates*) deserialize from a stream
/// - int soap_write__tds__LoadCertificates(soap, _tds__LoadCertificates*) serialize to a stream
class _tds__LoadCertificates
{ public:
/// <PRE><BLOCKQUOTE>
///   Optional id and base64 encoded DER representation of certificate.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__Certificate* of length 1..unbounded.
    std::vector<tt__Certificate*       > NVTCertificate                 1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificatesResponse is a complexType.
///
/// class _tds__LoadCertificatesResponse operations:
/// - soap_new__tds__LoadCertificatesResponse(soap*) allocate
/// - soap_new__tds__LoadCertificatesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__LoadCertificatesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__LoadCertificatesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__LoadCertificatesResponse(soap*, _tds__LoadCertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__LoadCertificatesResponse(soap, _tds__LoadCertificatesResponse*) serialize to a stream
class _tds__LoadCertificatesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateMode is a complexType.
///
/// class _tds__GetClientCertificateMode operations:
/// - soap_new__tds__GetClientCertificateMode(soap*) allocate
/// - soap_new__tds__GetClientCertificateMode(soap*, int num) allocate array
/// - soap_new_req__tds__GetClientCertificateMode(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetClientCertificateMode(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetClientCertificateMode(soap*, _tds__GetClientCertificateMode*) deserialize from a stream
/// - int soap_write__tds__GetClientCertificateMode(soap, _tds__GetClientCertificateMode*) serialize to a stream
class _tds__GetClientCertificateMode
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetClientCertificateModeResponse is a complexType.
///
/// class _tds__GetClientCertificateModeResponse operations:
/// - soap_new__tds__GetClientCertificateModeResponse(soap*) allocate
/// - soap_new__tds__GetClientCertificateModeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetClientCertificateModeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetClientCertificateModeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetClientCertificateModeResponse(soap*, _tds__GetClientCertificateModeResponse*) deserialize from a stream
/// - int soap_write__tds__GetClientCertificateModeResponse(soap, _tds__GetClientCertificateModeResponse*) serialize to a stream
class _tds__GetClientCertificateModeResponse
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not client certificates are required by device.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateMode
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateMode is a complexType.
///
/// class _tds__SetClientCertificateMode operations:
/// - soap_new__tds__SetClientCertificateMode(soap*) allocate
/// - soap_new__tds__SetClientCertificateMode(soap*, int num) allocate array
/// - soap_new_req__tds__SetClientCertificateMode(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetClientCertificateMode(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetClientCertificateMode(soap*, _tds__SetClientCertificateMode*) deserialize from a stream
/// - int soap_write__tds__SetClientCertificateMode(soap, _tds__SetClientCertificateMode*) serialize to a stream
class _tds__SetClientCertificateMode
{ public:
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not client certificates are required by device.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateModeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetClientCertificateModeResponse is a complexType.
///
/// class _tds__SetClientCertificateModeResponse operations:
/// - soap_new__tds__SetClientCertificateModeResponse(soap*) allocate
/// - soap_new__tds__SetClientCertificateModeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetClientCertificateModeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetClientCertificateModeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetClientCertificateModeResponse(soap*, _tds__SetClientCertificateModeResponse*) deserialize from a stream
/// - int soap_write__tds__SetClientCertificateModeResponse(soap, _tds__SetClientCertificateModeResponse*) serialize to a stream
class _tds__SetClientCertificateModeResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCACertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCACertificates is a complexType.
///
/// class _tds__GetCACertificates operations:
/// - soap_new__tds__GetCACertificates(soap*) allocate
/// - soap_new__tds__GetCACertificates(soap*, int num) allocate array
/// - soap_new_req__tds__GetCACertificates(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCACertificates(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCACertificates(soap*, _tds__GetCACertificates*) deserialize from a stream
/// - int soap_write__tds__GetCACertificates(soap, _tds__GetCACertificates*) serialize to a stream
class _tds__GetCACertificates
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCACertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCACertificatesResponse is a complexType.
///
/// class _tds__GetCACertificatesResponse operations:
/// - soap_new__tds__GetCACertificatesResponse(soap*) allocate
/// - soap_new__tds__GetCACertificatesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetCACertificatesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCACertificatesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCACertificatesResponse(soap*, _tds__GetCACertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__GetCACertificatesResponse(soap, _tds__GetCACertificatesResponse*) serialize to a stream
class _tds__GetCACertificatesResponse
{ public:
/// Vector of tt__Certificate* of length 0..unbounded.
    std::vector<tt__Certificate*       > CACertificate                  0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKey
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKey is a complexType.
///
/// class _tds__LoadCertificateWithPrivateKey operations:
/// - soap_new__tds__LoadCertificateWithPrivateKey(soap*) allocate
/// - soap_new__tds__LoadCertificateWithPrivateKey(soap*, int num) allocate array
/// - soap_new_req__tds__LoadCertificateWithPrivateKey(soap*, ...) allocate, set required members
/// - soap_new_set__tds__LoadCertificateWithPrivateKey(soap*, ...) allocate, set all public members
/// - int soap_read__tds__LoadCertificateWithPrivateKey(soap*, _tds__LoadCertificateWithPrivateKey*) deserialize from a stream
/// - int soap_write__tds__LoadCertificateWithPrivateKey(soap, _tds__LoadCertificateWithPrivateKey*) serialize to a stream
class _tds__LoadCertificateWithPrivateKey
{ public:
/// Vector of tt__CertificateWithPrivateKey* of length 1..unbounded.
    std::vector<tt__CertificateWithPrivateKey*> CertificateWithPrivateKey      1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKeyResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCertificateWithPrivateKeyResponse is a complexType.
///
/// class _tds__LoadCertificateWithPrivateKeyResponse operations:
/// - soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap*) allocate
/// - soap_new__tds__LoadCertificateWithPrivateKeyResponse(soap*, int num) allocate array
/// - soap_new_req__tds__LoadCertificateWithPrivateKeyResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__LoadCertificateWithPrivateKeyResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__LoadCertificateWithPrivateKeyResponse(soap*, _tds__LoadCertificateWithPrivateKeyResponse*) deserialize from a stream
/// - int soap_write__tds__LoadCertificateWithPrivateKeyResponse(soap, _tds__LoadCertificateWithPrivateKeyResponse*) serialize to a stream
class _tds__LoadCertificateWithPrivateKeyResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformation is a complexType.
///
/// class _tds__GetCertificateInformation operations:
/// - soap_new__tds__GetCertificateInformation(soap*) allocate
/// - soap_new__tds__GetCertificateInformation(soap*, int num) allocate array
/// - soap_new_req__tds__GetCertificateInformation(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCertificateInformation(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCertificateInformation(soap*, _tds__GetCertificateInformation*) deserialize from a stream
/// - int soap_write__tds__GetCertificateInformation(soap, _tds__GetCertificateInformation*) serialize to a stream
class _tds__GetCertificateInformation
{ public:
/// Element "CertificateID" of XSD type xs:token.
    xsd__token                           CertificateID                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetCertificateInformationResponse is a complexType.
///
/// class _tds__GetCertificateInformationResponse operations:
/// - soap_new__tds__GetCertificateInformationResponse(soap*) allocate
/// - soap_new__tds__GetCertificateInformationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetCertificateInformationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetCertificateInformationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetCertificateInformationResponse(soap*, _tds__GetCertificateInformationResponse*) deserialize from a stream
/// - int soap_write__tds__GetCertificateInformationResponse(soap, _tds__GetCertificateInformationResponse*) serialize to a stream
class _tds__GetCertificateInformationResponse
{ public:
/// Element "CertificateInformation" of XSD type "http://www.onvif.org/ver10/schema":CertificateInformation.
    tt__CertificateInformation*          CertificateInformation         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCACertificates
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCACertificates is a complexType.
///
/// class _tds__LoadCACertificates operations:
/// - soap_new__tds__LoadCACertificates(soap*) allocate
/// - soap_new__tds__LoadCACertificates(soap*, int num) allocate array
/// - soap_new_req__tds__LoadCACertificates(soap*, ...) allocate, set required members
/// - soap_new_set__tds__LoadCACertificates(soap*, ...) allocate, set all public members
/// - int soap_read__tds__LoadCACertificates(soap*, _tds__LoadCACertificates*) deserialize from a stream
/// - int soap_write__tds__LoadCACertificates(soap, _tds__LoadCACertificates*) serialize to a stream
class _tds__LoadCACertificates
{ public:
/// Vector of tt__Certificate* of length 1..unbounded.
    std::vector<tt__Certificate*       > CACertificate                  1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":LoadCACertificatesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":LoadCACertificatesResponse is a complexType.
///
/// class _tds__LoadCACertificatesResponse operations:
/// - soap_new__tds__LoadCACertificatesResponse(soap*) allocate
/// - soap_new__tds__LoadCACertificatesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__LoadCACertificatesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__LoadCACertificatesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__LoadCACertificatesResponse(soap*, _tds__LoadCACertificatesResponse*) deserialize from a stream
/// - int soap_write__tds__LoadCACertificatesResponse(soap, _tds__LoadCACertificatesResponse*) serialize to a stream
class _tds__LoadCACertificatesResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfiguration is a complexType.
///
/// class _tds__CreateDot1XConfiguration operations:
/// - soap_new__tds__CreateDot1XConfiguration(soap*) allocate
/// - soap_new__tds__CreateDot1XConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__CreateDot1XConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateDot1XConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateDot1XConfiguration(soap*, _tds__CreateDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__CreateDot1XConfiguration(soap, _tds__CreateDot1XConfiguration*) serialize to a stream
class _tds__CreateDot1XConfiguration
{ public:
/// Element "Dot1XConfiguration" of XSD type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    tt__Dot1XConfiguration*              Dot1XConfiguration             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateDot1XConfigurationResponse is a complexType.
///
/// class _tds__CreateDot1XConfigurationResponse operations:
/// - soap_new__tds__CreateDot1XConfigurationResponse(soap*) allocate
/// - soap_new__tds__CreateDot1XConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__CreateDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateDot1XConfigurationResponse(soap*, _tds__CreateDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__CreateDot1XConfigurationResponse(soap, _tds__CreateDot1XConfigurationResponse*) serialize to a stream
class _tds__CreateDot1XConfigurationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfiguration is a complexType.
///
/// class _tds__SetDot1XConfiguration operations:
/// - soap_new__tds__SetDot1XConfiguration(soap*) allocate
/// - soap_new__tds__SetDot1XConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__SetDot1XConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDot1XConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDot1XConfiguration(soap*, _tds__SetDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__SetDot1XConfiguration(soap, _tds__SetDot1XConfiguration*) serialize to a stream
class _tds__SetDot1XConfiguration
{ public:
/// Element "Dot1XConfiguration" of XSD type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    tt__Dot1XConfiguration*              Dot1XConfiguration             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetDot1XConfigurationResponse is a complexType.
///
/// class _tds__SetDot1XConfigurationResponse operations:
/// - soap_new__tds__SetDot1XConfigurationResponse(soap*) allocate
/// - soap_new__tds__SetDot1XConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetDot1XConfigurationResponse(soap*, _tds__SetDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__SetDot1XConfigurationResponse(soap, _tds__SetDot1XConfigurationResponse*) serialize to a stream
class _tds__SetDot1XConfigurationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfiguration is a complexType.
///
/// class _tds__GetDot1XConfiguration operations:
/// - soap_new__tds__GetDot1XConfiguration(soap*) allocate
/// - soap_new__tds__GetDot1XConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot1XConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot1XConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot1XConfiguration(soap*, _tds__GetDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfiguration(soap, _tds__GetDot1XConfiguration*) serialize to a stream
class _tds__GetDot1XConfiguration
{ public:
/// Element "Dot1XConfigurationToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Dot1XConfigurationToken        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationResponse is a complexType.
///
/// class _tds__GetDot1XConfigurationResponse operations:
/// - soap_new__tds__GetDot1XConfigurationResponse(soap*) allocate
/// - soap_new__tds__GetDot1XConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot1XConfigurationResponse(soap*, _tds__GetDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfigurationResponse(soap, _tds__GetDot1XConfigurationResponse*) serialize to a stream
class _tds__GetDot1XConfigurationResponse
{ public:
/// Element "Dot1XConfiguration" of XSD type "http://www.onvif.org/ver10/schema":Dot1XConfiguration.
    tt__Dot1XConfiguration*              Dot1XConfiguration             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurations
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurations is a complexType.
///
/// class _tds__GetDot1XConfigurations operations:
/// - soap_new__tds__GetDot1XConfigurations(soap*) allocate
/// - soap_new__tds__GetDot1XConfigurations(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot1XConfigurations(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot1XConfigurations(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot1XConfigurations(soap*, _tds__GetDot1XConfigurations*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfigurations(soap, _tds__GetDot1XConfigurations*) serialize to a stream
class _tds__GetDot1XConfigurations
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot1XConfigurationsResponse is a complexType.
///
/// class _tds__GetDot1XConfigurationsResponse operations:
/// - soap_new__tds__GetDot1XConfigurationsResponse(soap*) allocate
/// - soap_new__tds__GetDot1XConfigurationsResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot1XConfigurationsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot1XConfigurationsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot1XConfigurationsResponse(soap*, _tds__GetDot1XConfigurationsResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot1XConfigurationsResponse(soap, _tds__GetDot1XConfigurationsResponse*) serialize to a stream
class _tds__GetDot1XConfigurationsResponse
{ public:
/// Vector of tt__Dot1XConfiguration* of length 0..unbounded.
    std::vector<tt__Dot1XConfiguration*> Dot1XConfiguration             0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfiguration is a complexType.
///
/// class _tds__DeleteDot1XConfiguration operations:
/// - soap_new__tds__DeleteDot1XConfiguration(soap*) allocate
/// - soap_new__tds__DeleteDot1XConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteDot1XConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteDot1XConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteDot1XConfiguration(soap*, _tds__DeleteDot1XConfiguration*) deserialize from a stream
/// - int soap_write__tds__DeleteDot1XConfiguration(soap, _tds__DeleteDot1XConfiguration*) serialize to a stream
class _tds__DeleteDot1XConfiguration
{ public:
/// Vector of tt__ReferenceToken of length 0..unbounded.
    std::vector<tt__ReferenceToken     > Dot1XConfigurationToken        0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteDot1XConfigurationResponse is a complexType.
///
/// class _tds__DeleteDot1XConfigurationResponse operations:
/// - soap_new__tds__DeleteDot1XConfigurationResponse(soap*) allocate
/// - soap_new__tds__DeleteDot1XConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteDot1XConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteDot1XConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteDot1XConfigurationResponse(soap*, _tds__DeleteDot1XConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteDot1XConfigurationResponse(soap, _tds__DeleteDot1XConfigurationResponse*) serialize to a stream
class _tds__DeleteDot1XConfigurationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputs
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputs is a complexType.
///
/// class _tds__GetRelayOutputs operations:
/// - soap_new__tds__GetRelayOutputs(soap*) allocate
/// - soap_new__tds__GetRelayOutputs(soap*, int num) allocate array
/// - soap_new_req__tds__GetRelayOutputs(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetRelayOutputs(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetRelayOutputs(soap*, _tds__GetRelayOutputs*) deserialize from a stream
/// - int soap_write__tds__GetRelayOutputs(soap, _tds__GetRelayOutputs*) serialize to a stream
class _tds__GetRelayOutputs
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetRelayOutputsResponse is a complexType.
///
/// class _tds__GetRelayOutputsResponse operations:
/// - soap_new__tds__GetRelayOutputsResponse(soap*) allocate
/// - soap_new__tds__GetRelayOutputsResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetRelayOutputsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetRelayOutputsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetRelayOutputsResponse(soap*, _tds__GetRelayOutputsResponse*) deserialize from a stream
/// - int soap_write__tds__GetRelayOutputsResponse(soap, _tds__GetRelayOutputsResponse*) serialize to a stream
class _tds__GetRelayOutputsResponse
{ public:
/// Vector of tt__RelayOutput* of length 0..unbounded.
    std::vector<tt__RelayOutput*       > RelayOutputs                   0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettings
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettings is a complexType.
///
/// class _tds__SetRelayOutputSettings operations:
/// - soap_new__tds__SetRelayOutputSettings(soap*) allocate
/// - soap_new__tds__SetRelayOutputSettings(soap*, int num) allocate array
/// - soap_new_req__tds__SetRelayOutputSettings(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRelayOutputSettings(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRelayOutputSettings(soap*, _tds__SetRelayOutputSettings*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputSettings(soap, _tds__SetRelayOutputSettings*) serialize to a stream
class _tds__SetRelayOutputSettings
{ public:
/// Element "RelayOutputToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   RelayOutputToken               1;	///< Required element.
/// Element "Properties" of XSD type "http://www.onvif.org/ver10/schema":RelayOutputSettings.
    tt__RelayOutputSettings*             Properties                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettingsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputSettingsResponse is a complexType.
///
/// class _tds__SetRelayOutputSettingsResponse operations:
/// - soap_new__tds__SetRelayOutputSettingsResponse(soap*) allocate
/// - soap_new__tds__SetRelayOutputSettingsResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetRelayOutputSettingsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRelayOutputSettingsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRelayOutputSettingsResponse(soap*, _tds__SetRelayOutputSettingsResponse*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputSettingsResponse(soap, _tds__SetRelayOutputSettingsResponse*) serialize to a stream
class _tds__SetRelayOutputSettingsResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputState
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputState is a complexType.
///
/// class _tds__SetRelayOutputState operations:
/// - soap_new__tds__SetRelayOutputState(soap*) allocate
/// - soap_new__tds__SetRelayOutputState(soap*, int num) allocate array
/// - soap_new_req__tds__SetRelayOutputState(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRelayOutputState(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRelayOutputState(soap*, _tds__SetRelayOutputState*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputState(soap, _tds__SetRelayOutputState*) serialize to a stream
class _tds__SetRelayOutputState
{ public:
/// Element "RelayOutputToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   RelayOutputToken               1;	///< Required element.
/// Element "LogicalState" of XSD type "http://www.onvif.org/ver10/schema":RelayLogicalState.
    enum tt__RelayLogicalState           LogicalState                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputStateResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetRelayOutputStateResponse is a complexType.
///
/// class _tds__SetRelayOutputStateResponse operations:
/// - soap_new__tds__SetRelayOutputStateResponse(soap*) allocate
/// - soap_new__tds__SetRelayOutputStateResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetRelayOutputStateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetRelayOutputStateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetRelayOutputStateResponse(soap*, _tds__SetRelayOutputStateResponse*) deserialize from a stream
/// - int soap_write__tds__SetRelayOutputStateResponse(soap, _tds__SetRelayOutputStateResponse*) serialize to a stream
class _tds__SetRelayOutputStateResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommand
/// @brief "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommand is a complexType.
///
/// class _tds__SendAuxiliaryCommand operations:
/// - soap_new__tds__SendAuxiliaryCommand(soap*) allocate
/// - soap_new__tds__SendAuxiliaryCommand(soap*, int num) allocate array
/// - soap_new_req__tds__SendAuxiliaryCommand(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SendAuxiliaryCommand(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SendAuxiliaryCommand(soap*, _tds__SendAuxiliaryCommand*) deserialize from a stream
/// - int soap_write__tds__SendAuxiliaryCommand(soap, _tds__SendAuxiliaryCommand*) serialize to a stream
class _tds__SendAuxiliaryCommand
{ public:
/// Element "AuxiliaryCommand" of XSD type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    tt__AuxiliaryData                    AuxiliaryCommand               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommandResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SendAuxiliaryCommandResponse is a complexType.
///
/// class _tds__SendAuxiliaryCommandResponse operations:
/// - soap_new__tds__SendAuxiliaryCommandResponse(soap*) allocate
/// - soap_new__tds__SendAuxiliaryCommandResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SendAuxiliaryCommandResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SendAuxiliaryCommandResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SendAuxiliaryCommandResponse(soap*, _tds__SendAuxiliaryCommandResponse*) deserialize from a stream
/// - int soap_write__tds__SendAuxiliaryCommandResponse(soap, _tds__SendAuxiliaryCommandResponse*) serialize to a stream
class _tds__SendAuxiliaryCommandResponse
{ public:
/// Element "AuxiliaryCommandResponse" of XSD type "http://www.onvif.org/ver10/schema":AuxiliaryData.
    tt__AuxiliaryData*                   AuxiliaryCommandResponse       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11Capabilities
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11Capabilities is a complexType.
///
/// class _tds__GetDot11Capabilities operations:
/// - soap_new__tds__GetDot11Capabilities(soap*) allocate
/// - soap_new__tds__GetDot11Capabilities(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot11Capabilities(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot11Capabilities(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot11Capabilities(soap*, _tds__GetDot11Capabilities*) deserialize from a stream
/// - int soap_write__tds__GetDot11Capabilities(soap, _tds__GetDot11Capabilities*) serialize to a stream
class _tds__GetDot11Capabilities
{ public:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11CapabilitiesResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11CapabilitiesResponse is a complexType.
///
/// class _tds__GetDot11CapabilitiesResponse operations:
/// - soap_new__tds__GetDot11CapabilitiesResponse(soap*) allocate
/// - soap_new__tds__GetDot11CapabilitiesResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot11CapabilitiesResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot11CapabilitiesResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot11CapabilitiesResponse(soap*, _tds__GetDot11CapabilitiesResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot11CapabilitiesResponse(soap, _tds__GetDot11CapabilitiesResponse*) serialize to a stream
class _tds__GetDot11CapabilitiesResponse
{ public:
/// Element "Capabilities" of XSD type "http://www.onvif.org/ver10/schema":Dot11Capabilities.
    tt__Dot11Capabilities*               Capabilities                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11Status
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11Status is a complexType.
///
/// class _tds__GetDot11Status operations:
/// - soap_new__tds__GetDot11Status(soap*) allocate
/// - soap_new__tds__GetDot11Status(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot11Status(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot11Status(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot11Status(soap*, _tds__GetDot11Status*) deserialize from a stream
/// - int soap_write__tds__GetDot11Status(soap, _tds__GetDot11Status*) serialize to a stream
class _tds__GetDot11Status
{ public:
/// Element "InterfaceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetDot11StatusResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetDot11StatusResponse is a complexType.
///
/// class _tds__GetDot11StatusResponse operations:
/// - soap_new__tds__GetDot11StatusResponse(soap*) allocate
/// - soap_new__tds__GetDot11StatusResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetDot11StatusResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetDot11StatusResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetDot11StatusResponse(soap*, _tds__GetDot11StatusResponse*) deserialize from a stream
/// - int soap_write__tds__GetDot11StatusResponse(soap, _tds__GetDot11StatusResponse*) serialize to a stream
class _tds__GetDot11StatusResponse
{ public:
/// Element "Status" of XSD type "http://www.onvif.org/ver10/schema":Dot11Status.
    tt__Dot11Status*                     Status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11Networks
/// @brief "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11Networks is a complexType.
///
/// class _tds__ScanAvailableDot11Networks operations:
/// - soap_new__tds__ScanAvailableDot11Networks(soap*) allocate
/// - soap_new__tds__ScanAvailableDot11Networks(soap*, int num) allocate array
/// - soap_new_req__tds__ScanAvailableDot11Networks(soap*, ...) allocate, set required members
/// - soap_new_set__tds__ScanAvailableDot11Networks(soap*, ...) allocate, set all public members
/// - int soap_read__tds__ScanAvailableDot11Networks(soap*, _tds__ScanAvailableDot11Networks*) deserialize from a stream
/// - int soap_write__tds__ScanAvailableDot11Networks(soap, _tds__ScanAvailableDot11Networks*) serialize to a stream
class _tds__ScanAvailableDot11Networks
{ public:
/// Element "InterfaceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   InterfaceToken                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11NetworksResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":ScanAvailableDot11NetworksResponse is a complexType.
///
/// class _tds__ScanAvailableDot11NetworksResponse operations:
/// - soap_new__tds__ScanAvailableDot11NetworksResponse(soap*) allocate
/// - soap_new__tds__ScanAvailableDot11NetworksResponse(soap*, int num) allocate array
/// - soap_new_req__tds__ScanAvailableDot11NetworksResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__ScanAvailableDot11NetworksResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__ScanAvailableDot11NetworksResponse(soap*, _tds__ScanAvailableDot11NetworksResponse*) deserialize from a stream
/// - int soap_write__tds__ScanAvailableDot11NetworksResponse(soap, _tds__ScanAvailableDot11NetworksResponse*) serialize to a stream
class _tds__ScanAvailableDot11NetworksResponse
{ public:
/// Vector of tt__Dot11AvailableNetworks* of length 0..unbounded.
    std::vector<tt__Dot11AvailableNetworks*> Networks                       0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemUris
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemUris is a complexType.
///
/// class _tds__GetSystemUris operations:
/// - soap_new__tds__GetSystemUris(soap*) allocate
/// - soap_new__tds__GetSystemUris(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemUris(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemUris(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemUris(soap*, _tds__GetSystemUris*) deserialize from a stream
/// - int soap_write__tds__GetSystemUris(soap, _tds__GetSystemUris*) serialize to a stream
class _tds__GetSystemUris
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetSystemUrisResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetSystemUrisResponse is a complexType.
///
/// class _tds__GetSystemUrisResponse operations:
/// - soap_new__tds__GetSystemUrisResponse(soap*) allocate
/// - soap_new__tds__GetSystemUrisResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemUrisResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemUrisResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemUrisResponse(soap*, _tds__GetSystemUrisResponse*) deserialize from a stream
/// - int soap_write__tds__GetSystemUrisResponse(soap, _tds__GetSystemUrisResponse*) serialize to a stream
class _tds__GetSystemUrisResponse
{ public:
/// Element "SystemLogUris" of XSD type "http://www.onvif.org/ver10/schema":SystemLogUriList.
    tt__SystemLogUriList*                SystemLogUris                  0;	///< Optional element.
/// Element "SupportInfoUri" of XSD type xs:anyURI.
    xsd__anyURI*                         SupportInfoUri                 0;	///< Optional element.
/// Element "SystemBackupUri" of XSD type xs:anyURI.
    xsd__anyURI*                         SystemBackupUri                0;	///< Optional element.
/// class _tds__GetSystemUrisResponse_Extension operations:
/// - soap_new__tds__GetSystemUrisResponse_Extension(soap*) allocate
/// - soap_new__tds__GetSystemUrisResponse_Extension(soap*, int num) allocate array
/// - soap_new_req__tds__GetSystemUrisResponse_Extension(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetSystemUrisResponse_Extension(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetSystemUrisResponse_Extension(soap*, _tds__GetSystemUrisResponse_Extension*) deserialize from a stream
/// - int soap_write__tds__GetSystemUrisResponse_Extension(soap, _tds__GetSystemUrisResponse_Extension*) serialize to a stream
    class _tds__GetSystemUrisResponse_Extension
    {
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }                                   *Extension                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgrade
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgrade is a complexType.
///
/// class _tds__StartFirmwareUpgrade operations:
/// - soap_new__tds__StartFirmwareUpgrade(soap*) allocate
/// - soap_new__tds__StartFirmwareUpgrade(soap*, int num) allocate array
/// - soap_new_req__tds__StartFirmwareUpgrade(soap*, ...) allocate, set required members
/// - soap_new_set__tds__StartFirmwareUpgrade(soap*, ...) allocate, set all public members
/// - int soap_read__tds__StartFirmwareUpgrade(soap*, _tds__StartFirmwareUpgrade*) deserialize from a stream
/// - int soap_write__tds__StartFirmwareUpgrade(soap, _tds__StartFirmwareUpgrade*) serialize to a stream
class _tds__StartFirmwareUpgrade
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgradeResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartFirmwareUpgradeResponse is a complexType.
///
/// class _tds__StartFirmwareUpgradeResponse operations:
/// - soap_new__tds__StartFirmwareUpgradeResponse(soap*) allocate
/// - soap_new__tds__StartFirmwareUpgradeResponse(soap*, int num) allocate array
/// - soap_new_req__tds__StartFirmwareUpgradeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__StartFirmwareUpgradeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__StartFirmwareUpgradeResponse(soap*, _tds__StartFirmwareUpgradeResponse*) deserialize from a stream
/// - int soap_write__tds__StartFirmwareUpgradeResponse(soap, _tds__StartFirmwareUpgradeResponse*) serialize to a stream
class _tds__StartFirmwareUpgradeResponse
{ public:
/// Element "UploadUri" of XSD type xs:anyURI.
    xsd__anyURI                          UploadUri                      1;	///< Required element.
/// Element "UploadDelay" of XSD type xs:duration.
    xsd__duration                        UploadDelay                    1;	///< Required element.
/// Element "ExpectedDownTime" of XSD type xs:duration.
    xsd__duration                        ExpectedDownTime               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartSystemRestore
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartSystemRestore is a complexType.
///
/// class _tds__StartSystemRestore operations:
/// - soap_new__tds__StartSystemRestore(soap*) allocate
/// - soap_new__tds__StartSystemRestore(soap*, int num) allocate array
/// - soap_new_req__tds__StartSystemRestore(soap*, ...) allocate, set required members
/// - soap_new_set__tds__StartSystemRestore(soap*, ...) allocate, set all public members
/// - int soap_read__tds__StartSystemRestore(soap*, _tds__StartSystemRestore*) deserialize from a stream
/// - int soap_write__tds__StartSystemRestore(soap, _tds__StartSystemRestore*) serialize to a stream
class _tds__StartSystemRestore
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":StartSystemRestoreResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":StartSystemRestoreResponse is a complexType.
///
/// class _tds__StartSystemRestoreResponse operations:
/// - soap_new__tds__StartSystemRestoreResponse(soap*) allocate
/// - soap_new__tds__StartSystemRestoreResponse(soap*, int num) allocate array
/// - soap_new_req__tds__StartSystemRestoreResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__StartSystemRestoreResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__StartSystemRestoreResponse(soap*, _tds__StartSystemRestoreResponse*) deserialize from a stream
/// - int soap_write__tds__StartSystemRestoreResponse(soap, _tds__StartSystemRestoreResponse*) serialize to a stream
class _tds__StartSystemRestoreResponse
{ public:
/// Element "UploadUri" of XSD type xs:anyURI.
    xsd__anyURI                          UploadUri                      1;	///< Required element.
/// Element "ExpectedDownTime" of XSD type xs:duration.
    xsd__duration                        ExpectedDownTime               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurations
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurations is a complexType.
///
/// class _tds__GetStorageConfigurations operations:
/// - soap_new__tds__GetStorageConfigurations(soap*) allocate
/// - soap_new__tds__GetStorageConfigurations(soap*, int num) allocate array
/// - soap_new_req__tds__GetStorageConfigurations(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetStorageConfigurations(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetStorageConfigurations(soap*, _tds__GetStorageConfigurations*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfigurations(soap, _tds__GetStorageConfigurations*) serialize to a stream
class _tds__GetStorageConfigurations
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationsResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationsResponse is a complexType.
///
/// class _tds__GetStorageConfigurationsResponse operations:
/// - soap_new__tds__GetStorageConfigurationsResponse(soap*) allocate
/// - soap_new__tds__GetStorageConfigurationsResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetStorageConfigurationsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetStorageConfigurationsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetStorageConfigurationsResponse(soap*, _tds__GetStorageConfigurationsResponse*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfigurationsResponse(soap, _tds__GetStorageConfigurationsResponse*) serialize to a stream
class _tds__GetStorageConfigurationsResponse
{ public:
/// Vector of tds__StorageConfiguration* of length 0..unbounded.
    std::vector<tds__StorageConfiguration*> StorageConfigurations          0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfiguration is a complexType.
///
/// class _tds__CreateStorageConfiguration operations:
/// - soap_new__tds__CreateStorageConfiguration(soap*) allocate
/// - soap_new__tds__CreateStorageConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__CreateStorageConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateStorageConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateStorageConfiguration(soap*, _tds__CreateStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__CreateStorageConfiguration(soap, _tds__CreateStorageConfiguration*) serialize to a stream
class _tds__CreateStorageConfiguration
{ public:
/// Element "StorageConfiguration" of XSD type "http://www.onvif.org/ver10/device/wsdl":StorageConfigurationData.
    tds__StorageConfigurationData*       StorageConfiguration           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":CreateStorageConfigurationResponse is a complexType.
///
/// class _tds__CreateStorageConfigurationResponse operations:
/// - soap_new__tds__CreateStorageConfigurationResponse(soap*) allocate
/// - soap_new__tds__CreateStorageConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__CreateStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__CreateStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__CreateStorageConfigurationResponse(soap*, _tds__CreateStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__CreateStorageConfigurationResponse(soap, _tds__CreateStorageConfigurationResponse*) serialize to a stream
class _tds__CreateStorageConfigurationResponse
{ public:
/// Element "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfiguration is a complexType.
///
/// class _tds__GetStorageConfiguration operations:
/// - soap_new__tds__GetStorageConfiguration(soap*) allocate
/// - soap_new__tds__GetStorageConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__GetStorageConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetStorageConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetStorageConfiguration(soap*, _tds__GetStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfiguration(soap, _tds__GetStorageConfiguration*) serialize to a stream
class _tds__GetStorageConfiguration
{ public:
/// Element "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetStorageConfigurationResponse is a complexType.
///
/// class _tds__GetStorageConfigurationResponse operations:
/// - soap_new__tds__GetStorageConfigurationResponse(soap*) allocate
/// - soap_new__tds__GetStorageConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetStorageConfigurationResponse(soap*, _tds__GetStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__GetStorageConfigurationResponse(soap, _tds__GetStorageConfigurationResponse*) serialize to a stream
class _tds__GetStorageConfigurationResponse
{ public:
/// Element "StorageConfiguration" of XSD type "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration.
    tds__StorageConfiguration*           StorageConfiguration           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetStorageConfiguration is a complexType.
///
/// class _tds__SetStorageConfiguration operations:
/// - soap_new__tds__SetStorageConfiguration(soap*) allocate
/// - soap_new__tds__SetStorageConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__SetStorageConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetStorageConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetStorageConfiguration(soap*, _tds__SetStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__SetStorageConfiguration(soap, _tds__SetStorageConfiguration*) serialize to a stream
class _tds__SetStorageConfiguration
{ public:
/// Element "StorageConfiguration" of XSD type "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration.
    tds__StorageConfiguration*           StorageConfiguration           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetStorageConfigurationResponse is a complexType.
///
/// class _tds__SetStorageConfigurationResponse operations:
/// - soap_new__tds__SetStorageConfigurationResponse(soap*) allocate
/// - soap_new__tds__SetStorageConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetStorageConfigurationResponse(soap*, _tds__SetStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__SetStorageConfigurationResponse(soap, _tds__SetStorageConfigurationResponse*) serialize to a stream
class _tds__SetStorageConfigurationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfiguration
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfiguration is a complexType.
///
/// class _tds__DeleteStorageConfiguration operations:
/// - soap_new__tds__DeleteStorageConfiguration(soap*) allocate
/// - soap_new__tds__DeleteStorageConfiguration(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteStorageConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteStorageConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteStorageConfiguration(soap*, _tds__DeleteStorageConfiguration*) deserialize from a stream
/// - int soap_write__tds__DeleteStorageConfiguration(soap, _tds__DeleteStorageConfiguration*) serialize to a stream
class _tds__DeleteStorageConfiguration
{ public:
/// Element "Token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   Token                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfigurationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteStorageConfigurationResponse is a complexType.
///
/// class _tds__DeleteStorageConfigurationResponse operations:
/// - soap_new__tds__DeleteStorageConfigurationResponse(soap*) allocate
/// - soap_new__tds__DeleteStorageConfigurationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteStorageConfigurationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteStorageConfigurationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteStorageConfigurationResponse(soap*, _tds__DeleteStorageConfigurationResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteStorageConfigurationResponse(soap, _tds__DeleteStorageConfigurationResponse*) serialize to a stream
class _tds__DeleteStorageConfigurationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetGeoLocation
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetGeoLocation is a complexType.
///
/// class _tds__GetGeoLocation operations:
/// - soap_new__tds__GetGeoLocation(soap*) allocate
/// - soap_new__tds__GetGeoLocation(soap*, int num) allocate array
/// - soap_new_req__tds__GetGeoLocation(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetGeoLocation(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetGeoLocation(soap*, _tds__GetGeoLocation*) deserialize from a stream
/// - int soap_write__tds__GetGeoLocation(soap, _tds__GetGeoLocation*) serialize to a stream
class _tds__GetGeoLocation
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":GetGeoLocationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":GetGeoLocationResponse is a complexType.
///
/// class _tds__GetGeoLocationResponse operations:
/// - soap_new__tds__GetGeoLocationResponse(soap*) allocate
/// - soap_new__tds__GetGeoLocationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__GetGeoLocationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__GetGeoLocationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__GetGeoLocationResponse(soap*, _tds__GetGeoLocationResponse*) deserialize from a stream
/// - int soap_write__tds__GetGeoLocationResponse(soap, _tds__GetGeoLocationResponse*) serialize to a stream
class _tds__GetGeoLocationResponse
{ public:
/// Vector of tt__LocationEntity* of length 0..unbounded.
    std::vector<tt__LocationEntity*    > Location                       0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetGeoLocation
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetGeoLocation is a complexType.
///
/// class _tds__SetGeoLocation operations:
/// - soap_new__tds__SetGeoLocation(soap*) allocate
/// - soap_new__tds__SetGeoLocation(soap*, int num) allocate array
/// - soap_new_req__tds__SetGeoLocation(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetGeoLocation(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetGeoLocation(soap*, _tds__SetGeoLocation*) deserialize from a stream
/// - int soap_write__tds__SetGeoLocation(soap, _tds__SetGeoLocation*) serialize to a stream
class _tds__SetGeoLocation
{ public:
/// Vector of tt__LocationEntity* of length 1..unbounded.
    std::vector<tt__LocationEntity*    > Location                       1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":SetGeoLocationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":SetGeoLocationResponse is a complexType.
///
/// class _tds__SetGeoLocationResponse operations:
/// - soap_new__tds__SetGeoLocationResponse(soap*) allocate
/// - soap_new__tds__SetGeoLocationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__SetGeoLocationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__SetGeoLocationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__SetGeoLocationResponse(soap*, _tds__SetGeoLocationResponse*) deserialize from a stream
/// - int soap_write__tds__SetGeoLocationResponse(soap, _tds__SetGeoLocationResponse*) serialize to a stream
class _tds__SetGeoLocationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocation
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocation is a complexType.
///
/// class _tds__DeleteGeoLocation operations:
/// - soap_new__tds__DeleteGeoLocation(soap*) allocate
/// - soap_new__tds__DeleteGeoLocation(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteGeoLocation(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteGeoLocation(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteGeoLocation(soap*, _tds__DeleteGeoLocation*) deserialize from a stream
/// - int soap_write__tds__DeleteGeoLocation(soap, _tds__DeleteGeoLocation*) serialize to a stream
class _tds__DeleteGeoLocation
{ public:
/// Vector of tt__LocationEntity* of length 1..unbounded.
    std::vector<tt__LocationEntity*    > Location                       1;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocationResponse
/// @brief "http://www.onvif.org/ver10/device/wsdl":DeleteGeoLocationResponse is a complexType.
///
/// class _tds__DeleteGeoLocationResponse operations:
/// - soap_new__tds__DeleteGeoLocationResponse(soap*) allocate
/// - soap_new__tds__DeleteGeoLocationResponse(soap*, int num) allocate array
/// - soap_new_req__tds__DeleteGeoLocationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__tds__DeleteGeoLocationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__tds__DeleteGeoLocationResponse(soap*, _tds__DeleteGeoLocationResponse*) deserialize from a stream
/// - int soap_write__tds__DeleteGeoLocationResponse(soap, _tds__DeleteGeoLocationResponse*) serialize to a stream
class _tds__DeleteGeoLocationResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSource is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical video input.
/// </BLOCKQUOTE></PRE>
/// class tt__VideoSource operations:
/// - soap_new_tt__VideoSource(soap*) allocate
/// - soap_new_tt__VideoSource(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSource(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSource(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSource(soap*, tt__VideoSource*) deserialize from a stream
/// - int soap_write_tt__VideoSource(soap, tt__VideoSource*) serialize to a stream
class tt__VideoSource : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   Frame rate in frames per second.
/// </BLOCKQUOTE></PRE>
/// Element "Framerate" of XSD type xs:float.
    float                                Framerate                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Horizontal and vertical resolution
/// </BLOCKQUOTE></PRE>
/// Element "Resolution" of XSD type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 Resolution                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional configuration of the image sensor.
/// </BLOCKQUOTE></PRE>
/// Element "Imaging" of XSD type "http://www.onvif.org/ver10/schema":ImagingSettings.
    tt__ImagingSettings*                 Imaging                        0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceExtension.
    tt__VideoSourceExtension*            Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSource is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical audio input.
/// </BLOCKQUOTE></PRE>
/// class tt__AudioSource operations:
/// - soap_new_tt__AudioSource(soap*) allocate
/// - soap_new_tt__AudioSource(soap*, int num) allocate array
/// - soap_new_req_tt__AudioSource(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioSource(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioSource(soap*, tt__AudioSource*) deserialize from a stream
/// - int soap_write_tt__AudioSource(soap, tt__AudioSource*) serialize to a stream
class tt__AudioSource : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   number of available audio channels. (1: mono, 2: stereo)
/// </BLOCKQUOTE></PRE>
/// Element "Channels" of XSD type xs:int.
    int                                  Channels                       1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoSourceConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__VideoSourceConfiguration operations:
/// - soap_new_tt__VideoSourceConfiguration(soap*) allocate
/// - soap_new_tt__VideoSourceConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__VideoSourceConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoSourceConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoSourceConfiguration(soap*, tt__VideoSourceConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoSourceConfiguration(soap, tt__VideoSourceConfiguration*) serialize to a stream
class tt__VideoSourceConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Reference to the physical input.
/// </BLOCKQUOTE></PRE>
/// Element "SourceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   SourceToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Rectangle specifying the Video capturing area. The capturing area shall not be larger than the whole Video source area.
/// </BLOCKQUOTE></PRE>
/// Element "Bounds" of XSD type "http://www.onvif.org/ver10/schema":IntRectangle.
    tt__IntRectangle*                    Bounds                         1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoSourceConfigurationExtension.
    tt__VideoSourceConfigurationExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Readonly parameter signalling Source configuration's view mode, for devices supporting different view modes as defined in tt:viewModes.
/// </BLOCKQUOTE></PRE>
/// Attribute "ViewMode" of XSD type xs:string.
   @std::string*                         ViewMode                       0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__VideoEncoderConfiguration operations:
/// - soap_new_tt__VideoEncoderConfiguration(soap*) allocate
/// - soap_new_tt__VideoEncoderConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__VideoEncoderConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoEncoderConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoEncoderConfiguration(soap*, tt__VideoEncoderConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoEncoderConfiguration(soap, tt__VideoEncoderConfiguration*) serialize to a stream
class tt__VideoEncoderConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Used video codec, either Jpeg, H.264 or Mpeg4
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type "http://www.onvif.org/ver10/schema":VideoEncoding.
    enum tt__VideoEncoding               Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configured video resolution
/// </BLOCKQUOTE></PRE>
/// Element "Resolution" of XSD type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 Resolution                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
/// </BLOCKQUOTE></PRE>
/// Element "Quality" of XSD type xs:float.
    float                                Quality                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure rate control related parameters.
/// </BLOCKQUOTE></PRE>
/// Element "RateControl" of XSD type "http://www.onvif.org/ver10/schema":VideoRateControl.
    tt__VideoRateControl*                RateControl                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure Mpeg4 related parameters.
/// </BLOCKQUOTE></PRE>
/// Element "MPEG4" of XSD type "http://www.onvif.org/ver10/schema":Mpeg4Configuration.
    tt__Mpeg4Configuration*              MPEG4                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure H.264 related parameters.
/// </BLOCKQUOTE></PRE>
/// Element "H264" of XSD type "http://www.onvif.org/ver10/schema":H264Configuration.
    tt__H264Configuration*               H264                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
/// Element "Multicast" of XSD type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The rtsp session timeout for the related video stream
/// </BLOCKQUOTE></PRE>
/// Element "SessionTimeout" of XSD type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   A value of true indicates that frame rate is a fixed value rather than an upper limit,
///   and that the video encoder shall prioritize frame rate over all other adaptable
///   configuration values such as bitrate. Default is false.
/// </BLOCKQUOTE></PRE>
/// Attribute "GuaranteedFrameRate" of XSD type xs:boolean.
   @bool*                                GuaranteedFrameRate            0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":JpegOptions2 is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":JpegOptions.
///
/// class tt__JpegOptions2 operations:
/// - soap_new_tt__JpegOptions2(soap*) allocate
/// - soap_new_tt__JpegOptions2(soap*, int num) allocate array
/// - soap_new_req_tt__JpegOptions2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__JpegOptions2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__JpegOptions2(soap*, tt__JpegOptions2*) deserialize from a stream
/// - int soap_write_tt__JpegOptions2(soap, tt__JpegOptions2*) serialize to a stream
class tt__JpegOptions2 : public tt__JpegOptions
{ public:
/*  INHERITED FROM tt__JpegOptions:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
/// Element "EncodingIntervalRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
    END OF INHERITED FROM tt__JpegOptions */
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "BitrateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":Mpeg4Options2 is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":Mpeg4Options.
///
/// class tt__Mpeg4Options2 operations:
/// - soap_new_tt__Mpeg4Options2(soap*) allocate
/// - soap_new_tt__Mpeg4Options2(soap*, int num) allocate array
/// - soap_new_req_tt__Mpeg4Options2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__Mpeg4Options2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__Mpeg4Options2(soap*, tt__Mpeg4Options2*) deserialize from a stream
/// - int soap_write_tt__Mpeg4Options2(soap, tt__Mpeg4Options2*) serialize to a stream
class tt__Mpeg4Options2 : public tt__Mpeg4Options
{ public:
/*  INHERITED FROM tt__Mpeg4Options:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
/// Element "GovLengthRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
/// Element "EncodingIntervalRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported MPEG-4 profiles.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__Mpeg4Profile of length 1..unbounded.
    std::vector<enum tt__Mpeg4Profile  > Mpeg4ProfilesSupported         1;
    END OF INHERITED FROM tt__Mpeg4Options */
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "BitrateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":H264Options2 is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":H264Options.
///
/// class tt__H264Options2 operations:
/// - soap_new_tt__H264Options2(soap*) allocate
/// - soap_new_tt__H264Options2(soap*, int num) allocate array
/// - soap_new_req_tt__H264Options2(soap*, ...) allocate, set required members
/// - soap_new_set_tt__H264Options2(soap*, ...) allocate, set all public members
/// - int soap_read_tt__H264Options2(soap*, tt__H264Options2*) deserialize from a stream
/// - int soap_write_tt__H264Options2(soap, tt__H264Options2*) serialize to a stream
class tt__H264Options2 : public tt__H264Options
{ public:
/*  INHERITED FROM tt__H264Options:
/// <PRE><BLOCKQUOTE>
///   List of supported image sizes.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__VideoResolution* of length 1..unbounded.
    std::vector<tt__VideoResolution*   > ResolutionsAvailable           1;
/// <PRE><BLOCKQUOTE>
///   Supported group of Video frames length. This value typically corresponds to the I-Frame distance.
/// </BLOCKQUOTE></PRE>
/// Element "GovLengthRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        GovLengthRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported frame rate in fps (frames per second).
/// </BLOCKQUOTE></PRE>
/// Element "FrameRateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        FrameRateRange                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Supported encoding interval range. The encoding interval corresponds to the number of frames devided by the encoded frames. An encoding interval value of "1" means that all frames are encoded.
/// </BLOCKQUOTE></PRE>
/// Element "EncodingIntervalRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        EncodingIntervalRange          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of supported H.264 profiles.
/// </BLOCKQUOTE></PRE>
/// Vector of enum tt__H264Profile of length 1..unbounded.
    std::vector<enum tt__H264Profile   > H264ProfilesSupported          1;
    END OF INHERITED FROM tt__H264Options */
/// <PRE><BLOCKQUOTE>
///   Supported range of encoded bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "BitrateRange" of XSD type "http://www.onvif.org/ver10/schema":IntRange.
    tt__IntRange*                        BitrateRange                   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoEncoder2Configuration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__VideoEncoder2Configuration operations:
/// - soap_new_tt__VideoEncoder2Configuration(soap*) allocate
/// - soap_new_tt__VideoEncoder2Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__VideoEncoder2Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoEncoder2Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoEncoder2Configuration(soap*, tt__VideoEncoder2Configuration*) deserialize from a stream
/// - int soap_write_tt__VideoEncoder2Configuration(soap, tt__VideoEncoder2Configuration*) serialize to a stream
class tt__VideoEncoder2Configuration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Video Media Subtype for the video format. For definitions see tt:VideoEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#video"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Configured video resolution
/// </BLOCKQUOTE></PRE>
/// Element "Resolution" of XSD type "http://www.onvif.org/ver10/schema":VideoResolution2.
    tt__VideoResolution2*                Resolution                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure rate control related parameters.
/// </BLOCKQUOTE></PRE>
/// Element "RateControl" of XSD type "http://www.onvif.org/ver10/schema":VideoRateControl2.
    tt__VideoRateControl2*               RateControl                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
/// Element "Multicast" of XSD type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Relative value for the video quantizers and the quality of the video. A high value within supported quality range means higher quality
/// </BLOCKQUOTE></PRE>
/// Element "Quality" of XSD type xs:float.
    float                                Quality                        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Group of Video frames length. Determines typically the interval in which the I-Frames will be coded. An entry of 1 indicates I-Frames are continuously generated. An entry of 2 indicates that every 2nd image is an I-Frame, and 3 only every 3rd frame, etc. The frames in between are coded as P or B Frames.
/// </BLOCKQUOTE></PRE>
/// Attribute "GovLength" of XSD type xs:int.
   @int*                                 GovLength                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The encoder profile as defined in tt:VideoEncodingProfiles.
/// </BLOCKQUOTE></PRE>
/// Attribute "Profile" of XSD type xs:string.
   @std::string*                         Profile                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   A value of true indicates that frame rate is a fixed value rather than an upper limit,
///   and that the video encoder shall prioritize frame rate over all other adaptable
///   configuration values such as bitrate. Default is false.
/// </BLOCKQUOTE></PRE>
/// Attribute "GuaranteedFrameRate" of XSD type xs:boolean.
   @bool*                                GuaranteedFrameRate            0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioSourceConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AudioSourceConfiguration operations:
/// - soap_new_tt__AudioSourceConfiguration(soap*) allocate
/// - soap_new_tt__AudioSourceConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__AudioSourceConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioSourceConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioSourceConfiguration(soap*, tt__AudioSourceConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioSourceConfiguration(soap, tt__AudioSourceConfiguration*) serialize to a stream
class tt__AudioSourceConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the Audio Source the configuration applies to
/// </BLOCKQUOTE></PRE>
/// Element "SourceToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   SourceToken                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AudioEncoderConfiguration operations:
/// - soap_new_tt__AudioEncoderConfiguration(soap*) allocate
/// - soap_new_tt__AudioEncoderConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__AudioEncoderConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioEncoderConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioEncoderConfiguration(soap*, tt__AudioEncoderConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioEncoderConfiguration(soap, tt__AudioEncoderConfiguration*) serialize to a stream
class tt__AudioEncoderConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Audio codec used for encoding the audio input (either G.711, G.726 or AAC)
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type "http://www.onvif.org/ver10/schema":AudioEncoding.
    enum tt__AudioEncoding               Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The output bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type xs:int.
    int                                  Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The output sample rate in kHz.
/// </BLOCKQUOTE></PRE>
/// Element "SampleRate" of XSD type xs:int.
    int                                  SampleRate                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
/// Element "Multicast" of XSD type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The rtsp session timeout for the related audio stream
/// </BLOCKQUOTE></PRE>
/// Element "SessionTimeout" of XSD type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioEncoder2Configuration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AudioEncoder2Configuration operations:
/// - soap_new_tt__AudioEncoder2Configuration(soap*) allocate
/// - soap_new_tt__AudioEncoder2Configuration(soap*, int num) allocate array
/// - soap_new_req_tt__AudioEncoder2Configuration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioEncoder2Configuration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioEncoder2Configuration(soap*, tt__AudioEncoder2Configuration*) deserialize from a stream
/// - int soap_write_tt__AudioEncoder2Configuration(soap, tt__AudioEncoder2Configuration*) serialize to a stream
class tt__AudioEncoder2Configuration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Audio Media Subtype for the audio format. For definitions see tt:AudioEncodingMimeNames and <a href="https://www.iana.org/assignments/media-types/media-types.xhtml#audio"> IANA Media Types</a>.
/// </BLOCKQUOTE></PRE>
/// Element "Encoding" of XSD type xs:string.
    std::string                          Encoding                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional multicast configuration of the audio stream.
/// </BLOCKQUOTE></PRE>
/// Element "Multicast" of XSD type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The output bitrate in kbps.
/// </BLOCKQUOTE></PRE>
/// Element "Bitrate" of XSD type xs:int.
    int                                  Bitrate                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The output sample rate in kHz.
/// </BLOCKQUOTE></PRE>
/// Element "SampleRate" of XSD type xs:int.
    int                                  SampleRate                     1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__VideoAnalyticsConfiguration operations:
/// - soap_new_tt__VideoAnalyticsConfiguration(soap*) allocate
/// - soap_new_tt__VideoAnalyticsConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__VideoAnalyticsConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoAnalyticsConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoAnalyticsConfiguration(soap*, tt__VideoAnalyticsConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoAnalyticsConfiguration(soap, tt__VideoAnalyticsConfiguration*) serialize to a stream
class tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// Element "AnalyticsEngineConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration.
    tt__AnalyticsEngineConfiguration*    AnalyticsEngineConfiguration   1;	///< Required element.
/// Element "RuleEngineConfiguration" of XSD type "http://www.onvif.org/ver10/schema":RuleEngineConfiguration.
    tt__RuleEngineConfiguration*         RuleEngineConfiguration        1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":MetadataConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__MetadataConfiguration operations:
/// - soap_new_tt__MetadataConfiguration(soap*) allocate
/// - soap_new_tt__MetadataConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__MetadataConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__MetadataConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__MetadataConfiguration(soap*, tt__MetadataConfiguration*) deserialize from a stream
/// - int soap_write_tt__MetadataConfiguration(soap, tt__MetadataConfiguration*) serialize to a stream
class tt__MetadataConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   optional element to configure which PTZ related data is to include in the metadata stream
/// </BLOCKQUOTE></PRE>
/// Element "PTZStatus" of XSD type "http://www.onvif.org/ver10/schema":PTZFilter.
    tt__PTZFilter*                       PTZStatus                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional element to configure the streaming of events. A client might be interested in receiving all, none or some of the events produced by the device:<ul>
///   <li>To get all events: Include the Events element but do not include a filter.</li>
///   <li>To get no events: Do not include the Events element.</li>
///   <li>To get only some events: Include the Events element and include a filter in the element.</li>
///   </ul>
/// </BLOCKQUOTE></PRE>
/// Element "Events" of XSD type "http://www.onvif.org/ver10/schema":EventSubscription.
    tt__EventSubscription*               Events                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines whether the streamed metadata will include metadata from the analytics engines (video, cell motion, audio etc.)
/// </BLOCKQUOTE></PRE>
/// Element "Analytics" of XSD type xs:boolean.
    bool*                                Analytics                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the multicast settings that could be used for video streaming.
/// </BLOCKQUOTE></PRE>
/// Element "Multicast" of XSD type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The rtsp session timeout for the related audio stream (when using Media2 Service, this value is deprecated and ignored)
/// </BLOCKQUOTE></PRE>
/// Element "SessionTimeout" of XSD type xs:duration.
    xsd__duration                        SessionTimeout                 1;	///< Required element.
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Indication which AnalyticsModules shall output metadata.
///   Note that the streaming behavior is undefined if the list includes items that are not part of the associated AnalyticsConfiguration.
/// </BLOCKQUOTE></PRE>
/// Element "AnalyticsEngineConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsEngineConfiguration.
    tt__AnalyticsEngineConfiguration*    AnalyticsEngineConfiguration   0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":MetadataConfigurationExtension.
    tt__MetadataConfigurationExtension*  Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to configure compression type of Metadata payload. Use values from enumeration MetadataCompressionType.
/// </BLOCKQUOTE></PRE>
/// Attribute "CompressionType" of XSD type xs:string.
   @std::string*                         CompressionType                0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional parameter to configure if the metadata stream shall contain the Geo Location coordinates of each target.
/// </BLOCKQUOTE></PRE>
/// Attribute "GeoLocation" of XSD type xs:boolean.
   @bool*                                GeoLocation                    0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutput is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical video outputs.
/// </BLOCKQUOTE></PRE>
/// class tt__VideoOutput operations:
/// - soap_new_tt__VideoOutput(soap*) allocate
/// - soap_new_tt__VideoOutput(soap*, int num) allocate array
/// - soap_new_req_tt__VideoOutput(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoOutput(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoOutput(soap*, tt__VideoOutput*) deserialize from a stream
/// - int soap_write_tt__VideoOutput(soap, tt__VideoOutput*) serialize to a stream
class tt__VideoOutput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// Element "Layout" of XSD type "http://www.onvif.org/ver10/schema":Layout.
    tt__Layout*                          Layout                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Resolution of the display in Pixel.
/// </BLOCKQUOTE></PRE>
/// Element "Resolution" of XSD type "http://www.onvif.org/ver10/schema":VideoResolution.
    tt__VideoResolution*                 Resolution                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Refresh rate of the display in Hertz.
/// </BLOCKQUOTE></PRE>
/// Element "RefreshRate" of XSD type xs:float.
    float*                               RefreshRate                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Aspect ratio of the display as physical extent of width divided by height.
/// </BLOCKQUOTE></PRE>
/// Element "AspectRatio" of XSD type xs:float.
    float*                               AspectRatio                    0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":VideoOutputExtension.
    tt__VideoOutputExtension*            Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":VideoOutputConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__VideoOutputConfiguration operations:
/// - soap_new_tt__VideoOutputConfiguration(soap*) allocate
/// - soap_new_tt__VideoOutputConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__VideoOutputConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__VideoOutputConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__VideoOutputConfiguration(soap*, tt__VideoOutputConfiguration*) deserialize from a stream
/// - int soap_write_tt__VideoOutputConfiguration(soap, tt__VideoOutputConfiguration*) serialize to a stream
class tt__VideoOutputConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the Video Output the configuration applies to
/// </BLOCKQUOTE></PRE>
/// Element "OutputToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   OutputToken                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioOutput is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// <PRE><BLOCKQUOTE>
///   Representation of a physical audio outputs.
/// </BLOCKQUOTE></PRE>
/// class tt__AudioOutput operations:
/// - soap_new_tt__AudioOutput(soap*) allocate
/// - soap_new_tt__AudioOutput(soap*, int num) allocate array
/// - soap_new_req_tt__AudioOutput(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioOutput(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioOutput(soap*, tt__AudioOutput*) deserialize from a stream
/// - int soap_write_tt__AudioOutput(soap, tt__AudioOutput*) serialize to a stream
class tt__AudioOutput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioOutputConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AudioOutputConfiguration operations:
/// - soap_new_tt__AudioOutputConfiguration(soap*) allocate
/// - soap_new_tt__AudioOutputConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__AudioOutputConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioOutputConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioOutputConfiguration(soap*, tt__AudioOutputConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioOutputConfiguration(soap, tt__AudioOutputConfiguration*) serialize to a stream
class tt__AudioOutputConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the phsycial Audio output.
/// </BLOCKQUOTE></PRE>
/// Element "OutputToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   OutputToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An audio channel MAY support different types of audio transmission. While for full duplex
///   operation no special handling is required, in half duplex operation the transmission direction
///   needs to be switched.
///   The optional SendPrimacy parameter inside the AudioOutputConfiguration indicates which
///   direction is currently active. An NVC can switch between different modes by setting the
///   AudioOutputConfiguration.<br/>
///   The following modes for the Send-Primacy are defined:<ul>
///   <li>www.onvif.org/ver20/HalfDuplex/Server
///   The server is allowed to send audio data to the client. The client shall not send
///   audio data via the backchannel to the NVT in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Client
///   The client is allowed to send audio data via the backchannel to the server. The
///   NVT shall not send audio data to the client in this mode.</li>
///   <li>www.onvif.org/ver20/HalfDuplex/Auto
///   It is up to the device how to deal with sending and receiving audio data.</li>
///   </ul>
///   Acoustic echo cancellation is out of ONVIF scope.
/// </BLOCKQUOTE></PRE>
/// Element "SendPrimacy" of XSD type xs:anyURI.
    xsd__anyURI*                         SendPrimacy                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Volume setting of the output. The applicable range is defined via the option AudioOutputOptions.OutputLevelRange.
/// </BLOCKQUOTE></PRE>
/// Element "OutputLevel" of XSD type xs:int.
    int                                  OutputLevel                    1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// <PRE><BLOCKQUOTE>
///   The Audio Decoder Configuration does not contain any that parameter to configure the
///   decoding .A decoder shall decode every data it receives (according to its capabilities).
/// </BLOCKQUOTE></PRE>
/// class tt__AudioDecoderConfiguration operations:
/// - soap_new_tt__AudioDecoderConfiguration(soap*) allocate
/// - soap_new_tt__AudioDecoderConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__AudioDecoderConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AudioDecoderConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AudioDecoderConfiguration(soap*, tt__AudioDecoderConfiguration*) deserialize from a stream
/// - int soap_write_tt__AudioDecoderConfiguration(soap, tt__AudioDecoderConfiguration*) serialize to a stream
class tt__AudioDecoderConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":NetworkInterface is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// class tt__NetworkInterface operations:
/// - soap_new_tt__NetworkInterface(soap*) allocate
/// - soap_new_tt__NetworkInterface(soap*, int num) allocate array
/// - soap_new_req_tt__NetworkInterface(soap*, ...) allocate, set required members
/// - soap_new_set_tt__NetworkInterface(soap*, ...) allocate, set all public members
/// - int soap_read_tt__NetworkInterface(soap*, tt__NetworkInterface*) deserialize from a stream
/// - int soap_write_tt__NetworkInterface(soap, tt__NetworkInterface*) serialize to a stream
class tt__NetworkInterface : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   Indicates whether or not an interface is enabled.
/// </BLOCKQUOTE></PRE>
/// Element "Enabled" of XSD type xs:boolean.
    bool                                 Enabled                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Network interface information
/// </BLOCKQUOTE></PRE>
/// Element "Info" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceInfo.
    tt__NetworkInterfaceInfo*            Info                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Link configuration.
/// </BLOCKQUOTE></PRE>
/// Element "Link" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceLink.
    tt__NetworkInterfaceLink*            Link                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv4 network interface configuration.
/// </BLOCKQUOTE></PRE>
/// Element "IPv4" of XSD type "http://www.onvif.org/ver10/schema":IPv4NetworkInterface.
    tt__IPv4NetworkInterface*            IPv4                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   IPv6 network interface configuration.
/// </BLOCKQUOTE></PRE>
/// Element "IPv6" of XSD type "http://www.onvif.org/ver10/schema":IPv6NetworkInterface.
    tt__IPv6NetworkInterface*            IPv6                           0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":NetworkInterfaceExtension.
    tt__NetworkInterfaceExtension*       Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":CertificateUsage is a complexType with simpleContent.
///
/// class tt__CertificateUsage operations:
/// - soap_new_tt__CertificateUsage(soap*) allocate
/// - soap_new_tt__CertificateUsage(soap*, int num) allocate array
/// - soap_new_req_tt__CertificateUsage(soap*, ...) allocate, set required members
/// - soap_new_set_tt__CertificateUsage(soap*, ...) allocate, set all public members
/// - int soap_read_tt__CertificateUsage(soap*, tt__CertificateUsage*) deserialize from a stream
/// - int soap_write_tt__CertificateUsage(soap, tt__CertificateUsage*) serialize to a stream
class tt__CertificateUsage : public xsd__anyType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Attribute "Critical" of XSD type xs:boolean.
   @bool                                 Critical                       1;	///< Required attribute.
};

/// @brief "http://www.onvif.org/ver10/schema":RelayOutput is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// class tt__RelayOutput operations:
/// - soap_new_tt__RelayOutput(soap*) allocate
/// - soap_new_tt__RelayOutput(soap*, int num) allocate array
/// - soap_new_req_tt__RelayOutput(soap*, ...) allocate, set required members
/// - soap_new_set_tt__RelayOutput(soap*, ...) allocate, set all public members
/// - int soap_read_tt__RelayOutput(soap*, tt__RelayOutput*) deserialize from a stream
/// - int soap_write_tt__RelayOutput(soap, tt__RelayOutput*) serialize to a stream
class tt__RelayOutput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// Element "Properties" of XSD type "http://www.onvif.org/ver10/schema":RelayOutputSettings.
    tt__RelayOutputSettings*             Properties                     1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":DigitalInput is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// class tt__DigitalInput operations:
/// - soap_new_tt__DigitalInput(soap*) allocate
/// - soap_new_tt__DigitalInput(soap*, int num) allocate array
/// - soap_new_req_tt__DigitalInput(soap*, ...) allocate, set required members
/// - soap_new_set_tt__DigitalInput(soap*, ...) allocate, set all public members
/// - int soap_read_tt__DigitalInput(soap*, tt__DigitalInput*) deserialize from a stream
/// - int soap_write_tt__DigitalInput(soap, tt__DigitalInput*) serialize to a stream
class tt__DigitalInput : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <PRE><BLOCKQUOTE>
///   Indicate the Digital IdleState status.
/// </BLOCKQUOTE></PRE>
/// Attribute "IdleState" of XSD type "http://www.onvif.org/ver10/schema":DigitalIdleState.
   @enum tt__DigitalIdleState*           IdleState                      0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZNode is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// class tt__PTZNode operations:
/// - soap_new_tt__PTZNode(soap*) allocate
/// - soap_new_tt__PTZNode(soap*, int num) allocate array
/// - soap_new_req_tt__PTZNode(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZNode(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZNode(soap*, tt__PTZNode*) deserialize from a stream
/// - int soap_write_tt__PTZNode(soap, tt__PTZNode*) serialize to a stream
class tt__PTZNode : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   A unique identifier that is used to reference PTZ Nodes.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name*                            Name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A list of Coordinate Systems available for the PTZ Node. For each Coordinate System, the PTZ Node MUST specify its allowed range.
/// </BLOCKQUOTE></PRE>
/// Element "SupportedPTZSpaces" of XSD type "http://www.onvif.org/ver10/schema":PTZSpaces.
    tt__PTZSpaces*                       SupportedPTZSpaces             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   All preset operations MUST be available for this PTZ Node if one preset is supported.
/// </BLOCKQUOTE></PRE>
/// Element "MaximumNumberOfPresets" of XSD type xs:int.
    int                                  MaximumNumberOfPresets         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A boolean operator specifying the availability of a home position. If set to true, the Home Position Operations MUST be available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
/// Element "HomeSupported" of XSD type xs:boolean.
    bool                                 HomeSupported                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A list of supported Auxiliary commands. If the list is not empty, the Auxiliary Operations MUST be available for this PTZ Node.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__AuxiliaryData of length 0..unbounded.
    std::vector<tt__AuxiliaryData      > AuxiliaryCommands              0;
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZNodeExtension.
    tt__PTZNodeExtension*                Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indication whether the HomePosition of a Node is fixed or it can be changed via the SetHomePosition command.
/// </BLOCKQUOTE></PRE>
/// Attribute "FixedHomePosition" of XSD type xs:boolean.
   @bool*                                FixedHomePosition              0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Indication whether the Node supports the geo-referenced move command.
/// </BLOCKQUOTE></PRE>
/// Attribute "GeoMove" of XSD type xs:boolean.
   @bool*                                GeoMove                        0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":PTZConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__PTZConfiguration operations:
/// - soap_new_tt__PTZConfiguration(soap*) allocate
/// - soap_new_tt__PTZConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__PTZConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__PTZConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__PTZConfiguration(soap*, tt__PTZConfiguration*) deserialize from a stream
/// - int soap_write_tt__PTZConfiguration(soap, tt__PTZConfiguration*) serialize to a stream
class tt__PTZConfiguration : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   A mandatory reference to the PTZ Node that the PTZ Configuration belongs to.
/// </BLOCKQUOTE></PRE>
/// Element "NodeToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   NodeToken                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports absolute Pan/Tilt movements, it shall specify one Absolute Pan/Tilt Position Space as default.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultAbsolutePantTiltPositionSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         DefaultAbsolutePantTiltPositionSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports absolute zoom movements, it shall specify one Absolute Zoom Position Space as default.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultAbsoluteZoomPositionSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         DefaultAbsoluteZoomPositionSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports relative Pan/Tilt movements, it shall specify one RelativePan/Tilt Translation Space as default.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultRelativePanTiltTranslationSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         DefaultRelativePanTiltTranslationSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports relative zoom movements, it shall specify one Relative Zoom Translation Space as default.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultRelativeZoomTranslationSpace" of XSD type xs:anyURI.
    xsd__anyURI*                         DefaultRelativeZoomTranslationSpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports continuous Pan/Tilt movements, it shall specify one Continuous Pan/Tilt Velocity Space as default.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultContinuousPanTiltVelocitySpace" of XSD type xs:anyURI.
    xsd__anyURI*                         DefaultContinuousPanTiltVelocitySpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports continuous zoom movements, it shall specify one Continuous Zoom Velocity Space as default.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultContinuousZoomVelocitySpace" of XSD type xs:anyURI.
    xsd__anyURI*                         DefaultContinuousZoomVelocitySpace 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports absolute or relative PTZ movements, it shall specify corresponding default Pan/Tilt and Zoom speeds.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPTZSpeed" of XSD type "http://www.onvif.org/ver10/schema":PTZSpeed.
    tt__PTZSpeed*                        DefaultPTZSpeed                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   If the PTZ Node supports continuous movements, it shall specify a default timeout, after which the movement stops.
/// </BLOCKQUOTE></PRE>
/// Element "DefaultPTZTimeout" of XSD type xs:duration.
    xsd__duration*                       DefaultPTZTimeout              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Pan/Tilt limits element should be present for a PTZ Node that supports an absolute Pan/Tilt. If the element is present it signals the support for configurable Pan/Tilt limits. If limits are enabled, the Pan/Tilt movements shall always stay within the specified range. The Pan/Tilt limits are disabled by setting the limits to INF or +INF.
/// </BLOCKQUOTE></PRE>
/// Element "PanTiltLimits" of XSD type "http://www.onvif.org/ver10/schema":PanTiltLimits.
    tt__PanTiltLimits*                   PanTiltLimits                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Zoom limits element should be present for a PTZ Node that supports absolute zoom. If the element is present it signals the supports for configurable Zoom limits. If limits are enabled the zoom movements shall always stay within the specified range. The Zoom limits are disabled by settings the limits to -INF and +INF.
/// </BLOCKQUOTE></PRE>
/// Element "ZoomLimits" of XSD type "http://www.onvif.org/ver10/schema":ZoomLimits.
    tt__ZoomLimits*                      ZoomLimits                     0;	///< Optional element.

/// </BLOCKQUOTE></PRE>
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":PTZConfigurationExtension.
    tt__PTZConfigurationExtension*       Extension                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The optional acceleration ramp used by the device when moving.
/// </BLOCKQUOTE></PRE>
/// Attribute "MoveRamp" of XSD type xs:int.
   @int*                                 MoveRamp                       0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The optional acceleration ramp used by the device when recalling presets.
/// </BLOCKQUOTE></PRE>
/// Attribute "PresetRamp" of XSD type xs:int.
   @int*                                 PresetRamp                     0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   The optional acceleration ramp used by the device when executing PresetTours.
/// </BLOCKQUOTE></PRE>
/// Attribute "PresetTourRamp" of XSD type xs:int.
   @int*                                 PresetTourRamp                 0;	///< Optional attribute.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":EventFilter is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsn/b-2":FilterType.
///
/// class tt__EventFilter operations:
/// - soap_new_tt__EventFilter(soap*) allocate
/// - soap_new_tt__EventFilter(soap*, int num) allocate array
/// - soap_new_req_tt__EventFilter(soap*, ...) allocate, set required members
/// - soap_new_set_tt__EventFilter(soap*, ...) allocate, set all public members
/// - int soap_read_tt__EventFilter(soap*, tt__EventFilter*) deserialize from a stream
/// - int soap_write_tt__EventFilter(soap, tt__EventFilter*) serialize to a stream
class tt__EventFilter : public wsnt__FilterType
{ public:
/*  INHERITED FROM wsnt__FilterType:
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    END OF INHERITED FROM wsnt__FilterType */
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngine is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AnalyticsEngine operations:
/// - soap_new_tt__AnalyticsEngine(soap*) allocate
/// - soap_new_tt__AnalyticsEngine(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngine(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngine(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngine(soap*, tt__AnalyticsEngine*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngine(soap, tt__AnalyticsEngine*) serialize to a stream
class tt__AnalyticsEngine : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// Element "AnalyticsEngineConfiguration" of XSD type "http://www.onvif.org/ver10/schema":AnalyticsDeviceEngineConfiguration.
    tt__AnalyticsDeviceEngineConfiguration*  AnalyticsEngineConfiguration   1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineInput is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AnalyticsEngineInput operations:
/// - soap_new_tt__AnalyticsEngineInput(soap*) allocate
/// - soap_new_tt__AnalyticsEngineInput(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngineInput(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngineInput(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngineInput(soap*, tt__AnalyticsEngineInput*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineInput(soap, tt__AnalyticsEngineInput*) serialize to a stream
class tt__AnalyticsEngineInput : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// Element "SourceIdentification" of XSD type "http://www.onvif.org/ver10/schema":SourceIdentification.
    tt__SourceIdentification*            SourceIdentification           1;	///< Required element.
/// Element "VideoInput" of XSD type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
    tt__VideoEncoderConfiguration*       VideoInput                     1;	///< Required element.
/// Element "MetadataInput" of XSD type "http://www.onvif.org/ver10/schema":MetadataInput.
    tt__MetadataInput*                   MetadataInput                  1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":AnalyticsEngineControl is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":ConfigurationEntity.
///
/// class tt__AnalyticsEngineControl operations:
/// - soap_new_tt__AnalyticsEngineControl(soap*) allocate
/// - soap_new_tt__AnalyticsEngineControl(soap*, int num) allocate array
/// - soap_new_req_tt__AnalyticsEngineControl(soap*, ...) allocate, set required members
/// - soap_new_set_tt__AnalyticsEngineControl(soap*, ...) allocate, set all public members
/// - int soap_read_tt__AnalyticsEngineControl(soap*, tt__AnalyticsEngineControl*) deserialize from a stream
/// - int soap_write_tt__AnalyticsEngineControl(soap, tt__AnalyticsEngineControl*) serialize to a stream
class tt__AnalyticsEngineControl : public tt__ConfigurationEntity
{ public:
/*  INHERITED FROM tt__ConfigurationEntity:
/// <PRE><BLOCKQUOTE>
///   User readable name. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Element "Name" of XSD type "http://www.onvif.org/ver10/schema":Name.
    tt__Name                             Name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Number of internal references currently using this configuration. <p style='margin:0'>This informational parameter is read-only. Deprecated for Media2 Service.</p>
/// </BLOCKQUOTE></PRE>
/// Element "UseCount" of XSD type xs:int.
    int                                  UseCount                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token that uniquely references this configuration. Length up to 64 characters.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__ConfigurationEntity */
/// <PRE><BLOCKQUOTE>
///   Token of the analytics engine (AnalyticsEngine) being controlled.
/// </BLOCKQUOTE></PRE>
/// Element "EngineToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   EngineToken                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Token of the analytics engine configuration (VideoAnalyticsConfiguration) in effect.
/// </BLOCKQUOTE></PRE>
/// Element "EngineConfigToken" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
    tt__ReferenceToken                   EngineConfigToken              1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Tokens of the input (AnalyticsEngineInput) configuration applied.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > InputToken                     1;
/// <PRE><BLOCKQUOTE>
///   Tokens of the receiver providing media input data. The order of ReceiverToken shall exactly match the order of InputToken.
/// </BLOCKQUOTE></PRE>
/// Vector of tt__ReferenceToken of length 1..unbounded.
    std::vector<tt__ReferenceToken     > ReceiverToken                  1;
/// Element "Multicast" of XSD type "http://www.onvif.org/ver10/schema":MulticastConfiguration.
    tt__MulticastConfiguration*          Multicast                      0;	///< Optional element.
/// Element "Subscription" of XSD type "http://www.onvif.org/ver10/schema":Config.
    tt__Config*                          Subscription                   1;	///< Required element.
/// Element "Mode" of XSD type "http://www.onvif.org/ver10/schema":ModeOfOperation.
    enum tt__ModeOfOperation             Mode                           1;	///< Required element.
/// @todo <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// class tt__OSDConfiguration operations:
/// - soap_new_tt__OSDConfiguration(soap*) allocate
/// - soap_new_tt__OSDConfiguration(soap*, int num) allocate array
/// - soap_new_req_tt__OSDConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDConfiguration(soap*, tt__OSDConfiguration*) deserialize from a stream
/// - int soap_write_tt__OSDConfiguration(soap, tt__OSDConfiguration*) serialize to a stream
class tt__OSDConfiguration : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// <PRE><BLOCKQUOTE>
///   Reference to the video source configuration.
/// </BLOCKQUOTE></PRE>
/// Element "VideoSourceConfigurationToken" of XSD type "http://www.onvif.org/ver10/schema":OSDReference.
    tt__OSDReference*                    VideoSourceConfigurationToken  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Type of OSD.
/// </BLOCKQUOTE></PRE>
/// Element "Type" of XSD type "http://www.onvif.org/ver10/schema":OSDType.
    enum tt__OSDType                     Type                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Position configuration of OSD.
/// </BLOCKQUOTE></PRE>
/// Element "Position" of XSD type "http://www.onvif.org/ver10/schema":OSDPosConfiguration.
    tt__OSDPosConfiguration*             Position                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Text configuration of OSD. It shall be present when the value of Type field is Text.
/// </BLOCKQUOTE></PRE>
/// Element "TextString" of XSD type "http://www.onvif.org/ver10/schema":OSDTextConfiguration.
    tt__OSDTextConfiguration*            TextString                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Image configuration of OSD. It shall be present when the value of Type field is Image
/// </BLOCKQUOTE></PRE>
/// Element "Image" of XSD type "http://www.onvif.org/ver10/schema":OSDImgConfiguration.
    tt__OSDImgConfiguration*             Image                          0;	///< Optional element.
/// Element "Extension" of XSD type "http://www.onvif.org/ver10/schema":OSDConfigurationExtension.
    tt__OSDConfigurationExtension*       Extension                      0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__SubscribeCreationFailedFaultType operations:
/// - soap_new_wsnt__SubscribeCreationFailedFaultType(soap*) allocate
/// - soap_new_wsnt__SubscribeCreationFailedFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__SubscribeCreationFailedFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__SubscribeCreationFailedFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__SubscribeCreationFailedFaultType(soap*, wsnt__SubscribeCreationFailedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__SubscribeCreationFailedFaultType(soap, wsnt__SubscribeCreationFailedFaultType*) serialize to a stream
class wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap*, _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__SubscribeCreationFailedFaultType_ErrorCode(soap, _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__SubscribeCreationFailedFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__SubscribeCreationFailedFaultType_Description operations:
/// - soap_new__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__SubscribeCreationFailedFaultType_Description(soap*, _wsrfbf__SubscribeCreationFailedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__SubscribeCreationFailedFaultType_Description(soap, _wsrfbf__SubscribeCreationFailedFaultType_Description*) serialize to a stream
    class _wsrfbf__SubscribeCreationFailedFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__SubscribeCreationFailedFaultType_FaultCause operations:
/// - soap_new__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap*, _wsrfbf__SubscribeCreationFailedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__SubscribeCreationFailedFaultType_FaultCause(soap, _wsrfbf__SubscribeCreationFailedFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__SubscribeCreationFailedFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__InvalidFilterFaultType operations:
/// - soap_new_wsnt__InvalidFilterFaultType(soap*) allocate
/// - soap_new_wsnt__InvalidFilterFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__InvalidFilterFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__InvalidFilterFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__InvalidFilterFaultType(soap*, wsnt__InvalidFilterFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidFilterFaultType(soap, wsnt__InvalidFilterFaultType*) serialize to a stream
class wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__InvalidFilterFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidFilterFaultType_ErrorCode(soap*, _wsrfbf__InvalidFilterFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidFilterFaultType_ErrorCode(soap, _wsrfbf__InvalidFilterFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__InvalidFilterFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__InvalidFilterFaultType_Description operations:
/// - soap_new__wsrfbf__InvalidFilterFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__InvalidFilterFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidFilterFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidFilterFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidFilterFaultType_Description(soap*, _wsrfbf__InvalidFilterFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidFilterFaultType_Description(soap, _wsrfbf__InvalidFilterFaultType_Description*) serialize to a stream
    class _wsrfbf__InvalidFilterFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__InvalidFilterFaultType_FaultCause operations:
/// - soap_new__wsrfbf__InvalidFilterFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidFilterFaultType_FaultCause(soap*, _wsrfbf__InvalidFilterFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidFilterFaultType_FaultCause(soap, _wsrfbf__InvalidFilterFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__InvalidFilterFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Vector of xsd__QName of length 1..unbounded.
    std::vector<xsd__QName             > UnknownFilter                  1;
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__TopicExpressionDialectUnknownFaultType operations:
/// - soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap*) allocate
/// - soap_new_wsnt__TopicExpressionDialectUnknownFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__TopicExpressionDialectUnknownFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__TopicExpressionDialectUnknownFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__TopicExpressionDialectUnknownFaultType(soap*, wsnt__TopicExpressionDialectUnknownFaultType*) deserialize from a stream
/// - int soap_write_wsnt__TopicExpressionDialectUnknownFaultType(soap, wsnt__TopicExpressionDialectUnknownFaultType*) serialize to a stream
class wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode(soap, _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__TopicExpressionDialectUnknownFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__TopicExpressionDialectUnknownFaultType_Description operations:
/// - soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicExpressionDialectUnknownFaultType_Description(soap, _wsrfbf__TopicExpressionDialectUnknownFaultType_Description*) serialize to a stream
    class _wsrfbf__TopicExpressionDialectUnknownFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause operations:
/// - soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap*, _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause(soap, _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__TopicExpressionDialectUnknownFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__InvalidTopicExpressionFaultType operations:
/// - soap_new_wsnt__InvalidTopicExpressionFaultType(soap*) allocate
/// - soap_new_wsnt__InvalidTopicExpressionFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__InvalidTopicExpressionFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__InvalidTopicExpressionFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__InvalidTopicExpressionFaultType(soap*, wsnt__InvalidTopicExpressionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidTopicExpressionFaultType(soap, wsnt__InvalidTopicExpressionFaultType*) serialize to a stream
class wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidTopicExpressionFaultType_ErrorCode(soap, _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__InvalidTopicExpressionFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__InvalidTopicExpressionFaultType_Description operations:
/// - soap_new__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidTopicExpressionFaultType_Description(soap*, _wsrfbf__InvalidTopicExpressionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidTopicExpressionFaultType_Description(soap, _wsrfbf__InvalidTopicExpressionFaultType_Description*) serialize to a stream
    class _wsrfbf__InvalidTopicExpressionFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__InvalidTopicExpressionFaultType_FaultCause operations:
/// - soap_new__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidTopicExpressionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidTopicExpressionFaultType_FaultCause(soap, _wsrfbf__InvalidTopicExpressionFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__InvalidTopicExpressionFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__TopicNotSupportedFaultType operations:
/// - soap_new_wsnt__TopicNotSupportedFaultType(soap*) allocate
/// - soap_new_wsnt__TopicNotSupportedFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__TopicNotSupportedFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__TopicNotSupportedFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__TopicNotSupportedFaultType(soap*, wsnt__TopicNotSupportedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__TopicNotSupportedFaultType(soap, wsnt__TopicNotSupportedFaultType*) serialize to a stream
class wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__TopicNotSupportedFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap*, _wsrfbf__TopicNotSupportedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicNotSupportedFaultType_ErrorCode(soap, _wsrfbf__TopicNotSupportedFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__TopicNotSupportedFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__TopicNotSupportedFaultType_Description operations:
/// - soap_new__wsrfbf__TopicNotSupportedFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__TopicNotSupportedFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__TopicNotSupportedFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__TopicNotSupportedFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__TopicNotSupportedFaultType_Description(soap*, _wsrfbf__TopicNotSupportedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicNotSupportedFaultType_Description(soap, _wsrfbf__TopicNotSupportedFaultType_Description*) serialize to a stream
    class _wsrfbf__TopicNotSupportedFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__TopicNotSupportedFaultType_FaultCause operations:
/// - soap_new__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap*, _wsrfbf__TopicNotSupportedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__TopicNotSupportedFaultType_FaultCause(soap, _wsrfbf__TopicNotSupportedFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__TopicNotSupportedFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__MultipleTopicsSpecifiedFaultType operations:
/// - soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap*) allocate
/// - soap_new_wsnt__MultipleTopicsSpecifiedFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__MultipleTopicsSpecifiedFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__MultipleTopicsSpecifiedFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__MultipleTopicsSpecifiedFaultType(soap*, wsnt__MultipleTopicsSpecifiedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__MultipleTopicsSpecifiedFaultType(soap, wsnt__MultipleTopicsSpecifiedFaultType*) serialize to a stream
class wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode(soap, _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__MultipleTopicsSpecifiedFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__MultipleTopicsSpecifiedFaultType_Description operations:
/// - soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__MultipleTopicsSpecifiedFaultType_Description(soap, _wsrfbf__MultipleTopicsSpecifiedFaultType_Description*) serialize to a stream
    class _wsrfbf__MultipleTopicsSpecifiedFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause operations:
/// - soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap*, _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause(soap, _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__MultipleTopicsSpecifiedFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__InvalidProducerPropertiesExpressionFaultType operations:
/// - soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*) allocate
/// - soap_new_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__InvalidProducerPropertiesExpressionFaultType(soap*, wsnt__InvalidProducerPropertiesExpressionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidProducerPropertiesExpressionFaultType(soap, wsnt__InvalidProducerPropertiesExpressionFaultType*) serialize to a stream
class wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode(soap, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description operations:
/// - soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description(soap, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description*) serialize to a stream
    class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause operations:
/// - soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause(soap, _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__InvalidProducerPropertiesExpressionFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__InvalidMessageContentExpressionFaultType operations:
/// - soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap*) allocate
/// - soap_new_wsnt__InvalidMessageContentExpressionFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__InvalidMessageContentExpressionFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__InvalidMessageContentExpressionFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__InvalidMessageContentExpressionFaultType(soap*, wsnt__InvalidMessageContentExpressionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__InvalidMessageContentExpressionFaultType(soap, wsnt__InvalidMessageContentExpressionFaultType*) serialize to a stream
class wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode(soap, _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__InvalidMessageContentExpressionFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__InvalidMessageContentExpressionFaultType_Description operations:
/// - soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidMessageContentExpressionFaultType_Description(soap, _wsrfbf__InvalidMessageContentExpressionFaultType_Description*) serialize to a stream
    class _wsrfbf__InvalidMessageContentExpressionFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause operations:
/// - soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap*, _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause(soap, _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__InvalidMessageContentExpressionFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnrecognizedPolicyRequestFaultType operations:
/// - soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap*) allocate
/// - soap_new_wsnt__UnrecognizedPolicyRequestFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnrecognizedPolicyRequestFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnrecognizedPolicyRequestFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnrecognizedPolicyRequestFaultType(soap*, wsnt__UnrecognizedPolicyRequestFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnrecognizedPolicyRequestFaultType(soap, wsnt__UnrecognizedPolicyRequestFaultType*) serialize to a stream
class wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode(soap, _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnrecognizedPolicyRequestFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnrecognizedPolicyRequestFaultType_Description operations:
/// - soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnrecognizedPolicyRequestFaultType_Description(soap, _wsrfbf__UnrecognizedPolicyRequestFaultType_Description*) serialize to a stream
    class _wsrfbf__UnrecognizedPolicyRequestFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap*, _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause(soap, _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnrecognizedPolicyRequestFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Vector of xsd__QName of length 0..unbounded.
    std::vector<xsd__QName             > UnrecognizedPolicy             0;
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnsupportedPolicyRequestFaultType operations:
/// - soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap*) allocate
/// - soap_new_wsnt__UnsupportedPolicyRequestFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnsupportedPolicyRequestFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnsupportedPolicyRequestFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnsupportedPolicyRequestFaultType(soap*, wsnt__UnsupportedPolicyRequestFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnsupportedPolicyRequestFaultType(soap, wsnt__UnsupportedPolicyRequestFaultType*) serialize to a stream
class wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode(soap, _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnsupportedPolicyRequestFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnsupportedPolicyRequestFaultType_Description operations:
/// - soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnsupportedPolicyRequestFaultType_Description(soap, _wsrfbf__UnsupportedPolicyRequestFaultType_Description*) serialize to a stream
    class _wsrfbf__UnsupportedPolicyRequestFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap*, _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause(soap, _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnsupportedPolicyRequestFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Vector of xsd__QName of length 0..unbounded.
    std::vector<xsd__QName             > UnsupportedPolicy              0;
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__NotifyMessageNotSupportedFaultType operations:
/// - soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap*) allocate
/// - soap_new_wsnt__NotifyMessageNotSupportedFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__NotifyMessageNotSupportedFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__NotifyMessageNotSupportedFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__NotifyMessageNotSupportedFaultType(soap*, wsnt__NotifyMessageNotSupportedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__NotifyMessageNotSupportedFaultType(soap, wsnt__NotifyMessageNotSupportedFaultType*) serialize to a stream
class wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode(soap, _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__NotifyMessageNotSupportedFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__NotifyMessageNotSupportedFaultType_Description operations:
/// - soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__NotifyMessageNotSupportedFaultType_Description(soap, _wsrfbf__NotifyMessageNotSupportedFaultType_Description*) serialize to a stream
    class _wsrfbf__NotifyMessageNotSupportedFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause operations:
/// - soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap*, _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause(soap, _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__NotifyMessageNotSupportedFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnacceptableInitialTerminationTimeFaultType operations:
/// - soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*) allocate
/// - soap_new_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnacceptableInitialTerminationTimeFaultType(soap*, wsnt__UnacceptableInitialTerminationTimeFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnacceptableInitialTerminationTimeFaultType(soap, wsnt__UnacceptableInitialTerminationTimeFaultType*) serialize to a stream
class wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode(soap, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description operations:
/// - soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description(soap, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description*) serialize to a stream
    class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap*, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause(soap, _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnacceptableInitialTerminationTimeFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Element "MinimumTime" of XSD type xs:dateTime.
    time_t                               MinimumTime                    1;	///< Required element.
/// Element "MaximumTime" of XSD type xs:dateTime.
    time_t*                              MaximumTime                    0;	///< Optional element.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__NoCurrentMessageOnTopicFaultType operations:
/// - soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap*) allocate
/// - soap_new_wsnt__NoCurrentMessageOnTopicFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__NoCurrentMessageOnTopicFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__NoCurrentMessageOnTopicFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__NoCurrentMessageOnTopicFaultType(soap*, wsnt__NoCurrentMessageOnTopicFaultType*) deserialize from a stream
/// - int soap_write_wsnt__NoCurrentMessageOnTopicFaultType(soap, wsnt__NoCurrentMessageOnTopicFaultType*) serialize to a stream
class wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode(soap, _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__NoCurrentMessageOnTopicFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__NoCurrentMessageOnTopicFaultType_Description operations:
/// - soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__NoCurrentMessageOnTopicFaultType_Description(soap, _wsrfbf__NoCurrentMessageOnTopicFaultType_Description*) serialize to a stream
    class _wsrfbf__NoCurrentMessageOnTopicFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause operations:
/// - soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap*, _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause(soap, _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__NoCurrentMessageOnTopicFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnableToGetMessagesFaultType operations:
/// - soap_new_wsnt__UnableToGetMessagesFaultType(soap*) allocate
/// - soap_new_wsnt__UnableToGetMessagesFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnableToGetMessagesFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnableToGetMessagesFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnableToGetMessagesFaultType(soap*, wsnt__UnableToGetMessagesFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToGetMessagesFaultType(soap, wsnt__UnableToGetMessagesFaultType*) serialize to a stream
class wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnableToGetMessagesFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap*, _wsrfbf__UnableToGetMessagesFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToGetMessagesFaultType_ErrorCode(soap, _wsrfbf__UnableToGetMessagesFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnableToGetMessagesFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnableToGetMessagesFaultType_Description operations:
/// - soap_new__wsrfbf__UnableToGetMessagesFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToGetMessagesFaultType_Description(soap*, _wsrfbf__UnableToGetMessagesFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToGetMessagesFaultType_Description(soap, _wsrfbf__UnableToGetMessagesFaultType_Description*) serialize to a stream
    class _wsrfbf__UnableToGetMessagesFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnableToGetMessagesFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap*, _wsrfbf__UnableToGetMessagesFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToGetMessagesFaultType_FaultCause(soap, _wsrfbf__UnableToGetMessagesFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnableToGetMessagesFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnableToDestroyPullPointFaultType operations:
/// - soap_new_wsnt__UnableToDestroyPullPointFaultType(soap*) allocate
/// - soap_new_wsnt__UnableToDestroyPullPointFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnableToDestroyPullPointFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnableToDestroyPullPointFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnableToDestroyPullPointFaultType(soap*, wsnt__UnableToDestroyPullPointFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToDestroyPullPointFaultType(soap, wsnt__UnableToDestroyPullPointFaultType*) serialize to a stream
class wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode(soap, _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnableToDestroyPullPointFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnableToDestroyPullPointFaultType_Description operations:
/// - soap_new__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroyPullPointFaultType_Description(soap, _wsrfbf__UnableToDestroyPullPointFaultType_Description*) serialize to a stream
    class _wsrfbf__UnableToDestroyPullPointFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap*, _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroyPullPointFaultType_FaultCause(soap, _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnableToDestroyPullPointFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnableToCreatePullPointFaultType operations:
/// - soap_new_wsnt__UnableToCreatePullPointFaultType(soap*) allocate
/// - soap_new_wsnt__UnableToCreatePullPointFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnableToCreatePullPointFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnableToCreatePullPointFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnableToCreatePullPointFaultType(soap*, wsnt__UnableToCreatePullPointFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToCreatePullPointFaultType(soap, wsnt__UnableToCreatePullPointFaultType*) serialize to a stream
class wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap*, _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToCreatePullPointFaultType_ErrorCode(soap, _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnableToCreatePullPointFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnableToCreatePullPointFaultType_Description operations:
/// - soap_new__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToCreatePullPointFaultType_Description(soap*, _wsrfbf__UnableToCreatePullPointFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToCreatePullPointFaultType_Description(soap, _wsrfbf__UnableToCreatePullPointFaultType_Description*) serialize to a stream
    class _wsrfbf__UnableToCreatePullPointFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnableToCreatePullPointFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap*, _wsrfbf__UnableToCreatePullPointFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToCreatePullPointFaultType_FaultCause(soap, _wsrfbf__UnableToCreatePullPointFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnableToCreatePullPointFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnacceptableTerminationTimeFaultType operations:
/// - soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap*) allocate
/// - soap_new_wsnt__UnacceptableTerminationTimeFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnacceptableTerminationTimeFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnacceptableTerminationTimeFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnacceptableTerminationTimeFaultType(soap*, wsnt__UnacceptableTerminationTimeFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnacceptableTerminationTimeFaultType(soap, wsnt__UnacceptableTerminationTimeFaultType*) serialize to a stream
class wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode(soap, _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnacceptableTerminationTimeFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnacceptableTerminationTimeFaultType_Description operations:
/// - soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableTerminationTimeFaultType_Description(soap, _wsrfbf__UnacceptableTerminationTimeFaultType_Description*) serialize to a stream
    class _wsrfbf__UnacceptableTerminationTimeFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap*, _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause(soap, _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnacceptableTerminationTimeFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
/// Element "MinimumTime" of XSD type xs:dateTime.
    time_t                               MinimumTime                    1;	///< Required element.
/// Element "MaximumTime" of XSD type xs:dateTime.
    time_t*                              MaximumTime                    0;	///< Optional element.
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__UnableToDestroySubscriptionFaultType operations:
/// - soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap*) allocate
/// - soap_new_wsnt__UnableToDestroySubscriptionFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__UnableToDestroySubscriptionFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__UnableToDestroySubscriptionFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__UnableToDestroySubscriptionFaultType(soap*, wsnt__UnableToDestroySubscriptionFaultType*) deserialize from a stream
/// - int soap_write_wsnt__UnableToDestroySubscriptionFaultType(soap, wsnt__UnableToDestroySubscriptionFaultType*) serialize to a stream
class wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode(soap, _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__UnableToDestroySubscriptionFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__UnableToDestroySubscriptionFaultType_Description operations:
/// - soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroySubscriptionFaultType_Description(soap, _wsrfbf__UnableToDestroySubscriptionFaultType_Description*) serialize to a stream
    class _wsrfbf__UnableToDestroySubscriptionFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause operations:
/// - soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap*, _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause(soap, _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__UnableToDestroySubscriptionFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__PauseFailedFaultType operations:
/// - soap_new_wsnt__PauseFailedFaultType(soap*) allocate
/// - soap_new_wsnt__PauseFailedFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__PauseFailedFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__PauseFailedFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__PauseFailedFaultType(soap*, wsnt__PauseFailedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__PauseFailedFaultType(soap, wsnt__PauseFailedFaultType*) serialize to a stream
class wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__PauseFailedFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__PauseFailedFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__PauseFailedFaultType_ErrorCode(soap*, _wsrfbf__PauseFailedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__PauseFailedFaultType_ErrorCode(soap, _wsrfbf__PauseFailedFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__PauseFailedFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__PauseFailedFaultType_Description operations:
/// - soap_new__wsrfbf__PauseFailedFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__PauseFailedFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__PauseFailedFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__PauseFailedFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__PauseFailedFaultType_Description(soap*, _wsrfbf__PauseFailedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__PauseFailedFaultType_Description(soap, _wsrfbf__PauseFailedFaultType_Description*) serialize to a stream
    class _wsrfbf__PauseFailedFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__PauseFailedFaultType_FaultCause operations:
/// - soap_new__wsrfbf__PauseFailedFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__PauseFailedFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__PauseFailedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__PauseFailedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__PauseFailedFaultType_FaultCause(soap*, _wsrfbf__PauseFailedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__PauseFailedFaultType_FaultCause(soap, _wsrfbf__PauseFailedFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__PauseFailedFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
///
/// class wsnt__ResumeFailedFaultType operations:
/// - soap_new_wsnt__ResumeFailedFaultType(soap*) allocate
/// - soap_new_wsnt__ResumeFailedFaultType(soap*, int num) allocate array
/// - soap_new_req_wsnt__ResumeFailedFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_wsnt__ResumeFailedFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_wsnt__ResumeFailedFaultType(soap*, wsnt__ResumeFailedFaultType*) deserialize from a stream
/// - int soap_write_wsnt__ResumeFailedFaultType(soap, wsnt__ResumeFailedFaultType*) serialize to a stream
class wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType
{ public:
/*  INHERITED FROM wsrfbf__BaseFaultType:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Element "Timestamp" of XSD type xs:dateTime.
    time_t                               Timestamp                      1;	///< Required element.
/// Element "Originator" of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
    wsa5__EndpointReferenceType*         Originator                     0;	///< Optional element.
/// class _wsrfbf__ResumeFailedFaultType_ErrorCode operations:
/// - soap_new__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*) allocate
/// - soap_new__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__ResumeFailedFaultType_ErrorCode(soap*, _wsrfbf__ResumeFailedFaultType_ErrorCode*) deserialize from a stream
/// - int soap_write__wsrfbf__ResumeFailedFaultType_ErrorCode(soap, _wsrfbf__ResumeFailedFaultType_ErrorCode*) serialize to a stream
    class _wsrfbf__ResumeFailedFaultType_ErrorCode
    {
/// Attribute "dialect" of XSD type xs:anyURI.
   @xsd__anyURI                          dialect                        1;	///< Required attribute.
    }                                   *ErrorCode                      0;	///< Optional element.
/// Vector of Description of length 0..unbounded.
    std::vector<
/// class _wsrfbf__ResumeFailedFaultType_Description operations:
/// - soap_new__wsrfbf__ResumeFailedFaultType_Description(soap*) allocate
/// - soap_new__wsrfbf__ResumeFailedFaultType_Description(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__ResumeFailedFaultType_Description(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__ResumeFailedFaultType_Description(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__ResumeFailedFaultType_Description(soap*, _wsrfbf__ResumeFailedFaultType_Description*) deserialize from a stream
/// - int soap_write__wsrfbf__ResumeFailedFaultType_Description(soap, _wsrfbf__ResumeFailedFaultType_Description*) serialize to a stream
    class _wsrfbf__ResumeFailedFaultType_Description
    {
/// __item wraps "xs:string" simpleContent.
    std::string                          __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    }>                                  *Description                    0;
/// class _wsrfbf__ResumeFailedFaultType_FaultCause operations:
/// - soap_new__wsrfbf__ResumeFailedFaultType_FaultCause(soap*) allocate
/// - soap_new__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, int num) allocate array
/// - soap_new_req__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, ...) allocate, set required members
/// - soap_new_set__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, ...) allocate, set all public members
/// - int soap_read__wsrfbf__ResumeFailedFaultType_FaultCause(soap*, _wsrfbf__ResumeFailedFaultType_FaultCause*) deserialize from a stream
/// - int soap_write__wsrfbf__ResumeFailedFaultType_FaultCause(soap, _wsrfbf__ResumeFailedFaultType_FaultCause*) serialize to a stream
    class _wsrfbf__ResumeFailedFaultType_FaultCause
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="1">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
    }                                   *FaultCause                     0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wsrfbf__BaseFaultType */
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
///
/// class wstop__TopicNamespaceType operations:
/// - soap_new_wstop__TopicNamespaceType(soap*) allocate
/// - soap_new_wstop__TopicNamespaceType(soap*, int num) allocate array
/// - soap_new_req_wstop__TopicNamespaceType(soap*, ...) allocate, set required members
/// - soap_new_set_wstop__TopicNamespaceType(soap*, ...) allocate, set all public members
/// - int soap_read_wstop__TopicNamespaceType(soap*, wstop__TopicNamespaceType*) deserialize from a stream
/// - int soap_write_wstop__TopicNamespaceType(soap, wstop__TopicNamespaceType*) serialize to a stream
class wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{ public:
/*  INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of XSD type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wstop__ExtensibleDocumented */
/// Vector of Topic of length 0..unbounded.
    std::vector<
/// class _wstop__TopicNamespaceType_Topic operations:
/// - soap_new__wstop__TopicNamespaceType_Topic(soap*) allocate
/// - soap_new__wstop__TopicNamespaceType_Topic(soap*, int num) allocate array
/// - soap_new_req__wstop__TopicNamespaceType_Topic(soap*, ...) allocate, set required members
/// - soap_new_set__wstop__TopicNamespaceType_Topic(soap*, ...) allocate, set all public members
/// - int soap_read__wstop__TopicNamespaceType_Topic(soap*, _wstop__TopicNamespaceType_Topic*) deserialize from a stream
/// - int soap_write__wstop__TopicNamespaceType_Topic(soap, _wstop__TopicNamespaceType_Topic*) serialize to a stream
    class _wstop__TopicNamespaceType_Topic
    {
/// INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of XSD type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM wstop__ExtensibleDocumented
/// INHERITED FROM wstop__TopicType:
/// Element "MessagePattern" of XSD type "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType.
    wstop__QueryExpressionType*          MessagePattern                 0;	///< Optional element.
/// Vector of wstop__TopicType* of length 0..unbounded.
    std::vector<wstop__TopicType*      > Topic                          0;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute "name" of XSD type xs:NCName.
   @xsd__NCName                          name                           1;	///< Required attribute.
@    xsd__QName                                                         

                                        *messageTypes                   0;	///< Optional attribute.
/// Attribute "final" of XSD type xs:boolean.
   @bool                                 final_                         0 = false;	///< Default attribute value="false".
//  END OF INHERITED FROM wstop__TopicType
/// Attribute "parent" of XSD type "http://docs.oasis-open.org/wsn/t-1":ConcreteTopicExpression.
   @wstop__ConcreteTopicExpression*      parent                         0;	///< Optional attribute.
    }>                                  *Topic                          0;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute "name" of XSD type xs:NCName.
   @xsd__NCName*                         name                           0;	///< Optional attribute.
/// Attribute "targetNamespace" of XSD type xs:anyURI.
   @xsd__anyURI                          targetNamespace                1;	///< Required attribute.
/// Attribute "final" of XSD type xs:boolean.
   @bool                                 final_                         0 = false;	///< Default attribute value="false".
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":TopicType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
///
/// class wstop__TopicType operations:
/// - soap_new_wstop__TopicType(soap*) allocate
/// - soap_new_wstop__TopicType(soap*, int num) allocate array
/// - soap_new_req_wstop__TopicType(soap*, ...) allocate, set required members
/// - soap_new_set_wstop__TopicType(soap*, ...) allocate, set all public members
/// - int soap_read_wstop__TopicType(soap*, wstop__TopicType*) deserialize from a stream
/// - int soap_write_wstop__TopicType(soap, wstop__TopicType*) serialize to a stream
class wstop__TopicType : public wstop__ExtensibleDocumented
{ public:
/*  INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of XSD type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wstop__ExtensibleDocumented */
/// Element "MessagePattern" of XSD type "http://docs.oasis-open.org/wsn/t-1":QueryExpressionType.
    wstop__QueryExpressionType*          MessagePattern                 0;	///< Optional element.
/// Vector of wstop__TopicType* of length 0..unbounded.
    std::vector<wstop__TopicType*      > Topic                          0;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// Attribute "name" of XSD type xs:NCName.
   @xsd__NCName                          name                           1;	///< Required attribute.
@    xsd__QName                                                         

                                        *messageTypes                   0;	///< Optional attribute.
/// Attribute "final" of XSD type xs:boolean.
   @bool                                 final_                         0 = false;	///< Default attribute value="false".
};

/// @brief "http://docs.oasis-open.org/wsn/t-1":TopicSetType is a complexType with complexContent extension of XSD type "http://docs.oasis-open.org/wsn/t-1":ExtensibleDocumented.
///
/// class wstop__TopicSetType operations:
/// - soap_new_wstop__TopicSetType(soap*) allocate
/// - soap_new_wstop__TopicSetType(soap*, int num) allocate array
/// - soap_new_req_wstop__TopicSetType(soap*, ...) allocate, set required members
/// - soap_new_set_wstop__TopicSetType(soap*, ...) allocate, set all public members
/// - int soap_read_wstop__TopicSetType(soap*, wstop__TopicSetType*) deserialize from a stream
/// - int soap_write_wstop__TopicSetType(soap, wstop__TopicSetType*) serialize to a stream
class wstop__TopicSetType : public wstop__ExtensibleDocumented
{ public:
/*  INHERITED FROM wstop__ExtensibleDocumented:
/// Element "documentation" of XSD type "http://docs.oasis-open.org/wsn/t-1":Documentation.
    wstop__Documentation*                documentation                  0;	///< Optional element.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
    END OF INHERITED FROM wstop__ExtensibleDocumented */
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
};

/// @brief "http://www.onvif.org/ver10/device/wsdl":StorageConfiguration is a complexType with complexContent extension of XSD type "http://www.onvif.org/ver10/schema":DeviceEntity.
///
/// class tds__StorageConfiguration operations:
/// - soap_new_tds__StorageConfiguration(soap*) allocate
/// - soap_new_tds__StorageConfiguration(soap*, int num) allocate array
/// - soap_new_req_tds__StorageConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set_tds__StorageConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read_tds__StorageConfiguration(soap*, tds__StorageConfiguration*) deserialize from a stream
/// - int soap_write_tds__StorageConfiguration(soap, tds__StorageConfiguration*) serialize to a stream
class tds__StorageConfiguration : public tt__DeviceEntity
{ public:
/*  INHERITED FROM tt__DeviceEntity:
/// <PRE><BLOCKQUOTE>
///   Unique identifier referencing the physical entity.
/// </BLOCKQUOTE></PRE>
/// Attribute "token" of XSD type "http://www.onvif.org/ver10/schema":ReferenceToken.
   @tt__ReferenceToken                   token                          1;	///< Required attribute.
    END OF INHERITED FROM tt__DeviceEntity */
/// Element "Data" of XSD type "http://www.onvif.org/ver10/device/wsdl":StorageConfigurationData.
    tds__StorageConfigurationData*       Data                           1;	///< Required element.
};

/// @brief "http://www.onvif.org/ver10/schema":OSDReference is a complexType with simpleContent.
///
/// class tt__OSDReference operations:
/// - soap_new_tt__OSDReference(soap*) allocate
/// - soap_new_tt__OSDReference(soap*, int num) allocate array
/// - soap_new_req_tt__OSDReference(soap*, ...) allocate, set required members
/// - soap_new_set_tt__OSDReference(soap*, ...) allocate, set all public members
/// - int soap_read_tt__OSDReference(soap*, tt__OSDReference*) deserialize from a stream
/// - int soap_write_tt__OSDReference(soap, tt__OSDReference*) serialize to a stream
class tt__OSDReference : public xsd__anyType
{ public:
/// __item wraps ""http://www.onvif.org/ver10/schema":ReferenceToken" simpleContent.
    tt__ReferenceToken                   __item                        ;
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":StringList of XSD type "http://www.onvif.org/ver10/schema":StringList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":IntRange of XSD type "http://www.onvif.org/ver10/schema":IntRange.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":IntList of XSD type "http://www.onvif.org/ver10/schema":IntAttrList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":FloatRange of XSD type "http://www.onvif.org/ver10/schema":FloatRange.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":FloatList of XSD type "http://www.onvif.org/ver10/schema":FloatAttrList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":DurationRange of XSD type "http://www.onvif.org/ver10/schema":DurationRange.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":IntRectangleRange of XSD type "http://www.onvif.org/ver10/schema":IntRectangleRange.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":VideoSourceConfiguration of XSD type "http://www.onvif.org/ver10/schema":VideoSourceConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioSourceConfiguration of XSD type "http://www.onvif.org/ver10/schema":AudioSourceConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration of XSD type "http://www.onvif.org/ver10/schema":VideoEncoderConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration of XSD type "http://www.onvif.org/ver10/schema":AudioEncoderConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration of XSD type "http://www.onvif.org/ver10/schema":VideoAnalyticsConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":PTZConfiguration of XSD type "http://www.onvif.org/ver10/schema":PTZConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":MetadataConfiguration of XSD type "http://www.onvif.org/ver10/schema":MetadataConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioOutputConfiguration of XSD type "http://www.onvif.org/ver10/schema":AudioOutputConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration of XSD type "http://www.onvif.org/ver10/schema":AudioDecoderConfiguration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Polyline of XSD type "http://www.onvif.org/ver10/schema":Polyline.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://www.onvif.org/ver10/schema":Polygon of XSD type "http://www.onvif.org/ver10/schema":Polygon.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/schema                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpression of XSD type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":FixedTopicSet of XSD type xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialect of XSD type xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ConsumerReference of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Filter of XSD type "http://docs.oasis-open.org/wsn/b-2":FilterType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicy of XSD type "http://docs.oasis-open.org/wsn/b-2":SubscriptionPolicyType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CreationTime of XSD type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscriptionReference of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":Topic of XSD type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ProducerReference of XSD type "http://www.w3.org/2005/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotificationMessage of XSD type "http://docs.oasis-open.org/wsn/b-2":NotificationMessageHolderType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":CurrentTime of XSD type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TerminationTime of XSD type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ProducerProperties of XSD type "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":MessageContent of XSD type "http://docs.oasis-open.org/wsn/b-2":QueryExpressionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFault of XSD type "http://docs.oasis-open.org/wsn/b-2":SubscribeCreationFailedFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFault of XSD type "http://docs.oasis-open.org/wsn/b-2":InvalidFilterFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFault of XSD type "http://docs.oasis-open.org/wsn/b-2":TopicExpressionDialectUnknownFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFault of XSD type "http://docs.oasis-open.org/wsn/b-2":InvalidTopicExpressionFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFault of XSD type "http://docs.oasis-open.org/wsn/b-2":TopicNotSupportedFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFault of XSD type "http://docs.oasis-open.org/wsn/b-2":MultipleTopicsSpecifiedFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFault of XSD type "http://docs.oasis-open.org/wsn/b-2":InvalidProducerPropertiesExpressionFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFault of XSD type "http://docs.oasis-open.org/wsn/b-2":InvalidMessageContentExpressionFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnrecognizedPolicyRequestFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnsupportedPolicyRequestFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFault of XSD type "http://docs.oasis-open.org/wsn/b-2":NotifyMessageNotSupportedFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnacceptableInitialTerminationTimeFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFault of XSD type "http://docs.oasis-open.org/wsn/b-2":NoCurrentMessageOnTopicFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnableToGetMessagesFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnableToDestroyPullPointFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnableToCreatePullPointFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnacceptableTerminationTimeFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFault of XSD type "http://docs.oasis-open.org/wsn/b-2":UnableToDestroySubscriptionFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":PauseFailedFault of XSD type "http://docs.oasis-open.org/wsn/b-2":PauseFailedFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFault of XSD type "http://docs.oasis-open.org/wsn/b-2":ResumeFailedFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsn/b-2                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsrf/bf-2":BaseFault of XSD type "http://docs.oasis-open.org/wsrf/bf-2":BaseFaultType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsrf/bf-2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/t-1":TopicNamespace of XSD type "http://docs.oasis-open.org/wsn/t-1":TopicNamespaceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://docs.oasis-open.org/wsn/t-1":TopicSet of XSD type "http://docs.oasis-open.org/wsn/t-1":TopicSetType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://docs.oasis-open.org/wsn/t-1                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://docs.oasis-open.org/wsn/t-1":topicNamespaceLocation of simpleType xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// @brief Top-level attribute "http://docs.oasis-open.org/wsn/t-1":topic of simpleType xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://www.onvif.org/ver10/device/wsdl":Capabilities of XSD type "http://www.onvif.org/ver10/device/wsdl":DeviceServiceCapabilities.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.onvif.org/ver10/device/wsdl                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap tds  service name:	DeviceBinding 
//gsoap tds  service type:	Device 
//gsoap tds  service namespace:	http://www.onvif.org/ver10/device/wsdl 
//gsoap tds  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSDL Definitions

@section WSDL_bindings Service Bindings

  - @ref DeviceBinding

@section WSDL_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DeviceBinding Binding "DeviceBinding"

@section DeviceBinding_operations Operations of Binding "DeviceBinding"

  - @ref __tds__GetServices

  - @ref __tds__GetServiceCapabilities

  - @ref __tds__GetDeviceInformation

  - @ref __tds__SetSystemDateAndTime

  - @ref __tds__GetSystemDateAndTime

  - @ref __tds__SetSystemFactoryDefault

  - @ref __tds__UpgradeSystemFirmware

  - @ref __tds__SystemReboot

  - @ref __tds__RestoreSystem

  - @ref __tds__GetSystemBackup

  - @ref __tds__GetSystemLog

  - @ref __tds__GetSystemSupportInformation

  - @ref __tds__GetScopes

  - @ref __tds__SetScopes

  - @ref __tds__AddScopes

  - @ref __tds__RemoveScopes

  - @ref __tds__GetDiscoveryMode

  - @ref __tds__SetDiscoveryMode

  - @ref __tds__GetRemoteDiscoveryMode

  - @ref __tds__SetRemoteDiscoveryMode

  - @ref __tds__GetDPAddresses

  - @ref __tds__GetEndpointReference

  - @ref __tds__GetRemoteUser

  - @ref __tds__SetRemoteUser

  - @ref __tds__GetUsers

  - @ref __tds__CreateUsers

  - @ref __tds__DeleteUsers

  - @ref __tds__SetUser

  - @ref __tds__GetWsdlUrl

  - @ref __tds__GetCapabilities

  - @ref __tds__SetDPAddresses

  - @ref __tds__GetHostname

  - @ref __tds__SetHostname

  - @ref __tds__SetHostnameFromDHCP

  - @ref __tds__GetDNS

  - @ref __tds__SetDNS

  - @ref __tds__GetNTP

  - @ref __tds__SetNTP

  - @ref __tds__GetDynamicDNS

  - @ref __tds__SetDynamicDNS

  - @ref __tds__GetNetworkInterfaces

  - @ref __tds__SetNetworkInterfaces

  - @ref __tds__GetNetworkProtocols

  - @ref __tds__SetNetworkProtocols

  - @ref __tds__GetNetworkDefaultGateway

  - @ref __tds__SetNetworkDefaultGateway

  - @ref __tds__GetZeroConfiguration

  - @ref __tds__SetZeroConfiguration

  - @ref __tds__GetIPAddressFilter

  - @ref __tds__SetIPAddressFilter

  - @ref __tds__AddIPAddressFilter

  - @ref __tds__RemoveIPAddressFilter

  - @ref __tds__GetAccessPolicy

  - @ref __tds__SetAccessPolicy

  - @ref __tds__CreateCertificate

  - @ref __tds__GetCertificates

  - @ref __tds__GetCertificatesStatus

  - @ref __tds__SetCertificatesStatus

  - @ref __tds__DeleteCertificates

  - @ref __tds__GetPkcs10Request

  - @ref __tds__LoadCertificates

  - @ref __tds__GetClientCertificateMode

  - @ref __tds__SetClientCertificateMode

  - @ref __tds__GetRelayOutputs

  - @ref __tds__SetRelayOutputSettings

  - @ref __tds__SetRelayOutputState

  - @ref __tds__SendAuxiliaryCommand

  - @ref __tds__GetCACertificates

  - @ref __tds__LoadCertificateWithPrivateKey

  - @ref __tds__GetCertificateInformation

  - @ref __tds__LoadCACertificates

  - @ref __tds__CreateDot1XConfiguration

  - @ref __tds__SetDot1XConfiguration

  - @ref __tds__GetDot1XConfiguration

  - @ref __tds__GetDot1XConfigurations

  - @ref __tds__DeleteDot1XConfiguration

  - @ref __tds__GetDot11Capabilities

  - @ref __tds__GetDot11Status

  - @ref __tds__ScanAvailableDot11Networks

  - @ref __tds__GetSystemUris

  - @ref __tds__StartFirmwareUpgrade

  - @ref __tds__StartSystemRestore

  - @ref __tds__GetStorageConfigurations

  - @ref __tds__CreateStorageConfiguration

  - @ref __tds__GetStorageConfiguration

  - @ref __tds__SetStorageConfiguration

  - @ref __tds__DeleteStorageConfiguration

  - @ref __tds__GetGeoLocation

  - @ref __tds__SetGeoLocation

  - @ref __tds__DeleteGeoLocation

@section DeviceBinding_ports Endpoints of Binding "DeviceBinding"

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DeviceBinding                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetServices                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetServices" of service binding "DeviceBinding".
Returns information about services on the device.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetServices"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetServices"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetServicesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetServices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetServices*                  tds__GetServices,
    // output parameters:
    _tds__GetServicesResponse          &tds__GetServicesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetServices(
    struct soap *soap,
    // input parameters:
    _tds__GetServices*                  tds__GetServices,
    // output parameters:
    _tds__GetServicesResponse          &tds__GetServicesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetServices SOAP
//gsoap tds  service method-style:	GetServices document
//gsoap tds  service method-encoding:	GetServices literal
//gsoap tds  service method-input-action:	GetServices http://www.onvif.org/ver10/device/wsdl/GetServices
//gsoap tds  service method-output-action:	GetServices http://www.onvif.org/ver10/device/wsdl/GetServicesResponse
int __tds__GetServices(
    _tds__GetServices*                  tds__GetServices,	///< Input parameter
    _tds__GetServicesResponse          &tds__GetServicesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetServiceCapabilities                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetServiceCapabilities" of service binding "DeviceBinding".
Returns the capabilities of the device service. The result is returned in a typed
answer.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilitiesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetServiceCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetServiceCapabilities*       tds__GetServiceCapabilities,
    // output parameters:
    _tds__GetServiceCapabilitiesResponse&tds__GetServiceCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetServiceCapabilities(
    struct soap *soap,
    // input parameters:
    _tds__GetServiceCapabilities*       tds__GetServiceCapabilities,
    // output parameters:
    _tds__GetServiceCapabilitiesResponse&tds__GetServiceCapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetServiceCapabilities SOAP
//gsoap tds  service method-style:	GetServiceCapabilities document
//gsoap tds  service method-encoding:	GetServiceCapabilities literal
//gsoap tds  service method-input-action:	GetServiceCapabilities http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilities
//gsoap tds  service method-output-action:	GetServiceCapabilities http://www.onvif.org/ver10/device/wsdl/GetServiceCapabilitiesResponse
int __tds__GetServiceCapabilities(
    _tds__GetServiceCapabilities*       tds__GetServiceCapabilities,	///< Input parameter
    _tds__GetServiceCapabilitiesResponse&tds__GetServiceCapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDeviceInformation                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDeviceInformation" of service binding "DeviceBinding".
This operation gets basic device information from the device.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDeviceInformationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDeviceInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDeviceInformation*         tds__GetDeviceInformation,
    // output parameters:
    _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDeviceInformation(
    struct soap *soap,
    // input parameters:
    _tds__GetDeviceInformation*         tds__GetDeviceInformation,
    // output parameters:
    _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDeviceInformation SOAP
//gsoap tds  service method-style:	GetDeviceInformation document
//gsoap tds  service method-encoding:	GetDeviceInformation literal
//gsoap tds  service method-input-action:	GetDeviceInformation http://www.onvif.org/ver10/device/wsdl/GetDeviceInformation
//gsoap tds  service method-output-action:	GetDeviceInformation http://www.onvif.org/ver10/device/wsdl/GetDeviceInformationResponse
int __tds__GetDeviceInformation(
    _tds__GetDeviceInformation*         tds__GetDeviceInformation,	///< Input parameter
    _tds__GetDeviceInformationResponse &tds__GetDeviceInformationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetSystemDateAndTime                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetSystemDateAndTime" of service binding "DeviceBinding".
This operation sets the device system date and time. The device shall support the
				configuration of the daylight saving setting and
of the manual system date and time (if
				applicable) or indication of NTP time (if applicable)
through the SetSystemDateAndTime
				command. <br/>
				If system time and date are set manually, the client
shall include UTCDateTime in the request.<br/>
				A TimeZone token which is not formed according to
the rules of IEEE 1003.1 section 8.3 is considered as invalid timezone.<br/>
				The DayLightSavings flag should be set to true to
activate any DST settings of the TimeZone string. 
				Clear the DayLightSavings flag if the DST portion
of the TimeZone settings should be ignored.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetSystemDateAndTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetSystemDateAndTime*         tds__SetSystemDateAndTime,
    // output parameters:
    _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetSystemDateAndTime(
    struct soap *soap,
    // input parameters:
    _tds__SetSystemDateAndTime*         tds__SetSystemDateAndTime,
    // output parameters:
    _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetSystemDateAndTime SOAP
//gsoap tds  service method-style:	SetSystemDateAndTime document
//gsoap tds  service method-encoding:	SetSystemDateAndTime literal
//gsoap tds  service method-input-action:	SetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTime
//gsoap tds  service method-output-action:	SetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/SetSystemDateAndTimeResponse
int __tds__SetSystemDateAndTime(
    _tds__SetSystemDateAndTime*         tds__SetSystemDateAndTime,	///< Input parameter
    _tds__SetSystemDateAndTimeResponse &tds__SetSystemDateAndTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemDateAndTime                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemDateAndTime" of service binding "DeviceBinding".
This operation gets the device system date and time. The device shall support the
return of
				the daylight saving setting and of the manual system
date and time (if applicable) or indication
				of NTP time (if applicable) through the GetSystemDateAndTime
command.<br/>
				A device shall provide the UTCDateTime information.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemDateAndTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemDateAndTime*         tds__GetSystemDateAndTime,
    // output parameters:
    _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemDateAndTime(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemDateAndTime*         tds__GetSystemDateAndTime,
    // output parameters:
    _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemDateAndTime SOAP
//gsoap tds  service method-style:	GetSystemDateAndTime document
//gsoap tds  service method-encoding:	GetSystemDateAndTime literal
//gsoap tds  service method-input-action:	GetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTime
//gsoap tds  service method-output-action:	GetSystemDateAndTime http://www.onvif.org/ver10/device/wsdl/GetSystemDateAndTimeResponse
int __tds__GetSystemDateAndTime(
    _tds__GetSystemDateAndTime*         tds__GetSystemDateAndTime,	///< Input parameter
    _tds__GetSystemDateAndTimeResponse &tds__GetSystemDateAndTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetSystemFactoryDefault                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetSystemFactoryDefault" of service binding "DeviceBinding".
This operation reloads the parameters on the device to their factory default values.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefaultResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetSystemFactoryDefault(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetSystemFactoryDefault*      tds__SetSystemFactoryDefault,
    // output parameters:
    _tds__SetSystemFactoryDefaultResponse&tds__SetSystemFactoryDefaultResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetSystemFactoryDefault(
    struct soap *soap,
    // input parameters:
    _tds__SetSystemFactoryDefault*      tds__SetSystemFactoryDefault,
    // output parameters:
    _tds__SetSystemFactoryDefaultResponse&tds__SetSystemFactoryDefaultResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetSystemFactoryDefault SOAP
//gsoap tds  service method-style:	SetSystemFactoryDefault document
//gsoap tds  service method-encoding:	SetSystemFactoryDefault literal
//gsoap tds  service method-input-action:	SetSystemFactoryDefault http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefault
//gsoap tds  service method-output-action:	SetSystemFactoryDefault http://www.onvif.org/ver10/device/wsdl/SetSystemFactoryDefaultResponse
int __tds__SetSystemFactoryDefault(
    _tds__SetSystemFactoryDefault*      tds__SetSystemFactoryDefault,	///< Input parameter
    _tds__SetSystemFactoryDefaultResponse&tds__SetSystemFactoryDefaultResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__UpgradeSystemFirmware                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__UpgradeSystemFirmware" of service binding "DeviceBinding".
This operation upgrades a device firmware version. After a successful upgrade the
response
				message is sent before the device reboots. The device
should support firmware upgrade
				through the UpgradeSystemFirmware command. The exact
format of the firmware data is
				outside the scope of this standard.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmwareResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__UpgradeSystemFirmware(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__UpgradeSystemFirmware*        tds__UpgradeSystemFirmware,
    // output parameters:
    _tds__UpgradeSystemFirmwareResponse&tds__UpgradeSystemFirmwareResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__UpgradeSystemFirmware(
    struct soap *soap,
    // input parameters:
    _tds__UpgradeSystemFirmware*        tds__UpgradeSystemFirmware,
    // output parameters:
    _tds__UpgradeSystemFirmwareResponse&tds__UpgradeSystemFirmwareResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	UpgradeSystemFirmware SOAP
//gsoap tds  service method-style:	UpgradeSystemFirmware document
//gsoap tds  service method-encoding:	UpgradeSystemFirmware literal
//gsoap tds  service method-input-action:	UpgradeSystemFirmware http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmware
//gsoap tds  service method-output-action:	UpgradeSystemFirmware http://www.onvif.org/ver10/device/wsdl/UpgradeSystemFirmwareResponse
int __tds__UpgradeSystemFirmware(
    _tds__UpgradeSystemFirmware*        tds__UpgradeSystemFirmware,	///< Input parameter
    _tds__UpgradeSystemFirmwareResponse&tds__UpgradeSystemFirmwareResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SystemReboot                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SystemReboot" of service binding "DeviceBinding".
This operation reboots the device.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SystemReboot"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SystemReboot"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SystemRebootResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SystemReboot(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SystemReboot*                 tds__SystemReboot,
    // output parameters:
    _tds__SystemRebootResponse         &tds__SystemRebootResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SystemReboot(
    struct soap *soap,
    // input parameters:
    _tds__SystemReboot*                 tds__SystemReboot,
    // output parameters:
    _tds__SystemRebootResponse         &tds__SystemRebootResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SystemReboot SOAP
//gsoap tds  service method-style:	SystemReboot document
//gsoap tds  service method-encoding:	SystemReboot literal
//gsoap tds  service method-input-action:	SystemReboot http://www.onvif.org/ver10/device/wsdl/SystemReboot
//gsoap tds  service method-output-action:	SystemReboot http://www.onvif.org/ver10/device/wsdl/SystemRebootResponse
int __tds__SystemReboot(
    _tds__SystemReboot*                 tds__SystemReboot,	///< Input parameter
    _tds__SystemRebootResponse         &tds__SystemRebootResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__RestoreSystem                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__RestoreSystem" of service binding "DeviceBinding".
This operation restores the system backup configuration files(s) previously retrieved
from a
				device. The device should support restore of backup
configuration file(s) through the
				RestoreSystem command. The exact format of the backup
configuration file(s) is outside the
				scope of this standard. If the command is supported,
it shall accept backup files returned by
				the GetSystemBackup command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/RestoreSystem"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/RestoreSystem"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/RestoreSystemResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__RestoreSystem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__RestoreSystem*                tds__RestoreSystem,
    // output parameters:
    _tds__RestoreSystemResponse        &tds__RestoreSystemResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__RestoreSystem(
    struct soap *soap,
    // input parameters:
    _tds__RestoreSystem*                tds__RestoreSystem,
    // output parameters:
    _tds__RestoreSystemResponse        &tds__RestoreSystemResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	RestoreSystem SOAP
//gsoap tds  service method-style:	RestoreSystem document
//gsoap tds  service method-encoding:	RestoreSystem literal
//gsoap tds  service method-input-action:	RestoreSystem http://www.onvif.org/ver10/device/wsdl/RestoreSystem
//gsoap tds  service method-output-action:	RestoreSystem http://www.onvif.org/ver10/device/wsdl/RestoreSystemResponse
int __tds__RestoreSystem(
    _tds__RestoreSystem*                tds__RestoreSystem,	///< Input parameter
    _tds__RestoreSystemResponse        &tds__RestoreSystemResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemBackup                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemBackup" of service binding "DeviceBinding".
This operation is retrieves system backup configuration file(s) from a device. The
device
				should support return of back up configuration file(s)
through the GetSystemBackup command.
				The backup is returned with reference to a name
and mime-type together with binary data.
				The exact format of the backup configuration files
is outside the scope of this standard.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemBackup"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemBackupResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemBackup(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemBackup*              tds__GetSystemBackup,
    // output parameters:
    _tds__GetSystemBackupResponse      &tds__GetSystemBackupResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemBackup(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemBackup*              tds__GetSystemBackup,
    // output parameters:
    _tds__GetSystemBackupResponse      &tds__GetSystemBackupResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemBackup SOAP
//gsoap tds  service method-style:	GetSystemBackup document
//gsoap tds  service method-encoding:	GetSystemBackup literal
//gsoap tds  service method-input-action:	GetSystemBackup http://www.onvif.org/ver10/device/wsdl/GetSystemBackup
//gsoap tds  service method-output-action:	GetSystemBackup http://www.onvif.org/ver10/device/wsdl/GetSystemBackupResponse
int __tds__GetSystemBackup(
    _tds__GetSystemBackup*              tds__GetSystemBackup,	///< Input parameter
    _tds__GetSystemBackupResponse      &tds__GetSystemBackupResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemLog                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemLog" of service binding "DeviceBinding".
This operation gets a system log from the device. The exact format of the system
logs is outside the scope of this standard.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetSystemLog"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemLog"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemLog*                 tds__GetSystemLog,
    // output parameters:
    _tds__GetSystemLogResponse         &tds__GetSystemLogResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemLog(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemLog*                 tds__GetSystemLog,
    // output parameters:
    _tds__GetSystemLogResponse         &tds__GetSystemLogResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemLog SOAP
//gsoap tds  service method-style:	GetSystemLog document
//gsoap tds  service method-encoding:	GetSystemLog literal
//gsoap tds  service method-input-action:	GetSystemLog http://www.onvif.org/ver10/device/wsdl/GetSystemLog
//gsoap tds  service method-output-action:	GetSystemLog http://www.onvif.org/ver10/device/wsdl/GetSystemLogResponse
int __tds__GetSystemLog(
    _tds__GetSystemLog*                 tds__GetSystemLog,	///< Input parameter
    _tds__GetSystemLogResponse         &tds__GetSystemLogResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemSupportInformation                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemSupportInformation" of service binding "DeviceBinding".
This operation gets arbitary device diagnostics information from the device.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemSupportInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemSupportInformation*  tds__GetSystemSupportInformation,
    // output parameters:
    _tds__GetSystemSupportInformationResponse&tds__GetSystemSupportInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemSupportInformation(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemSupportInformation*  tds__GetSystemSupportInformation,
    // output parameters:
    _tds__GetSystemSupportInformationResponse&tds__GetSystemSupportInformationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemSupportInformation SOAP
//gsoap tds  service method-style:	GetSystemSupportInformation document
//gsoap tds  service method-encoding:	GetSystemSupportInformation literal
//gsoap tds  service method-input-action:	GetSystemSupportInformation http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformation
//gsoap tds  service method-output-action:	GetSystemSupportInformation http://www.onvif.org/ver10/device/wsdl/GetSystemSupportInformationResponse
int __tds__GetSystemSupportInformation(
    _tds__GetSystemSupportInformation*  tds__GetSystemSupportInformation,	///< Input parameter
    _tds__GetSystemSupportInformationResponse&tds__GetSystemSupportInformationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetScopes                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetScopes" of service binding "DeviceBinding".
This operation requests the scope parameters of a device. The scope parameters are
used in
				the device discovery to match a probe message, see
Section 7. The Scope parameters are of
				two different types: <ul>
					<li>Fixed</li>
					<li>Configurable</li>
				</ul>
				Fixed scope parameters are permanent device characteristics
and cannot be removed through the device management interface. 
				The scope type is indicated in the scope list returned
in the get scope parameters response. A device shall support 
				retrieval of discovery scope parameters through
the GetScopes command. As some scope parameters are mandatory, 
				the device shall return a non-empty scope list in
the response.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetScopes*                    tds__GetScopes,
    // output parameters:
    _tds__GetScopesResponse            &tds__GetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetScopes(
    struct soap *soap,
    // input parameters:
    _tds__GetScopes*                    tds__GetScopes,
    // output parameters:
    _tds__GetScopesResponse            &tds__GetScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetScopes SOAP
//gsoap tds  service method-style:	GetScopes document
//gsoap tds  service method-encoding:	GetScopes literal
//gsoap tds  service method-input-action:	GetScopes http://www.onvif.org/ver10/device/wsdl/GetScopes
//gsoap tds  service method-output-action:	GetScopes http://www.onvif.org/ver10/device/wsdl/GetScopesResponse
int __tds__GetScopes(
    _tds__GetScopes*                    tds__GetScopes,	///< Input parameter
    _tds__GetScopesResponse            &tds__GetScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetScopes                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetScopes" of service binding "DeviceBinding".
This operation sets the scope parameters of a device. The scope parameters are used
in the
				device discovery to match a probe message.
				This operation replaces all existing configurable
scope parameters (not fixed parameters). If
				this shall be avoided, one should use the scope
add command instead. The device shall
				support configuration of discovery scope parameters
through the SetScopes command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetScopes*                    tds__SetScopes,
    // output parameters:
    _tds__SetScopesResponse            &tds__SetScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetScopes(
    struct soap *soap,
    // input parameters:
    _tds__SetScopes*                    tds__SetScopes,
    // output parameters:
    _tds__SetScopesResponse            &tds__SetScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetScopes SOAP
//gsoap tds  service method-style:	SetScopes document
//gsoap tds  service method-encoding:	SetScopes literal
//gsoap tds  service method-input-action:	SetScopes http://www.onvif.org/ver10/device/wsdl/SetScopes
//gsoap tds  service method-output-action:	SetScopes http://www.onvif.org/ver10/device/wsdl/SetScopesResponse
int __tds__SetScopes(
    _tds__SetScopes*                    tds__SetScopes,	///< Input parameter
    _tds__SetScopesResponse            &tds__SetScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__AddScopes                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__AddScopes" of service binding "DeviceBinding".
This operation adds new configurable scope parameters to a device. The scope parameters
				are used in the device discovery to match a probe
message. The device shall
				support addition of discovery scope parameters through
the AddScopes command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/AddScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/AddScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/AddScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__AddScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__AddScopes*                    tds__AddScopes,
    // output parameters:
    _tds__AddScopesResponse            &tds__AddScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__AddScopes(
    struct soap *soap,
    // input parameters:
    _tds__AddScopes*                    tds__AddScopes,
    // output parameters:
    _tds__AddScopesResponse            &tds__AddScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	AddScopes SOAP
//gsoap tds  service method-style:	AddScopes document
//gsoap tds  service method-encoding:	AddScopes literal
//gsoap tds  service method-input-action:	AddScopes http://www.onvif.org/ver10/device/wsdl/AddScopes
//gsoap tds  service method-output-action:	AddScopes http://www.onvif.org/ver10/device/wsdl/AddScopesResponse
int __tds__AddScopes(
    _tds__AddScopes*                    tds__AddScopes,	///< Input parameter
    _tds__AddScopesResponse            &tds__AddScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__RemoveScopes                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__RemoveScopes" of service binding "DeviceBinding".
This operation deletes scope-configurable scope parameters from a device. The scope
				parameters are used in the device discovery to match
a probe message, see Section 7. The
				device shall support deletion of discovery scope
parameters through the RemoveScopes
				command.
				Table

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/RemoveScopes"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/RemoveScopes"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/RemoveScopesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__RemoveScopes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__RemoveScopes*                 tds__RemoveScopes,
    // output parameters:
    _tds__RemoveScopesResponse         &tds__RemoveScopesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__RemoveScopes(
    struct soap *soap,
    // input parameters:
    _tds__RemoveScopes*                 tds__RemoveScopes,
    // output parameters:
    _tds__RemoveScopesResponse         &tds__RemoveScopesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	RemoveScopes SOAP
//gsoap tds  service method-style:	RemoveScopes document
//gsoap tds  service method-encoding:	RemoveScopes literal
//gsoap tds  service method-input-action:	RemoveScopes http://www.onvif.org/ver10/device/wsdl/RemoveScopes
//gsoap tds  service method-output-action:	RemoveScopes http://www.onvif.org/ver10/device/wsdl/RemoveScopesResponse
int __tds__RemoveScopes(
    _tds__RemoveScopes*                 tds__RemoveScopes,	///< Input parameter
    _tds__RemoveScopesResponse         &tds__RemoveScopesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDiscoveryMode                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDiscoveryMode" of service binding "DeviceBinding".
This operation gets the discovery mode of a device. See Section 7.2 for the definition
of the
				different device discovery modes. The device shall
support retrieval of the discovery mode
				setting through the GetDiscoveryMode command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDiscoveryMode*             tds__GetDiscoveryMode,
    // output parameters:
    _tds__GetDiscoveryModeResponse     &tds__GetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__GetDiscoveryMode*             tds__GetDiscoveryMode,
    // output parameters:
    _tds__GetDiscoveryModeResponse     &tds__GetDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDiscoveryMode SOAP
//gsoap tds  service method-style:	GetDiscoveryMode document
//gsoap tds  service method-encoding:	GetDiscoveryMode literal
//gsoap tds  service method-input-action:	GetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetDiscoveryMode
//gsoap tds  service method-output-action:	GetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetDiscoveryModeResponse
int __tds__GetDiscoveryMode(
    _tds__GetDiscoveryMode*             tds__GetDiscoveryMode,	///< Input parameter
    _tds__GetDiscoveryModeResponse     &tds__GetDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDiscoveryMode                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDiscoveryMode" of service binding "DeviceBinding".
This operation sets the discovery mode operation of a device. See Section 7.2 for
the
				definition of the different device discovery modes.
The device shall support configuration of
				the discovery mode setting through the SetDiscoveryMode
command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDiscoveryMode*             tds__SetDiscoveryMode,
    // output parameters:
    _tds__SetDiscoveryModeResponse     &tds__SetDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__SetDiscoveryMode*             tds__SetDiscoveryMode,
    // output parameters:
    _tds__SetDiscoveryModeResponse     &tds__SetDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDiscoveryMode SOAP
//gsoap tds  service method-style:	SetDiscoveryMode document
//gsoap tds  service method-encoding:	SetDiscoveryMode literal
//gsoap tds  service method-input-action:	SetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetDiscoveryMode
//gsoap tds  service method-output-action:	SetDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetDiscoveryModeResponse
int __tds__SetDiscoveryMode(
    _tds__SetDiscoveryMode*             tds__SetDiscoveryMode,	///< Input parameter
    _tds__SetDiscoveryModeResponse     &tds__SetDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetRemoteDiscoveryMode                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetRemoteDiscoveryMode" of service binding "DeviceBinding".
This operation gets the remote discovery mode of a device. See Section 7.4 for the
definition
				of remote discovery extensions. A device that supports
remote discovery shall support
				retrieval of the remote discovery mode setting through
the GetRemoteDiscoveryMode
				command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetRemoteDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetRemoteDiscoveryMode*       tds__GetRemoteDiscoveryMode,
    // output parameters:
    _tds__GetRemoteDiscoveryModeResponse&tds__GetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetRemoteDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__GetRemoteDiscoveryMode*       tds__GetRemoteDiscoveryMode,
    // output parameters:
    _tds__GetRemoteDiscoveryModeResponse&tds__GetRemoteDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetRemoteDiscoveryMode SOAP
//gsoap tds  service method-style:	GetRemoteDiscoveryMode document
//gsoap tds  service method-encoding:	GetRemoteDiscoveryMode literal
//gsoap tds  service method-input-action:	GetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryMode
//gsoap tds  service method-output-action:	GetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/GetRemoteDiscoveryModeResponse
int __tds__GetRemoteDiscoveryMode(
    _tds__GetRemoteDiscoveryMode*       tds__GetRemoteDiscoveryMode,	///< Input parameter
    _tds__GetRemoteDiscoveryModeResponse&tds__GetRemoteDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRemoteDiscoveryMode                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRemoteDiscoveryMode" of service binding "DeviceBinding".
This operation sets the remote discovery mode of operation of a device. See Section
7.4 for
				the definition of remote discovery remote extensions.
A device that supports remote discovery
				shall support configuration of the discovery mode
setting through the
				SetRemoteDiscoveryMode command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRemoteDiscoveryMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRemoteDiscoveryMode*       tds__SetRemoteDiscoveryMode,
    // output parameters:
    _tds__SetRemoteDiscoveryModeResponse&tds__SetRemoteDiscoveryModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRemoteDiscoveryMode(
    struct soap *soap,
    // input parameters:
    _tds__SetRemoteDiscoveryMode*       tds__SetRemoteDiscoveryMode,
    // output parameters:
    _tds__SetRemoteDiscoveryModeResponse&tds__SetRemoteDiscoveryModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRemoteDiscoveryMode SOAP
//gsoap tds  service method-style:	SetRemoteDiscoveryMode document
//gsoap tds  service method-encoding:	SetRemoteDiscoveryMode literal
//gsoap tds  service method-input-action:	SetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryMode
//gsoap tds  service method-output-action:	SetRemoteDiscoveryMode http://www.onvif.org/ver10/device/wsdl/SetRemoteDiscoveryModeResponse
int __tds__SetRemoteDiscoveryMode(
    _tds__SetRemoteDiscoveryMode*       tds__SetRemoteDiscoveryMode,	///< Input parameter
    _tds__SetRemoteDiscoveryModeResponse&tds__SetRemoteDiscoveryModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDPAddresses                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDPAddresses" of service binding "DeviceBinding".
This operation gets the remote DP address or addresses from a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support retrieval of the remote
				DP address(es) through the GetDPAddresses command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDPAddresses"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDPAddressesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDPAddresses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDPAddresses*               tds__GetDPAddresses,
    // output parameters:
    _tds__GetDPAddressesResponse       &tds__GetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDPAddresses(
    struct soap *soap,
    // input parameters:
    _tds__GetDPAddresses*               tds__GetDPAddresses,
    // output parameters:
    _tds__GetDPAddressesResponse       &tds__GetDPAddressesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDPAddresses SOAP
//gsoap tds  service method-style:	GetDPAddresses document
//gsoap tds  service method-encoding:	GetDPAddresses literal
//gsoap tds  service method-input-action:	GetDPAddresses http://www.onvif.org/ver10/device/wsdl/GetDPAddresses
//gsoap tds  service method-output-action:	GetDPAddresses http://www.onvif.org/ver10/device/wsdl/GetDPAddressesResponse
int __tds__GetDPAddresses(
    _tds__GetDPAddresses*               tds__GetDPAddresses,	///< Input parameter
    _tds__GetDPAddressesResponse       &tds__GetDPAddressesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetEndpointReference                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetEndpointReference" of service binding "DeviceBinding".
A client can ask for the device service endpoint reference address property that
can be used
				to derive the password equivalent for remote user
operation. The device shall support the
				GetEndpointReference command returning the address
property of the device service
				endpoint reference.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetEndpointReference"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetEndpointReferenceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetEndpointReference(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetEndpointReference*         tds__GetEndpointReference,
    // output parameters:
    _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetEndpointReference(
    struct soap *soap,
    // input parameters:
    _tds__GetEndpointReference*         tds__GetEndpointReference,
    // output parameters:
    _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetEndpointReference SOAP
//gsoap tds  service method-style:	GetEndpointReference document
//gsoap tds  service method-encoding:	GetEndpointReference literal
//gsoap tds  service method-input-action:	GetEndpointReference http://www.onvif.org/ver10/device/wsdl/GetEndpointReference
//gsoap tds  service method-output-action:	GetEndpointReference http://www.onvif.org/ver10/device/wsdl/GetEndpointReferenceResponse
int __tds__GetEndpointReference(
    _tds__GetEndpointReference*         tds__GetEndpointReference,	///< Input parameter
    _tds__GetEndpointReferenceResponse &tds__GetEndpointReferenceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetRemoteUser                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetRemoteUser" of service binding "DeviceBinding".
This operation returns the configured remote user (if any). A device supporting
remote user
				handling shall support this operation. The user
is only valid for the WS-UserToken profile or
				as a HTTP / RTSP user.<br/>
				The algorithm to use for deriving the password is
described in section 5.12.2.1 of the core specification.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteUser"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetRemoteUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetRemoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetRemoteUser*                tds__GetRemoteUser,
    // output parameters:
    _tds__GetRemoteUserResponse        &tds__GetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetRemoteUser(
    struct soap *soap,
    // input parameters:
    _tds__GetRemoteUser*                tds__GetRemoteUser,
    // output parameters:
    _tds__GetRemoteUserResponse        &tds__GetRemoteUserResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetRemoteUser SOAP
//gsoap tds  service method-style:	GetRemoteUser document
//gsoap tds  service method-encoding:	GetRemoteUser literal
//gsoap tds  service method-input-action:	GetRemoteUser http://www.onvif.org/ver10/device/wsdl/GetRemoteUser
//gsoap tds  service method-output-action:	GetRemoteUser http://www.onvif.org/ver10/device/wsdl/GetRemoteUserResponse
int __tds__GetRemoteUser(
    _tds__GetRemoteUser*                tds__GetRemoteUser,	///< Input parameter
    _tds__GetRemoteUserResponse        &tds__GetRemoteUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRemoteUser                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRemoteUser" of service binding "DeviceBinding".
This operation sets the remote user. A device supporting remote user handling shall
support this
				operation. The user is only valid for the WS-UserToken
profile or as a HTTP / RTSP user.<br/>
				The password that is set shall always be the original
(not derived) password.<br/>
				If UseDerivedPassword is set password derivation
shall be done by the device when connecting to a
				remote device.The algorithm to use for deriving
the password is described in section 5.12.2.1 of the core specification.<br/>
				To remove the remote user SetRemoteUser should be
called without the RemoteUser parameter.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteUser"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRemoteUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRemoteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRemoteUser*                tds__SetRemoteUser,
    // output parameters:
    _tds__SetRemoteUserResponse        &tds__SetRemoteUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRemoteUser(
    struct soap *soap,
    // input parameters:
    _tds__SetRemoteUser*                tds__SetRemoteUser,
    // output parameters:
    _tds__SetRemoteUserResponse        &tds__SetRemoteUserResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRemoteUser SOAP
//gsoap tds  service method-style:	SetRemoteUser document
//gsoap tds  service method-encoding:	SetRemoteUser literal
//gsoap tds  service method-input-action:	SetRemoteUser http://www.onvif.org/ver10/device/wsdl/SetRemoteUser
//gsoap tds  service method-output-action:	SetRemoteUser http://www.onvif.org/ver10/device/wsdl/SetRemoteUserResponse
int __tds__SetRemoteUser(
    _tds__SetRemoteUser*                tds__SetRemoteUser,	///< Input parameter
    _tds__SetRemoteUserResponse        &tds__SetRemoteUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetUsers                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetUsers" of service binding "DeviceBinding".
This operation lists the registered users and corresponding credentials on a device.
The
				device shall support retrieval of registered device
users and their credentials for the user
				token through the GetUsers command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetUsers"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetUsers"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetUsersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetUsers*                     tds__GetUsers,
    // output parameters:
    _tds__GetUsersResponse             &tds__GetUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetUsers(
    struct soap *soap,
    // input parameters:
    _tds__GetUsers*                     tds__GetUsers,
    // output parameters:
    _tds__GetUsersResponse             &tds__GetUsersResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetUsers SOAP
//gsoap tds  service method-style:	GetUsers document
//gsoap tds  service method-encoding:	GetUsers literal
//gsoap tds  service method-input-action:	GetUsers http://www.onvif.org/ver10/device/wsdl/GetUsers
//gsoap tds  service method-output-action:	GetUsers http://www.onvif.org/ver10/device/wsdl/GetUsersResponse
int __tds__GetUsers(
    _tds__GetUsers*                     tds__GetUsers,	///< Input parameter
    _tds__GetUsersResponse             &tds__GetUsersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateUsers                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateUsers" of service binding "DeviceBinding".
This operation creates new device users and corresponding credentials on a device
for authentication purposes. 
				The device shall support creation of device users
and their credentials through the CreateUsers
				command. Either all users are created successfully
or a fault message shall be returned
				without creating any user.<br/>
				ONVIF compliant devices are recommended to support
password length of at least 28 bytes,
				as clients may follow the password derivation mechanism
which results in 'password
				equivalent' of length 28 bytes, as described in
section 3.1.2 of the ONVIF security white paper.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/CreateUsers"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateUsers"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateUsersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateUsers*                  tds__CreateUsers,
    // output parameters:
    _tds__CreateUsersResponse          &tds__CreateUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateUsers(
    struct soap *soap,
    // input parameters:
    _tds__CreateUsers*                  tds__CreateUsers,
    // output parameters:
    _tds__CreateUsersResponse          &tds__CreateUsersResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateUsers SOAP
//gsoap tds  service method-style:	CreateUsers document
//gsoap tds  service method-encoding:	CreateUsers literal
//gsoap tds  service method-input-action:	CreateUsers http://www.onvif.org/ver10/device/wsdl/CreateUsers
//gsoap tds  service method-output-action:	CreateUsers http://www.onvif.org/ver10/device/wsdl/CreateUsersResponse
int __tds__CreateUsers(
    _tds__CreateUsers*                  tds__CreateUsers,	///< Input parameter
    _tds__CreateUsersResponse          &tds__CreateUsersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteUsers                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteUsers" of service binding "DeviceBinding".
This operation deletes users on a device. The device shall support deletion of device
users and their credentials 
				through the DeleteUsers command. A device may have
one or more fixed users
				that cannot be deleted to ensure access to the unit.
Either all users are deleted successfully or a
				fault message shall be returned and no users be
deleted.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/DeleteUsers"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteUsers"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteUsersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteUsers*                  tds__DeleteUsers,
    // output parameters:
    _tds__DeleteUsersResponse          &tds__DeleteUsersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteUsers(
    struct soap *soap,
    // input parameters:
    _tds__DeleteUsers*                  tds__DeleteUsers,
    // output parameters:
    _tds__DeleteUsersResponse          &tds__DeleteUsersResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteUsers SOAP
//gsoap tds  service method-style:	DeleteUsers document
//gsoap tds  service method-encoding:	DeleteUsers literal
//gsoap tds  service method-input-action:	DeleteUsers http://www.onvif.org/ver10/device/wsdl/DeleteUsers
//gsoap tds  service method-output-action:	DeleteUsers http://www.onvif.org/ver10/device/wsdl/DeleteUsersResponse
int __tds__DeleteUsers(
    _tds__DeleteUsers*                  tds__DeleteUsers,	///< Input parameter
    _tds__DeleteUsersResponse          &tds__DeleteUsersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetUser                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetUser" of service binding "DeviceBinding".
This operation updates the settings for one or several users on a device for authentication
purposes.
				The device shall support update of device users
and their credentials through the SetUser command. 
				Either all change requests are processed successfully
or a fault message shall be returned and no change requests be processed.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetUser"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetUser"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetUserResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetUser*                      tds__SetUser,
    // output parameters:
    _tds__SetUserResponse              &tds__SetUserResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetUser(
    struct soap *soap,
    // input parameters:
    _tds__SetUser*                      tds__SetUser,
    // output parameters:
    _tds__SetUserResponse              &tds__SetUserResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetUser SOAP
//gsoap tds  service method-style:	SetUser document
//gsoap tds  service method-encoding:	SetUser literal
//gsoap tds  service method-input-action:	SetUser http://www.onvif.org/ver10/device/wsdl/SetUser
//gsoap tds  service method-output-action:	SetUser http://www.onvif.org/ver10/device/wsdl/SetUserResponse
int __tds__SetUser(
    _tds__SetUser*                      tds__SetUser,	///< Input parameter
    _tds__SetUserResponse              &tds__SetUserResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetWsdlUrl                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetWsdlUrl" of service binding "DeviceBinding".
It is possible for an endpoint to request a URL that can be used to retrieve the
complete
				schema and WSDL definitions of a device. The command
gives in return a URL entry point
				where all the necessary product specific WSDL and
schema definitions can be retrieved. The
				device shall provide a URL for WSDL and schema download
through the GetWsdlUrl command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetWsdlUrlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetWsdlUrl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetWsdlUrl*                   tds__GetWsdlUrl,
    // output parameters:
    _tds__GetWsdlUrlResponse           &tds__GetWsdlUrlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetWsdlUrl(
    struct soap *soap,
    // input parameters:
    _tds__GetWsdlUrl*                   tds__GetWsdlUrl,
    // output parameters:
    _tds__GetWsdlUrlResponse           &tds__GetWsdlUrlResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetWsdlUrl SOAP
//gsoap tds  service method-style:	GetWsdlUrl document
//gsoap tds  service method-encoding:	GetWsdlUrl literal
//gsoap tds  service method-input-action:	GetWsdlUrl http://www.onvif.org/ver10/device/wsdl/GetWsdlUrl
//gsoap tds  service method-output-action:	GetWsdlUrl http://www.onvif.org/ver10/device/wsdl/GetWsdlUrlResponse
int __tds__GetWsdlUrl(
    _tds__GetWsdlUrl*                   tds__GetWsdlUrl,	///< Input parameter
    _tds__GetWsdlUrlResponse           &tds__GetWsdlUrlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCapabilities                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCapabilities" of service binding "DeviceBinding".
This method has been replaced by the more generic GetServices method.
			 For capabilities of individual services refer to the GetServiceCapabilities
methods.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetCapabilities"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCapabilities"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCapabilitiesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCapabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCapabilities*              tds__GetCapabilities,
    // output parameters:
    _tds__GetCapabilitiesResponse      &tds__GetCapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCapabilities(
    struct soap *soap,
    // input parameters:
    _tds__GetCapabilities*              tds__GetCapabilities,
    // output parameters:
    _tds__GetCapabilitiesResponse      &tds__GetCapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCapabilities SOAP
//gsoap tds  service method-style:	GetCapabilities document
//gsoap tds  service method-encoding:	GetCapabilities literal
//gsoap tds  service method-input-action:	GetCapabilities http://www.onvif.org/ver10/device/wsdl/GetCapabilities
//gsoap tds  service method-output-action:	GetCapabilities http://www.onvif.org/ver10/device/wsdl/GetCapabilitiesResponse
int __tds__GetCapabilities(
    _tds__GetCapabilities*              tds__GetCapabilities,	///< Input parameter
    _tds__GetCapabilitiesResponse      &tds__GetCapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDPAddresses                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDPAddresses" of service binding "DeviceBinding".
This operation sets the remote DP address or addresses on a device. If the device
supports
				remote discovery, as specified in Section 7.4, the
device shall support configuration of the
				remote DP address(es) through the SetDPAddresses
command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDPAddresses"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDPAddressesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDPAddresses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDPAddresses*               tds__SetDPAddresses,
    // output parameters:
    _tds__SetDPAddressesResponse       &tds__SetDPAddressesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDPAddresses(
    struct soap *soap,
    // input parameters:
    _tds__SetDPAddresses*               tds__SetDPAddresses,
    // output parameters:
    _tds__SetDPAddressesResponse       &tds__SetDPAddressesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDPAddresses SOAP
//gsoap tds  service method-style:	SetDPAddresses document
//gsoap tds  service method-encoding:	SetDPAddresses literal
//gsoap tds  service method-input-action:	SetDPAddresses http://www.onvif.org/ver10/device/wsdl/SetDPAddresses
//gsoap tds  service method-output-action:	SetDPAddresses http://www.onvif.org/ver10/device/wsdl/SetDPAddressesResponse
int __tds__SetDPAddresses(
    _tds__SetDPAddresses*               tds__SetDPAddresses,	///< Input parameter
    _tds__SetDPAddressesResponse       &tds__SetDPAddressesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetHostname                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetHostname" of service binding "DeviceBinding".
This operation is used by an endpoint to get the hostname from a device. The device
shall
				return its hostname configurations through the GetHostname
command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetHostname"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetHostname"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetHostnameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetHostname(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetHostname*                  tds__GetHostname,
    // output parameters:
    _tds__GetHostnameResponse          &tds__GetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetHostname(
    struct soap *soap,
    // input parameters:
    _tds__GetHostname*                  tds__GetHostname,
    // output parameters:
    _tds__GetHostnameResponse          &tds__GetHostnameResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetHostname SOAP
//gsoap tds  service method-style:	GetHostname document
//gsoap tds  service method-encoding:	GetHostname literal
//gsoap tds  service method-input-action:	GetHostname http://www.onvif.org/ver10/device/wsdl/GetHostname
//gsoap tds  service method-output-action:	GetHostname http://www.onvif.org/ver10/device/wsdl/GetHostnameResponse
int __tds__GetHostname(
    _tds__GetHostname*                  tds__GetHostname,	///< Input parameter
    _tds__GetHostnameResponse          &tds__GetHostnameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetHostname                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetHostname" of service binding "DeviceBinding".
This operation sets the hostname on a device. It shall be possible to set the device
hostname
				configurations through the SetHostname command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.

			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetHostname"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetHostname"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetHostname(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetHostname*                  tds__SetHostname,
    // output parameters:
    _tds__SetHostnameResponse          &tds__SetHostnameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetHostname(
    struct soap *soap,
    // input parameters:
    _tds__SetHostname*                  tds__SetHostname,
    // output parameters:
    _tds__SetHostnameResponse          &tds__SetHostnameResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetHostname SOAP
//gsoap tds  service method-style:	SetHostname document
//gsoap tds  service method-encoding:	SetHostname literal
//gsoap tds  service method-input-action:	SetHostname http://www.onvif.org/ver10/device/wsdl/SetHostname
//gsoap tds  service method-output-action:	SetHostname http://www.onvif.org/ver10/device/wsdl/SetHostnameResponse
int __tds__SetHostname(
    _tds__SetHostname*                  tds__SetHostname,	///< Input parameter
    _tds__SetHostnameResponse          &tds__SetHostnameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetHostnameFromDHCP                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetHostnameFromDHCP" of service binding "DeviceBinding".
This operation controls whether the hostname is set manually or retrieved via DHCP.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCPResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetHostnameFromDHCP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetHostnameFromDHCP*          tds__SetHostnameFromDHCP,
    // output parameters:
    _tds__SetHostnameFromDHCPResponse  &tds__SetHostnameFromDHCPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetHostnameFromDHCP(
    struct soap *soap,
    // input parameters:
    _tds__SetHostnameFromDHCP*          tds__SetHostnameFromDHCP,
    // output parameters:
    _tds__SetHostnameFromDHCPResponse  &tds__SetHostnameFromDHCPResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetHostnameFromDHCP SOAP
//gsoap tds  service method-style:	SetHostnameFromDHCP document
//gsoap tds  service method-encoding:	SetHostnameFromDHCP literal
//gsoap tds  service method-input-action:	SetHostnameFromDHCP http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCP
//gsoap tds  service method-output-action:	SetHostnameFromDHCP http://www.onvif.org/ver10/device/wsdl/SetHostnameFromDHCPResponse
int __tds__SetHostnameFromDHCP(
    _tds__SetHostnameFromDHCP*          tds__SetHostnameFromDHCP,	///< Input parameter
    _tds__SetHostnameFromDHCPResponse  &tds__SetHostnameFromDHCPResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDNS                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDNS" of service binding "DeviceBinding".
This operation gets the DNS settings from a device. The device shall return its
DNS
				configurations through the GetDNS command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDNS*                       tds__GetDNS,
    // output parameters:
    _tds__GetDNSResponse               &tds__GetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDNS(
    struct soap *soap,
    // input parameters:
    _tds__GetDNS*                       tds__GetDNS,
    // output parameters:
    _tds__GetDNSResponse               &tds__GetDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDNS SOAP
//gsoap tds  service method-style:	GetDNS document
//gsoap tds  service method-encoding:	GetDNS literal
//gsoap tds  service method-input-action:	GetDNS http://www.onvif.org/ver10/device/wsdl/GetDNS
//gsoap tds  service method-output-action:	GetDNS http://www.onvif.org/ver10/device/wsdl/GetDNSResponse
int __tds__GetDNS(
    _tds__GetDNS*                       tds__GetDNS,	///< Input parameter
    _tds__GetDNSResponse               &tds__GetDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDNS                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDNS" of service binding "DeviceBinding".
This operation sets the DNS settings on a device. It shall be possible to set the
device DNS
				configurations through the SetDNS command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDNS*                       tds__SetDNS,
    // output parameters:
    _tds__SetDNSResponse               &tds__SetDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDNS(
    struct soap *soap,
    // input parameters:
    _tds__SetDNS*                       tds__SetDNS,
    // output parameters:
    _tds__SetDNSResponse               &tds__SetDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDNS SOAP
//gsoap tds  service method-style:	SetDNS document
//gsoap tds  service method-encoding:	SetDNS literal
//gsoap tds  service method-input-action:	SetDNS http://www.onvif.org/ver10/device/wsdl/SetDNS
//gsoap tds  service method-output-action:	SetDNS http://www.onvif.org/ver10/device/wsdl/SetDNSResponse
int __tds__SetDNS(
    _tds__SetDNS*                       tds__SetDNS,	///< Input parameter
    _tds__SetDNSResponse               &tds__SetDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNTP                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNTP" of service binding "DeviceBinding".
This operation gets the NTP settings from a device. If the device supports NTP,
it shall be
				possible to get the NTP server settings through
the GetNTP command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetNTP"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNTP"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNTPResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNTP*                       tds__GetNTP,
    // output parameters:
    _tds__GetNTPResponse               &tds__GetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNTP(
    struct soap *soap,
    // input parameters:
    _tds__GetNTP*                       tds__GetNTP,
    // output parameters:
    _tds__GetNTPResponse               &tds__GetNTPResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNTP SOAP
//gsoap tds  service method-style:	GetNTP document
//gsoap tds  service method-encoding:	GetNTP literal
//gsoap tds  service method-input-action:	GetNTP http://www.onvif.org/ver10/device/wsdl/GetNTP
//gsoap tds  service method-output-action:	GetNTP http://www.onvif.org/ver10/device/wsdl/GetNTPResponse
int __tds__GetNTP(
    _tds__GetNTP*                       tds__GetNTP,	///< Input parameter
    _tds__GetNTPResponse               &tds__GetNTPResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNTP                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNTP" of service binding "DeviceBinding".
This operation sets the NTP settings on a device. If the device supports NTP, it
shall be
				possible to set the NTP server settings through
the SetNTP command.<br/>
				A device shall accept string formated according
to RFC 1123 section 2.1 or alternatively to RFC 952, 
				other string shall be considered as invalid strings.
<br/>
				Changes to the NTP server list will not affect the
clock mode DateTimeType. Use SetSystemDateAndTime to activate NTP operation.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetNTP"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNTP"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNTPResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNTP*                       tds__SetNTP,
    // output parameters:
    _tds__SetNTPResponse               &tds__SetNTPResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNTP(
    struct soap *soap,
    // input parameters:
    _tds__SetNTP*                       tds__SetNTP,
    // output parameters:
    _tds__SetNTPResponse               &tds__SetNTPResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNTP SOAP
//gsoap tds  service method-style:	SetNTP document
//gsoap tds  service method-encoding:	SetNTP literal
//gsoap tds  service method-input-action:	SetNTP http://www.onvif.org/ver10/device/wsdl/SetNTP
//gsoap tds  service method-output-action:	SetNTP http://www.onvif.org/ver10/device/wsdl/SetNTPResponse
int __tds__SetNTP(
    _tds__SetNTP*                       tds__SetNTP,	///< Input parameter
    _tds__SetNTPResponse               &tds__SetNTPResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDynamicDNS                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDynamicDNS" of service binding "DeviceBinding".
This operation gets the dynamic DNS settings from a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to get the type, name
				and TTL through the GetDynamicDNS command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDynamicDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDynamicDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDynamicDNS*                tds__GetDynamicDNS,
    // output parameters:
    _tds__GetDynamicDNSResponse        &tds__GetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDynamicDNS(
    struct soap *soap,
    // input parameters:
    _tds__GetDynamicDNS*                tds__GetDynamicDNS,
    // output parameters:
    _tds__GetDynamicDNSResponse        &tds__GetDynamicDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDynamicDNS SOAP
//gsoap tds  service method-style:	GetDynamicDNS document
//gsoap tds  service method-encoding:	GetDynamicDNS literal
//gsoap tds  service method-input-action:	GetDynamicDNS http://www.onvif.org/ver10/device/wsdl/GetDynamicDNS
//gsoap tds  service method-output-action:	GetDynamicDNS http://www.onvif.org/ver10/device/wsdl/GetDynamicDNSResponse
int __tds__GetDynamicDNS(
    _tds__GetDynamicDNS*                tds__GetDynamicDNS,	///< Input parameter
    _tds__GetDynamicDNSResponse        &tds__GetDynamicDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDynamicDNS                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDynamicDNS" of service binding "DeviceBinding".
This operation sets the dynamic DNS settings on a device. If the device supports
dynamic
				DNS as specified in [RFC 2136] and [RFC 4702], it
shall be possible to set the type, name
				and TTL through the SetDynamicDNS command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDynamicDNSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDynamicDNS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDynamicDNS*                tds__SetDynamicDNS,
    // output parameters:
    _tds__SetDynamicDNSResponse        &tds__SetDynamicDNSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDynamicDNS(
    struct soap *soap,
    // input parameters:
    _tds__SetDynamicDNS*                tds__SetDynamicDNS,
    // output parameters:
    _tds__SetDynamicDNSResponse        &tds__SetDynamicDNSResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDynamicDNS SOAP
//gsoap tds  service method-style:	SetDynamicDNS document
//gsoap tds  service method-encoding:	SetDynamicDNS literal
//gsoap tds  service method-input-action:	SetDynamicDNS http://www.onvif.org/ver10/device/wsdl/SetDynamicDNS
//gsoap tds  service method-output-action:	SetDynamicDNS http://www.onvif.org/ver10/device/wsdl/SetDynamicDNSResponse
int __tds__SetDynamicDNS(
    _tds__SetDynamicDNS*                tds__SetDynamicDNS,	///< Input parameter
    _tds__SetDynamicDNSResponse        &tds__SetDynamicDNSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNetworkInterfaces                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNetworkInterfaces" of service binding "DeviceBinding".
This operation gets the network interface configuration from a device. The device
shall
				support return of network interface configuration
settings as defined by the NetworkInterface
				type through the GetNetworkInterfaces command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfacesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNetworkInterfaces(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNetworkInterfaces*         tds__GetNetworkInterfaces,
    // output parameters:
    _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNetworkInterfaces(
    struct soap *soap,
    // input parameters:
    _tds__GetNetworkInterfaces*         tds__GetNetworkInterfaces,
    // output parameters:
    _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNetworkInterfaces SOAP
//gsoap tds  service method-style:	GetNetworkInterfaces document
//gsoap tds  service method-encoding:	GetNetworkInterfaces literal
//gsoap tds  service method-input-action:	GetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfaces
//gsoap tds  service method-output-action:	GetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/GetNetworkInterfacesResponse
int __tds__GetNetworkInterfaces(
    _tds__GetNetworkInterfaces*         tds__GetNetworkInterfaces,	///< Input parameter
    _tds__GetNetworkInterfacesResponse &tds__GetNetworkInterfacesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNetworkInterfaces                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNetworkInterfaces" of service binding "DeviceBinding".
This operation sets the network interface configuration on a device. The device
shall support
				network configuration of supported network interfaces
through the SetNetworkInterfaces
				command.<br/>
				For interoperability with a client unaware of the
IEEE 802.11 extension a device shall retain
				its IEEE 802.11 configuration if the IEEE 802.11
configuration element isnt present in the
				request.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfacesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNetworkInterfaces(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNetworkInterfaces*         tds__SetNetworkInterfaces,
    // output parameters:
    _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNetworkInterfaces(
    struct soap *soap,
    // input parameters:
    _tds__SetNetworkInterfaces*         tds__SetNetworkInterfaces,
    // output parameters:
    _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNetworkInterfaces SOAP
//gsoap tds  service method-style:	SetNetworkInterfaces document
//gsoap tds  service method-encoding:	SetNetworkInterfaces literal
//gsoap tds  service method-input-action:	SetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfaces
//gsoap tds  service method-output-action:	SetNetworkInterfaces http://www.onvif.org/ver10/device/wsdl/SetNetworkInterfacesResponse
int __tds__SetNetworkInterfaces(
    _tds__SetNetworkInterfaces*         tds__SetNetworkInterfaces,	///< Input parameter
    _tds__SetNetworkInterfacesResponse &tds__SetNetworkInterfacesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNetworkProtocols                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNetworkProtocols" of service binding "DeviceBinding".
This operation gets defined network protocols from a device. The device shall support
the
				GetNetworkProtocols command returning configured
network protocols.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocolsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNetworkProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNetworkProtocols*          tds__GetNetworkProtocols,
    // output parameters:
    _tds__GetNetworkProtocolsResponse  &tds__GetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNetworkProtocols(
    struct soap *soap,
    // input parameters:
    _tds__GetNetworkProtocols*          tds__GetNetworkProtocols,
    // output parameters:
    _tds__GetNetworkProtocolsResponse  &tds__GetNetworkProtocolsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNetworkProtocols SOAP
//gsoap tds  service method-style:	GetNetworkProtocols document
//gsoap tds  service method-encoding:	GetNetworkProtocols literal
//gsoap tds  service method-input-action:	GetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocols
//gsoap tds  service method-output-action:	GetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/GetNetworkProtocolsResponse
int __tds__GetNetworkProtocols(
    _tds__GetNetworkProtocols*          tds__GetNetworkProtocols,	///< Input parameter
    _tds__GetNetworkProtocolsResponse  &tds__GetNetworkProtocolsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNetworkProtocols                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNetworkProtocols" of service binding "DeviceBinding".
This operation configures defined network protocols on a device. The device shall
support
				configuration of defined network protocols through
the SetNetworkProtocols command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocolsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNetworkProtocols(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNetworkProtocols*          tds__SetNetworkProtocols,
    // output parameters:
    _tds__SetNetworkProtocolsResponse  &tds__SetNetworkProtocolsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNetworkProtocols(
    struct soap *soap,
    // input parameters:
    _tds__SetNetworkProtocols*          tds__SetNetworkProtocols,
    // output parameters:
    _tds__SetNetworkProtocolsResponse  &tds__SetNetworkProtocolsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNetworkProtocols SOAP
//gsoap tds  service method-style:	SetNetworkProtocols document
//gsoap tds  service method-encoding:	SetNetworkProtocols literal
//gsoap tds  service method-input-action:	SetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocols
//gsoap tds  service method-output-action:	SetNetworkProtocols http://www.onvif.org/ver10/device/wsdl/SetNetworkProtocolsResponse
int __tds__SetNetworkProtocols(
    _tds__SetNetworkProtocols*          tds__SetNetworkProtocols,	///< Input parameter
    _tds__SetNetworkProtocolsResponse  &tds__SetNetworkProtocolsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetNetworkDefaultGateway                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetNetworkDefaultGateway" of service binding "DeviceBinding".
This operation gets the default gateway settings from a device. The device shall
support the
				GetNetworkDefaultGateway command returning configured
default gateway address(es).

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGatewayResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetNetworkDefaultGateway(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetNetworkDefaultGateway*     tds__GetNetworkDefaultGateway,
    // output parameters:
    _tds__GetNetworkDefaultGatewayResponse&tds__GetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetNetworkDefaultGateway(
    struct soap *soap,
    // input parameters:
    _tds__GetNetworkDefaultGateway*     tds__GetNetworkDefaultGateway,
    // output parameters:
    _tds__GetNetworkDefaultGatewayResponse&tds__GetNetworkDefaultGatewayResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetNetworkDefaultGateway SOAP
//gsoap tds  service method-style:	GetNetworkDefaultGateway document
//gsoap tds  service method-encoding:	GetNetworkDefaultGateway literal
//gsoap tds  service method-input-action:	GetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGateway
//gsoap tds  service method-output-action:	GetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/GetNetworkDefaultGatewayResponse
int __tds__GetNetworkDefaultGateway(
    _tds__GetNetworkDefaultGateway*     tds__GetNetworkDefaultGateway,	///< Input parameter
    _tds__GetNetworkDefaultGatewayResponse&tds__GetNetworkDefaultGatewayResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetNetworkDefaultGateway                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetNetworkDefaultGateway" of service binding "DeviceBinding".
This operation sets the default gateway settings on a device. The device shall support
				configuration of default gateway through the SetNetworkDefaultGateway
command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGatewayResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetNetworkDefaultGateway(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetNetworkDefaultGateway*     tds__SetNetworkDefaultGateway,
    // output parameters:
    _tds__SetNetworkDefaultGatewayResponse&tds__SetNetworkDefaultGatewayResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetNetworkDefaultGateway(
    struct soap *soap,
    // input parameters:
    _tds__SetNetworkDefaultGateway*     tds__SetNetworkDefaultGateway,
    // output parameters:
    _tds__SetNetworkDefaultGatewayResponse&tds__SetNetworkDefaultGatewayResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetNetworkDefaultGateway SOAP
//gsoap tds  service method-style:	SetNetworkDefaultGateway document
//gsoap tds  service method-encoding:	SetNetworkDefaultGateway literal
//gsoap tds  service method-input-action:	SetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGateway
//gsoap tds  service method-output-action:	SetNetworkDefaultGateway http://www.onvif.org/ver10/device/wsdl/SetNetworkDefaultGatewayResponse
int __tds__SetNetworkDefaultGateway(
    _tds__SetNetworkDefaultGateway*     tds__SetNetworkDefaultGateway,	///< Input parameter
    _tds__SetNetworkDefaultGatewayResponse&tds__SetNetworkDefaultGatewayResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetZeroConfiguration                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetZeroConfiguration" of service binding "DeviceBinding".
This operation gets the zero-configuration from a device. If the device supports
dynamic IP
				configuration according to [RFC3927], it shall support
the return of IPv4 zero configuration
				address and status through the GetZeroConfiguration
command.<br/>
			Devices supporting zero configuration on more than one interface
shall use the extension to list the additional interface settings.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetZeroConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetZeroConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetZeroConfiguration*         tds__GetZeroConfiguration,
    // output parameters:
    _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetZeroConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__GetZeroConfiguration*         tds__GetZeroConfiguration,
    // output parameters:
    _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetZeroConfiguration SOAP
//gsoap tds  service method-style:	GetZeroConfiguration document
//gsoap tds  service method-encoding:	GetZeroConfiguration literal
//gsoap tds  service method-input-action:	GetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/GetZeroConfiguration
//gsoap tds  service method-output-action:	GetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/GetZeroConfigurationResponse
int __tds__GetZeroConfiguration(
    _tds__GetZeroConfiguration*         tds__GetZeroConfiguration,	///< Input parameter
    _tds__GetZeroConfigurationResponse &tds__GetZeroConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetZeroConfiguration                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetZeroConfiguration" of service binding "DeviceBinding".
This operation sets the zero-configuration. Use GetCapalities to get if zero-zero-configuration
is supported or not.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetZeroConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetZeroConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetZeroConfiguration*         tds__SetZeroConfiguration,
    // output parameters:
    _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetZeroConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__SetZeroConfiguration*         tds__SetZeroConfiguration,
    // output parameters:
    _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetZeroConfiguration SOAP
//gsoap tds  service method-style:	SetZeroConfiguration document
//gsoap tds  service method-encoding:	SetZeroConfiguration literal
//gsoap tds  service method-input-action:	SetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/SetZeroConfiguration
//gsoap tds  service method-output-action:	SetZeroConfiguration http://www.onvif.org/ver10/device/wsdl/SetZeroConfigurationResponse
int __tds__SetZeroConfiguration(
    _tds__SetZeroConfiguration*         tds__SetZeroConfiguration,	///< Input parameter
    _tds__SetZeroConfigurationResponse &tds__SetZeroConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetIPAddressFilter" of service binding "DeviceBinding".
This operation gets the IP address filter settings from a device. If the device
supports device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support the GetIPAddressFilter command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetIPAddressFilter*           tds__GetIPAddressFilter,
    // output parameters:
    _tds__GetIPAddressFilterResponse   &tds__GetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__GetIPAddressFilter*           tds__GetIPAddressFilter,
    // output parameters:
    _tds__GetIPAddressFilterResponse   &tds__GetIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetIPAddressFilter SOAP
//gsoap tds  service method-style:	GetIPAddressFilter document
//gsoap tds  service method-encoding:	GetIPAddressFilter literal
//gsoap tds  service method-input-action:	GetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilter
//gsoap tds  service method-output-action:	GetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/GetIPAddressFilterResponse
int __tds__GetIPAddressFilter(
    _tds__GetIPAddressFilter*           tds__GetIPAddressFilter,	///< Input parameter
    _tds__GetIPAddressFilterResponse   &tds__GetIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetIPAddressFilter" of service binding "DeviceBinding".
This operation sets the IP address filter settings on a device. If the device supports
device
				access control based on IP filtering rules (denied
or accepted ranges of IP addresses), the
				device shall support configuration of IP filtering
rules through the SetIPAddressFilter
				command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetIPAddressFilter*           tds__SetIPAddressFilter,
    // output parameters:
    _tds__SetIPAddressFilterResponse   &tds__SetIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__SetIPAddressFilter*           tds__SetIPAddressFilter,
    // output parameters:
    _tds__SetIPAddressFilterResponse   &tds__SetIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetIPAddressFilter SOAP
//gsoap tds  service method-style:	SetIPAddressFilter document
//gsoap tds  service method-encoding:	SetIPAddressFilter literal
//gsoap tds  service method-input-action:	SetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilter
//gsoap tds  service method-output-action:	SetIPAddressFilter http://www.onvif.org/ver10/device/wsdl/SetIPAddressFilterResponse
int __tds__SetIPAddressFilter(
    _tds__SetIPAddressFilter*           tds__SetIPAddressFilter,	///< Input parameter
    _tds__SetIPAddressFilterResponse   &tds__SetIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__AddIPAddressFilter                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__AddIPAddressFilter" of service binding "DeviceBinding".
This operation adds an IP filter address to a device. If the device supports device
access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support adding of IP filtering addresses through
the AddIPAddressFilter command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__AddIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__AddIPAddressFilter*           tds__AddIPAddressFilter,
    // output parameters:
    _tds__AddIPAddressFilterResponse   &tds__AddIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__AddIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__AddIPAddressFilter*           tds__AddIPAddressFilter,
    // output parameters:
    _tds__AddIPAddressFilterResponse   &tds__AddIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	AddIPAddressFilter SOAP
//gsoap tds  service method-style:	AddIPAddressFilter document
//gsoap tds  service method-encoding:	AddIPAddressFilter literal
//gsoap tds  service method-input-action:	AddIPAddressFilter http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilter
//gsoap tds  service method-output-action:	AddIPAddressFilter http://www.onvif.org/ver10/device/wsdl/AddIPAddressFilterResponse
int __tds__AddIPAddressFilter(
    _tds__AddIPAddressFilter*           tds__AddIPAddressFilter,	///< Input parameter
    _tds__AddIPAddressFilterResponse   &tds__AddIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__RemoveIPAddressFilter                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__RemoveIPAddressFilter" of service binding "DeviceBinding".
This operation deletes an IP filter address from a device. If the device supports
device access
				control based on IP filtering rules (denied or accepted
ranges of IP addresses), the device
				shall support deletion of IP filtering addresses
through the RemoveIPAddressFilter command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__RemoveIPAddressFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__RemoveIPAddressFilter*        tds__RemoveIPAddressFilter,
    // output parameters:
    _tds__RemoveIPAddressFilterResponse&tds__RemoveIPAddressFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__RemoveIPAddressFilter(
    struct soap *soap,
    // input parameters:
    _tds__RemoveIPAddressFilter*        tds__RemoveIPAddressFilter,
    // output parameters:
    _tds__RemoveIPAddressFilterResponse&tds__RemoveIPAddressFilterResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	RemoveIPAddressFilter SOAP
//gsoap tds  service method-style:	RemoveIPAddressFilter document
//gsoap tds  service method-encoding:	RemoveIPAddressFilter literal
//gsoap tds  service method-input-action:	RemoveIPAddressFilter http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilter
//gsoap tds  service method-output-action:	RemoveIPAddressFilter http://www.onvif.org/ver10/device/wsdl/RemoveIPAddressFilterResponse
int __tds__RemoveIPAddressFilter(
    _tds__RemoveIPAddressFilter*        tds__RemoveIPAddressFilter,	///< Input parameter
    _tds__RemoveIPAddressFilterResponse&tds__RemoveIPAddressFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetAccessPolicy                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetAccessPolicy" of service binding "DeviceBinding".
Access to different services and sub-sets of services should be subject to access
control. The
				WS-Security framework gives the prerequisite for
end-point authentication. Authorization
				decisions can then be taken using an access security
policy. This standard does not mandate
				any particular policy description format or security
policy but this is up to the device
				manufacturer or system provider to choose policy
and policy description format of choice.
				However, an access policy (in arbitrary format)
can be requested using this command. If the
				device supports access policy settings based on
WS-Security authentication, then the device
				shall support this command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetAccessPolicyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetAccessPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetAccessPolicy*              tds__GetAccessPolicy,
    // output parameters:
    _tds__GetAccessPolicyResponse      &tds__GetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetAccessPolicy(
    struct soap *soap,
    // input parameters:
    _tds__GetAccessPolicy*              tds__GetAccessPolicy,
    // output parameters:
    _tds__GetAccessPolicyResponse      &tds__GetAccessPolicyResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetAccessPolicy SOAP
//gsoap tds  service method-style:	GetAccessPolicy document
//gsoap tds  service method-encoding:	GetAccessPolicy literal
//gsoap tds  service method-input-action:	GetAccessPolicy http://www.onvif.org/ver10/device/wsdl/GetAccessPolicy
//gsoap tds  service method-output-action:	GetAccessPolicy http://www.onvif.org/ver10/device/wsdl/GetAccessPolicyResponse
int __tds__GetAccessPolicy(
    _tds__GetAccessPolicy*              tds__GetAccessPolicy,	///< Input parameter
    _tds__GetAccessPolicyResponse      &tds__GetAccessPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetAccessPolicy                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetAccessPolicy" of service binding "DeviceBinding".
This command sets the device access security policy (for more details on the access
security
				policy see the Get command). If the device supports
access policy settings
				based on WS-Security authentication, then the device
shall support this command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetAccessPolicyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetAccessPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetAccessPolicy*              tds__SetAccessPolicy,
    // output parameters:
    _tds__SetAccessPolicyResponse      &tds__SetAccessPolicyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetAccessPolicy(
    struct soap *soap,
    // input parameters:
    _tds__SetAccessPolicy*              tds__SetAccessPolicy,
    // output parameters:
    _tds__SetAccessPolicyResponse      &tds__SetAccessPolicyResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetAccessPolicy SOAP
//gsoap tds  service method-style:	SetAccessPolicy document
//gsoap tds  service method-encoding:	SetAccessPolicy literal
//gsoap tds  service method-input-action:	SetAccessPolicy http://www.onvif.org/ver10/device/wsdl/SetAccessPolicy
//gsoap tds  service method-output-action:	SetAccessPolicy http://www.onvif.org/ver10/device/wsdl/SetAccessPolicyResponse
int __tds__SetAccessPolicy(
    _tds__SetAccessPolicy*              tds__SetAccessPolicy,	///< Input parameter
    _tds__SetAccessPolicyResponse      &tds__SetAccessPolicyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateCertificate                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateCertificate" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/CreateCertificate"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateCertificate"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateCertificateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateCertificate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateCertificate*            tds__CreateCertificate,
    // output parameters:
    _tds__CreateCertificateResponse    &tds__CreateCertificateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateCertificate(
    struct soap *soap,
    // input parameters:
    _tds__CreateCertificate*            tds__CreateCertificate,
    // output parameters:
    _tds__CreateCertificateResponse    &tds__CreateCertificateResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateCertificate SOAP
//gsoap tds  service method-style:	CreateCertificate document
//gsoap tds  service method-encoding:	CreateCertificate literal
//gsoap tds  service method-input-action:	CreateCertificate http://www.onvif.org/ver10/device/wsdl/CreateCertificate
//gsoap tds  service method-output-action:	CreateCertificate http://www.onvif.org/ver10/device/wsdl/CreateCertificateResponse
int __tds__CreateCertificate(
    _tds__CreateCertificate*            tds__CreateCertificate,	///< Input parameter
    _tds__CreateCertificateResponse    &tds__CreateCertificateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCertificates                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCertificates" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetCertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCertificates*              tds__GetCertificates,
    // output parameters:
    _tds__GetCertificatesResponse      &tds__GetCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCertificates(
    struct soap *soap,
    // input parameters:
    _tds__GetCertificates*              tds__GetCertificates,
    // output parameters:
    _tds__GetCertificatesResponse      &tds__GetCertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCertificates SOAP
//gsoap tds  service method-style:	GetCertificates document
//gsoap tds  service method-encoding:	GetCertificates literal
//gsoap tds  service method-input-action:	GetCertificates http://www.onvif.org/ver10/device/wsdl/GetCertificates
//gsoap tds  service method-output-action:	GetCertificates http://www.onvif.org/ver10/device/wsdl/GetCertificatesResponse
int __tds__GetCertificates(
    _tds__GetCertificates*              tds__GetCertificates,	///< Input parameter
    _tds__GetCertificatesResponse      &tds__GetCertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCertificatesStatus                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCertificatesStatus" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCertificatesStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCertificatesStatus*        tds__GetCertificatesStatus,
    // output parameters:
    _tds__GetCertificatesStatusResponse&tds__GetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCertificatesStatus(
    struct soap *soap,
    // input parameters:
    _tds__GetCertificatesStatus*        tds__GetCertificatesStatus,
    // output parameters:
    _tds__GetCertificatesStatusResponse&tds__GetCertificatesStatusResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCertificatesStatus SOAP
//gsoap tds  service method-style:	GetCertificatesStatus document
//gsoap tds  service method-encoding:	GetCertificatesStatus literal
//gsoap tds  service method-input-action:	GetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatus
//gsoap tds  service method-output-action:	GetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/GetCertificatesStatusResponse
int __tds__GetCertificatesStatus(
    _tds__GetCertificatesStatus*        tds__GetCertificatesStatus,	///< Input parameter
    _tds__GetCertificatesStatusResponse&tds__GetCertificatesStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetCertificatesStatus                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetCertificatesStatus" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetCertificatesStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetCertificatesStatus*        tds__SetCertificatesStatus,
    // output parameters:
    _tds__SetCertificatesStatusResponse&tds__SetCertificatesStatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetCertificatesStatus(
    struct soap *soap,
    // input parameters:
    _tds__SetCertificatesStatus*        tds__SetCertificatesStatus,
    // output parameters:
    _tds__SetCertificatesStatusResponse&tds__SetCertificatesStatusResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetCertificatesStatus SOAP
//gsoap tds  service method-style:	SetCertificatesStatus document
//gsoap tds  service method-encoding:	SetCertificatesStatus literal
//gsoap tds  service method-input-action:	SetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatus
//gsoap tds  service method-output-action:	SetCertificatesStatus http://www.onvif.org/ver10/device/wsdl/SetCertificatesStatusResponse
int __tds__SetCertificatesStatus(
    _tds__SetCertificatesStatus*        tds__SetCertificatesStatus,	///< Input parameter
    _tds__SetCertificatesStatusResponse&tds__SetCertificatesStatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteCertificates                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteCertificates" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteCertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteCertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteCertificates*           tds__DeleteCertificates,
    // output parameters:
    _tds__DeleteCertificatesResponse   &tds__DeleteCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteCertificates(
    struct soap *soap,
    // input parameters:
    _tds__DeleteCertificates*           tds__DeleteCertificates,
    // output parameters:
    _tds__DeleteCertificatesResponse   &tds__DeleteCertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteCertificates SOAP
//gsoap tds  service method-style:	DeleteCertificates document
//gsoap tds  service method-encoding:	DeleteCertificates literal
//gsoap tds  service method-input-action:	DeleteCertificates http://www.onvif.org/ver10/device/wsdl/DeleteCertificates
//gsoap tds  service method-output-action:	DeleteCertificates http://www.onvif.org/ver10/device/wsdl/DeleteCertificatesResponse
int __tds__DeleteCertificates(
    _tds__DeleteCertificates*           tds__DeleteCertificates,	///< Input parameter
    _tds__DeleteCertificatesResponse   &tds__DeleteCertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetPkcs10Request                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetPkcs10Request" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetPkcs10RequestResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetPkcs10Request(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetPkcs10Request*             tds__GetPkcs10Request,
    // output parameters:
    _tds__GetPkcs10RequestResponse     &tds__GetPkcs10RequestResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetPkcs10Request(
    struct soap *soap,
    // input parameters:
    _tds__GetPkcs10Request*             tds__GetPkcs10Request,
    // output parameters:
    _tds__GetPkcs10RequestResponse     &tds__GetPkcs10RequestResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetPkcs10Request SOAP
//gsoap tds  service method-style:	GetPkcs10Request document
//gsoap tds  service method-encoding:	GetPkcs10Request literal
//gsoap tds  service method-input-action:	GetPkcs10Request http://www.onvif.org/ver10/device/wsdl/GetPkcs10Request
//gsoap tds  service method-output-action:	GetPkcs10Request http://www.onvif.org/ver10/device/wsdl/GetPkcs10RequestResponse
int __tds__GetPkcs10Request(
    _tds__GetPkcs10Request*             tds__GetPkcs10Request,	///< Input parameter
    _tds__GetPkcs10RequestResponse     &tds__GetPkcs10RequestResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__LoadCertificates                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__LoadCertificates" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__LoadCertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__LoadCertificates*             tds__LoadCertificates,
    // output parameters:
    _tds__LoadCertificatesResponse     &tds__LoadCertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__LoadCertificates(
    struct soap *soap,
    // input parameters:
    _tds__LoadCertificates*             tds__LoadCertificates,
    // output parameters:
    _tds__LoadCertificatesResponse     &tds__LoadCertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	LoadCertificates SOAP
//gsoap tds  service method-style:	LoadCertificates document
//gsoap tds  service method-encoding:	LoadCertificates literal
//gsoap tds  service method-input-action:	LoadCertificates http://www.onvif.org/ver10/device/wsdl/LoadCertificates
//gsoap tds  service method-output-action:	LoadCertificates http://www.onvif.org/ver10/device/wsdl/LoadCertificatesResponse
int __tds__LoadCertificates(
    _tds__LoadCertificates*             tds__LoadCertificates,	///< Input parameter
    _tds__LoadCertificatesResponse     &tds__LoadCertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetClientCertificateMode                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetClientCertificateMode" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetClientCertificateModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetClientCertificateMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetClientCertificateMode*     tds__GetClientCertificateMode,
    // output parameters:
    _tds__GetClientCertificateModeResponse&tds__GetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetClientCertificateMode(
    struct soap *soap,
    // input parameters:
    _tds__GetClientCertificateMode*     tds__GetClientCertificateMode,
    // output parameters:
    _tds__GetClientCertificateModeResponse&tds__GetClientCertificateModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetClientCertificateMode SOAP
//gsoap tds  service method-style:	GetClientCertificateMode document
//gsoap tds  service method-encoding:	GetClientCertificateMode literal
//gsoap tds  service method-input-action:	GetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/GetClientCertificateMode
//gsoap tds  service method-output-action:	GetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/GetClientCertificateModeResponse
int __tds__GetClientCertificateMode(
    _tds__GetClientCertificateMode*     tds__GetClientCertificateMode,	///< Input parameter
    _tds__GetClientCertificateModeResponse&tds__GetClientCertificateModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetClientCertificateMode                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetClientCertificateMode" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetClientCertificateModeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetClientCertificateMode(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetClientCertificateMode*     tds__SetClientCertificateMode,
    // output parameters:
    _tds__SetClientCertificateModeResponse&tds__SetClientCertificateModeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetClientCertificateMode(
    struct soap *soap,
    // input parameters:
    _tds__SetClientCertificateMode*     tds__SetClientCertificateMode,
    // output parameters:
    _tds__SetClientCertificateModeResponse&tds__SetClientCertificateModeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetClientCertificateMode SOAP
//gsoap tds  service method-style:	SetClientCertificateMode document
//gsoap tds  service method-encoding:	SetClientCertificateMode literal
//gsoap tds  service method-input-action:	SetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/SetClientCertificateMode
//gsoap tds  service method-output-action:	SetClientCertificateMode http://www.onvif.org/ver10/device/wsdl/SetClientCertificateModeResponse
int __tds__SetClientCertificateMode(
    _tds__SetClientCertificateMode*     tds__SetClientCertificateMode,	///< Input parameter
    _tds__SetClientCertificateModeResponse&tds__SetClientCertificateModeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetRelayOutputs                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetRelayOutputs" of service binding "DeviceBinding".
This operation gets a list of all available relay outputs and their settings.<br/>
				This method has been depricated with version 2.0.
Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetRelayOutputsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetRelayOutputs(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetRelayOutputs*              tds__GetRelayOutputs,
    // output parameters:
    _tds__GetRelayOutputsResponse      &tds__GetRelayOutputsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetRelayOutputs(
    struct soap *soap,
    // input parameters:
    _tds__GetRelayOutputs*              tds__GetRelayOutputs,
    // output parameters:
    _tds__GetRelayOutputsResponse      &tds__GetRelayOutputsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetRelayOutputs SOAP
//gsoap tds  service method-style:	GetRelayOutputs document
//gsoap tds  service method-encoding:	GetRelayOutputs literal
//gsoap tds  service method-input-action:	GetRelayOutputs http://www.onvif.org/ver10/device/wsdl/GetRelayOutputs
//gsoap tds  service method-output-action:	GetRelayOutputs http://www.onvif.org/ver10/device/wsdl/GetRelayOutputsResponse
int __tds__GetRelayOutputs(
    _tds__GetRelayOutputs*              tds__GetRelayOutputs,	///< Input parameter
    _tds__GetRelayOutputsResponse      &tds__GetRelayOutputsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRelayOutputSettings                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRelayOutputSettings" of service binding "DeviceBinding".
This operation sets the settings of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettingsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRelayOutputSettings(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRelayOutputSettings*       tds__SetRelayOutputSettings,
    // output parameters:
    _tds__SetRelayOutputSettingsResponse&tds__SetRelayOutputSettingsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRelayOutputSettings(
    struct soap *soap,
    // input parameters:
    _tds__SetRelayOutputSettings*       tds__SetRelayOutputSettings,
    // output parameters:
    _tds__SetRelayOutputSettingsResponse&tds__SetRelayOutputSettingsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRelayOutputSettings SOAP
//gsoap tds  service method-style:	SetRelayOutputSettings document
//gsoap tds  service method-encoding:	SetRelayOutputSettings literal
//gsoap tds  service method-input-action:	SetRelayOutputSettings http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettings
//gsoap tds  service method-output-action:	SetRelayOutputSettings http://www.onvif.org/ver10/device/wsdl/SetRelayOutputSettingsResponse
int __tds__SetRelayOutputSettings(
    _tds__SetRelayOutputSettings*       tds__SetRelayOutputSettings,	///< Input parameter
    _tds__SetRelayOutputSettingsResponse&tds__SetRelayOutputSettingsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetRelayOutputState                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetRelayOutputState" of service binding "DeviceBinding".
This operation sets the state of a relay output.
				<br/>This method has been depricated with version
2.0. Refer to the DeviceIO service.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetRelayOutputStateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetRelayOutputState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetRelayOutputState*          tds__SetRelayOutputState,
    // output parameters:
    _tds__SetRelayOutputStateResponse  &tds__SetRelayOutputStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetRelayOutputState(
    struct soap *soap,
    // input parameters:
    _tds__SetRelayOutputState*          tds__SetRelayOutputState,
    // output parameters:
    _tds__SetRelayOutputStateResponse  &tds__SetRelayOutputStateResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetRelayOutputState SOAP
//gsoap tds  service method-style:	SetRelayOutputState document
//gsoap tds  service method-encoding:	SetRelayOutputState literal
//gsoap tds  service method-input-action:	SetRelayOutputState http://www.onvif.org/ver10/device/wsdl/SetRelayOutputState
//gsoap tds  service method-output-action:	SetRelayOutputState http://www.onvif.org/ver10/device/wsdl/SetRelayOutputStateResponse
int __tds__SetRelayOutputState(
    _tds__SetRelayOutputState*          tds__SetRelayOutputState,	///< Input parameter
    _tds__SetRelayOutputStateResponse  &tds__SetRelayOutputStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SendAuxiliaryCommand                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SendAuxiliaryCommand" of service binding "DeviceBinding".
Manage auxiliary commands supported by a device, such as controlling an Infrared
(IR) lamp, 
				a heater or a wiper or a thermometer that is connected
to the device.<br/>
				The supported commands can be retrieved via the
AuxiliaryCommands capability.<br/>
				Although the name of the auxiliary commands can
be freely defined, commands starting with the prefix tt: are 
				reserved to define frequently used commands and
these reserved commands shall all share the "tt:command|parameter" syntax.
				<ul>
					<li>tt:Wiper|On  Request to start the
wiper.</li>
					<li>tt:Wiper|Off  Request to stop the
wiper.</li>
					<li>tt:Washer|On  Request to start the
washer.</li>
					<li>tt:Washer|Off  Request to stop the
washer.</li>
					<li>tt:WashingProcedure|On  Request to
start the washing procedure.</li>
					<li>tt: WashingProcedure |Off  Request
to stop the washing procedure.</li>
					<li>tt:IRLamp|On  Request to turn ON
an IR illuminator attached to the unit.</li>
					<li>tt:IRLamp|Off  Request to turn OFF
an IR illuminator attached to the unit.</li>
					<li>tt:IRLamp|Auto  Request to configure
an IR illuminator attached to the unit so that it automatically turns ON and OFF.</li>
				</ul>
				A device that indicates auxiliary service capability
shall support this command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommandResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SendAuxiliaryCommand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SendAuxiliaryCommand*         tds__SendAuxiliaryCommand,
    // output parameters:
    _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SendAuxiliaryCommand(
    struct soap *soap,
    // input parameters:
    _tds__SendAuxiliaryCommand*         tds__SendAuxiliaryCommand,
    // output parameters:
    _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SendAuxiliaryCommand SOAP
//gsoap tds  service method-style:	SendAuxiliaryCommand document
//gsoap tds  service method-encoding:	SendAuxiliaryCommand literal
//gsoap tds  service method-input-action:	SendAuxiliaryCommand http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommand
//gsoap tds  service method-output-action:	SendAuxiliaryCommand http://www.onvif.org/ver10/device/wsdl/SendAuxiliaryCommandResponse
int __tds__SendAuxiliaryCommand(
    _tds__SendAuxiliaryCommand*         tds__SendAuxiliaryCommand,	///< Input parameter
    _tds__SendAuxiliaryCommandResponse &tds__SendAuxiliaryCommandResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCACertificates                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCACertificates" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetCACertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCACertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCACertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCACertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCACertificates*            tds__GetCACertificates,
    // output parameters:
    _tds__GetCACertificatesResponse    &tds__GetCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCACertificates(
    struct soap *soap,
    // input parameters:
    _tds__GetCACertificates*            tds__GetCACertificates,
    // output parameters:
    _tds__GetCACertificatesResponse    &tds__GetCACertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCACertificates SOAP
//gsoap tds  service method-style:	GetCACertificates document
//gsoap tds  service method-encoding:	GetCACertificates literal
//gsoap tds  service method-input-action:	GetCACertificates http://www.onvif.org/ver10/device/wsdl/GetCACertificates
//gsoap tds  service method-output-action:	GetCACertificates http://www.onvif.org/ver10/device/wsdl/GetCACertificatesResponse
int __tds__GetCACertificates(
    _tds__GetCACertificates*            tds__GetCACertificates,	///< Input parameter
    _tds__GetCACertificatesResponse    &tds__GetCACertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__LoadCertificateWithPrivateKey                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__LoadCertificateWithPrivateKey" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKeyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__LoadCertificateWithPrivateKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__LoadCertificateWithPrivateKey* tds__LoadCertificateWithPrivateKey,
    // output parameters:
    _tds__LoadCertificateWithPrivateKeyResponse&tds__LoadCertificateWithPrivateKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__LoadCertificateWithPrivateKey(
    struct soap *soap,
    // input parameters:
    _tds__LoadCertificateWithPrivateKey* tds__LoadCertificateWithPrivateKey,
    // output parameters:
    _tds__LoadCertificateWithPrivateKeyResponse&tds__LoadCertificateWithPrivateKeyResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	LoadCertificateWithPrivateKey SOAP
//gsoap tds  service method-style:	LoadCertificateWithPrivateKey document
//gsoap tds  service method-encoding:	LoadCertificateWithPrivateKey literal
//gsoap tds  service method-input-action:	LoadCertificateWithPrivateKey http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKey
//gsoap tds  service method-output-action:	LoadCertificateWithPrivateKey http://www.onvif.org/ver10/device/wsdl/LoadCertificateWithPrivateKeyResponse
int __tds__LoadCertificateWithPrivateKey(
    _tds__LoadCertificateWithPrivateKey* tds__LoadCertificateWithPrivateKey,	///< Input parameter
    _tds__LoadCertificateWithPrivateKeyResponse&tds__LoadCertificateWithPrivateKeyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetCertificateInformation                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetCertificateInformation" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetCertificateInformationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetCertificateInformation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetCertificateInformation*    tds__GetCertificateInformation,
    // output parameters:
    _tds__GetCertificateInformationResponse&tds__GetCertificateInformationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetCertificateInformation(
    struct soap *soap,
    // input parameters:
    _tds__GetCertificateInformation*    tds__GetCertificateInformation,
    // output parameters:
    _tds__GetCertificateInformationResponse&tds__GetCertificateInformationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetCertificateInformation SOAP
//gsoap tds  service method-style:	GetCertificateInformation document
//gsoap tds  service method-encoding:	GetCertificateInformation literal
//gsoap tds  service method-input-action:	GetCertificateInformation http://www.onvif.org/ver10/device/wsdl/GetCertificateInformation
//gsoap tds  service method-output-action:	GetCertificateInformation http://www.onvif.org/ver10/device/wsdl/GetCertificateInformationResponse
int __tds__GetCertificateInformation(
    _tds__GetCertificateInformation*    tds__GetCertificateInformation,	///< Input parameter
    _tds__GetCertificateInformationResponse&tds__GetCertificateInformationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__LoadCACertificates                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__LoadCACertificates" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/LoadCACertificates"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/LoadCACertificatesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__LoadCACertificates(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__LoadCACertificates*           tds__LoadCACertificates,
    // output parameters:
    _tds__LoadCACertificatesResponse   &tds__LoadCACertificatesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__LoadCACertificates(
    struct soap *soap,
    // input parameters:
    _tds__LoadCACertificates*           tds__LoadCACertificates,
    // output parameters:
    _tds__LoadCACertificatesResponse   &tds__LoadCACertificatesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	LoadCACertificates SOAP
//gsoap tds  service method-style:	LoadCACertificates document
//gsoap tds  service method-encoding:	LoadCACertificates literal
//gsoap tds  service method-input-action:	LoadCACertificates http://www.onvif.org/ver10/device/wsdl/LoadCACertificates
//gsoap tds  service method-output-action:	LoadCACertificates http://www.onvif.org/ver10/device/wsdl/LoadCACertificatesResponse
int __tds__LoadCACertificates(
    _tds__LoadCACertificates*           tds__LoadCACertificates,	///< Input parameter
    _tds__LoadCACertificatesResponse   &tds__LoadCACertificatesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateDot1XConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateDot1XConfiguration" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateDot1XConfiguration*     tds__CreateDot1XConfiguration,
    // output parameters:
    _tds__CreateDot1XConfigurationResponse&tds__CreateDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__CreateDot1XConfiguration*     tds__CreateDot1XConfiguration,
    // output parameters:
    _tds__CreateDot1XConfigurationResponse&tds__CreateDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateDot1XConfiguration SOAP
//gsoap tds  service method-style:	CreateDot1XConfiguration document
//gsoap tds  service method-encoding:	CreateDot1XConfiguration literal
//gsoap tds  service method-input-action:	CreateDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfiguration
//gsoap tds  service method-output-action:	CreateDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/CreateDot1XConfigurationResponse
int __tds__CreateDot1XConfiguration(
    _tds__CreateDot1XConfiguration*     tds__CreateDot1XConfiguration,	///< Input parameter
    _tds__CreateDot1XConfigurationResponse&tds__CreateDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetDot1XConfiguration                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetDot1XConfiguration" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetDot1XConfiguration*        tds__SetDot1XConfiguration,
    // output parameters:
    _tds__SetDot1XConfigurationResponse&tds__SetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__SetDot1XConfiguration*        tds__SetDot1XConfiguration,
    // output parameters:
    _tds__SetDot1XConfigurationResponse&tds__SetDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetDot1XConfiguration SOAP
//gsoap tds  service method-style:	SetDot1XConfiguration document
//gsoap tds  service method-encoding:	SetDot1XConfiguration literal
//gsoap tds  service method-input-action:	SetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/SetDot1XConfiguration
//gsoap tds  service method-output-action:	SetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/SetDot1XConfigurationResponse
int __tds__SetDot1XConfiguration(
    _tds__SetDot1XConfiguration*        tds__SetDot1XConfiguration,	///< Input parameter
    _tds__SetDot1XConfigurationResponse&tds__SetDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot1XConfiguration                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot1XConfiguration" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot1XConfiguration*        tds__GetDot1XConfiguration,
    // output parameters:
    _tds__GetDot1XConfigurationResponse&tds__GetDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__GetDot1XConfiguration*        tds__GetDot1XConfiguration,
    // output parameters:
    _tds__GetDot1XConfigurationResponse&tds__GetDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot1XConfiguration SOAP
//gsoap tds  service method-style:	GetDot1XConfiguration document
//gsoap tds  service method-encoding:	GetDot1XConfiguration literal
//gsoap tds  service method-input-action:	GetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/GetDot1XConfiguration
//gsoap tds  service method-output-action:	GetDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationResponse
int __tds__GetDot1XConfiguration(
    _tds__GetDot1XConfiguration*        tds__GetDot1XConfiguration,	///< Input parameter
    _tds__GetDot1XConfigurationResponse&tds__GetDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot1XConfigurations                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot1XConfigurations" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot1XConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot1XConfigurations*       tds__GetDot1XConfigurations,
    // output parameters:
    _tds__GetDot1XConfigurationsResponse&tds__GetDot1XConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot1XConfigurations(
    struct soap *soap,
    // input parameters:
    _tds__GetDot1XConfigurations*       tds__GetDot1XConfigurations,
    // output parameters:
    _tds__GetDot1XConfigurationsResponse&tds__GetDot1XConfigurationsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot1XConfigurations SOAP
//gsoap tds  service method-style:	GetDot1XConfigurations document
//gsoap tds  service method-encoding:	GetDot1XConfigurations literal
//gsoap tds  service method-input-action:	GetDot1XConfigurations http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurations
//gsoap tds  service method-output-action:	GetDot1XConfigurations http://www.onvif.org/ver10/device/wsdl/GetDot1XConfigurationsResponse
int __tds__GetDot1XConfigurations(
    _tds__GetDot1XConfigurations*       tds__GetDot1XConfigurations,	///< Input parameter
    _tds__GetDot1XConfigurationsResponse&tds__GetDot1XConfigurationsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteDot1XConfiguration                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteDot1XConfiguration" of service binding "DeviceBinding".

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteDot1XConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteDot1XConfiguration*     tds__DeleteDot1XConfiguration,
    // output parameters:
    _tds__DeleteDot1XConfigurationResponse&tds__DeleteDot1XConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteDot1XConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__DeleteDot1XConfiguration*     tds__DeleteDot1XConfiguration,
    // output parameters:
    _tds__DeleteDot1XConfigurationResponse&tds__DeleteDot1XConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteDot1XConfiguration SOAP
//gsoap tds  service method-style:	DeleteDot1XConfiguration document
//gsoap tds  service method-encoding:	DeleteDot1XConfiguration literal
//gsoap tds  service method-input-action:	DeleteDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfiguration
//gsoap tds  service method-output-action:	DeleteDot1XConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteDot1XConfigurationResponse
int __tds__DeleteDot1XConfiguration(
    _tds__DeleteDot1XConfiguration*     tds__DeleteDot1XConfiguration,	///< Input parameter
    _tds__DeleteDot1XConfigurationResponse&tds__DeleteDot1XConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot11Capabilities                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot11Capabilities" of service binding "DeviceBinding".
This operation returns the IEEE802.11 capabilities. The device shall support
				this operation.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot11CapabilitiesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot11Capabilities(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot11Capabilities*         tds__GetDot11Capabilities,
    // output parameters:
    _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot11Capabilities(
    struct soap *soap,
    // input parameters:
    _tds__GetDot11Capabilities*         tds__GetDot11Capabilities,
    // output parameters:
    _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot11Capabilities SOAP
//gsoap tds  service method-style:	GetDot11Capabilities document
//gsoap tds  service method-encoding:	GetDot11Capabilities literal
//gsoap tds  service method-input-action:	GetDot11Capabilities http://www.onvif.org/ver10/device/wsdl/GetDot11Capabilities
//gsoap tds  service method-output-action:	GetDot11Capabilities http://www.onvif.org/ver10/device/wsdl/GetDot11CapabilitiesResponse
int __tds__GetDot11Capabilities(
    _tds__GetDot11Capabilities*         tds__GetDot11Capabilities,	///< Input parameter
    _tds__GetDot11CapabilitiesResponse &tds__GetDot11CapabilitiesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetDot11Status                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetDot11Status" of service binding "DeviceBinding".
This operation returns the status of a wireless network interface. The device shall
support this
				command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetDot11Status"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetDot11Status"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetDot11StatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetDot11Status(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetDot11Status*               tds__GetDot11Status,
    // output parameters:
    _tds__GetDot11StatusResponse       &tds__GetDot11StatusResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetDot11Status(
    struct soap *soap,
    // input parameters:
    _tds__GetDot11Status*               tds__GetDot11Status,
    // output parameters:
    _tds__GetDot11StatusResponse       &tds__GetDot11StatusResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetDot11Status SOAP
//gsoap tds  service method-style:	GetDot11Status document
//gsoap tds  service method-encoding:	GetDot11Status literal
//gsoap tds  service method-input-action:	GetDot11Status http://www.onvif.org/ver10/device/wsdl/GetDot11Status
//gsoap tds  service method-output-action:	GetDot11Status http://www.onvif.org/ver10/device/wsdl/GetDot11StatusResponse
int __tds__GetDot11Status(
    _tds__GetDot11Status*               tds__GetDot11Status,	///< Input parameter
    _tds__GetDot11StatusResponse       &tds__GetDot11StatusResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__ScanAvailableDot11Networks                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__ScanAvailableDot11Networks" of service binding "DeviceBinding".
This operation returns a lists of the wireless networks in range of the device.
A device should
				support this operation.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11NetworksResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__ScanAvailableDot11Networks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__ScanAvailableDot11Networks*   tds__ScanAvailableDot11Networks,
    // output parameters:
    _tds__ScanAvailableDot11NetworksResponse&tds__ScanAvailableDot11NetworksResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__ScanAvailableDot11Networks(
    struct soap *soap,
    // input parameters:
    _tds__ScanAvailableDot11Networks*   tds__ScanAvailableDot11Networks,
    // output parameters:
    _tds__ScanAvailableDot11NetworksResponse&tds__ScanAvailableDot11NetworksResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	ScanAvailableDot11Networks SOAP
//gsoap tds  service method-style:	ScanAvailableDot11Networks document
//gsoap tds  service method-encoding:	ScanAvailableDot11Networks literal
//gsoap tds  service method-input-action:	ScanAvailableDot11Networks http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11Networks
//gsoap tds  service method-output-action:	ScanAvailableDot11Networks http://www.onvif.org/ver10/device/wsdl/ScanAvailableDot11NetworksResponse
int __tds__ScanAvailableDot11Networks(
    _tds__ScanAvailableDot11Networks*   tds__ScanAvailableDot11Networks,	///< Input parameter
    _tds__ScanAvailableDot11NetworksResponse&tds__ScanAvailableDot11NetworksResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetSystemUris                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetSystemUris" of service binding "DeviceBinding".
This operation is used to retrieve URIs from which system information may be downloaded
				using HTTP. URIs may be returned for the following
system information:<br/>
				System Logs. Multiple system logs may be returned,
of different types. The exact format of
				the system logs is outside the scope of this specification.<br/>
				Support Information. This consists of arbitrary
device diagnostics information from a device.
				The exact format of the diagnostic information is
outside the scope of this specification.<br/>
				System Backup. The received file is a backup file
that can be used to restore the current
				device configuration at a later date. The exact
format of the backup configuration file is
				outside the scope of this specification.<br/>
				If the device allows retrieval of system logs, support
information or system backup data, it
				should make them available via HTTP GET. If it does,
it shall support the GetSystemUris
				command.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetSystemUris"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetSystemUris"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetSystemUrisResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetSystemUris(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetSystemUris*                tds__GetSystemUris,
    // output parameters:
    _tds__GetSystemUrisResponse        &tds__GetSystemUrisResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetSystemUris(
    struct soap *soap,
    // input parameters:
    _tds__GetSystemUris*                tds__GetSystemUris,
    // output parameters:
    _tds__GetSystemUrisResponse        &tds__GetSystemUrisResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetSystemUris SOAP
//gsoap tds  service method-style:	GetSystemUris document
//gsoap tds  service method-encoding:	GetSystemUris literal
//gsoap tds  service method-input-action:	GetSystemUris http://www.onvif.org/ver10/device/wsdl/GetSystemUris
//gsoap tds  service method-output-action:	GetSystemUris http://www.onvif.org/ver10/device/wsdl/GetSystemUrisResponse
int __tds__GetSystemUris(
    _tds__GetSystemUris*                tds__GetSystemUris,	///< Input parameter
    _tds__GetSystemUrisResponse        &tds__GetSystemUrisResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__StartFirmwareUpgrade                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__StartFirmwareUpgrade" of service binding "DeviceBinding".
This operation initiates a firmware upgrade using the HTTP POST mechanism. The response
				to the command includes an HTTP URL to which the
upgrade file may be uploaded. The
				actual upgrade takes place as soon as the HTTP POST
operation has completed. The device
				should support firmware upgrade through the StartFirmwareUpgrade
command. The exact
				format of the firmware data is outside the scope
of this specification.
				Firmware upgrade over HTTP may be achieved using
the following steps:<ol>
					<li>Client calls StartFirmwareUpgrade.</li>
					<li>Server responds with upload URI and
optional delay value.</li>
					<li>Client waits for delay duration if specified
by server.</li>
					<li>Client transmits the firmware image
to the upload URI using HTTP POST.</li>
					<li>Server reprograms itself using the uploaded
image, then reboots.</li>
				</ol>
				If the firmware upgrade fails because the upgrade
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
firmware upgrade fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgradeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__StartFirmwareUpgrade(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__StartFirmwareUpgrade*         tds__StartFirmwareUpgrade,
    // output parameters:
    _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__StartFirmwareUpgrade(
    struct soap *soap,
    // input parameters:
    _tds__StartFirmwareUpgrade*         tds__StartFirmwareUpgrade,
    // output parameters:
    _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	StartFirmwareUpgrade SOAP
//gsoap tds  service method-style:	StartFirmwareUpgrade document
//gsoap tds  service method-encoding:	StartFirmwareUpgrade literal
//gsoap tds  service method-input-action:	StartFirmwareUpgrade http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgrade
//gsoap tds  service method-output-action:	StartFirmwareUpgrade http://www.onvif.org/ver10/device/wsdl/StartFirmwareUpgradeResponse
int __tds__StartFirmwareUpgrade(
    _tds__StartFirmwareUpgrade*         tds__StartFirmwareUpgrade,	///< Input parameter
    _tds__StartFirmwareUpgradeResponse &tds__StartFirmwareUpgradeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__StartSystemRestore                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__StartSystemRestore" of service binding "DeviceBinding".
This operation initiates a system restore from backed up configuration data using
the HTTP
				POST mechanism. The response to the command includes
an HTTP URL to which the backup
				file may be uploaded. The actual restore takes place
as soon as the HTTP POST operation
				has completed. Devices should support system restore
through the StartSystemRestore
				command. The exact format of the backup configuration
data is outside the scope of this
				specification.<br/>
				System restore over HTTP may be achieved using the
following steps:<ol>
					<li>Client calls StartSystemRestore.</li>
					<li>Server responds with upload URI.</li>
					<li>Client transmits the configuration data
to the upload URI using HTTP POST.</li>
					<li>Server applies the uploaded configuration,
then reboots if necessary.</li>
				</ol>
				If the system restore fails because the uploaded
file was invalid, the HTTP POST response
				shall be 415 Unsupported Media Type. If the
system restore fails due to an error at the
				device, the HTTP POST response shall be 500 Internal
Server Error.<br/>
				The value of the Content-Type header in the HTTP
POST request shall be application/octetstream.

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/StartSystemRestore"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/StartSystemRestoreResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__StartSystemRestore(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__StartSystemRestore*           tds__StartSystemRestore,
    // output parameters:
    _tds__StartSystemRestoreResponse   &tds__StartSystemRestoreResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__StartSystemRestore(
    struct soap *soap,
    // input parameters:
    _tds__StartSystemRestore*           tds__StartSystemRestore,
    // output parameters:
    _tds__StartSystemRestoreResponse   &tds__StartSystemRestoreResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	StartSystemRestore SOAP
//gsoap tds  service method-style:	StartSystemRestore document
//gsoap tds  service method-encoding:	StartSystemRestore literal
//gsoap tds  service method-input-action:	StartSystemRestore http://www.onvif.org/ver10/device/wsdl/StartSystemRestore
//gsoap tds  service method-output-action:	StartSystemRestore http://www.onvif.org/ver10/device/wsdl/StartSystemRestoreResponse
int __tds__StartSystemRestore(
    _tds__StartSystemRestore*           tds__StartSystemRestore,	///< Input parameter
    _tds__StartSystemRestoreResponse   &tds__StartSystemRestoreResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetStorageConfigurations                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetStorageConfigurations" of service binding "DeviceBinding".

			This operation lists all existing storage configurations
for the device. 
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetStorageConfigurations(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetStorageConfigurations*     tds__GetStorageConfigurations,
    // output parameters:
    _tds__GetStorageConfigurationsResponse&tds__GetStorageConfigurationsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetStorageConfigurations(
    struct soap *soap,
    // input parameters:
    _tds__GetStorageConfigurations*     tds__GetStorageConfigurations,
    // output parameters:
    _tds__GetStorageConfigurationsResponse&tds__GetStorageConfigurationsResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetStorageConfigurations SOAP
//gsoap tds  service method-style:	GetStorageConfigurations document
//gsoap tds  service method-encoding:	GetStorageConfigurations literal
//gsoap tds  service method-input-action:	GetStorageConfigurations http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurations
//gsoap tds  service method-output-action:	GetStorageConfigurations http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationsResponse
int __tds__GetStorageConfigurations(
    _tds__GetStorageConfigurations*     tds__GetStorageConfigurations,	///< Input parameter
    _tds__GetStorageConfigurationsResponse&tds__GetStorageConfigurationsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__CreateStorageConfiguration                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__CreateStorageConfiguration" of service binding "DeviceBinding".

			This operation creates a new storage configuration. 
			The configuration data shall be created in the device and
shall be persistent (remain after reboot).
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/CreateStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__CreateStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__CreateStorageConfiguration*   tds__CreateStorageConfiguration,
    // output parameters:
    _tds__CreateStorageConfigurationResponse&tds__CreateStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__CreateStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__CreateStorageConfiguration*   tds__CreateStorageConfiguration,
    // output parameters:
    _tds__CreateStorageConfigurationResponse&tds__CreateStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	CreateStorageConfiguration SOAP
//gsoap tds  service method-style:	CreateStorageConfiguration document
//gsoap tds  service method-encoding:	CreateStorageConfiguration literal
//gsoap tds  service method-input-action:	CreateStorageConfiguration http://www.onvif.org/ver10/device/wsdl/CreateStorageConfiguration
//gsoap tds  service method-output-action:	CreateStorageConfiguration http://www.onvif.org/ver10/device/wsdl/CreateStorageConfigurationResponse
int __tds__CreateStorageConfiguration(
    _tds__CreateStorageConfiguration*   tds__CreateStorageConfiguration,	///< Input parameter
    _tds__CreateStorageConfigurationResponse&tds__CreateStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetStorageConfiguration                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetStorageConfiguration" of service binding "DeviceBinding".

			This operation retrieves the Storage configuration associated
with the given storage configuration token.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetStorageConfiguration*      tds__GetStorageConfiguration,
    // output parameters:
    _tds__GetStorageConfigurationResponse&tds__GetStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__GetStorageConfiguration*      tds__GetStorageConfiguration,
    // output parameters:
    _tds__GetStorageConfigurationResponse&tds__GetStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetStorageConfiguration SOAP
//gsoap tds  service method-style:	GetStorageConfiguration document
//gsoap tds  service method-encoding:	GetStorageConfiguration literal
//gsoap tds  service method-input-action:	GetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/GetStorageConfiguration
//gsoap tds  service method-output-action:	GetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/GetStorageConfigurationResponse
int __tds__GetStorageConfiguration(
    _tds__GetStorageConfiguration*      tds__GetStorageConfiguration,	///< Input parameter
    _tds__GetStorageConfigurationResponse&tds__GetStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetStorageConfiguration                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetStorageConfiguration" of service binding "DeviceBinding".

			This operation modifies an existing Storage configuration.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetStorageConfiguration*      tds__SetStorageConfiguration,
    // output parameters:
    _tds__SetStorageConfigurationResponse&tds__SetStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__SetStorageConfiguration*      tds__SetStorageConfiguration,
    // output parameters:
    _tds__SetStorageConfigurationResponse&tds__SetStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetStorageConfiguration SOAP
//gsoap tds  service method-style:	SetStorageConfiguration document
//gsoap tds  service method-encoding:	SetStorageConfiguration literal
//gsoap tds  service method-input-action:	SetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/SetStorageConfiguration
//gsoap tds  service method-output-action:	SetStorageConfiguration http://www.onvif.org/ver10/device/wsdl/SetStorageConfigurationResponse
int __tds__SetStorageConfiguration(
    _tds__SetStorageConfiguration*      tds__SetStorageConfiguration,	///< Input parameter
    _tds__SetStorageConfigurationResponse&tds__SetStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteStorageConfiguration                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteStorageConfiguration" of service binding "DeviceBinding".

			This operation deletes the given storage configuration and
configuration change shall always be persistent.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfigurationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteStorageConfiguration(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteStorageConfiguration*   tds__DeleteStorageConfiguration,
    // output parameters:
    _tds__DeleteStorageConfigurationResponse&tds__DeleteStorageConfigurationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteStorageConfiguration(
    struct soap *soap,
    // input parameters:
    _tds__DeleteStorageConfiguration*   tds__DeleteStorageConfiguration,
    // output parameters:
    _tds__DeleteStorageConfigurationResponse&tds__DeleteStorageConfigurationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteStorageConfiguration SOAP
//gsoap tds  service method-style:	DeleteStorageConfiguration document
//gsoap tds  service method-encoding:	DeleteStorageConfiguration literal
//gsoap tds  service method-input-action:	DeleteStorageConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfiguration
//gsoap tds  service method-output-action:	DeleteStorageConfiguration http://www.onvif.org/ver10/device/wsdl/DeleteStorageConfigurationResponse
int __tds__DeleteStorageConfiguration(
    _tds__DeleteStorageConfiguration*   tds__DeleteStorageConfiguration,	///< Input parameter
    _tds__DeleteStorageConfigurationResponse&tds__DeleteStorageConfigurationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__GetGeoLocation                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__GetGeoLocation" of service binding "DeviceBinding".

				This operation lists all existing geo location configurations
for the device. 
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/GetGeoLocation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/GetGeoLocationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__GetGeoLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__GetGeoLocation*               tds__GetGeoLocation,
    // output parameters:
    _tds__GetGeoLocationResponse       &tds__GetGeoLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__GetGeoLocation(
    struct soap *soap,
    // input parameters:
    _tds__GetGeoLocation*               tds__GetGeoLocation,
    // output parameters:
    _tds__GetGeoLocationResponse       &tds__GetGeoLocationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	GetGeoLocation SOAP
//gsoap tds  service method-style:	GetGeoLocation document
//gsoap tds  service method-encoding:	GetGeoLocation literal
//gsoap tds  service method-input-action:	GetGeoLocation http://www.onvif.org/ver10/device/wsdl/GetGeoLocation
//gsoap tds  service method-output-action:	GetGeoLocation http://www.onvif.org/ver10/device/wsdl/GetGeoLocationResponse
int __tds__GetGeoLocation(
    _tds__GetGeoLocation*               tds__GetGeoLocation,	///< Input parameter
    _tds__GetGeoLocationResponse       &tds__GetGeoLocationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__SetGeoLocation                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__SetGeoLocation" of service binding "DeviceBinding".

				This operation allows to modify one or more geo
configuration entries.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/SetGeoLocation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/SetGeoLocationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__SetGeoLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__SetGeoLocation*               tds__SetGeoLocation,
    // output parameters:
    _tds__SetGeoLocationResponse       &tds__SetGeoLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__SetGeoLocation(
    struct soap *soap,
    // input parameters:
    _tds__SetGeoLocation*               tds__SetGeoLocation,
    // output parameters:
    _tds__SetGeoLocationResponse       &tds__SetGeoLocationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	SetGeoLocation SOAP
//gsoap tds  service method-style:	SetGeoLocation document
//gsoap tds  service method-encoding:	SetGeoLocation literal
//gsoap tds  service method-input-action:	SetGeoLocation http://www.onvif.org/ver10/device/wsdl/SetGeoLocation
//gsoap tds  service method-output-action:	SetGeoLocation http://www.onvif.org/ver10/device/wsdl/SetGeoLocationResponse
int __tds__SetGeoLocation(
    _tds__SetGeoLocation*               tds__SetGeoLocation,	///< Input parameter
    _tds__SetGeoLocationResponse       &tds__SetGeoLocationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tds__DeleteGeoLocation                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__tds__DeleteGeoLocation" of service binding "DeviceBinding".

				This operation deletes the given geo location entries.
			

  - SOAP document/literal style messaging

  - Action: "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation"

  - Addressing input action: "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation"

  - Addressing output action: "http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___tds__DeleteGeoLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _tds__DeleteGeoLocation*            tds__DeleteGeoLocation,
    // output parameters:
    _tds__DeleteGeoLocationResponse    &tds__DeleteGeoLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tds__DeleteGeoLocation(
    struct soap *soap,
    // input parameters:
    _tds__DeleteGeoLocation*            tds__DeleteGeoLocation,
    // output parameters:
    _tds__DeleteGeoLocationResponse    &tds__DeleteGeoLocationResponse
  );
@endcode

C++ proxy class (defined in soapDeviceBindingProxy.h):
@code
  class DeviceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceBindingService.h):
@code
  class DeviceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap tds  service method-protocol:	DeleteGeoLocation SOAP
//gsoap tds  service method-style:	DeleteGeoLocation document
//gsoap tds  service method-encoding:	DeleteGeoLocation literal
//gsoap tds  service method-input-action:	DeleteGeoLocation http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocation
//gsoap tds  service method-output-action:	DeleteGeoLocation http://www.onvif.org/ver10/device/wsdl/DeleteGeoLocationResponse
int __tds__DeleteGeoLocation(
    _tds__DeleteGeoLocation*            tds__DeleteGeoLocation,	///< Input parameter
    _tds__DeleteGeoLocationResponse    &tds__DeleteGeoLocationResponse	///< Output parameter
);

/**

@page DeviceBinding Binding "DeviceBinding"

@section DeviceBinding_policy_enablers Policy Enablers of Binding "DeviceBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section tt Top-level root elements of schema "http://www.onvif.org/ver10/schema"

  - <StringItems> @ref _tt__StringItems
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__StringItems(struct soap*, _tt__StringItems*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__StringItems(struct soap*, _tt__StringItems*);
    @endcode

  - <StringList> (use wsdl2h option -g to auto-generate)

  - <IntRange> (use wsdl2h option -g to auto-generate)

  - <IntList> (use wsdl2h option -g to auto-generate)

  - <FloatRange> (use wsdl2h option -g to auto-generate)

  - <FloatList> (use wsdl2h option -g to auto-generate)

  - <DurationRange> (use wsdl2h option -g to auto-generate)

  - <IntRectangleRange> (use wsdl2h option -g to auto-generate)

  - <VideoSourceConfiguration> (use wsdl2h option -g to auto-generate)

  - <AudioSourceConfiguration> (use wsdl2h option -g to auto-generate)

  - <VideoEncoderConfiguration> (use wsdl2h option -g to auto-generate)

  - <AudioEncoderConfiguration> (use wsdl2h option -g to auto-generate)

  - <VideoAnalyticsConfiguration> (use wsdl2h option -g to auto-generate)

  - <PTZConfiguration> (use wsdl2h option -g to auto-generate)

  - <MetadataConfiguration> (use wsdl2h option -g to auto-generate)

  - <AudioOutputConfiguration> (use wsdl2h option -g to auto-generate)

  - <AudioDecoderConfiguration> (use wsdl2h option -g to auto-generate)

  - <Message> @ref _tt__Message
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tt__Message(struct soap*, _tt__Message*);
    // Writer (returns SOAP_OK on success):
    soap_write__tt__Message(struct soap*, _tt__Message*);
    @endcode

  - <Polyline> (use wsdl2h option -g to auto-generate)

  - <Polygon> (use wsdl2h option -g to auto-generate)

@section wsnt Top-level root elements of schema "http://docs.oasis-open.org/wsn/b-2"

  - <TopicExpression> (use wsdl2h option -g to auto-generate)

  - <FixedTopicSet> (use wsdl2h option -g to auto-generate)

  - <TopicExpressionDialect> (use wsdl2h option -g to auto-generate)

  - <NotificationProducerRP> @ref _wsnt__NotificationProducerRP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__NotificationProducerRP(struct soap*, _wsnt__NotificationProducerRP*);
    @endcode

  - <ConsumerReference> (use wsdl2h option -g to auto-generate)

  - <Filter> (use wsdl2h option -g to auto-generate)

  - <SubscriptionPolicy> (use wsdl2h option -g to auto-generate)

  - <CreationTime> (use wsdl2h option -g to auto-generate)

  - <SubscriptionManagerRP> @ref _wsnt__SubscriptionManagerRP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscriptionManagerRP(struct soap*, _wsnt__SubscriptionManagerRP*);
    @endcode

  - <SubscriptionReference> (use wsdl2h option -g to auto-generate)

  - <Topic> (use wsdl2h option -g to auto-generate)

  - <ProducerReference> (use wsdl2h option -g to auto-generate)

  - <NotificationMessage> (use wsdl2h option -g to auto-generate)

  - <Notify> @ref _wsnt__Notify
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Notify(struct soap*, _wsnt__Notify*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Notify(struct soap*, _wsnt__Notify*);
    @endcode

  - <CurrentTime> (use wsdl2h option -g to auto-generate)

  - <TerminationTime> (use wsdl2h option -g to auto-generate)

  - <ProducerProperties> (use wsdl2h option -g to auto-generate)

  - <MessageContent> (use wsdl2h option -g to auto-generate)

  - <UseRaw> @ref _wsnt__UseRaw
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UseRaw(struct soap*, _wsnt__UseRaw*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UseRaw(struct soap*, _wsnt__UseRaw*);
    @endcode

  - <Subscribe> @ref _wsnt__Subscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Subscribe(struct soap*, _wsnt__Subscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Subscribe(struct soap*, _wsnt__Subscribe*);
    @endcode

  - <SubscribeResponse> @ref _wsnt__SubscribeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__SubscribeResponse(struct soap*, _wsnt__SubscribeResponse*);
    @endcode

  - <GetCurrentMessage> @ref _wsnt__GetCurrentMessage
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetCurrentMessage(struct soap*, _wsnt__GetCurrentMessage*);
    @endcode

  - <GetCurrentMessageResponse> @ref _wsnt__GetCurrentMessageResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetCurrentMessageResponse(struct soap*, _wsnt__GetCurrentMessageResponse*);
    @endcode

  - <SubscribeCreationFailedFault> (use wsdl2h option -g to auto-generate)

  - <InvalidFilterFault> (use wsdl2h option -g to auto-generate)

  - <TopicExpressionDialectUnknownFault> (use wsdl2h option -g to auto-generate)

  - <InvalidTopicExpressionFault> (use wsdl2h option -g to auto-generate)

  - <TopicNotSupportedFault> (use wsdl2h option -g to auto-generate)

  - <MultipleTopicsSpecifiedFault> (use wsdl2h option -g to auto-generate)

  - <InvalidProducerPropertiesExpressionFault> (use wsdl2h option -g to auto-generate)

  - <InvalidMessageContentExpressionFault> (use wsdl2h option -g to auto-generate)

  - <UnrecognizedPolicyRequestFault> (use wsdl2h option -g to auto-generate)

  - <UnsupportedPolicyRequestFault> (use wsdl2h option -g to auto-generate)

  - <NotifyMessageNotSupportedFault> (use wsdl2h option -g to auto-generate)

  - <UnacceptableInitialTerminationTimeFault> (use wsdl2h option -g to auto-generate)

  - <NoCurrentMessageOnTopicFault> (use wsdl2h option -g to auto-generate)

  - <GetMessages> @ref _wsnt__GetMessages
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetMessages(struct soap*, _wsnt__GetMessages*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetMessages(struct soap*, _wsnt__GetMessages*);
    @endcode

  - <GetMessagesResponse> @ref _wsnt__GetMessagesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__GetMessagesResponse(struct soap*, _wsnt__GetMessagesResponse*);
    @endcode

  - <DestroyPullPoint> @ref _wsnt__DestroyPullPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__DestroyPullPoint(struct soap*, _wsnt__DestroyPullPoint*);
    @endcode

  - <DestroyPullPointResponse> @ref _wsnt__DestroyPullPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__DestroyPullPointResponse(struct soap*, _wsnt__DestroyPullPointResponse*);
    @endcode

  - <UnableToGetMessagesFault> (use wsdl2h option -g to auto-generate)

  - <UnableToDestroyPullPointFault> (use wsdl2h option -g to auto-generate)

  - <CreatePullPoint> @ref _wsnt__CreatePullPoint
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__CreatePullPoint(struct soap*, _wsnt__CreatePullPoint*);
    @endcode

  - <CreatePullPointResponse> @ref _wsnt__CreatePullPointResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__CreatePullPointResponse(struct soap*, _wsnt__CreatePullPointResponse*);
    @endcode

  - <UnableToCreatePullPointFault> (use wsdl2h option -g to auto-generate)

  - <Renew> @ref _wsnt__Renew
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Renew(struct soap*, _wsnt__Renew*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Renew(struct soap*, _wsnt__Renew*);
    @endcode

  - <RenewResponse> @ref _wsnt__RenewResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__RenewResponse(struct soap*, _wsnt__RenewResponse*);
    @endcode

  - <UnacceptableTerminationTimeFault> (use wsdl2h option -g to auto-generate)

  - <Unsubscribe> @ref _wsnt__Unsubscribe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__Unsubscribe(struct soap*, _wsnt__Unsubscribe*);
    @endcode

  - <UnsubscribeResponse> @ref _wsnt__UnsubscribeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__UnsubscribeResponse(struct soap*, _wsnt__UnsubscribeResponse*);
    @endcode

  - <UnableToDestroySubscriptionFault> (use wsdl2h option -g to auto-generate)

  - <PauseSubscription> @ref _wsnt__PauseSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__PauseSubscription(struct soap*, _wsnt__PauseSubscription*);
    @endcode

  - <PauseSubscriptionResponse> @ref _wsnt__PauseSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__PauseSubscriptionResponse(struct soap*, _wsnt__PauseSubscriptionResponse*);
    @endcode

  - <ResumeSubscription> @ref _wsnt__ResumeSubscription
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ResumeSubscription(struct soap*, _wsnt__ResumeSubscription*);
    @endcode

  - <ResumeSubscriptionResponse> @ref _wsnt__ResumeSubscriptionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsnt__ResumeSubscriptionResponse(struct soap*, _wsnt__ResumeSubscriptionResponse*);
    @endcode

  - <PauseFailedFault> (use wsdl2h option -g to auto-generate)

  - <ResumeFailedFault> (use wsdl2h option -g to auto-generate)

@section wsrfbf Top-level root elements of schema "http://docs.oasis-open.org/wsrf/bf-2"

  - <BaseFault> (use wsdl2h option -g to auto-generate)

@section wstop Top-level root elements of schema "http://docs.oasis-open.org/wsn/t-1"

  - <TopicNamespace> (use wsdl2h option -g to auto-generate)

  - <TopicSet> (use wsdl2h option -g to auto-generate)

@section tds Top-level root elements of schema "http://www.onvif.org/ver10/device/wsdl"

  - <GetServices> @ref _tds__GetServices
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServices(struct soap*, _tds__GetServices*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServices(struct soap*, _tds__GetServices*);
    @endcode

  - <GetServicesResponse> @ref _tds__GetServicesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServicesResponse(struct soap*, _tds__GetServicesResponse*);
    @endcode

  - <GetServiceCapabilities> @ref _tds__GetServiceCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServiceCapabilities(struct soap*, _tds__GetServiceCapabilities*);
    @endcode

  - <GetServiceCapabilitiesResponse> @ref _tds__GetServiceCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetServiceCapabilitiesResponse(struct soap*, _tds__GetServiceCapabilitiesResponse*);
    @endcode

  - <Capabilities> (use wsdl2h option -g to auto-generate)

  - <GetDeviceInformation> @ref _tds__GetDeviceInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDeviceInformation(struct soap*, _tds__GetDeviceInformation*);
    @endcode

  - <GetDeviceInformationResponse> @ref _tds__GetDeviceInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDeviceInformationResponse(struct soap*, _tds__GetDeviceInformationResponse*);
    @endcode

  - <SetSystemDateAndTime> @ref _tds__SetSystemDateAndTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemDateAndTime(struct soap*, _tds__SetSystemDateAndTime*);
    @endcode

  - <SetSystemDateAndTimeResponse> @ref _tds__SetSystemDateAndTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemDateAndTimeResponse(struct soap*, _tds__SetSystemDateAndTimeResponse*);
    @endcode

  - <GetSystemDateAndTime> @ref _tds__GetSystemDateAndTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemDateAndTime(struct soap*, _tds__GetSystemDateAndTime*);
    @endcode

  - <GetSystemDateAndTimeResponse> @ref _tds__GetSystemDateAndTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemDateAndTimeResponse(struct soap*, _tds__GetSystemDateAndTimeResponse*);
    @endcode

  - <SetSystemFactoryDefault> @ref _tds__SetSystemFactoryDefault
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemFactoryDefault(struct soap*, _tds__SetSystemFactoryDefault*);
    @endcode

  - <SetSystemFactoryDefaultResponse> @ref _tds__SetSystemFactoryDefaultResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetSystemFactoryDefaultResponse(struct soap*, _tds__SetSystemFactoryDefaultResponse*);
    @endcode

  - <UpgradeSystemFirmware> @ref _tds__UpgradeSystemFirmware
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__UpgradeSystemFirmware(struct soap*, _tds__UpgradeSystemFirmware*);
    @endcode

  - <UpgradeSystemFirmwareResponse> @ref _tds__UpgradeSystemFirmwareResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__UpgradeSystemFirmwareResponse(struct soap*, _tds__UpgradeSystemFirmwareResponse*);
    @endcode

  - <SystemReboot> @ref _tds__SystemReboot
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SystemReboot(struct soap*, _tds__SystemReboot*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SystemReboot(struct soap*, _tds__SystemReboot*);
    @endcode

  - <SystemRebootResponse> @ref _tds__SystemRebootResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SystemRebootResponse(struct soap*, _tds__SystemRebootResponse*);
    @endcode

  - <RestoreSystem> @ref _tds__RestoreSystem
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RestoreSystem(struct soap*, _tds__RestoreSystem*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RestoreSystem(struct soap*, _tds__RestoreSystem*);
    @endcode

  - <RestoreSystemResponse> @ref _tds__RestoreSystemResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RestoreSystemResponse(struct soap*, _tds__RestoreSystemResponse*);
    @endcode

  - <GetSystemBackup> @ref _tds__GetSystemBackup
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemBackup(struct soap*, _tds__GetSystemBackup*);
    @endcode

  - <GetSystemBackupResponse> @ref _tds__GetSystemBackupResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemBackupResponse(struct soap*, _tds__GetSystemBackupResponse*);
    @endcode

  - <GetSystemSupportInformation> @ref _tds__GetSystemSupportInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemSupportInformation(struct soap*, _tds__GetSystemSupportInformation*);
    @endcode

  - <GetSystemSupportInformationResponse> @ref _tds__GetSystemSupportInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemSupportInformationResponse(struct soap*, _tds__GetSystemSupportInformationResponse*);
    @endcode

  - <GetSystemLog> @ref _tds__GetSystemLog
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemLog(struct soap*, _tds__GetSystemLog*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemLog(struct soap*, _tds__GetSystemLog*);
    @endcode

  - <GetSystemLogResponse> @ref _tds__GetSystemLogResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemLogResponse(struct soap*, _tds__GetSystemLogResponse*);
    @endcode

  - <GetScopes> @ref _tds__GetScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetScopes(struct soap*, _tds__GetScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetScopes(struct soap*, _tds__GetScopes*);
    @endcode

  - <GetScopesResponse> @ref _tds__GetScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetScopesResponse(struct soap*, _tds__GetScopesResponse*);
    @endcode

  - <SetScopes> @ref _tds__SetScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetScopes(struct soap*, _tds__SetScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetScopes(struct soap*, _tds__SetScopes*);
    @endcode

  - <SetScopesResponse> @ref _tds__SetScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetScopesResponse(struct soap*, _tds__SetScopesResponse*);
    @endcode

  - <AddScopes> @ref _tds__AddScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddScopes(struct soap*, _tds__AddScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddScopes(struct soap*, _tds__AddScopes*);
    @endcode

  - <AddScopesResponse> @ref _tds__AddScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddScopesResponse(struct soap*, _tds__AddScopesResponse*);
    @endcode

  - <RemoveScopes> @ref _tds__RemoveScopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveScopes(struct soap*, _tds__RemoveScopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveScopes(struct soap*, _tds__RemoveScopes*);
    @endcode

  - <RemoveScopesResponse> @ref _tds__RemoveScopesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveScopesResponse(struct soap*, _tds__RemoveScopesResponse*);
    @endcode

  - <GetDiscoveryMode> @ref _tds__GetDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDiscoveryMode(struct soap*, _tds__GetDiscoveryMode*);
    @endcode

  - <GetDiscoveryModeResponse> @ref _tds__GetDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDiscoveryModeResponse(struct soap*, _tds__GetDiscoveryModeResponse*);
    @endcode

  - <SetDiscoveryMode> @ref _tds__SetDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDiscoveryMode(struct soap*, _tds__SetDiscoveryMode*);
    @endcode

  - <SetDiscoveryModeResponse> @ref _tds__SetDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDiscoveryModeResponse(struct soap*, _tds__SetDiscoveryModeResponse*);
    @endcode

  - <GetRemoteDiscoveryMode> @ref _tds__GetRemoteDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteDiscoveryMode(struct soap*, _tds__GetRemoteDiscoveryMode*);
    @endcode

  - <GetRemoteDiscoveryModeResponse> @ref _tds__GetRemoteDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteDiscoveryModeResponse(struct soap*, _tds__GetRemoteDiscoveryModeResponse*);
    @endcode

  - <SetRemoteDiscoveryMode> @ref _tds__SetRemoteDiscoveryMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteDiscoveryMode(struct soap*, _tds__SetRemoteDiscoveryMode*);
    @endcode

  - <SetRemoteDiscoveryModeResponse> @ref _tds__SetRemoteDiscoveryModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteDiscoveryModeResponse(struct soap*, _tds__SetRemoteDiscoveryModeResponse*);
    @endcode

  - <GetDPAddresses> @ref _tds__GetDPAddresses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDPAddresses(struct soap*, _tds__GetDPAddresses*);
    @endcode

  - <GetDPAddressesResponse> @ref _tds__GetDPAddressesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDPAddressesResponse(struct soap*, _tds__GetDPAddressesResponse*);
    @endcode

  - <SetDPAddresses> @ref _tds__SetDPAddresses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDPAddresses(struct soap*, _tds__SetDPAddresses*);
    @endcode

  - <SetDPAddressesResponse> @ref _tds__SetDPAddressesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDPAddressesResponse(struct soap*, _tds__SetDPAddressesResponse*);
    @endcode

  - <GetEndpointReference> @ref _tds__GetEndpointReference
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetEndpointReference(struct soap*, _tds__GetEndpointReference*);
    @endcode

  - <GetEndpointReferenceResponse> @ref _tds__GetEndpointReferenceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetEndpointReferenceResponse(struct soap*, _tds__GetEndpointReferenceResponse*);
    @endcode

  - <GetRemoteUser> @ref _tds__GetRemoteUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteUser(struct soap*, _tds__GetRemoteUser*);
    @endcode

  - <GetRemoteUserResponse> @ref _tds__GetRemoteUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRemoteUserResponse(struct soap*, _tds__GetRemoteUserResponse*);
    @endcode

  - <SetRemoteUser> @ref _tds__SetRemoteUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteUser(struct soap*, _tds__SetRemoteUser*);
    @endcode

  - <SetRemoteUserResponse> @ref _tds__SetRemoteUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRemoteUserResponse(struct soap*, _tds__SetRemoteUserResponse*);
    @endcode

  - <GetUsers> @ref _tds__GetUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetUsers(struct soap*, _tds__GetUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetUsers(struct soap*, _tds__GetUsers*);
    @endcode

  - <GetUsersResponse> @ref _tds__GetUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetUsersResponse(struct soap*, _tds__GetUsersResponse*);
    @endcode

  - <CreateUsers> @ref _tds__CreateUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateUsers(struct soap*, _tds__CreateUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateUsers(struct soap*, _tds__CreateUsers*);
    @endcode

  - <CreateUsersResponse> @ref _tds__CreateUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateUsersResponse(struct soap*, _tds__CreateUsersResponse*);
    @endcode

  - <DeleteUsers> @ref _tds__DeleteUsers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteUsers(struct soap*, _tds__DeleteUsers*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteUsers(struct soap*, _tds__DeleteUsers*);
    @endcode

  - <DeleteUsersResponse> @ref _tds__DeleteUsersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteUsersResponse(struct soap*, _tds__DeleteUsersResponse*);
    @endcode

  - <SetUser> @ref _tds__SetUser
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetUser(struct soap*, _tds__SetUser*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetUser(struct soap*, _tds__SetUser*);
    @endcode

  - <SetUserResponse> @ref _tds__SetUserResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetUserResponse(struct soap*, _tds__SetUserResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetUserResponse(struct soap*, _tds__SetUserResponse*);
    @endcode

  - <GetWsdlUrl> @ref _tds__GetWsdlUrl
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetWsdlUrl(struct soap*, _tds__GetWsdlUrl*);
    @endcode

  - <GetWsdlUrlResponse> @ref _tds__GetWsdlUrlResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetWsdlUrlResponse(struct soap*, _tds__GetWsdlUrlResponse*);
    @endcode

  - <GetCapabilities> @ref _tds__GetCapabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCapabilities(struct soap*, _tds__GetCapabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCapabilities(struct soap*, _tds__GetCapabilities*);
    @endcode

  - <GetCapabilitiesResponse> @ref _tds__GetCapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCapabilitiesResponse(struct soap*, _tds__GetCapabilitiesResponse*);
    @endcode

  - <GetHostname> @ref _tds__GetHostname
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetHostname(struct soap*, _tds__GetHostname*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetHostname(struct soap*, _tds__GetHostname*);
    @endcode

  - <GetHostnameResponse> @ref _tds__GetHostnameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetHostnameResponse(struct soap*, _tds__GetHostnameResponse*);
    @endcode

  - <SetHostname> @ref _tds__SetHostname
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostname(struct soap*, _tds__SetHostname*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostname(struct soap*, _tds__SetHostname*);
    @endcode

  - <SetHostnameResponse> @ref _tds__SetHostnameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostnameResponse(struct soap*, _tds__SetHostnameResponse*);
    @endcode

  - <SetHostnameFromDHCP> @ref _tds__SetHostnameFromDHCP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostnameFromDHCP(struct soap*, _tds__SetHostnameFromDHCP*);
    @endcode

  - <SetHostnameFromDHCPResponse> @ref _tds__SetHostnameFromDHCPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetHostnameFromDHCPResponse(struct soap*, _tds__SetHostnameFromDHCPResponse*);
    @endcode

  - <GetDNS> @ref _tds__GetDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDNS(struct soap*, _tds__GetDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDNS(struct soap*, _tds__GetDNS*);
    @endcode

  - <GetDNSResponse> @ref _tds__GetDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDNSResponse(struct soap*, _tds__GetDNSResponse*);
    @endcode

  - <SetDNS> @ref _tds__SetDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDNS(struct soap*, _tds__SetDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDNS(struct soap*, _tds__SetDNS*);
    @endcode

  - <SetDNSResponse> @ref _tds__SetDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDNSResponse(struct soap*, _tds__SetDNSResponse*);
    @endcode

  - <GetNTP> @ref _tds__GetNTP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNTP(struct soap*, _tds__GetNTP*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNTP(struct soap*, _tds__GetNTP*);
    @endcode

  - <GetNTPResponse> @ref _tds__GetNTPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNTPResponse(struct soap*, _tds__GetNTPResponse*);
    @endcode

  - <SetNTP> @ref _tds__SetNTP
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNTP(struct soap*, _tds__SetNTP*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNTP(struct soap*, _tds__SetNTP*);
    @endcode

  - <SetNTPResponse> @ref _tds__SetNTPResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNTPResponse(struct soap*, _tds__SetNTPResponse*);
    @endcode

  - <GetDynamicDNS> @ref _tds__GetDynamicDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDynamicDNS(struct soap*, _tds__GetDynamicDNS*);
    @endcode

  - <GetDynamicDNSResponse> @ref _tds__GetDynamicDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDynamicDNSResponse(struct soap*, _tds__GetDynamicDNSResponse*);
    @endcode

  - <SetDynamicDNS> @ref _tds__SetDynamicDNS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDynamicDNS(struct soap*, _tds__SetDynamicDNS*);
    @endcode

  - <SetDynamicDNSResponse> @ref _tds__SetDynamicDNSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDynamicDNSResponse(struct soap*, _tds__SetDynamicDNSResponse*);
    @endcode

  - <GetNetworkInterfaces> @ref _tds__GetNetworkInterfaces
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkInterfaces(struct soap*, _tds__GetNetworkInterfaces*);
    @endcode

  - <GetNetworkInterfacesResponse> @ref _tds__GetNetworkInterfacesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkInterfacesResponse(struct soap*, _tds__GetNetworkInterfacesResponse*);
    @endcode

  - <SetNetworkInterfaces> @ref _tds__SetNetworkInterfaces
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkInterfaces(struct soap*, _tds__SetNetworkInterfaces*);
    @endcode

  - <SetNetworkInterfacesResponse> @ref _tds__SetNetworkInterfacesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkInterfacesResponse(struct soap*, _tds__SetNetworkInterfacesResponse*);
    @endcode

  - <GetNetworkProtocols> @ref _tds__GetNetworkProtocols
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkProtocols(struct soap*, _tds__GetNetworkProtocols*);
    @endcode

  - <GetNetworkProtocolsResponse> @ref _tds__GetNetworkProtocolsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkProtocolsResponse(struct soap*, _tds__GetNetworkProtocolsResponse*);
    @endcode

  - <SetNetworkProtocols> @ref _tds__SetNetworkProtocols
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkProtocols(struct soap*, _tds__SetNetworkProtocols*);
    @endcode

  - <SetNetworkProtocolsResponse> @ref _tds__SetNetworkProtocolsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkProtocolsResponse(struct soap*, _tds__SetNetworkProtocolsResponse*);
    @endcode

  - <GetNetworkDefaultGateway> @ref _tds__GetNetworkDefaultGateway
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkDefaultGateway(struct soap*, _tds__GetNetworkDefaultGateway*);
    @endcode

  - <GetNetworkDefaultGatewayResponse> @ref _tds__GetNetworkDefaultGatewayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetNetworkDefaultGatewayResponse(struct soap*, _tds__GetNetworkDefaultGatewayResponse*);
    @endcode

  - <SetNetworkDefaultGateway> @ref _tds__SetNetworkDefaultGateway
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkDefaultGateway(struct soap*, _tds__SetNetworkDefaultGateway*);
    @endcode

  - <SetNetworkDefaultGatewayResponse> @ref _tds__SetNetworkDefaultGatewayResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetNetworkDefaultGatewayResponse(struct soap*, _tds__SetNetworkDefaultGatewayResponse*);
    @endcode

  - <GetZeroConfiguration> @ref _tds__GetZeroConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetZeroConfiguration(struct soap*, _tds__GetZeroConfiguration*);
    @endcode

  - <GetZeroConfigurationResponse> @ref _tds__GetZeroConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetZeroConfigurationResponse(struct soap*, _tds__GetZeroConfigurationResponse*);
    @endcode

  - <SetZeroConfiguration> @ref _tds__SetZeroConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetZeroConfiguration(struct soap*, _tds__SetZeroConfiguration*);
    @endcode

  - <SetZeroConfigurationResponse> @ref _tds__SetZeroConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetZeroConfigurationResponse(struct soap*, _tds__SetZeroConfigurationResponse*);
    @endcode

  - <GetIPAddressFilter> @ref _tds__GetIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetIPAddressFilter(struct soap*, _tds__GetIPAddressFilter*);
    @endcode

  - <GetIPAddressFilterResponse> @ref _tds__GetIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetIPAddressFilterResponse(struct soap*, _tds__GetIPAddressFilterResponse*);
    @endcode

  - <SetIPAddressFilter> @ref _tds__SetIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetIPAddressFilter(struct soap*, _tds__SetIPAddressFilter*);
    @endcode

  - <SetIPAddressFilterResponse> @ref _tds__SetIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetIPAddressFilterResponse(struct soap*, _tds__SetIPAddressFilterResponse*);
    @endcode

  - <AddIPAddressFilter> @ref _tds__AddIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddIPAddressFilter(struct soap*, _tds__AddIPAddressFilter*);
    @endcode

  - <AddIPAddressFilterResponse> @ref _tds__AddIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__AddIPAddressFilterResponse(struct soap*, _tds__AddIPAddressFilterResponse*);
    @endcode

  - <RemoveIPAddressFilter> @ref _tds__RemoveIPAddressFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveIPAddressFilter(struct soap*, _tds__RemoveIPAddressFilter*);
    @endcode

  - <RemoveIPAddressFilterResponse> @ref _tds__RemoveIPAddressFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__RemoveIPAddressFilterResponse(struct soap*, _tds__RemoveIPAddressFilterResponse*);
    @endcode

  - <GetAccessPolicy> @ref _tds__GetAccessPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetAccessPolicy(struct soap*, _tds__GetAccessPolicy*);
    @endcode

  - <GetAccessPolicyResponse> @ref _tds__GetAccessPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetAccessPolicyResponse(struct soap*, _tds__GetAccessPolicyResponse*);
    @endcode

  - <SetAccessPolicy> @ref _tds__SetAccessPolicy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetAccessPolicy(struct soap*, _tds__SetAccessPolicy*);
    @endcode

  - <SetAccessPolicyResponse> @ref _tds__SetAccessPolicyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetAccessPolicyResponse(struct soap*, _tds__SetAccessPolicyResponse*);
    @endcode

  - <CreateCertificate> @ref _tds__CreateCertificate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateCertificate(struct soap*, _tds__CreateCertificate*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateCertificate(struct soap*, _tds__CreateCertificate*);
    @endcode

  - <CreateCertificateResponse> @ref _tds__CreateCertificateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateCertificateResponse(struct soap*, _tds__CreateCertificateResponse*);
    @endcode

  - <GetCertificates> @ref _tds__GetCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificates(struct soap*, _tds__GetCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificates(struct soap*, _tds__GetCertificates*);
    @endcode

  - <GetCertificatesResponse> @ref _tds__GetCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificatesResponse(struct soap*, _tds__GetCertificatesResponse*);
    @endcode

  - <GetCertificatesStatus> @ref _tds__GetCertificatesStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificatesStatus(struct soap*, _tds__GetCertificatesStatus*);
    @endcode

  - <GetCertificatesStatusResponse> @ref _tds__GetCertificatesStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificatesStatusResponse(struct soap*, _tds__GetCertificatesStatusResponse*);
    @endcode

  - <SetCertificatesStatus> @ref _tds__SetCertificatesStatus
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetCertificatesStatus(struct soap*, _tds__SetCertificatesStatus*);
    @endcode

  - <SetCertificatesStatusResponse> @ref _tds__SetCertificatesStatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetCertificatesStatusResponse(struct soap*, _tds__SetCertificatesStatusResponse*);
    @endcode

  - <DeleteCertificates> @ref _tds__DeleteCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteCertificates(struct soap*, _tds__DeleteCertificates*);
    @endcode

  - <DeleteCertificatesResponse> @ref _tds__DeleteCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteCertificatesResponse(struct soap*, _tds__DeleteCertificatesResponse*);
    @endcode

  - <GetPkcs10Request> @ref _tds__GetPkcs10Request
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetPkcs10Request(struct soap*, _tds__GetPkcs10Request*);
    @endcode

  - <GetPkcs10RequestResponse> @ref _tds__GetPkcs10RequestResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetPkcs10RequestResponse(struct soap*, _tds__GetPkcs10RequestResponse*);
    @endcode

  - <LoadCertificates> @ref _tds__LoadCertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificates(struct soap*, _tds__LoadCertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificates(struct soap*, _tds__LoadCertificates*);
    @endcode

  - <LoadCertificatesResponse> @ref _tds__LoadCertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificatesResponse(struct soap*, _tds__LoadCertificatesResponse*);
    @endcode

  - <GetClientCertificateMode> @ref _tds__GetClientCertificateMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetClientCertificateMode(struct soap*, _tds__GetClientCertificateMode*);
    @endcode

  - <GetClientCertificateModeResponse> @ref _tds__GetClientCertificateModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetClientCertificateModeResponse(struct soap*, _tds__GetClientCertificateModeResponse*);
    @endcode

  - <SetClientCertificateMode> @ref _tds__SetClientCertificateMode
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetClientCertificateMode(struct soap*, _tds__SetClientCertificateMode*);
    @endcode

  - <SetClientCertificateModeResponse> @ref _tds__SetClientCertificateModeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetClientCertificateModeResponse(struct soap*, _tds__SetClientCertificateModeResponse*);
    @endcode

  - <GetCACertificates> @ref _tds__GetCACertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCACertificates(struct soap*, _tds__GetCACertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCACertificates(struct soap*, _tds__GetCACertificates*);
    @endcode

  - <GetCACertificatesResponse> @ref _tds__GetCACertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCACertificatesResponse(struct soap*, _tds__GetCACertificatesResponse*);
    @endcode

  - <LoadCertificateWithPrivateKey> @ref _tds__LoadCertificateWithPrivateKey
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificateWithPrivateKey(struct soap*, _tds__LoadCertificateWithPrivateKey*);
    @endcode

  - <LoadCertificateWithPrivateKeyResponse> @ref _tds__LoadCertificateWithPrivateKeyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCertificateWithPrivateKeyResponse(struct soap*, _tds__LoadCertificateWithPrivateKeyResponse*);
    @endcode

  - <GetCertificateInformation> @ref _tds__GetCertificateInformation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificateInformation(struct soap*, _tds__GetCertificateInformation*);
    @endcode

  - <GetCertificateInformationResponse> @ref _tds__GetCertificateInformationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetCertificateInformationResponse(struct soap*, _tds__GetCertificateInformationResponse*);
    @endcode

  - <LoadCACertificates> @ref _tds__LoadCACertificates
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCACertificates(struct soap*, _tds__LoadCACertificates*);
    @endcode

  - <LoadCACertificatesResponse> @ref _tds__LoadCACertificatesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__LoadCACertificatesResponse(struct soap*, _tds__LoadCACertificatesResponse*);
    @endcode

  - <CreateDot1XConfiguration> @ref _tds__CreateDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateDot1XConfiguration(struct soap*, _tds__CreateDot1XConfiguration*);
    @endcode

  - <CreateDot1XConfigurationResponse> @ref _tds__CreateDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateDot1XConfigurationResponse(struct soap*, _tds__CreateDot1XConfigurationResponse*);
    @endcode

  - <SetDot1XConfiguration> @ref _tds__SetDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDot1XConfiguration(struct soap*, _tds__SetDot1XConfiguration*);
    @endcode

  - <SetDot1XConfigurationResponse> @ref _tds__SetDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetDot1XConfigurationResponse(struct soap*, _tds__SetDot1XConfigurationResponse*);
    @endcode

  - <GetDot1XConfiguration> @ref _tds__GetDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfiguration(struct soap*, _tds__GetDot1XConfiguration*);
    @endcode

  - <GetDot1XConfigurationResponse> @ref _tds__GetDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfigurationResponse(struct soap*, _tds__GetDot1XConfigurationResponse*);
    @endcode

  - <GetDot1XConfigurations> @ref _tds__GetDot1XConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfigurations(struct soap*, _tds__GetDot1XConfigurations*);
    @endcode

  - <GetDot1XConfigurationsResponse> @ref _tds__GetDot1XConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot1XConfigurationsResponse(struct soap*, _tds__GetDot1XConfigurationsResponse*);
    @endcode

  - <DeleteDot1XConfiguration> @ref _tds__DeleteDot1XConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteDot1XConfiguration(struct soap*, _tds__DeleteDot1XConfiguration*);
    @endcode

  - <DeleteDot1XConfigurationResponse> @ref _tds__DeleteDot1XConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteDot1XConfigurationResponse(struct soap*, _tds__DeleteDot1XConfigurationResponse*);
    @endcode

  - <GetRelayOutputs> @ref _tds__GetRelayOutputs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRelayOutputs(struct soap*, _tds__GetRelayOutputs*);
    @endcode

  - <GetRelayOutputsResponse> @ref _tds__GetRelayOutputsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetRelayOutputsResponse(struct soap*, _tds__GetRelayOutputsResponse*);
    @endcode

  - <SetRelayOutputSettings> @ref _tds__SetRelayOutputSettings
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputSettings(struct soap*, _tds__SetRelayOutputSettings*);
    @endcode

  - <SetRelayOutputSettingsResponse> @ref _tds__SetRelayOutputSettingsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputSettingsResponse(struct soap*, _tds__SetRelayOutputSettingsResponse*);
    @endcode

  - <SetRelayOutputState> @ref _tds__SetRelayOutputState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputState(struct soap*, _tds__SetRelayOutputState*);
    @endcode

  - <SetRelayOutputStateResponse> @ref _tds__SetRelayOutputStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetRelayOutputStateResponse(struct soap*, _tds__SetRelayOutputStateResponse*);
    @endcode

  - <SendAuxiliaryCommand> @ref _tds__SendAuxiliaryCommand
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SendAuxiliaryCommand(struct soap*, _tds__SendAuxiliaryCommand*);
    @endcode

  - <SendAuxiliaryCommandResponse> @ref _tds__SendAuxiliaryCommandResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SendAuxiliaryCommandResponse(struct soap*, _tds__SendAuxiliaryCommandResponse*);
    @endcode

  - <GetDot11Capabilities> @ref _tds__GetDot11Capabilities
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11Capabilities(struct soap*, _tds__GetDot11Capabilities*);
    @endcode

  - <GetDot11CapabilitiesResponse> @ref _tds__GetDot11CapabilitiesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11CapabilitiesResponse(struct soap*, _tds__GetDot11CapabilitiesResponse*);
    @endcode

  - <GetDot11Status> @ref _tds__GetDot11Status
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11Status(struct soap*, _tds__GetDot11Status*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11Status(struct soap*, _tds__GetDot11Status*);
    @endcode

  - <GetDot11StatusResponse> @ref _tds__GetDot11StatusResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetDot11StatusResponse(struct soap*, _tds__GetDot11StatusResponse*);
    @endcode

  - <ScanAvailableDot11Networks> @ref _tds__ScanAvailableDot11Networks
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__ScanAvailableDot11Networks(struct soap*, _tds__ScanAvailableDot11Networks*);
    @endcode

  - <ScanAvailableDot11NetworksResponse> @ref _tds__ScanAvailableDot11NetworksResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__ScanAvailableDot11NetworksResponse(struct soap*, _tds__ScanAvailableDot11NetworksResponse*);
    @endcode

  - <GetSystemUris> @ref _tds__GetSystemUris
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemUris(struct soap*, _tds__GetSystemUris*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemUris(struct soap*, _tds__GetSystemUris*);
    @endcode

  - <GetSystemUrisResponse> @ref _tds__GetSystemUrisResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetSystemUrisResponse(struct soap*, _tds__GetSystemUrisResponse*);
    @endcode

  - <StartFirmwareUpgrade> @ref _tds__StartFirmwareUpgrade
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartFirmwareUpgrade(struct soap*, _tds__StartFirmwareUpgrade*);
    @endcode

  - <StartFirmwareUpgradeResponse> @ref _tds__StartFirmwareUpgradeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartFirmwareUpgradeResponse(struct soap*, _tds__StartFirmwareUpgradeResponse*);
    @endcode

  - <StartSystemRestore> @ref _tds__StartSystemRestore
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartSystemRestore(struct soap*, _tds__StartSystemRestore*);
    @endcode

  - <StartSystemRestoreResponse> @ref _tds__StartSystemRestoreResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__StartSystemRestoreResponse(struct soap*, _tds__StartSystemRestoreResponse*);
    @endcode

  - <GetStorageConfigurations> @ref _tds__GetStorageConfigurations
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfigurations(struct soap*, _tds__GetStorageConfigurations*);
    @endcode

  - <GetStorageConfigurationsResponse> @ref _tds__GetStorageConfigurationsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfigurationsResponse(struct soap*, _tds__GetStorageConfigurationsResponse*);
    @endcode

  - <CreateStorageConfiguration> @ref _tds__CreateStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateStorageConfiguration(struct soap*, _tds__CreateStorageConfiguration*);
    @endcode

  - <CreateStorageConfigurationResponse> @ref _tds__CreateStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__CreateStorageConfigurationResponse(struct soap*, _tds__CreateStorageConfigurationResponse*);
    @endcode

  - <GetStorageConfiguration> @ref _tds__GetStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfiguration(struct soap*, _tds__GetStorageConfiguration*);
    @endcode

  - <GetStorageConfigurationResponse> @ref _tds__GetStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetStorageConfigurationResponse(struct soap*, _tds__GetStorageConfigurationResponse*);
    @endcode

  - <SetStorageConfiguration> @ref _tds__SetStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetStorageConfiguration(struct soap*, _tds__SetStorageConfiguration*);
    @endcode

  - <SetStorageConfigurationResponse> @ref _tds__SetStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetStorageConfigurationResponse(struct soap*, _tds__SetStorageConfigurationResponse*);
    @endcode

  - <DeleteStorageConfiguration> @ref _tds__DeleteStorageConfiguration
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteStorageConfiguration(struct soap*, _tds__DeleteStorageConfiguration*);
    @endcode

  - <DeleteStorageConfigurationResponse> @ref _tds__DeleteStorageConfigurationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteStorageConfigurationResponse(struct soap*, _tds__DeleteStorageConfigurationResponse*);
    @endcode

  - <GetGeoLocation> @ref _tds__GetGeoLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetGeoLocation(struct soap*, _tds__GetGeoLocation*);
    @endcode

  - <GetGeoLocationResponse> @ref _tds__GetGeoLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__GetGeoLocationResponse(struct soap*, _tds__GetGeoLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__GetGeoLocationResponse(struct soap*, _tds__GetGeoLocationResponse*);
    @endcode

  - <SetGeoLocation> @ref _tds__SetGeoLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetGeoLocation(struct soap*, _tds__SetGeoLocation*);
    @endcode

  - <SetGeoLocationResponse> @ref _tds__SetGeoLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__SetGeoLocationResponse(struct soap*, _tds__SetGeoLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__SetGeoLocationResponse(struct soap*, _tds__SetGeoLocationResponse*);
    @endcode

  - <DeleteGeoLocation> @ref _tds__DeleteGeoLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteGeoLocation(struct soap*, _tds__DeleteGeoLocation*);
    @endcode

  - <DeleteGeoLocationResponse> @ref _tds__DeleteGeoLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__tds__DeleteGeoLocationResponse(struct soap*, _tds__DeleteGeoLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__tds__DeleteGeoLocationResponse(struct soap*, _tds__DeleteGeoLocationResponse*);
    @endcode

*/

/* End of ./include/onvif.h */
