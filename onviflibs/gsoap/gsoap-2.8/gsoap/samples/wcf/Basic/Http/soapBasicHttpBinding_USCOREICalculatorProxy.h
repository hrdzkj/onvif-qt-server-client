/* soapBasicHttpBinding_USCOREICalculatorProxy.h
   Generated by gSOAP 2.8.17r from calculator.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBasicHttpBinding_USCOREICalculatorProxy_H
#define soapBasicHttpBinding_USCOREICalculatorProxy_H
#include "soapH.h"

class SOAP_CMAC BasicHttpBinding_USCOREICalculatorProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'BasicHttpBinding_USCOREICalculatorProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	BasicHttpBinding_USCOREICalculatorProxy();
	/// Constructor to use/share an engine state
	BasicHttpBinding_USCOREICalculatorProxy(struct soap*);
	/// Constructor with endpoint URL
	BasicHttpBinding_USCOREICalculatorProxy(const char *url);
	/// Constructor with engine input+output mode control
	BasicHttpBinding_USCOREICalculatorProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BasicHttpBinding_USCOREICalculatorProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BasicHttpBinding_USCOREICalculatorProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BasicHttpBinding_USCOREICalculatorProxy();
	/// Initializer used by constructors
	virtual	void BasicHttpBinding_USCOREICalculatorProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Add' (returns error code or SOAP_OK)
	virtual	int Add(_mssamh__Add *mssamh__Add, _mssamh__AddResponse *mssamh__AddResponse) { return this->Add(NULL, NULL, mssamh__Add, mssamh__AddResponse); }
	virtual	int Add(const char *endpoint, const char *soap_action, _mssamh__Add *mssamh__Add, _mssamh__AddResponse *mssamh__AddResponse);

	/// Web service operation 'Subtract' (returns error code or SOAP_OK)
	virtual	int Subtract(_mssamh__Subtract *mssamh__Subtract, _mssamh__SubtractResponse *mssamh__SubtractResponse) { return this->Subtract(NULL, NULL, mssamh__Subtract, mssamh__SubtractResponse); }
	virtual	int Subtract(const char *endpoint, const char *soap_action, _mssamh__Subtract *mssamh__Subtract, _mssamh__SubtractResponse *mssamh__SubtractResponse);

	/// Web service operation 'Multiply' (returns error code or SOAP_OK)
	virtual	int Multiply(_mssamh__Multiply *mssamh__Multiply, _mssamh__MultiplyResponse *mssamh__MultiplyResponse) { return this->Multiply(NULL, NULL, mssamh__Multiply, mssamh__MultiplyResponse); }
	virtual	int Multiply(const char *endpoint, const char *soap_action, _mssamh__Multiply *mssamh__Multiply, _mssamh__MultiplyResponse *mssamh__MultiplyResponse);

	/// Web service operation 'Divide' (returns error code or SOAP_OK)
	virtual	int Divide(_mssamh__Divide *mssamh__Divide, _mssamh__DivideResponse *mssamh__DivideResponse) { return this->Divide(NULL, NULL, mssamh__Divide, mssamh__DivideResponse); }
	virtual	int Divide(const char *endpoint, const char *soap_action, _mssamh__Divide *mssamh__Divide, _mssamh__DivideResponse *mssamh__DivideResponse);
};
#endif
