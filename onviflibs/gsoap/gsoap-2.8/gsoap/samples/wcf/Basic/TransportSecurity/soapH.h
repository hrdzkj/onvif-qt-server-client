/* soapH.h
   Generated by gSOAP 2.8.17r from calculator.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__mssamt__DivideResponse
#define SOAP_TYPE__mssamt__DivideResponse (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__DivideResponse(struct soap*, const char*, int, const _mssamt__DivideResponse *, const char*);
SOAP_FMAC3 _mssamt__DivideResponse * SOAP_FMAC4 soap_in__mssamt__DivideResponse(struct soap*, const char*, _mssamt__DivideResponse *, const char*);

#ifndef soap_write__mssamt__DivideResponse
#define soap_write__mssamt__DivideResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:DivideResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__DivideResponse * SOAP_FMAC4 soap_get__mssamt__DivideResponse(struct soap*, _mssamt__DivideResponse *, const char*, const char*);

#ifndef soap_read__mssamt__DivideResponse
#define soap_read__mssamt__DivideResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__DivideResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__DivideResponse * SOAP_FMAC2 soap_instantiate__mssamt__DivideResponse(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__DivideResponse * soap_new__mssamt__DivideResponse(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__DivideResponse(soap, n, NULL, NULL, NULL); }

inline _mssamt__DivideResponse * soap_new_req__mssamt__DivideResponse(struct soap *soap) { _mssamt__DivideResponse *_p = soap_instantiate__mssamt__DivideResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__DivideResponse * soap_new_set__mssamt__DivideResponse(struct soap *soap, double *DivideResult) { _mssamt__DivideResponse *_p = soap_instantiate__mssamt__DivideResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__DivideResponse::DivideResult = DivideResult; } return _p; }

inline void soap_delete__mssamt__DivideResponse(struct soap *soap, _mssamt__DivideResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__DivideResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__Divide
#define SOAP_TYPE__mssamt__Divide (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__Divide(struct soap*, const char*, int, const _mssamt__Divide *, const char*);
SOAP_FMAC3 _mssamt__Divide * SOAP_FMAC4 soap_in__mssamt__Divide(struct soap*, const char*, _mssamt__Divide *, const char*);

#ifndef soap_write__mssamt__Divide
#define soap_write__mssamt__Divide(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:Divide", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Divide * SOAP_FMAC4 soap_get__mssamt__Divide(struct soap*, _mssamt__Divide *, const char*, const char*);

#ifndef soap_read__mssamt__Divide
#define soap_read__mssamt__Divide(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__Divide(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__Divide * SOAP_FMAC2 soap_instantiate__mssamt__Divide(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__Divide * soap_new__mssamt__Divide(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__Divide(soap, n, NULL, NULL, NULL); }

inline _mssamt__Divide * soap_new_req__mssamt__Divide(struct soap *soap) { _mssamt__Divide *_p = soap_instantiate__mssamt__Divide(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__Divide * soap_new_set__mssamt__Divide(struct soap *soap, double *n1, double *n2) { _mssamt__Divide *_p = soap_instantiate__mssamt__Divide(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__Divide::n1 = n1; _p->_mssamt__Divide::n2 = n2; } return _p; }

inline void soap_delete__mssamt__Divide(struct soap *soap, _mssamt__Divide *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__Divide(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__MultiplyResponse
#define SOAP_TYPE__mssamt__MultiplyResponse (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__MultiplyResponse(struct soap*, const char*, int, const _mssamt__MultiplyResponse *, const char*);
SOAP_FMAC3 _mssamt__MultiplyResponse * SOAP_FMAC4 soap_in__mssamt__MultiplyResponse(struct soap*, const char*, _mssamt__MultiplyResponse *, const char*);

#ifndef soap_write__mssamt__MultiplyResponse
#define soap_write__mssamt__MultiplyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:MultiplyResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__MultiplyResponse * SOAP_FMAC4 soap_get__mssamt__MultiplyResponse(struct soap*, _mssamt__MultiplyResponse *, const char*, const char*);

#ifndef soap_read__mssamt__MultiplyResponse
#define soap_read__mssamt__MultiplyResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__MultiplyResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__MultiplyResponse * SOAP_FMAC2 soap_instantiate__mssamt__MultiplyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__MultiplyResponse * soap_new__mssamt__MultiplyResponse(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__MultiplyResponse(soap, n, NULL, NULL, NULL); }

inline _mssamt__MultiplyResponse * soap_new_req__mssamt__MultiplyResponse(struct soap *soap) { _mssamt__MultiplyResponse *_p = soap_instantiate__mssamt__MultiplyResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__MultiplyResponse * soap_new_set__mssamt__MultiplyResponse(struct soap *soap, double *MultiplyResult) { _mssamt__MultiplyResponse *_p = soap_instantiate__mssamt__MultiplyResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__MultiplyResponse::MultiplyResult = MultiplyResult; } return _p; }

inline void soap_delete__mssamt__MultiplyResponse(struct soap *soap, _mssamt__MultiplyResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__MultiplyResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__Multiply
#define SOAP_TYPE__mssamt__Multiply (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__Multiply(struct soap*, const char*, int, const _mssamt__Multiply *, const char*);
SOAP_FMAC3 _mssamt__Multiply * SOAP_FMAC4 soap_in__mssamt__Multiply(struct soap*, const char*, _mssamt__Multiply *, const char*);

#ifndef soap_write__mssamt__Multiply
#define soap_write__mssamt__Multiply(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:Multiply", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Multiply * SOAP_FMAC4 soap_get__mssamt__Multiply(struct soap*, _mssamt__Multiply *, const char*, const char*);

#ifndef soap_read__mssamt__Multiply
#define soap_read__mssamt__Multiply(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__Multiply(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__Multiply * SOAP_FMAC2 soap_instantiate__mssamt__Multiply(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__Multiply * soap_new__mssamt__Multiply(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__Multiply(soap, n, NULL, NULL, NULL); }

inline _mssamt__Multiply * soap_new_req__mssamt__Multiply(struct soap *soap) { _mssamt__Multiply *_p = soap_instantiate__mssamt__Multiply(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__Multiply * soap_new_set__mssamt__Multiply(struct soap *soap, double *n1, double *n2) { _mssamt__Multiply *_p = soap_instantiate__mssamt__Multiply(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__Multiply::n1 = n1; _p->_mssamt__Multiply::n2 = n2; } return _p; }

inline void soap_delete__mssamt__Multiply(struct soap *soap, _mssamt__Multiply *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__Multiply(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__SubtractResponse
#define SOAP_TYPE__mssamt__SubtractResponse (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__SubtractResponse(struct soap*, const char*, int, const _mssamt__SubtractResponse *, const char*);
SOAP_FMAC3 _mssamt__SubtractResponse * SOAP_FMAC4 soap_in__mssamt__SubtractResponse(struct soap*, const char*, _mssamt__SubtractResponse *, const char*);

#ifndef soap_write__mssamt__SubtractResponse
#define soap_write__mssamt__SubtractResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:SubtractResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__SubtractResponse * SOAP_FMAC4 soap_get__mssamt__SubtractResponse(struct soap*, _mssamt__SubtractResponse *, const char*, const char*);

#ifndef soap_read__mssamt__SubtractResponse
#define soap_read__mssamt__SubtractResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__SubtractResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__SubtractResponse * SOAP_FMAC2 soap_instantiate__mssamt__SubtractResponse(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__SubtractResponse * soap_new__mssamt__SubtractResponse(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__SubtractResponse(soap, n, NULL, NULL, NULL); }

inline _mssamt__SubtractResponse * soap_new_req__mssamt__SubtractResponse(struct soap *soap) { _mssamt__SubtractResponse *_p = soap_instantiate__mssamt__SubtractResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__SubtractResponse * soap_new_set__mssamt__SubtractResponse(struct soap *soap, double *SubtractResult) { _mssamt__SubtractResponse *_p = soap_instantiate__mssamt__SubtractResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__SubtractResponse::SubtractResult = SubtractResult; } return _p; }

inline void soap_delete__mssamt__SubtractResponse(struct soap *soap, _mssamt__SubtractResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__SubtractResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__Subtract
#define SOAP_TYPE__mssamt__Subtract (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__Subtract(struct soap*, const char*, int, const _mssamt__Subtract *, const char*);
SOAP_FMAC3 _mssamt__Subtract * SOAP_FMAC4 soap_in__mssamt__Subtract(struct soap*, const char*, _mssamt__Subtract *, const char*);

#ifndef soap_write__mssamt__Subtract
#define soap_write__mssamt__Subtract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:Subtract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Subtract * SOAP_FMAC4 soap_get__mssamt__Subtract(struct soap*, _mssamt__Subtract *, const char*, const char*);

#ifndef soap_read__mssamt__Subtract
#define soap_read__mssamt__Subtract(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__Subtract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__Subtract * SOAP_FMAC2 soap_instantiate__mssamt__Subtract(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__Subtract * soap_new__mssamt__Subtract(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__Subtract(soap, n, NULL, NULL, NULL); }

inline _mssamt__Subtract * soap_new_req__mssamt__Subtract(struct soap *soap) { _mssamt__Subtract *_p = soap_instantiate__mssamt__Subtract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__Subtract * soap_new_set__mssamt__Subtract(struct soap *soap, double *n1, double *n2) { _mssamt__Subtract *_p = soap_instantiate__mssamt__Subtract(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__Subtract::n1 = n1; _p->_mssamt__Subtract::n2 = n2; } return _p; }

inline void soap_delete__mssamt__Subtract(struct soap *soap, _mssamt__Subtract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__Subtract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__AddResponse
#define SOAP_TYPE__mssamt__AddResponse (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__AddResponse(struct soap*, const char*, int, const _mssamt__AddResponse *, const char*);
SOAP_FMAC3 _mssamt__AddResponse * SOAP_FMAC4 soap_in__mssamt__AddResponse(struct soap*, const char*, _mssamt__AddResponse *, const char*);

#ifndef soap_write__mssamt__AddResponse
#define soap_write__mssamt__AddResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:AddResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__AddResponse * SOAP_FMAC4 soap_get__mssamt__AddResponse(struct soap*, _mssamt__AddResponse *, const char*, const char*);

#ifndef soap_read__mssamt__AddResponse
#define soap_read__mssamt__AddResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__AddResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__AddResponse * SOAP_FMAC2 soap_instantiate__mssamt__AddResponse(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__AddResponse * soap_new__mssamt__AddResponse(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__AddResponse(soap, n, NULL, NULL, NULL); }

inline _mssamt__AddResponse * soap_new_req__mssamt__AddResponse(struct soap *soap) { _mssamt__AddResponse *_p = soap_instantiate__mssamt__AddResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__AddResponse * soap_new_set__mssamt__AddResponse(struct soap *soap, double *AddResult) { _mssamt__AddResponse *_p = soap_instantiate__mssamt__AddResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__AddResponse::AddResult = AddResult; } return _p; }

inline void soap_delete__mssamt__AddResponse(struct soap *soap, _mssamt__AddResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__AddResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__mssamt__Add
#define SOAP_TYPE__mssamt__Add (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__mssamt__Add(struct soap*, const char*, int, const _mssamt__Add *, const char*);
SOAP_FMAC3 _mssamt__Add * SOAP_FMAC4 soap_in__mssamt__Add(struct soap*, const char*, _mssamt__Add *, const char*);

#ifndef soap_write__mssamt__Add
#define soap_write__mssamt__Add(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mssamt:Add", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Add * SOAP_FMAC4 soap_get__mssamt__Add(struct soap*, _mssamt__Add *, const char*, const char*);

#ifndef soap_read__mssamt__Add
#define soap_read__mssamt__Add(soap, data) ( soap_begin_recv(soap) || !soap_get__mssamt__Add(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _mssamt__Add * SOAP_FMAC2 soap_instantiate__mssamt__Add(struct soap*, int, const char*, const char*, size_t*);

inline _mssamt__Add * soap_new__mssamt__Add(struct soap *soap, int n = -1) { return soap_instantiate__mssamt__Add(soap, n, NULL, NULL, NULL); }

inline _mssamt__Add * soap_new_req__mssamt__Add(struct soap *soap) { _mssamt__Add *_p = soap_instantiate__mssamt__Add(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _mssamt__Add * soap_new_set__mssamt__Add(struct soap *soap, double *n1, double *n2) { _mssamt__Add *_p = soap_instantiate__mssamt__Add(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_mssamt__Add::n1 = n1; _p->_mssamt__Add::n2 = n2; } return _p; }

inline void soap_delete__mssamt__Add(struct soap *soap, _mssamt__Add *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__mssamt__Add(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___tempuri__Divide
#define SOAP_TYPE___tempuri__Divide (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Divide(struct soap*, struct __tempuri__Divide *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Divide(struct soap*, const struct __tempuri__Divide *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Divide(struct soap*, const char*, int, const struct __tempuri__Divide *, const char*);
SOAP_FMAC3 struct __tempuri__Divide * SOAP_FMAC4 soap_in___tempuri__Divide(struct soap*, const char*, struct __tempuri__Divide *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Divide(struct soap*, const struct __tempuri__Divide *, const char*, const char*);

#ifndef soap_write___tempuri__Divide
#define soap_write___tempuri__Divide(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__Divide(soap, data),0) || soap_put___tempuri__Divide(soap, data, "-tempuri:Divide", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__Divide * SOAP_FMAC4 soap_get___tempuri__Divide(struct soap*, struct __tempuri__Divide *, const char*, const char*);

#ifndef soap_read___tempuri__Divide
#define soap_read___tempuri__Divide(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__Divide(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__Divide * SOAP_FMAC2 soap_instantiate___tempuri__Divide(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Divide * soap_new___tempuri__Divide(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__Divide(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__Divide * soap_new_req___tempuri__Divide(struct soap *soap) { struct __tempuri__Divide *_p = soap_instantiate___tempuri__Divide(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Divide(soap, _p); } return _p; }

inline struct __tempuri__Divide * soap_new_set___tempuri__Divide(struct soap *soap, _mssamt__Divide *mssamt__Divide) { struct __tempuri__Divide *_p = soap_instantiate___tempuri__Divide(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Divide(soap, _p); _p->mssamt__Divide = mssamt__Divide; } return _p; }

inline void soap_delete___tempuri__Divide(struct soap *soap, struct __tempuri__Divide *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Divide(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__Multiply
#define SOAP_TYPE___tempuri__Multiply (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Multiply(struct soap*, struct __tempuri__Multiply *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Multiply(struct soap*, const struct __tempuri__Multiply *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Multiply(struct soap*, const char*, int, const struct __tempuri__Multiply *, const char*);
SOAP_FMAC3 struct __tempuri__Multiply * SOAP_FMAC4 soap_in___tempuri__Multiply(struct soap*, const char*, struct __tempuri__Multiply *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Multiply(struct soap*, const struct __tempuri__Multiply *, const char*, const char*);

#ifndef soap_write___tempuri__Multiply
#define soap_write___tempuri__Multiply(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__Multiply(soap, data),0) || soap_put___tempuri__Multiply(soap, data, "-tempuri:Multiply", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__Multiply * SOAP_FMAC4 soap_get___tempuri__Multiply(struct soap*, struct __tempuri__Multiply *, const char*, const char*);

#ifndef soap_read___tempuri__Multiply
#define soap_read___tempuri__Multiply(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__Multiply(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__Multiply * SOAP_FMAC2 soap_instantiate___tempuri__Multiply(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Multiply * soap_new___tempuri__Multiply(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__Multiply(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__Multiply * soap_new_req___tempuri__Multiply(struct soap *soap) { struct __tempuri__Multiply *_p = soap_instantiate___tempuri__Multiply(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Multiply(soap, _p); } return _p; }

inline struct __tempuri__Multiply * soap_new_set___tempuri__Multiply(struct soap *soap, _mssamt__Multiply *mssamt__Multiply) { struct __tempuri__Multiply *_p = soap_instantiate___tempuri__Multiply(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Multiply(soap, _p); _p->mssamt__Multiply = mssamt__Multiply; } return _p; }

inline void soap_delete___tempuri__Multiply(struct soap *soap, struct __tempuri__Multiply *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Multiply(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__Subtract
#define SOAP_TYPE___tempuri__Subtract (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Subtract(struct soap*, struct __tempuri__Subtract *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Subtract(struct soap*, const struct __tempuri__Subtract *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Subtract(struct soap*, const char*, int, const struct __tempuri__Subtract *, const char*);
SOAP_FMAC3 struct __tempuri__Subtract * SOAP_FMAC4 soap_in___tempuri__Subtract(struct soap*, const char*, struct __tempuri__Subtract *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Subtract(struct soap*, const struct __tempuri__Subtract *, const char*, const char*);

#ifndef soap_write___tempuri__Subtract
#define soap_write___tempuri__Subtract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__Subtract(soap, data),0) || soap_put___tempuri__Subtract(soap, data, "-tempuri:Subtract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__Subtract * SOAP_FMAC4 soap_get___tempuri__Subtract(struct soap*, struct __tempuri__Subtract *, const char*, const char*);

#ifndef soap_read___tempuri__Subtract
#define soap_read___tempuri__Subtract(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__Subtract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__Subtract * SOAP_FMAC2 soap_instantiate___tempuri__Subtract(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Subtract * soap_new___tempuri__Subtract(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__Subtract(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__Subtract * soap_new_req___tempuri__Subtract(struct soap *soap) { struct __tempuri__Subtract *_p = soap_instantiate___tempuri__Subtract(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Subtract(soap, _p); } return _p; }

inline struct __tempuri__Subtract * soap_new_set___tempuri__Subtract(struct soap *soap, _mssamt__Subtract *mssamt__Subtract) { struct __tempuri__Subtract *_p = soap_instantiate___tempuri__Subtract(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Subtract(soap, _p); _p->mssamt__Subtract = mssamt__Subtract; } return _p; }

inline void soap_delete___tempuri__Subtract(struct soap *soap, struct __tempuri__Subtract *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Subtract(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___tempuri__Add
#define SOAP_TYPE___tempuri__Add (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__Add(struct soap*, struct __tempuri__Add *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__Add(struct soap*, const struct __tempuri__Add *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__Add(struct soap*, const char*, int, const struct __tempuri__Add *, const char*);
SOAP_FMAC3 struct __tempuri__Add * SOAP_FMAC4 soap_in___tempuri__Add(struct soap*, const char*, struct __tempuri__Add *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__Add(struct soap*, const struct __tempuri__Add *, const char*, const char*);

#ifndef soap_write___tempuri__Add
#define soap_write___tempuri__Add(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___tempuri__Add(soap, data),0) || soap_put___tempuri__Add(soap, data, "-tempuri:Add", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __tempuri__Add * SOAP_FMAC4 soap_get___tempuri__Add(struct soap*, struct __tempuri__Add *, const char*, const char*);

#ifndef soap_read___tempuri__Add
#define soap_read___tempuri__Add(soap, data) ( soap_begin_recv(soap) || !soap_get___tempuri__Add(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __tempuri__Add * SOAP_FMAC2 soap_instantiate___tempuri__Add(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__Add * soap_new___tempuri__Add(struct soap *soap, int n = -1) { return soap_instantiate___tempuri__Add(soap, n, NULL, NULL, NULL); }

inline struct __tempuri__Add * soap_new_req___tempuri__Add(struct soap *soap) { struct __tempuri__Add *_p = soap_instantiate___tempuri__Add(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Add(soap, _p); } return _p; }

inline struct __tempuri__Add * soap_new_set___tempuri__Add(struct soap *soap, _mssamt__Add *mssamt__Add) { struct __tempuri__Add *_p = soap_instantiate___tempuri__Add(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___tempuri__Add(soap, _p); _p->mssamt__Add = mssamt__Add; } return _p; }

inline void soap_delete___tempuri__Add(struct soap *soap, struct __tempuri__Add *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___tempuri__Add(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_mssamt__DivideResponse
#define SOAP_TYPE_PointerTo_mssamt__DivideResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__DivideResponse(struct soap*, _mssamt__DivideResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__DivideResponse(struct soap*, const char *, int, _mssamt__DivideResponse *const*, const char *);
SOAP_FMAC3 _mssamt__DivideResponse ** SOAP_FMAC4 soap_in_PointerTo_mssamt__DivideResponse(struct soap*, const char*, _mssamt__DivideResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__DivideResponse(struct soap*, _mssamt__DivideResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__DivideResponse
#define soap_write_PointerTo_mssamt__DivideResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__DivideResponse(soap, data),0) || soap_put_PointerTo_mssamt__DivideResponse(soap, data, "mssamt:DivideResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__DivideResponse ** SOAP_FMAC4 soap_get_PointerTo_mssamt__DivideResponse(struct soap*, _mssamt__DivideResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__DivideResponse
#define soap_read_PointerTo_mssamt__DivideResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__DivideResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__Divide
#define SOAP_TYPE_PointerTo_mssamt__Divide (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__Divide(struct soap*, _mssamt__Divide *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__Divide(struct soap*, const char *, int, _mssamt__Divide *const*, const char *);
SOAP_FMAC3 _mssamt__Divide ** SOAP_FMAC4 soap_in_PointerTo_mssamt__Divide(struct soap*, const char*, _mssamt__Divide **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__Divide(struct soap*, _mssamt__Divide *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__Divide
#define soap_write_PointerTo_mssamt__Divide(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__Divide(soap, data),0) || soap_put_PointerTo_mssamt__Divide(soap, data, "mssamt:Divide", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Divide ** SOAP_FMAC4 soap_get_PointerTo_mssamt__Divide(struct soap*, _mssamt__Divide **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__Divide
#define soap_read_PointerTo_mssamt__Divide(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__Divide(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__MultiplyResponse
#define SOAP_TYPE_PointerTo_mssamt__MultiplyResponse (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__MultiplyResponse(struct soap*, _mssamt__MultiplyResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__MultiplyResponse(struct soap*, const char *, int, _mssamt__MultiplyResponse *const*, const char *);
SOAP_FMAC3 _mssamt__MultiplyResponse ** SOAP_FMAC4 soap_in_PointerTo_mssamt__MultiplyResponse(struct soap*, const char*, _mssamt__MultiplyResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__MultiplyResponse(struct soap*, _mssamt__MultiplyResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__MultiplyResponse
#define soap_write_PointerTo_mssamt__MultiplyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__MultiplyResponse(soap, data),0) || soap_put_PointerTo_mssamt__MultiplyResponse(soap, data, "mssamt:MultiplyResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__MultiplyResponse ** SOAP_FMAC4 soap_get_PointerTo_mssamt__MultiplyResponse(struct soap*, _mssamt__MultiplyResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__MultiplyResponse
#define soap_read_PointerTo_mssamt__MultiplyResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__MultiplyResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__Multiply
#define SOAP_TYPE_PointerTo_mssamt__Multiply (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__Multiply(struct soap*, _mssamt__Multiply *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__Multiply(struct soap*, const char *, int, _mssamt__Multiply *const*, const char *);
SOAP_FMAC3 _mssamt__Multiply ** SOAP_FMAC4 soap_in_PointerTo_mssamt__Multiply(struct soap*, const char*, _mssamt__Multiply **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__Multiply(struct soap*, _mssamt__Multiply *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__Multiply
#define soap_write_PointerTo_mssamt__Multiply(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__Multiply(soap, data),0) || soap_put_PointerTo_mssamt__Multiply(soap, data, "mssamt:Multiply", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Multiply ** SOAP_FMAC4 soap_get_PointerTo_mssamt__Multiply(struct soap*, _mssamt__Multiply **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__Multiply
#define soap_read_PointerTo_mssamt__Multiply(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__Multiply(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__SubtractResponse
#define SOAP_TYPE_PointerTo_mssamt__SubtractResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__SubtractResponse(struct soap*, _mssamt__SubtractResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__SubtractResponse(struct soap*, const char *, int, _mssamt__SubtractResponse *const*, const char *);
SOAP_FMAC3 _mssamt__SubtractResponse ** SOAP_FMAC4 soap_in_PointerTo_mssamt__SubtractResponse(struct soap*, const char*, _mssamt__SubtractResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__SubtractResponse(struct soap*, _mssamt__SubtractResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__SubtractResponse
#define soap_write_PointerTo_mssamt__SubtractResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__SubtractResponse(soap, data),0) || soap_put_PointerTo_mssamt__SubtractResponse(soap, data, "mssamt:SubtractResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__SubtractResponse ** SOAP_FMAC4 soap_get_PointerTo_mssamt__SubtractResponse(struct soap*, _mssamt__SubtractResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__SubtractResponse
#define soap_read_PointerTo_mssamt__SubtractResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__SubtractResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__Subtract
#define SOAP_TYPE_PointerTo_mssamt__Subtract (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__Subtract(struct soap*, _mssamt__Subtract *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__Subtract(struct soap*, const char *, int, _mssamt__Subtract *const*, const char *);
SOAP_FMAC3 _mssamt__Subtract ** SOAP_FMAC4 soap_in_PointerTo_mssamt__Subtract(struct soap*, const char*, _mssamt__Subtract **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__Subtract(struct soap*, _mssamt__Subtract *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__Subtract
#define soap_write_PointerTo_mssamt__Subtract(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__Subtract(soap, data),0) || soap_put_PointerTo_mssamt__Subtract(soap, data, "mssamt:Subtract", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Subtract ** SOAP_FMAC4 soap_get_PointerTo_mssamt__Subtract(struct soap*, _mssamt__Subtract **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__Subtract
#define soap_read_PointerTo_mssamt__Subtract(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__Subtract(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__AddResponse
#define SOAP_TYPE_PointerTo_mssamt__AddResponse (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__AddResponse(struct soap*, _mssamt__AddResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__AddResponse(struct soap*, const char *, int, _mssamt__AddResponse *const*, const char *);
SOAP_FMAC3 _mssamt__AddResponse ** SOAP_FMAC4 soap_in_PointerTo_mssamt__AddResponse(struct soap*, const char*, _mssamt__AddResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__AddResponse(struct soap*, _mssamt__AddResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__AddResponse
#define soap_write_PointerTo_mssamt__AddResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__AddResponse(soap, data),0) || soap_put_PointerTo_mssamt__AddResponse(soap, data, "mssamt:AddResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__AddResponse ** SOAP_FMAC4 soap_get_PointerTo_mssamt__AddResponse(struct soap*, _mssamt__AddResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__AddResponse
#define soap_read_PointerTo_mssamt__AddResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__AddResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_mssamt__Add
#define SOAP_TYPE_PointerTo_mssamt__Add (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_mssamt__Add(struct soap*, _mssamt__Add *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_mssamt__Add(struct soap*, const char *, int, _mssamt__Add *const*, const char *);
SOAP_FMAC3 _mssamt__Add ** SOAP_FMAC4 soap_in_PointerTo_mssamt__Add(struct soap*, const char*, _mssamt__Add **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_mssamt__Add(struct soap*, _mssamt__Add *const*, const char*, const char*);

#ifndef soap_write_PointerTo_mssamt__Add
#define soap_write_PointerTo_mssamt__Add(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_mssamt__Add(soap, data),0) || soap_put_PointerTo_mssamt__Add(soap, data, "mssamt:Add", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _mssamt__Add ** SOAP_FMAC4 soap_get_PointerTo_mssamt__Add(struct soap*, _mssamt__Add **, const char*, const char*);

#ifndef soap_read_PointerTo_mssamt__Add
#define soap_read_PointerTo_mssamt__Add(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_mssamt__Add(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerTodouble
#define soap_write_PointerTodouble(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTodouble(soap, data),0) || soap_put_PointerTodouble(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerTodouble
#define soap_read_PointerTodouble(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTodouble(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
