/* soapBasicHttpBinding_USCOREICalculatorProxy.cpp
   Generated by gSOAP 2.8.17r from calculator.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapBasicHttpBinding_USCOREICalculatorProxy.h"

BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy()
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREICalculatorProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	BasicHttpBinding_USCOREICalculatorProxy_init(_soap->imode, _soap->omode);
}

BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREICalculatorProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREICalculatorProxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREICalculatorProxy_init(iomode, iomode);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	BasicHttpBinding_USCOREICalculatorProxy_init(imode, omode);
}

BasicHttpBinding_USCOREICalculatorProxy::~BasicHttpBinding_USCOREICalculatorProxy()
{	if (this->own)
		soap_free(this->soap);
}

void BasicHttpBinding_USCOREICalculatorProxy::BasicHttpBinding_USCOREICalculatorProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"tempuri", "http://tempuri.org/", NULL, NULL},
	{"mssamm", "http://Microsoft.Samples.MessageSecurity", NULL, NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
	{"wsc", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void BasicHttpBinding_USCOREICalculatorProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BasicHttpBinding_USCOREICalculatorProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BasicHttpBinding_USCOREICalculatorProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREICalculatorProxy::soap_noheader()
{	this->soap->header = NULL;
}

void BasicHttpBinding_USCOREICalculatorProxy::soap_header(struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
}

const SOAP_ENV__Header *BasicHttpBinding_USCOREICalculatorProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *BasicHttpBinding_USCOREICalculatorProxy::soap_fault()
{	return this->soap->fault;
}

const char *BasicHttpBinding_USCOREICalculatorProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *BasicHttpBinding_USCOREICalculatorProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int BasicHttpBinding_USCOREICalculatorProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BasicHttpBinding_USCOREICalculatorProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void BasicHttpBinding_USCOREICalculatorProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREICalculatorProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BasicHttpBinding_USCOREICalculatorProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int BasicHttpBinding_USCOREICalculatorProxy::Add(const char *endpoint, const char *soap_action, _mssamm__Add *mssamm__Add, _mssamm__AddResponse *mssamm__AddResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__Add soap_tmp___tempuri__Add;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.2.2:8000/ServiceModelSamples/service";
	if (soap_action == NULL)
		soap_action = "http://Microsoft.Samples.MessageSecurity/ICalculator/Add";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___tempuri__Add.mssamm__Add = mssamm__Add;
	soap_serializeheader(soap);
	soap_serialize___tempuri__Add(soap, &soap_tmp___tempuri__Add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__Add(soap, &soap_tmp___tempuri__Add, "-tempuri:Add", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__Add(soap, &soap_tmp___tempuri__Add, "-tempuri:Add", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mssamm__AddResponse)
		return soap_closesock(soap);
	mssamm__AddResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mssamm__AddResponse->soap_get(soap, "mssamm:AddResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREICalculatorProxy::Subtract(const char *endpoint, const char *soap_action, _mssamm__Subtract *mssamm__Subtract, _mssamm__SubtractResponse *mssamm__SubtractResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__Subtract soap_tmp___tempuri__Subtract;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.2.2:8000/ServiceModelSamples/service";
	if (soap_action == NULL)
		soap_action = "http://Microsoft.Samples.MessageSecurity/ICalculator/Subtract";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___tempuri__Subtract.mssamm__Subtract = mssamm__Subtract;
	soap_serializeheader(soap);
	soap_serialize___tempuri__Subtract(soap, &soap_tmp___tempuri__Subtract);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__Subtract(soap, &soap_tmp___tempuri__Subtract, "-tempuri:Subtract", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__Subtract(soap, &soap_tmp___tempuri__Subtract, "-tempuri:Subtract", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mssamm__SubtractResponse)
		return soap_closesock(soap);
	mssamm__SubtractResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mssamm__SubtractResponse->soap_get(soap, "mssamm:SubtractResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREICalculatorProxy::Multiply(const char *endpoint, const char *soap_action, _mssamm__Multiply *mssamm__Multiply, _mssamm__MultiplyResponse *mssamm__MultiplyResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__Multiply soap_tmp___tempuri__Multiply;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.2.2:8000/ServiceModelSamples/service";
	if (soap_action == NULL)
		soap_action = "http://Microsoft.Samples.MessageSecurity/ICalculator/Multiply";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___tempuri__Multiply.mssamm__Multiply = mssamm__Multiply;
	soap_serializeheader(soap);
	soap_serialize___tempuri__Multiply(soap, &soap_tmp___tempuri__Multiply);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__Multiply(soap, &soap_tmp___tempuri__Multiply, "-tempuri:Multiply", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__Multiply(soap, &soap_tmp___tempuri__Multiply, "-tempuri:Multiply", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mssamm__MultiplyResponse)
		return soap_closesock(soap);
	mssamm__MultiplyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mssamm__MultiplyResponse->soap_get(soap, "mssamm:MultiplyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREICalculatorProxy::Divide(const char *endpoint, const char *soap_action, _mssamm__Divide *mssamm__Divide, _mssamm__DivideResponse *mssamm__DivideResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__Divide soap_tmp___tempuri__Divide;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.2.2:8000/ServiceModelSamples/service";
	if (soap_action == NULL)
		soap_action = "http://Microsoft.Samples.MessageSecurity/ICalculator/Divide";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___tempuri__Divide.mssamm__Divide = mssamm__Divide;
	soap_serializeheader(soap);
	soap_serialize___tempuri__Divide(soap, &soap_tmp___tempuri__Divide);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__Divide(soap, &soap_tmp___tempuri__Divide, "-tempuri:Divide", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__Divide(soap, &soap_tmp___tempuri__Divide, "-tempuri:Divide", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!mssamm__DivideResponse)
		return soap_closesock(soap);
	mssamm__DivideResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mssamm__DivideResponse->soap_get(soap, "mssamm:DivideResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
